#!/usr/bin/env node
import { createRequire as __WEBPACK_EXTERNAL_createRequire } from "module";
/******/ var __webpack_modules__ = ({

/***/ 8938:
/***/ ((__unused_webpack_module, exports) => {

var __webpack_unused_export__;

__webpack_unused_export__ = ({ value: true });
__webpack_unused_export__ = __webpack_unused_export__ = __webpack_unused_export__ = __webpack_unused_export__ = __webpack_unused_export__ = __webpack_unused_export__ = exports.ob = void 0;
function currentPlatform() {
    let os = null;
    switch (process.platform) {
        case 'android':
            switch (process.arch) {
                case 'arm':
                    return 'android-arm-eabi';
                case 'arm64':
                    return 'android-arm64';
            }
            os = 'Android';
            break;
        case 'win32':
            switch (process.arch) {
                case 'x64':
                    return 'win32-x64-msvc';
                case 'arm64':
                    return 'win32-arm64-msvc';
                case 'ia32':
                    return 'win32-ia32-msvc';
            }
            os = 'Windows';
            break;
        case 'darwin':
            switch (process.arch) {
                case 'x64':
                    return 'darwin-x64';
                case 'arm64':
                    return 'darwin-arm64';
            }
            os = 'macOS';
            break;
        case 'linux':
            switch (process.arch) {
                case 'x64':
                case 'arm64':
                    return isGlibc()
                        ? `linux-${process.arch}-gnu`
                        : `linux-${process.arch}-musl`;
                case 'arm':
                    return 'linux-arm-gnueabihf';
            }
            os = 'Linux';
            break;
        case 'freebsd':
            if (process.arch === 'x64') {
                return 'freebsd-x64';
            }
            os = 'FreeBSD';
            break;
    }
    if (os) {
        throw new Error(`Neon: unsupported ${os} architecture: ${process.arch}`);
    }
    throw new Error(`Neon: unsupported system: ${process.platform}`);
}
exports.ob = currentPlatform;
// DEPRECATE(0.1)
function currentTarget() {
    return currentPlatform();
}
__webpack_unused_export__ = currentTarget;
function isGlibc() {
    // Cast to unknown to work around a bug in the type definition:
    // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/40140
    const report = process.report?.getReport();
    if ((typeof report !== 'object') || !report || (!('header' in report))) {
        return false;
    }
    const header = report.header;
    return (typeof header === 'object') &&
        !!header &&
        ('glibcVersionRuntime' in header);
}
// export function debug(...components: string[]) {
//   if (components.length === 0 || !components[components.length - 1].endsWith(".node")) {
//     components.push("index.node");
//   }
//   const pathSpec = path.join(...components);
//   return fs.existsSync(pathSpec) ? require(pathSpec) : null;
// }
function* interleave(a1, a2) {
    const length = Math.max(a1.length, a2.length);
    for (let i = 0; i < length; i++) {
        if (i < a1.length) {
            yield a1[i];
        }
        if (i < a2.length) {
            yield a2[i];
        }
    }
}
function bin(scope, ...rest) {
    return [...interleave(scope, rest)].join("") + "/" + currentPlatform();
}
__webpack_unused_export__ = bin;
// DEPRECATE(0.1)
function lazyV1(loaders, exports) {
    return lazyV2({
        targets: loaders,
        exports
    });
}
// DEPRECATE(0.1)
function lazyV2(options) {
    return lazyV3({
        platforms: options.targets,
        exports: options.exports,
        debug: options.debug
    });
}
function lazyV3(options) {
    const loaders = options.platforms;
    let loaded = null;
    function load() {
        if (loaded) {
            return loaded;
        }
        const platform = currentPlatform();
        if (!loaders.hasOwnProperty(platform)) {
            throw new Error(`no precompiled module found for ${platform}`);
        }
        if (options.debug) {
            try {
                loaded = options.debug();
            }
            catch (_e) {
                loaded = null;
            }
        }
        if (!loaded) {
            loaded = loaders[platform]();
        }
        return loaded;
    }
    let module = {};
    for (const key of options.exports) {
        Object.defineProperty(module, key, { get() { return load()[key]; } });
    }
    return module;
}
function lazy(optionsOrLoaders, exports) {
    return (!exports && !('targets' in optionsOrLoaders))
        ? lazyV3(optionsOrLoaders)
        : !exports
            ? lazyV2(optionsOrLoaders)
            : lazyV1(optionsOrLoaders, exports);
}
__webpack_unused_export__ = lazy;
function __UNSTABLE_loader(loaders) {
    const platform = currentPlatform();
    if (!loaders.hasOwnProperty(platform)) {
        throw new Error(`no precompiled module found for ${platform}`);
    }
    const loader = loaders[platform];
    let loaded = null;
    return () => {
        if (loaded) {
            return loaded;
        }
        loaded = loader();
        return loaded;
    };
}
__webpack_unused_export__ = __UNSTABLE_loader;
// DEPRECATE(0.1)
function isDeprecatedProxyOptions(options) {
    return 'targets' in options;
}
function isProxyOptions(options) {
    return 'platforms' in options;
}
function proxy(options) {
    const opts = isProxyOptions(options)
        ? options
        : !isDeprecatedProxyOptions(options)
            ? { platforms: options }
            : { platforms: options.targets, debug: options.debug };
    const platform = currentPlatform();
    const loaders = opts.platforms;
    if (!loaders.hasOwnProperty(platform)) {
        throw new Error(`no precompiled module found for ${platform}`);
    }
    const loader = loaders[platform];
    let loaded = null;
    function load() {
        if (!loaded) {
            if (options.debug) {
                try {
                    loaded = options.debug();
                }
                catch (_e) {
                    loaded = null;
                }
            }
            if (!loaded) {
                loaded = loader();
            }
        }
        return loaded;
    }
    const handler = {
        has(_target, key) {
            return Reflect.has(load(), key);
        },
        get(_target, key) {
            return Reflect.get(load(), key);
        },
        ownKeys(_target) {
            return Reflect.ownKeys(load());
        },
        defineProperty(_target, _key, _descriptor) {
            throw new Error('attempt to modify read-only Neon module proxy');
        },
        deleteProperty(_target, _key) {
            throw new Error('attempt to modify read-only Neon module proxy');
        },
        set(_target, _key, _val) {
            throw new Error('attempt to modify read-only Neon module proxy');
        },
        setPrototypeOf(_target, _proto) {
            throw new Error('attempt to modify read-only Neon module proxy');
        },
        getPrototypeOf(_target) {
            return Object.getPrototypeOf(load());
        },
        isExtensible(_target) {
            return Reflect.isExtensible(load());
        },
        preventExtensions(_target) {
            return Reflect.preventExtensions(load());
        },
        getOwnPropertyDescriptor(_target, key) {
            return Reflect.getOwnPropertyDescriptor(load(), key);
        }
    };
    return new Proxy({}, handler);
}
__webpack_unused_export__ = proxy;
// DEPRECATE(0.1)
function __UNSTABLE_proxy(options) {
    return proxy(options);
}
__webpack_unused_export__ = __UNSTABLE_proxy;


/***/ }),

/***/ 8372:
/***/ ((__unused_webpack_module, exports) => {

var __webpack_unused_export__;

__webpack_unused_export__ = ({ value: true });
__webpack_unused_export__ = exports.sj = __webpack_unused_export__ = __webpack_unused_export__ = __webpack_unused_export__ = __webpack_unused_export__ = __webpack_unused_export__ = void 0;
function currentPlatform() {
    let os = null;
    switch (process.platform) {
        case 'android':
            switch (process.arch) {
                case 'arm':
                    return 'android-arm-eabi';
                case 'arm64':
                    return 'android-arm64';
            }
            os = 'Android';
            break;
        case 'win32':
            switch (process.arch) {
                case 'x64':
                    return 'win32-x64-msvc';
                case 'arm64':
                    return 'win32-arm64-msvc';
                case 'ia32':
                    return 'win32-ia32-msvc';
            }
            os = 'Windows';
            break;
        case 'darwin':
            switch (process.arch) {
                case 'x64':
                    return 'darwin-x64';
                case 'arm64':
                    return 'darwin-arm64';
            }
            os = 'macOS';
            break;
        case 'linux':
            switch (process.arch) {
                case 'x64':
                case 'arm64':
                    return isGlibc()
                        ? `linux-${process.arch}-gnu`
                        : `linux-${process.arch}-musl`;
                case 'arm':
                    return 'linux-arm-gnueabihf';
            }
            os = 'Linux';
            break;
        case 'freebsd':
            if (process.arch === 'x64') {
                return 'freebsd-x64';
            }
            os = 'FreeBSD';
            break;
    }
    if (os) {
        throw new Error(`Neon: unsupported ${os} architecture: ${process.arch}`);
    }
    throw new Error(`Neon: unsupported system: ${process.platform}`);
}
__webpack_unused_export__ = currentPlatform;
// DEPRECATE(0.1)
function currentTarget() {
    return currentPlatform();
}
__webpack_unused_export__ = currentTarget;
function isGlibc() {
    // Cast to unknown to work around a bug in the type definition:
    // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/40140
    const report = process.report?.getReport();
    if ((typeof report !== 'object') || !report || (!('header' in report))) {
        return false;
    }
    const header = report.header;
    return (typeof header === 'object') &&
        !!header &&
        ('glibcVersionRuntime' in header);
}
// export function debug(...components: string[]) {
//   if (components.length === 0 || !components[components.length - 1].endsWith(".node")) {
//     components.push("index.node");
//   }
//   const pathSpec = path.join(...components);
//   return fs.existsSync(pathSpec) ? require(pathSpec) : null;
// }
function* interleave(a1, a2) {
    const length = Math.max(a1.length, a2.length);
    for (let i = 0; i < length; i++) {
        if (i < a1.length) {
            yield a1[i];
        }
        if (i < a2.length) {
            yield a2[i];
        }
    }
}
function bin(scope, ...rest) {
    return [...interleave(scope, rest)].join("") + "/" + currentPlatform();
}
__webpack_unused_export__ = bin;
// DEPRECATE(0.1)
function lazyV1(loaders, exports) {
    return lazyV2({
        targets: loaders,
        exports
    });
}
// DEPRECATE(0.1)
function lazyV2(options) {
    return lazyV3({
        platforms: options.targets,
        exports: options.exports,
        debug: options.debug
    });
}
function lazyV3(options) {
    const loaders = options.platforms;
    let loaded = null;
    function load() {
        if (loaded) {
            return loaded;
        }
        const platform = currentPlatform();
        if (!loaders.hasOwnProperty(platform)) {
            throw new Error(`no precompiled module found for ${platform}`);
        }
        if (options.debug) {
            try {
                loaded = options.debug();
            }
            catch (_e) {
                loaded = null;
            }
        }
        if (!loaded) {
            loaded = loaders[platform]();
        }
        return loaded;
    }
    let module = {};
    for (const key of options.exports) {
        Object.defineProperty(module, key, { get() { return load()[key]; } });
    }
    return module;
}
function lazy(optionsOrLoaders, exports) {
    return (!exports && !('targets' in optionsOrLoaders))
        ? lazyV3(optionsOrLoaders)
        : !exports
            ? lazyV2(optionsOrLoaders)
            : lazyV1(optionsOrLoaders, exports);
}
__webpack_unused_export__ = lazy;
function __UNSTABLE_loader(loaders) {
    const platform = currentPlatform();
    if (!loaders.hasOwnProperty(platform)) {
        throw new Error(`no precompiled module found for ${platform}`);
    }
    const loader = loaders[platform];
    let loaded = null;
    return () => {
        if (loaded) {
            return loaded;
        }
        loaded = loader();
        return loaded;
    };
}
__webpack_unused_export__ = __UNSTABLE_loader;
// DEPRECATE(0.1)
function isDeprecatedProxyOptions(options) {
    return 'targets' in options;
}
function isProxyOptions(options) {
    return 'platforms' in options;
}
function proxy(options) {
    const opts = isProxyOptions(options)
        ? options
        : !isDeprecatedProxyOptions(options)
            ? { platforms: options }
            : { platforms: options.targets, debug: options.debug };
    const platform = currentPlatform();
    const loaders = opts.platforms;
    if (!loaders.hasOwnProperty(platform)) {
        throw new Error(`no precompiled module found for ${platform}`);
    }
    const loader = loaders[platform];
    let loaded = null;
    function load() {
        if (!loaded) {
            if (options.debug) {
                try {
                    loaded = options.debug();
                }
                catch (_e) {
                    loaded = null;
                }
            }
            if (!loaded) {
                loaded = loader();
            }
        }
        return loaded;
    }
    const handler = {
        has(_target, key) {
            return Reflect.has(load(), key);
        },
        get(_target, key) {
            return Reflect.get(load(), key);
        },
        ownKeys(_target) {
            return Reflect.ownKeys(load());
        },
        defineProperty(_target, _key, _descriptor) {
            throw new Error('attempt to modify read-only Neon module proxy');
        },
        deleteProperty(_target, _key) {
            throw new Error('attempt to modify read-only Neon module proxy');
        },
        set(_target, _key, _val) {
            throw new Error('attempt to modify read-only Neon module proxy');
        },
        setPrototypeOf(_target, _proto) {
            throw new Error('attempt to modify read-only Neon module proxy');
        },
        getPrototypeOf(_target) {
            return Object.getPrototypeOf(load());
        },
        isExtensible(_target) {
            return Reflect.isExtensible(load());
        },
        preventExtensions(_target) {
            return Reflect.preventExtensions(load());
        },
        getOwnPropertyDescriptor(_target, key) {
            return Reflect.getOwnPropertyDescriptor(load(), key);
        }
    };
    return new Proxy({}, handler);
}
exports.sj = proxy;
// DEPRECATE(0.1)
function __UNSTABLE_proxy(options) {
    return proxy(options);
}
__webpack_unused_export__ = __UNSTABLE_proxy;


/***/ }),

/***/ 7566:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/* module decorator */ module = __nccwpck_require__.nmd(module);


const wrapAnsi16 = (fn, offset) => (...args) => {
	const code = fn(...args);
	return `\u001B[${code + offset}m`;
};

const wrapAnsi256 = (fn, offset) => (...args) => {
	const code = fn(...args);
	return `\u001B[${38 + offset};5;${code}m`;
};

const wrapAnsi16m = (fn, offset) => (...args) => {
	const rgb = fn(...args);
	return `\u001B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
};

const ansi2ansi = n => n;
const rgb2rgb = (r, g, b) => [r, g, b];

const setLazyProperty = (object, property, get) => {
	Object.defineProperty(object, property, {
		get: () => {
			const value = get();

			Object.defineProperty(object, property, {
				value,
				enumerable: true,
				configurable: true
			});

			return value;
		},
		enumerable: true,
		configurable: true
	});
};

/** @type {typeof import('color-convert')} */
let colorConvert;
const makeDynamicStyles = (wrap, targetSpace, identity, isBackground) => {
	if (colorConvert === undefined) {
		colorConvert = __nccwpck_require__(2441);
	}

	const offset = isBackground ? 10 : 0;
	const styles = {};

	for (const [sourceSpace, suite] of Object.entries(colorConvert)) {
		const name = sourceSpace === 'ansi16' ? 'ansi' : sourceSpace;
		if (sourceSpace === targetSpace) {
			styles[name] = wrap(identity, offset);
		} else if (typeof suite === 'object') {
			styles[name] = wrap(suite[targetSpace], offset);
		}
	}

	return styles;
};

function assembleStyles() {
	const codes = new Map();
	const styles = {
		modifier: {
			reset: [0, 0],
			// 21 isn't widely supported and 22 does the same thing
			bold: [1, 22],
			dim: [2, 22],
			italic: [3, 23],
			underline: [4, 24],
			inverse: [7, 27],
			hidden: [8, 28],
			strikethrough: [9, 29]
		},
		color: {
			black: [30, 39],
			red: [31, 39],
			green: [32, 39],
			yellow: [33, 39],
			blue: [34, 39],
			magenta: [35, 39],
			cyan: [36, 39],
			white: [37, 39],

			// Bright color
			blackBright: [90, 39],
			redBright: [91, 39],
			greenBright: [92, 39],
			yellowBright: [93, 39],
			blueBright: [94, 39],
			magentaBright: [95, 39],
			cyanBright: [96, 39],
			whiteBright: [97, 39]
		},
		bgColor: {
			bgBlack: [40, 49],
			bgRed: [41, 49],
			bgGreen: [42, 49],
			bgYellow: [43, 49],
			bgBlue: [44, 49],
			bgMagenta: [45, 49],
			bgCyan: [46, 49],
			bgWhite: [47, 49],

			// Bright color
			bgBlackBright: [100, 49],
			bgRedBright: [101, 49],
			bgGreenBright: [102, 49],
			bgYellowBright: [103, 49],
			bgBlueBright: [104, 49],
			bgMagentaBright: [105, 49],
			bgCyanBright: [106, 49],
			bgWhiteBright: [107, 49]
		}
	};

	// Alias bright black as gray (and grey)
	styles.color.gray = styles.color.blackBright;
	styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
	styles.color.grey = styles.color.blackBright;
	styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;

	for (const [groupName, group] of Object.entries(styles)) {
		for (const [styleName, style] of Object.entries(group)) {
			styles[styleName] = {
				open: `\u001B[${style[0]}m`,
				close: `\u001B[${style[1]}m`
			};

			group[styleName] = styles[styleName];

			codes.set(style[0], style[1]);
		}

		Object.defineProperty(styles, groupName, {
			value: group,
			enumerable: false
		});
	}

	Object.defineProperty(styles, 'codes', {
		value: codes,
		enumerable: false
	});

	styles.color.close = '\u001B[39m';
	styles.bgColor.close = '\u001B[49m';

	setLazyProperty(styles.color, 'ansi', () => makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, false));
	setLazyProperty(styles.color, 'ansi256', () => makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, false));
	setLazyProperty(styles.color, 'ansi16m', () => makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, false));
	setLazyProperty(styles.bgColor, 'ansi', () => makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, true));
	setLazyProperty(styles.bgColor, 'ansi256', () => makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, true));
	setLazyProperty(styles.bgColor, 'ansi16m', () => makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, true));

	return styles;
}

// Make the export immutable
Object.defineProperty(module, 'exports', {
	enumerable: true,
	get: assembleStyles
});


/***/ }),

/***/ 8751:
/***/ ((module, exports, __nccwpck_require__) => {

/* module decorator */ module = __nccwpck_require__.nmd(module);

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __nccwpck_require__(204);
var es_proposals_1 = tslib_1.__importDefault(__nccwpck_require__(3676));
var types_1 = tslib_1.__importDefault(__nccwpck_require__(1018));
var shared_1 = tslib_1.__importStar(__nccwpck_require__(4456));
function default_1(fork) {
    var _a, _b, _c, _d, _e;
    fork.use(es_proposals_1.default);
    var types = fork.use(types_1.default);
    var defaults = fork.use(shared_1.default).defaults;
    var def = types.Type.def;
    var or = types.Type.or;
    var isUndefined = types.builtInTypes.undefined;
    def("Noop")
        .bases("Statement")
        .build();
    def("DoExpression")
        .bases("Expression")
        .build("body")
        .field("body", [def("Statement")]);
    def("BindExpression")
        .bases("Expression")
        .build("object", "callee")
        .field("object", or(def("Expression"), null))
        .field("callee", def("Expression"));
    def("ParenthesizedExpression")
        .bases("Expression")
        .build("expression")
        .field("expression", def("Expression"));
    def("ExportNamespaceSpecifier")
        .bases("Specifier")
        .build("exported")
        .field("exported", def("Identifier"));
    def("ExportDefaultSpecifier")
        .bases("Specifier")
        .build("exported")
        .field("exported", def("Identifier"));
    def("CommentBlock")
        .bases("Comment")
        .build("value", /*optional:*/ "leading", "trailing");
    def("CommentLine")
        .bases("Comment")
        .build("value", /*optional:*/ "leading", "trailing");
    def("Directive")
        .bases("Node")
        .build("value")
        .field("value", def("DirectiveLiteral"));
    def("DirectiveLiteral")
        .bases("Node", "Expression")
        .build("value")
        .field("value", String, defaults["use strict"]);
    def("InterpreterDirective")
        .bases("Node")
        .build("value")
        .field("value", String);
    def("BlockStatement")
        .bases("Statement")
        .build("body")
        .field("body", [def("Statement")])
        .field("directives", [def("Directive")], defaults.emptyArray);
    def("Program")
        .bases("Node")
        .build("body")
        .field("body", [def("Statement")])
        .field("directives", [def("Directive")], defaults.emptyArray)
        .field("interpreter", or(def("InterpreterDirective"), null), defaults["null"]);
    function makeLiteralExtra(rawValueType, toRaw) {
        if (rawValueType === void 0) { rawValueType = String; }
        return [
            "extra",
            {
                rawValue: rawValueType,
                raw: String,
            },
            function getDefault() {
                var value = types.getFieldValue(this, "value");
                return {
                    rawValue: value,
                    raw: toRaw ? toRaw(value) : String(value),
                };
            },
        ];
    }
    // Split Literal
    (_a = def("StringLiteral")
        .bases("Literal")
        .build("value")
        .field("value", String))
        .field.apply(_a, makeLiteralExtra(String, function (val) { return JSON.stringify(val); }));
    (_b = def("NumericLiteral")
        .bases("Literal")
        .build("value")
        .field("value", Number)
        .field("raw", or(String, null), defaults["null"]))
        .field.apply(_b, makeLiteralExtra(Number));
    (_c = def("BigIntLiteral")
        .bases("Literal")
        .build("value")
        // Only String really seems appropriate here, since BigInt values
        // often exceed the limits of JS numbers.
        .field("value", or(String, Number)))
        .field.apply(_c, makeLiteralExtra(String, function (val) { return val + "n"; }));
    // https://github.com/tc39/proposal-decimal
    // https://github.com/babel/babel/pull/11640
    (_d = def("DecimalLiteral")
        .bases("Literal")
        .build("value")
        .field("value", String))
        .field.apply(_d, makeLiteralExtra(String, function (val) { return val + "m"; }));
    def("NullLiteral")
        .bases("Literal")
        .build()
        .field("value", null, defaults["null"]);
    def("BooleanLiteral")
        .bases("Literal")
        .build("value")
        .field("value", Boolean);
    (_e = def("RegExpLiteral")
        .bases("Literal")
        .build("pattern", "flags")
        .field("pattern", String)
        .field("flags", String)
        .field("value", RegExp, function () {
        return new RegExp(this.pattern, this.flags);
    }))
        .field.apply(_e, makeLiteralExtra(or(RegExp, isUndefined), function (exp) { return "/".concat(exp.pattern, "/").concat(exp.flags || ""); })).field("regex", {
        pattern: String,
        flags: String
    }, function () {
        return {
            pattern: this.pattern,
            flags: this.flags,
        };
    });
    var ObjectExpressionProperty = or(def("Property"), def("ObjectMethod"), def("ObjectProperty"), def("SpreadProperty"), def("SpreadElement"));
    // Split Property -> ObjectProperty and ObjectMethod
    def("ObjectExpression")
        .bases("Expression")
        .build("properties")
        .field("properties", [ObjectExpressionProperty]);
    // ObjectMethod hoist .value properties to own properties
    def("ObjectMethod")
        .bases("Node", "Function")
        .build("kind", "key", "params", "body", "computed")
        .field("kind", or("method", "get", "set"))
        .field("key", or(def("Literal"), def("Identifier"), def("Expression")))
        .field("params", [def("Pattern")])
        .field("body", def("BlockStatement"))
        .field("computed", Boolean, defaults["false"])
        .field("generator", Boolean, defaults["false"])
        .field("async", Boolean, defaults["false"])
        .field("accessibility", // TypeScript
    or(def("Literal"), null), defaults["null"])
        .field("decorators", or([def("Decorator")], null), defaults["null"]);
    def("ObjectProperty")
        .bases("Node")
        .build("key", "value")
        .field("key", or(def("Literal"), def("Identifier"), def("Expression")))
        .field("value", or(def("Expression"), def("Pattern")))
        .field("accessibility", // TypeScript
    or(def("Literal"), null), defaults["null"])
        .field("computed", Boolean, defaults["false"]);
    var ClassBodyElement = or(def("MethodDefinition"), def("VariableDeclarator"), def("ClassPropertyDefinition"), def("ClassProperty"), def("ClassPrivateProperty"), def("ClassMethod"), def("ClassPrivateMethod"), def("ClassAccessorProperty"), def("StaticBlock"));
    // MethodDefinition -> ClassMethod
    def("ClassBody")
        .bases("Declaration")
        .build("body")
        .field("body", [ClassBodyElement]);
    def("ClassMethod")
        .bases("Declaration", "Function")
        .build("kind", "key", "params", "body", "computed", "static")
        .field("key", or(def("Literal"), def("Identifier"), def("Expression")));
    def("ClassPrivateMethod")
        .bases("Declaration", "Function")
        .build("key", "params", "body", "kind", "computed", "static")
        .field("key", def("PrivateName"));
    def("ClassAccessorProperty")
        .bases("Declaration")
        .build("key", "value", "decorators", "computed", "static")
        .field("key", or(def("Literal"), def("Identifier"), def("PrivateName"), 
    // Only when .computed is true (TODO enforce this)
    def("Expression")))
        .field("value", or(def("Expression"), null), defaults["null"]);
    ["ClassMethod",
        "ClassPrivateMethod",
    ].forEach(function (typeName) {
        def(typeName)
            .field("kind", or("get", "set", "method", "constructor"), function () { return "method"; })
            .field("body", def("BlockStatement"))
            // For backwards compatibility only. Expect accessibility instead (see below).
            .field("access", or("public", "private", "protected", null), defaults["null"]);
    });
    ["ClassMethod",
        "ClassPrivateMethod",
        "ClassAccessorProperty",
    ].forEach(function (typeName) {
        def(typeName)
            .field("computed", Boolean, defaults["false"])
            .field("static", Boolean, defaults["false"])
            .field("abstract", Boolean, defaults["false"])
            .field("accessibility", or("public", "private", "protected", null), defaults["null"])
            .field("decorators", or([def("Decorator")], null), defaults["null"])
            .field("definite", Boolean, defaults["false"])
            .field("optional", Boolean, defaults["false"])
            .field("override", Boolean, defaults["false"])
            .field("readonly", Boolean, defaults["false"]);
    });
    var ObjectPatternProperty = or(def("Property"), def("PropertyPattern"), def("SpreadPropertyPattern"), def("SpreadProperty"), // Used by Esprima
    def("ObjectProperty"), // Babel 6
    def("RestProperty"), // Babel 6
    def("RestElement"));
    // Split into RestProperty and SpreadProperty
    def("ObjectPattern")
        .bases("Pattern")
        .build("properties")
        .field("properties", [ObjectPatternProperty])
        .field("decorators", or([def("Decorator")], null), defaults["null"]);
    def("SpreadProperty")
        .bases("Node")
        .build("argument")
        .field("argument", def("Expression"));
    def("RestProperty")
        .bases("Node")
        .build("argument")
        .field("argument", def("Expression"));
    def("ForAwaitStatement")
        .bases("Statement")
        .build("left", "right", "body")
        .field("left", or(def("VariableDeclaration"), def("Expression")))
        .field("right", def("Expression"))
        .field("body", def("Statement"));
    // The callee node of a dynamic import(...) expression.
    def("Import")
        .bases("Expression")
        .build();
}
exports["default"] = default_1;
;
(0, shared_1.maybeSetModuleExports)(function () { return module; });
//# sourceMappingURL=babel-core.js.map

/***/ }),

/***/ 2794:
/***/ ((module, exports, __nccwpck_require__) => {

/* module decorator */ module = __nccwpck_require__.nmd(module);

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __nccwpck_require__(204);
var types_1 = tslib_1.__importDefault(__nccwpck_require__(1018));
var babel_core_1 = tslib_1.__importDefault(__nccwpck_require__(8751));
var flow_1 = tslib_1.__importDefault(__nccwpck_require__(4110));
var shared_1 = __nccwpck_require__(4456);
function default_1(fork) {
    var types = fork.use(types_1.default);
    var def = types.Type.def;
    fork.use(babel_core_1.default);
    fork.use(flow_1.default);
    // https://github.com/babel/babel/pull/10148
    def("V8IntrinsicIdentifier")
        .bases("Expression")
        .build("name")
        .field("name", String);
    // https://github.com/babel/babel/pull/13191
    // https://github.com/babel/website/pull/2541
    def("TopicReference")
        .bases("Expression")
        .build();
}
exports["default"] = default_1;
(0, shared_1.maybeSetModuleExports)(function () { return module; });
//# sourceMappingURL=babel.js.map

/***/ }),

/***/ 8256:
/***/ ((module, exports, __nccwpck_require__) => {

/* module decorator */ module = __nccwpck_require__.nmd(module);

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __nccwpck_require__(204);
var core_1 = tslib_1.__importDefault(__nccwpck_require__(732));
var types_1 = tslib_1.__importDefault(__nccwpck_require__(1018));
var shared_1 = tslib_1.__importStar(__nccwpck_require__(4456));
function default_1(fork) {
    var types = fork.use(types_1.default);
    var Type = types.Type;
    var def = Type.def;
    var or = Type.or;
    var shared = fork.use(shared_1.default);
    var defaults = shared.defaults;
    var geq = shared.geq;
    var _a = fork.use(core_1.default), BinaryOperators = _a.BinaryOperators, AssignmentOperators = _a.AssignmentOperators, LogicalOperators = _a.LogicalOperators;
    // Abstract supertype of all syntactic entities that are allowed to have a
    // .loc field.
    def("Printable")
        .field("loc", or(def("SourceLocation"), null), defaults["null"], true);
    def("Node")
        .bases("Printable")
        .field("type", String)
        .field("comments", or([def("Comment")], null), defaults["null"], true);
    def("SourceLocation")
        .field("start", def("Position"))
        .field("end", def("Position"))
        .field("source", or(String, null), defaults["null"]);
    def("Position")
        .field("line", geq(1))
        .field("column", geq(0));
    def("File")
        .bases("Node")
        .build("program", "name")
        .field("program", def("Program"))
        .field("name", or(String, null), defaults["null"]);
    def("Program")
        .bases("Node")
        .build("body")
        .field("body", [def("Statement")]);
    def("Function")
        .bases("Node")
        .field("id", or(def("Identifier"), null), defaults["null"])
        .field("params", [def("Pattern")])
        .field("body", def("BlockStatement"))
        .field("generator", Boolean, defaults["false"])
        .field("async", Boolean, defaults["false"]);
    def("Statement").bases("Node");
    // The empty .build() here means that an EmptyStatement can be constructed
    // (i.e. it's not abstract) but that it needs no arguments.
    def("EmptyStatement").bases("Statement").build();
    def("BlockStatement")
        .bases("Statement")
        .build("body")
        .field("body", [def("Statement")]);
    // TODO Figure out how to silently coerce Expressions to
    // ExpressionStatements where a Statement was expected.
    def("ExpressionStatement")
        .bases("Statement")
        .build("expression")
        .field("expression", def("Expression"));
    def("IfStatement")
        .bases("Statement")
        .build("test", "consequent", "alternate")
        .field("test", def("Expression"))
        .field("consequent", def("Statement"))
        .field("alternate", or(def("Statement"), null), defaults["null"]);
    def("LabeledStatement")
        .bases("Statement")
        .build("label", "body")
        .field("label", def("Identifier"))
        .field("body", def("Statement"));
    def("BreakStatement")
        .bases("Statement")
        .build("label")
        .field("label", or(def("Identifier"), null), defaults["null"]);
    def("ContinueStatement")
        .bases("Statement")
        .build("label")
        .field("label", or(def("Identifier"), null), defaults["null"]);
    def("WithStatement")
        .bases("Statement")
        .build("object", "body")
        .field("object", def("Expression"))
        .field("body", def("Statement"));
    def("SwitchStatement")
        .bases("Statement")
        .build("discriminant", "cases", "lexical")
        .field("discriminant", def("Expression"))
        .field("cases", [def("SwitchCase")])
        .field("lexical", Boolean, defaults["false"]);
    def("ReturnStatement")
        .bases("Statement")
        .build("argument")
        .field("argument", or(def("Expression"), null));
    def("ThrowStatement")
        .bases("Statement")
        .build("argument")
        .field("argument", def("Expression"));
    def("TryStatement")
        .bases("Statement")
        .build("block", "handler", "finalizer")
        .field("block", def("BlockStatement"))
        .field("handler", or(def("CatchClause"), null), function () {
        return this.handlers && this.handlers[0] || null;
    })
        .field("handlers", [def("CatchClause")], function () {
        return this.handler ? [this.handler] : [];
    }, true) // Indicates this field is hidden from eachField iteration.
        .field("guardedHandlers", [def("CatchClause")], defaults.emptyArray)
        .field("finalizer", or(def("BlockStatement"), null), defaults["null"]);
    def("CatchClause")
        .bases("Node")
        .build("param", "guard", "body")
        .field("param", def("Pattern"))
        .field("guard", or(def("Expression"), null), defaults["null"])
        .field("body", def("BlockStatement"));
    def("WhileStatement")
        .bases("Statement")
        .build("test", "body")
        .field("test", def("Expression"))
        .field("body", def("Statement"));
    def("DoWhileStatement")
        .bases("Statement")
        .build("body", "test")
        .field("body", def("Statement"))
        .field("test", def("Expression"));
    def("ForStatement")
        .bases("Statement")
        .build("init", "test", "update", "body")
        .field("init", or(def("VariableDeclaration"), def("Expression"), null))
        .field("test", or(def("Expression"), null))
        .field("update", or(def("Expression"), null))
        .field("body", def("Statement"));
    def("ForInStatement")
        .bases("Statement")
        .build("left", "right", "body")
        .field("left", or(def("VariableDeclaration"), def("Expression")))
        .field("right", def("Expression"))
        .field("body", def("Statement"));
    def("DebuggerStatement").bases("Statement").build();
    def("Declaration").bases("Statement");
    def("FunctionDeclaration")
        .bases("Function", "Declaration")
        .build("id", "params", "body")
        .field("id", def("Identifier"));
    def("FunctionExpression")
        .bases("Function", "Expression")
        .build("id", "params", "body");
    def("VariableDeclaration")
        .bases("Declaration")
        .build("kind", "declarations")
        .field("kind", or("var", "let", "const"))
        .field("declarations", [def("VariableDeclarator")]);
    def("VariableDeclarator")
        .bases("Node")
        .build("id", "init")
        .field("id", def("Pattern"))
        .field("init", or(def("Expression"), null), defaults["null"]);
    def("Expression").bases("Node");
    def("ThisExpression").bases("Expression").build();
    def("ArrayExpression")
        .bases("Expression")
        .build("elements")
        .field("elements", [or(def("Expression"), null)]);
    def("ObjectExpression")
        .bases("Expression")
        .build("properties")
        .field("properties", [def("Property")]);
    // TODO Not in the Mozilla Parser API, but used by Esprima.
    def("Property")
        .bases("Node") // Want to be able to visit Property Nodes.
        .build("kind", "key", "value")
        .field("kind", or("init", "get", "set"))
        .field("key", or(def("Literal"), def("Identifier")))
        .field("value", def("Expression"));
    def("SequenceExpression")
        .bases("Expression")
        .build("expressions")
        .field("expressions", [def("Expression")]);
    var UnaryOperator = or("-", "+", "!", "~", "typeof", "void", "delete");
    def("UnaryExpression")
        .bases("Expression")
        .build("operator", "argument", "prefix")
        .field("operator", UnaryOperator)
        .field("argument", def("Expression"))
        // Esprima doesn't bother with this field, presumably because it's
        // always true for unary operators.
        .field("prefix", Boolean, defaults["true"]);
    var BinaryOperator = or.apply(void 0, BinaryOperators);
    def("BinaryExpression")
        .bases("Expression")
        .build("operator", "left", "right")
        .field("operator", BinaryOperator)
        .field("left", def("Expression"))
        .field("right", def("Expression"));
    var AssignmentOperator = or.apply(void 0, AssignmentOperators);
    def("AssignmentExpression")
        .bases("Expression")
        .build("operator", "left", "right")
        .field("operator", AssignmentOperator)
        .field("left", or(def("Pattern"), def("MemberExpression")))
        .field("right", def("Expression"));
    var UpdateOperator = or("++", "--");
    def("UpdateExpression")
        .bases("Expression")
        .build("operator", "argument", "prefix")
        .field("operator", UpdateOperator)
        .field("argument", def("Expression"))
        .field("prefix", Boolean);
    var LogicalOperator = or.apply(void 0, LogicalOperators);
    def("LogicalExpression")
        .bases("Expression")
        .build("operator", "left", "right")
        .field("operator", LogicalOperator)
        .field("left", def("Expression"))
        .field("right", def("Expression"));
    def("ConditionalExpression")
        .bases("Expression")
        .build("test", "consequent", "alternate")
        .field("test", def("Expression"))
        .field("consequent", def("Expression"))
        .field("alternate", def("Expression"));
    def("NewExpression")
        .bases("Expression")
        .build("callee", "arguments")
        .field("callee", def("Expression"))
        // The Mozilla Parser API gives this type as [or(def("Expression"),
        // null)], but null values don't really make sense at the call site.
        // TODO Report this nonsense.
        .field("arguments", [def("Expression")]);
    def("CallExpression")
        .bases("Expression")
        .build("callee", "arguments")
        .field("callee", def("Expression"))
        // See comment for NewExpression above.
        .field("arguments", [def("Expression")]);
    def("MemberExpression")
        .bases("Expression")
        .build("object", "property", "computed")
        .field("object", def("Expression"))
        .field("property", or(def("Identifier"), def("Expression")))
        .field("computed", Boolean, function () {
        var type = this.property.type;
        if (type === 'Literal' ||
            type === 'MemberExpression' ||
            type === 'BinaryExpression') {
            return true;
        }
        return false;
    });
    def("Pattern").bases("Node");
    def("SwitchCase")
        .bases("Node")
        .build("test", "consequent")
        .field("test", or(def("Expression"), null))
        .field("consequent", [def("Statement")]);
    def("Identifier")
        .bases("Expression", "Pattern")
        .build("name")
        .field("name", String)
        .field("optional", Boolean, defaults["false"]);
    def("Literal")
        .bases("Expression")
        .build("value")
        .field("value", or(String, Boolean, null, Number, RegExp, BigInt));
    // Abstract (non-buildable) comment supertype. Not a Node.
    def("Comment")
        .bases("Printable")
        .field("value", String)
        // A .leading comment comes before the node, whereas a .trailing
        // comment comes after it. These two fields should not both be true,
        // but they might both be false when the comment falls inside a node
        // and the node has no children for the comment to lead or trail,
        // e.g. { /*dangling*/ }.
        .field("leading", Boolean, defaults["true"])
        .field("trailing", Boolean, defaults["false"]);
}
exports["default"] = default_1;
;
(0, shared_1.maybeSetModuleExports)(function () { return module; });
//# sourceMappingURL=core.js.map

/***/ }),

/***/ 3676:
/***/ ((module, exports, __nccwpck_require__) => {

/* module decorator */ module = __nccwpck_require__.nmd(module);

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __nccwpck_require__(204);
var types_1 = tslib_1.__importDefault(__nccwpck_require__(1018));
var shared_1 = tslib_1.__importStar(__nccwpck_require__(4456));
var es2022_1 = tslib_1.__importDefault(__nccwpck_require__(7920));
function default_1(fork) {
    fork.use(es2022_1.default);
    var types = fork.use(types_1.default);
    var Type = types.Type;
    var def = types.Type.def;
    var or = Type.or;
    var shared = fork.use(shared_1.default);
    var defaults = shared.defaults;
    def("AwaitExpression")
        .build("argument", "all")
        .field("argument", or(def("Expression"), null))
        .field("all", Boolean, defaults["false"]);
    // Decorators
    def("Decorator")
        .bases("Node")
        .build("expression")
        .field("expression", def("Expression"));
    def("Property")
        .field("decorators", or([def("Decorator")], null), defaults["null"]);
    def("MethodDefinition")
        .field("decorators", or([def("Decorator")], null), defaults["null"]);
    // Private names
    def("PrivateName")
        .bases("Expression", "Pattern")
        .build("id")
        .field("id", def("Identifier"));
    def("ClassPrivateProperty")
        .bases("ClassProperty")
        .build("key", "value")
        .field("key", def("PrivateName"))
        .field("value", or(def("Expression"), null), defaults["null"]);
    // https://github.com/tc39/proposal-import-assertions
    def("ImportAttribute")
        .bases("Node")
        .build("key", "value")
        .field("key", or(def("Identifier"), def("Literal")))
        .field("value", def("Expression"));
    ["ImportDeclaration",
        "ExportAllDeclaration",
        "ExportNamedDeclaration",
    ].forEach(function (decl) {
        def(decl).field("assertions", [def("ImportAttribute")], defaults.emptyArray);
    });
    // https://github.com/tc39/proposal-record-tuple
    // https://github.com/babel/babel/pull/10865
    def("RecordExpression")
        .bases("Expression")
        .build("properties")
        .field("properties", [or(def("ObjectProperty"), def("ObjectMethod"), def("SpreadElement"))]);
    def("TupleExpression")
        .bases("Expression")
        .build("elements")
        .field("elements", [or(def("Expression"), def("SpreadElement"), null)]);
    // https://github.com/tc39/proposal-js-module-blocks
    // https://github.com/babel/babel/pull/12469
    def("ModuleExpression")
        .bases("Node")
        .build("body")
        .field("body", def("Program"));
}
exports["default"] = default_1;
;
(0, shared_1.maybeSetModuleExports)(function () { return module; });
//# sourceMappingURL=es-proposals.js.map

/***/ }),

/***/ 5836:
/***/ ((module, exports, __nccwpck_require__) => {

/* module decorator */ module = __nccwpck_require__.nmd(module);

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __nccwpck_require__(204);
var es2016_1 = tslib_1.__importDefault(__nccwpck_require__(5054));
var es6_1 = tslib_1.__importDefault(__nccwpck_require__(2719));
var shared_1 = __nccwpck_require__(4456);
function default_1(fork) {
    // The es2016OpsDef plugin comes before es6Def so BinaryOperators and
    // AssignmentOperators will be appropriately augmented before they are first
    // used in the core definitions for this fork.
    fork.use(es2016_1.default);
    fork.use(es6_1.default);
}
exports["default"] = default_1;
;
(0, shared_1.maybeSetModuleExports)(function () { return module; });
//# sourceMappingURL=es2016.js.map

/***/ }),

/***/ 3265:
/***/ ((module, exports, __nccwpck_require__) => {

/* module decorator */ module = __nccwpck_require__.nmd(module);

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __nccwpck_require__(204);
var es2016_1 = tslib_1.__importDefault(__nccwpck_require__(5836));
var types_1 = tslib_1.__importDefault(__nccwpck_require__(1018));
var shared_1 = tslib_1.__importStar(__nccwpck_require__(4456));
function default_1(fork) {
    fork.use(es2016_1.default);
    var types = fork.use(types_1.default);
    var def = types.Type.def;
    var defaults = fork.use(shared_1.default).defaults;
    def("Function")
        .field("async", Boolean, defaults["false"]);
    def("AwaitExpression")
        .bases("Expression")
        .build("argument")
        .field("argument", def("Expression"));
}
exports["default"] = default_1;
;
(0, shared_1.maybeSetModuleExports)(function () { return module; });
//# sourceMappingURL=es2017.js.map

/***/ }),

/***/ 1619:
/***/ ((module, exports, __nccwpck_require__) => {

/* module decorator */ module = __nccwpck_require__.nmd(module);

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __nccwpck_require__(204);
var es2017_1 = tslib_1.__importDefault(__nccwpck_require__(3265));
var types_1 = tslib_1.__importDefault(__nccwpck_require__(1018));
var shared_1 = tslib_1.__importStar(__nccwpck_require__(4456));
function default_1(fork) {
    fork.use(es2017_1.default);
    var types = fork.use(types_1.default);
    var def = types.Type.def;
    var or = types.Type.or;
    var defaults = fork.use(shared_1.default).defaults;
    def("ForOfStatement")
        .field("await", Boolean, defaults["false"]);
    // Legacy
    def("SpreadProperty")
        .bases("Node")
        .build("argument")
        .field("argument", def("Expression"));
    def("ObjectExpression")
        .field("properties", [or(def("Property"), def("SpreadProperty"), // Legacy
        def("SpreadElement"))]);
    def("TemplateElement")
        .field("value", { "cooked": or(String, null), "raw": String });
    // Legacy
    def("SpreadPropertyPattern")
        .bases("Pattern")
        .build("argument")
        .field("argument", def("Pattern"));
    def("ObjectPattern")
        .field("properties", [or(def("PropertyPattern"), def("Property"), def("RestElement"), def("SpreadPropertyPattern"))]);
}
exports["default"] = default_1;
;
(0, shared_1.maybeSetModuleExports)(function () { return module; });
//# sourceMappingURL=es2018.js.map

/***/ }),

/***/ 6653:
/***/ ((module, exports, __nccwpck_require__) => {

/* module decorator */ module = __nccwpck_require__.nmd(module);

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __nccwpck_require__(204);
var es2018_1 = tslib_1.__importDefault(__nccwpck_require__(1619));
var types_1 = tslib_1.__importDefault(__nccwpck_require__(1018));
var shared_1 = tslib_1.__importStar(__nccwpck_require__(4456));
function default_1(fork) {
    fork.use(es2018_1.default);
    var types = fork.use(types_1.default);
    var def = types.Type.def;
    var or = types.Type.or;
    var defaults = fork.use(shared_1.default).defaults;
    def("CatchClause")
        .field("param", or(def("Pattern"), null), defaults["null"]);
}
exports["default"] = default_1;
;
(0, shared_1.maybeSetModuleExports)(function () { return module; });
//# sourceMappingURL=es2019.js.map

/***/ }),

/***/ 26:
/***/ ((module, exports, __nccwpck_require__) => {

/* module decorator */ module = __nccwpck_require__.nmd(module);

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __nccwpck_require__(204);
var es2020_1 = tslib_1.__importDefault(__nccwpck_require__(4782));
var es2019_1 = tslib_1.__importDefault(__nccwpck_require__(6653));
var types_1 = tslib_1.__importDefault(__nccwpck_require__(1018));
var shared_1 = tslib_1.__importStar(__nccwpck_require__(4456));
function default_1(fork) {
    // The es2020OpsDef plugin comes before es2019Def so LogicalOperators will be
    // appropriately augmented before first used.
    fork.use(es2020_1.default);
    fork.use(es2019_1.default);
    var types = fork.use(types_1.default);
    var def = types.Type.def;
    var or = types.Type.or;
    var shared = fork.use(shared_1.default);
    var defaults = shared.defaults;
    def("ImportExpression")
        .bases("Expression")
        .build("source")
        .field("source", def("Expression"));
    def("ExportAllDeclaration")
        .bases("Declaration")
        .build("source", "exported")
        .field("source", def("Literal"))
        .field("exported", or(def("Identifier"), null, void 0), defaults["null"]);
    // Optional chaining
    def("ChainElement")
        .bases("Node")
        .field("optional", Boolean, defaults["false"]);
    def("CallExpression")
        .bases("Expression", "ChainElement");
    def("MemberExpression")
        .bases("Expression", "ChainElement");
    def("ChainExpression")
        .bases("Expression")
        .build("expression")
        .field("expression", def("ChainElement"));
    def("OptionalCallExpression")
        .bases("CallExpression")
        .build("callee", "arguments", "optional")
        .field("optional", Boolean, defaults["true"]);
    // Deprecated optional chaining type, doesn't work with babelParser@7.11.0 or newer
    def("OptionalMemberExpression")
        .bases("MemberExpression")
        .build("object", "property", "computed", "optional")
        .field("optional", Boolean, defaults["true"]);
}
exports["default"] = default_1;
;
(0, shared_1.maybeSetModuleExports)(function () { return module; });
//# sourceMappingURL=es2020.js.map

/***/ }),

/***/ 1289:
/***/ ((module, exports, __nccwpck_require__) => {

/* module decorator */ module = __nccwpck_require__.nmd(module);

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __nccwpck_require__(204);
var es2021_1 = tslib_1.__importDefault(__nccwpck_require__(9126));
var es2020_1 = tslib_1.__importDefault(__nccwpck_require__(26));
var shared_1 = __nccwpck_require__(4456);
function default_1(fork) {
    // The es2021OpsDef plugin comes before es2020Def so AssignmentOperators will
    // be appropriately augmented before first used.
    fork.use(es2021_1.default);
    fork.use(es2020_1.default);
}
exports["default"] = default_1;
(0, shared_1.maybeSetModuleExports)(function () { return module; });
//# sourceMappingURL=es2021.js.map

/***/ }),

/***/ 7920:
/***/ ((module, exports, __nccwpck_require__) => {

/* module decorator */ module = __nccwpck_require__.nmd(module);

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __nccwpck_require__(204);
var es2021_1 = tslib_1.__importDefault(__nccwpck_require__(1289));
var types_1 = tslib_1.__importDefault(__nccwpck_require__(1018));
var shared_1 = __nccwpck_require__(4456);
function default_1(fork) {
    fork.use(es2021_1.default);
    var types = fork.use(types_1.default);
    var def = types.Type.def;
    def("StaticBlock")
        .bases("Declaration")
        .build("body")
        .field("body", [def("Statement")]);
}
exports["default"] = default_1;
(0, shared_1.maybeSetModuleExports)(function () { return module; });
//# sourceMappingURL=es2022.js.map

/***/ }),

/***/ 2719:
/***/ ((module, exports, __nccwpck_require__) => {

/* module decorator */ module = __nccwpck_require__.nmd(module);

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __nccwpck_require__(204);
var core_1 = tslib_1.__importDefault(__nccwpck_require__(8256));
var types_1 = tslib_1.__importDefault(__nccwpck_require__(1018));
var shared_1 = tslib_1.__importStar(__nccwpck_require__(4456));
function default_1(fork) {
    fork.use(core_1.default);
    var types = fork.use(types_1.default);
    var def = types.Type.def;
    var or = types.Type.or;
    var defaults = fork.use(shared_1.default).defaults;
    def("Function")
        .field("generator", Boolean, defaults["false"])
        .field("expression", Boolean, defaults["false"])
        .field("defaults", [or(def("Expression"), null)], defaults.emptyArray)
        // Legacy
        .field("rest", or(def("Identifier"), null), defaults["null"]);
    // The ESTree way of representing a ...rest parameter.
    def("RestElement")
        .bases("Pattern")
        .build("argument")
        .field("argument", def("Pattern"))
        .field("typeAnnotation", // for Babylon. Flow parser puts it on the identifier
    or(def("TypeAnnotation"), def("TSTypeAnnotation"), null), defaults["null"]);
    def("SpreadElementPattern")
        .bases("Pattern")
        .build("argument")
        .field("argument", def("Pattern"));
    def("FunctionDeclaration")
        .build("id", "params", "body", "generator", "expression")
        // May be `null` in the context of `export default function () {}`
        .field("id", or(def("Identifier"), null));
    def("FunctionExpression")
        .build("id", "params", "body", "generator", "expression");
    def("ArrowFunctionExpression")
        .bases("Function", "Expression")
        .build("params", "body", "expression")
        // The forced null value here is compatible with the overridden
        // definition of the "id" field in the Function interface.
        .field("id", null, defaults["null"])
        // Arrow function bodies are allowed to be expressions.
        .field("body", or(def("BlockStatement"), def("Expression")))
        // The current spec forbids arrow generators, so I have taken the
        // liberty of enforcing that. TODO Report this.
        .field("generator", false, defaults["false"]);
    def("ForOfStatement")
        .bases("Statement")
        .build("left", "right", "body")
        .field("left", or(def("VariableDeclaration"), def("Pattern")))
        .field("right", def("Expression"))
        .field("body", def("Statement"));
    def("YieldExpression")
        .bases("Expression")
        .build("argument", "delegate")
        .field("argument", or(def("Expression"), null))
        .field("delegate", Boolean, defaults["false"]);
    def("GeneratorExpression")
        .bases("Expression")
        .build("body", "blocks", "filter")
        .field("body", def("Expression"))
        .field("blocks", [def("ComprehensionBlock")])
        .field("filter", or(def("Expression"), null));
    def("ComprehensionExpression")
        .bases("Expression")
        .build("body", "blocks", "filter")
        .field("body", def("Expression"))
        .field("blocks", [def("ComprehensionBlock")])
        .field("filter", or(def("Expression"), null));
    def("ComprehensionBlock")
        .bases("Node")
        .build("left", "right", "each")
        .field("left", def("Pattern"))
        .field("right", def("Expression"))
        .field("each", Boolean);
    def("Property")
        .field("key", or(def("Literal"), def("Identifier"), def("Expression")))
        .field("value", or(def("Expression"), def("Pattern")))
        .field("method", Boolean, defaults["false"])
        .field("shorthand", Boolean, defaults["false"])
        .field("computed", Boolean, defaults["false"]);
    def("ObjectProperty")
        .field("shorthand", Boolean, defaults["false"]);
    def("PropertyPattern")
        .bases("Pattern")
        .build("key", "pattern")
        .field("key", or(def("Literal"), def("Identifier"), def("Expression")))
        .field("pattern", def("Pattern"))
        .field("computed", Boolean, defaults["false"]);
    def("ObjectPattern")
        .bases("Pattern")
        .build("properties")
        .field("properties", [or(def("PropertyPattern"), def("Property"))]);
    def("ArrayPattern")
        .bases("Pattern")
        .build("elements")
        .field("elements", [or(def("Pattern"), null)]);
    def("SpreadElement")
        .bases("Node")
        .build("argument")
        .field("argument", def("Expression"));
    def("ArrayExpression")
        .field("elements", [or(def("Expression"), def("SpreadElement"), def("RestElement"), null)]);
    def("NewExpression")
        .field("arguments", [or(def("Expression"), def("SpreadElement"))]);
    def("CallExpression")
        .field("arguments", [or(def("Expression"), def("SpreadElement"))]);
    // Note: this node type is *not* an AssignmentExpression with a Pattern on
    // the left-hand side! The existing AssignmentExpression type already
    // supports destructuring assignments. AssignmentPattern nodes may appear
    // wherever a Pattern is allowed, and the right-hand side represents a
    // default value to be destructured against the left-hand side, if no
    // value is otherwise provided. For example: default parameter values.
    def("AssignmentPattern")
        .bases("Pattern")
        .build("left", "right")
        .field("left", def("Pattern"))
        .field("right", def("Expression"));
    def("MethodDefinition")
        .bases("Declaration")
        .build("kind", "key", "value", "static")
        .field("kind", or("constructor", "method", "get", "set"))
        .field("key", def("Expression"))
        .field("value", def("Function"))
        .field("computed", Boolean, defaults["false"])
        .field("static", Boolean, defaults["false"]);
    var ClassBodyElement = or(def("MethodDefinition"), def("VariableDeclarator"), def("ClassPropertyDefinition"), def("ClassProperty"), def("StaticBlock"));
    def("ClassProperty")
        .bases("Declaration")
        .build("key")
        .field("key", or(def("Literal"), def("Identifier"), def("Expression")))
        .field("computed", Boolean, defaults["false"]);
    def("ClassPropertyDefinition") // static property
        .bases("Declaration")
        .build("definition")
        // Yes, Virginia, circular definitions are permitted.
        .field("definition", ClassBodyElement);
    def("ClassBody")
        .bases("Declaration")
        .build("body")
        .field("body", [ClassBodyElement]);
    def("ClassDeclaration")
        .bases("Declaration")
        .build("id", "body", "superClass")
        .field("id", or(def("Identifier"), null))
        .field("body", def("ClassBody"))
        .field("superClass", or(def("Expression"), null), defaults["null"]);
    def("ClassExpression")
        .bases("Expression")
        .build("id", "body", "superClass")
        .field("id", or(def("Identifier"), null), defaults["null"])
        .field("body", def("ClassBody"))
        .field("superClass", or(def("Expression"), null), defaults["null"]);
    def("Super")
        .bases("Expression")
        .build();
    // Specifier and ModuleSpecifier are abstract non-standard types
    // introduced for definitional convenience.
    def("Specifier").bases("Node");
    // This supertype is shared/abused by both def/babel.js and
    // def/esprima.js. In the future, it will be possible to load only one set
    // of definitions appropriate for a given parser, but until then we must
    // rely on default functions to reconcile the conflicting AST formats.
    def("ModuleSpecifier")
        .bases("Specifier")
        // This local field is used by Babel/Acorn. It should not technically
        // be optional in the Babel/Acorn AST format, but it must be optional
        // in the Esprima AST format.
        .field("local", or(def("Identifier"), null), defaults["null"])
        // The id and name fields are used by Esprima. The id field should not
        // technically be optional in the Esprima AST format, but it must be
        // optional in the Babel/Acorn AST format.
        .field("id", or(def("Identifier"), null), defaults["null"])
        .field("name", or(def("Identifier"), null), defaults["null"]);
    // import {<id [as name]>} from ...;
    def("ImportSpecifier")
        .bases("ModuleSpecifier")
        .build("imported", "local")
        .field("imported", def("Identifier"));
    // import <id> from ...;
    def("ImportDefaultSpecifier")
        .bases("ModuleSpecifier")
        .build("local");
    // import <* as id> from ...;
    def("ImportNamespaceSpecifier")
        .bases("ModuleSpecifier")
        .build("local");
    def("ImportDeclaration")
        .bases("Declaration")
        .build("specifiers", "source", "importKind")
        .field("specifiers", [or(def("ImportSpecifier"), def("ImportNamespaceSpecifier"), def("ImportDefaultSpecifier"))], defaults.emptyArray)
        .field("source", def("Literal"))
        .field("importKind", or("value", "type"), function () {
        return "value";
    });
    def("ExportNamedDeclaration")
        .bases("Declaration")
        .build("declaration", "specifiers", "source")
        .field("declaration", or(def("Declaration"), null))
        .field("specifiers", [def("ExportSpecifier")], defaults.emptyArray)
        .field("source", or(def("Literal"), null), defaults["null"]);
    def("ExportSpecifier")
        .bases("ModuleSpecifier")
        .build("local", "exported")
        .field("exported", def("Identifier"));
    def("ExportDefaultDeclaration")
        .bases("Declaration")
        .build("declaration")
        .field("declaration", or(def("Declaration"), def("Expression")));
    def("ExportAllDeclaration")
        .bases("Declaration")
        .build("source")
        .field("source", def("Literal"));
    def("TaggedTemplateExpression")
        .bases("Expression")
        .build("tag", "quasi")
        .field("tag", def("Expression"))
        .field("quasi", def("TemplateLiteral"));
    def("TemplateLiteral")
        .bases("Expression")
        .build("quasis", "expressions")
        .field("quasis", [def("TemplateElement")])
        .field("expressions", [def("Expression")]);
    def("TemplateElement")
        .bases("Node")
        .build("value", "tail")
        .field("value", { "cooked": String, "raw": String })
        .field("tail", Boolean);
    def("MetaProperty")
        .bases("Expression")
        .build("meta", "property")
        .field("meta", def("Identifier"))
        .field("property", def("Identifier"));
}
exports["default"] = default_1;
;
(0, shared_1.maybeSetModuleExports)(function () { return module; });
//# sourceMappingURL=es6.js.map

/***/ }),

/***/ 8797:
/***/ ((module, exports, __nccwpck_require__) => {

/* module decorator */ module = __nccwpck_require__.nmd(module);

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __nccwpck_require__(204);
var es_proposals_1 = tslib_1.__importDefault(__nccwpck_require__(3676));
var types_1 = tslib_1.__importDefault(__nccwpck_require__(1018));
var shared_1 = tslib_1.__importStar(__nccwpck_require__(4456));
function default_1(fork) {
    fork.use(es_proposals_1.default);
    var types = fork.use(types_1.default);
    var defaults = fork.use(shared_1.default).defaults;
    var def = types.Type.def;
    var or = types.Type.or;
    def("VariableDeclaration")
        .field("declarations", [or(def("VariableDeclarator"), def("Identifier") // Esprima deviation.
        )]);
    def("Property")
        .field("value", or(def("Expression"), def("Pattern") // Esprima deviation.
    ));
    def("ArrayPattern")
        .field("elements", [or(def("Pattern"), def("SpreadElement"), null)]);
    def("ObjectPattern")
        .field("properties", [or(def("Property"), def("PropertyPattern"), def("SpreadPropertyPattern"), def("SpreadProperty") // Used by Esprima.
        )]);
    // Like ModuleSpecifier, except type:"ExportSpecifier" and buildable.
    // export {<id [as name]>} [from ...];
    def("ExportSpecifier")
        .bases("ModuleSpecifier")
        .build("id", "name");
    // export <*> from ...;
    def("ExportBatchSpecifier")
        .bases("Specifier")
        .build();
    def("ExportDeclaration")
        .bases("Declaration")
        .build("default", "declaration", "specifiers", "source")
        .field("default", Boolean)
        .field("declaration", or(def("Declaration"), def("Expression"), // Implies default.
    null))
        .field("specifiers", [or(def("ExportSpecifier"), def("ExportBatchSpecifier"))], defaults.emptyArray)
        .field("source", or(def("Literal"), null), defaults["null"]);
    def("Block")
        .bases("Comment")
        .build("value", /*optional:*/ "leading", "trailing");
    def("Line")
        .bases("Comment")
        .build("value", /*optional:*/ "leading", "trailing");
}
exports["default"] = default_1;
;
(0, shared_1.maybeSetModuleExports)(function () { return module; });
//# sourceMappingURL=esprima.js.map

/***/ }),

/***/ 4110:
/***/ ((module, exports, __nccwpck_require__) => {

/* module decorator */ module = __nccwpck_require__.nmd(module);

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __nccwpck_require__(204);
var es_proposals_1 = tslib_1.__importDefault(__nccwpck_require__(3676));
var type_annotations_1 = tslib_1.__importDefault(__nccwpck_require__(6641));
var types_1 = tslib_1.__importDefault(__nccwpck_require__(1018));
var shared_1 = tslib_1.__importStar(__nccwpck_require__(4456));
function default_1(fork) {
    fork.use(es_proposals_1.default);
    fork.use(type_annotations_1.default);
    var types = fork.use(types_1.default);
    var def = types.Type.def;
    var or = types.Type.or;
    var defaults = fork.use(shared_1.default).defaults;
    // Base types
    def("Flow").bases("Node");
    def("FlowType").bases("Flow");
    // Type annotations
    def("AnyTypeAnnotation")
        .bases("FlowType")
        .build();
    def("EmptyTypeAnnotation")
        .bases("FlowType")
        .build();
    def("MixedTypeAnnotation")
        .bases("FlowType")
        .build();
    def("VoidTypeAnnotation")
        .bases("FlowType")
        .build();
    def("SymbolTypeAnnotation")
        .bases("FlowType")
        .build();
    def("NumberTypeAnnotation")
        .bases("FlowType")
        .build();
    def("BigIntTypeAnnotation")
        .bases("FlowType")
        .build();
    def("NumberLiteralTypeAnnotation")
        .bases("FlowType")
        .build("value", "raw")
        .field("value", Number)
        .field("raw", String);
    // Babylon 6 differs in AST from Flow
    // same as NumberLiteralTypeAnnotation
    def("NumericLiteralTypeAnnotation")
        .bases("FlowType")
        .build("value", "raw")
        .field("value", Number)
        .field("raw", String);
    def("BigIntLiteralTypeAnnotation")
        .bases("FlowType")
        .build("value", "raw")
        .field("value", null)
        .field("raw", String);
    def("StringTypeAnnotation")
        .bases("FlowType")
        .build();
    def("StringLiteralTypeAnnotation")
        .bases("FlowType")
        .build("value", "raw")
        .field("value", String)
        .field("raw", String);
    def("BooleanTypeAnnotation")
        .bases("FlowType")
        .build();
    def("BooleanLiteralTypeAnnotation")
        .bases("FlowType")
        .build("value", "raw")
        .field("value", Boolean)
        .field("raw", String);
    def("TypeAnnotation")
        .bases("Node")
        .build("typeAnnotation")
        .field("typeAnnotation", def("FlowType"));
    def("NullableTypeAnnotation")
        .bases("FlowType")
        .build("typeAnnotation")
        .field("typeAnnotation", def("FlowType"));
    def("NullLiteralTypeAnnotation")
        .bases("FlowType")
        .build();
    def("NullTypeAnnotation")
        .bases("FlowType")
        .build();
    def("ThisTypeAnnotation")
        .bases("FlowType")
        .build();
    def("ExistsTypeAnnotation")
        .bases("FlowType")
        .build();
    def("ExistentialTypeParam")
        .bases("FlowType")
        .build();
    def("FunctionTypeAnnotation")
        .bases("FlowType")
        .build("params", "returnType", "rest", "typeParameters")
        .field("params", [def("FunctionTypeParam")])
        .field("returnType", def("FlowType"))
        .field("rest", or(def("FunctionTypeParam"), null))
        .field("typeParameters", or(def("TypeParameterDeclaration"), null));
    def("FunctionTypeParam")
        .bases("Node")
        .build("name", "typeAnnotation", "optional")
        .field("name", or(def("Identifier"), null))
        .field("typeAnnotation", def("FlowType"))
        .field("optional", Boolean);
    def("ArrayTypeAnnotation")
        .bases("FlowType")
        .build("elementType")
        .field("elementType", def("FlowType"));
    def("ObjectTypeAnnotation")
        .bases("FlowType")
        .build("properties", "indexers", "callProperties")
        .field("properties", [
        or(def("ObjectTypeProperty"), def("ObjectTypeSpreadProperty"))
    ])
        .field("indexers", [def("ObjectTypeIndexer")], defaults.emptyArray)
        .field("callProperties", [def("ObjectTypeCallProperty")], defaults.emptyArray)
        .field("inexact", or(Boolean, void 0), defaults["undefined"])
        .field("exact", Boolean, defaults["false"])
        .field("internalSlots", [def("ObjectTypeInternalSlot")], defaults.emptyArray);
    def("Variance")
        .bases("Node")
        .build("kind")
        .field("kind", or("plus", "minus"));
    var LegacyVariance = or(def("Variance"), "plus", "minus", null);
    def("ObjectTypeProperty")
        .bases("Node")
        .build("key", "value", "optional")
        .field("key", or(def("Literal"), def("Identifier")))
        .field("value", def("FlowType"))
        .field("optional", Boolean)
        .field("variance", LegacyVariance, defaults["null"]);
    def("ObjectTypeIndexer")
        .bases("Node")
        .build("id", "key", "value")
        .field("id", def("Identifier"))
        .field("key", def("FlowType"))
        .field("value", def("FlowType"))
        .field("variance", LegacyVariance, defaults["null"])
        .field("static", Boolean, defaults["false"]);
    def("ObjectTypeCallProperty")
        .bases("Node")
        .build("value")
        .field("value", def("FunctionTypeAnnotation"))
        .field("static", Boolean, defaults["false"]);
    def("QualifiedTypeIdentifier")
        .bases("Node")
        .build("qualification", "id")
        .field("qualification", or(def("Identifier"), def("QualifiedTypeIdentifier")))
        .field("id", def("Identifier"));
    def("GenericTypeAnnotation")
        .bases("FlowType")
        .build("id", "typeParameters")
        .field("id", or(def("Identifier"), def("QualifiedTypeIdentifier")))
        .field("typeParameters", or(def("TypeParameterInstantiation"), null));
    def("MemberTypeAnnotation")
        .bases("FlowType")
        .build("object", "property")
        .field("object", def("Identifier"))
        .field("property", or(def("MemberTypeAnnotation"), def("GenericTypeAnnotation")));
    def("IndexedAccessType")
        .bases("FlowType")
        .build("objectType", "indexType")
        .field("objectType", def("FlowType"))
        .field("indexType", def("FlowType"));
    def("OptionalIndexedAccessType")
        .bases("FlowType")
        .build("objectType", "indexType", "optional")
        .field("objectType", def("FlowType"))
        .field("indexType", def("FlowType"))
        .field('optional', Boolean);
    def("UnionTypeAnnotation")
        .bases("FlowType")
        .build("types")
        .field("types", [def("FlowType")]);
    def("IntersectionTypeAnnotation")
        .bases("FlowType")
        .build("types")
        .field("types", [def("FlowType")]);
    def("TypeofTypeAnnotation")
        .bases("FlowType")
        .build("argument")
        .field("argument", def("FlowType"));
    def("ObjectTypeSpreadProperty")
        .bases("Node")
        .build("argument")
        .field("argument", def("FlowType"));
    def("ObjectTypeInternalSlot")
        .bases("Node")
        .build("id", "value", "optional", "static", "method")
        .field("id", def("Identifier"))
        .field("value", def("FlowType"))
        .field("optional", Boolean)
        .field("static", Boolean)
        .field("method", Boolean);
    def("TypeParameterDeclaration")
        .bases("Node")
        .build("params")
        .field("params", [def("TypeParameter")]);
    def("TypeParameterInstantiation")
        .bases("Node")
        .build("params")
        .field("params", [def("FlowType")]);
    def("TypeParameter")
        .bases("FlowType")
        .build("name", "variance", "bound", "default")
        .field("name", String)
        .field("variance", LegacyVariance, defaults["null"])
        .field("bound", or(def("TypeAnnotation"), null), defaults["null"])
        .field("default", or(def("FlowType"), null), defaults["null"]);
    def("ClassProperty")
        .field("variance", LegacyVariance, defaults["null"]);
    def("ClassImplements")
        .bases("Node")
        .build("id")
        .field("id", def("Identifier"))
        .field("superClass", or(def("Expression"), null), defaults["null"])
        .field("typeParameters", or(def("TypeParameterInstantiation"), null), defaults["null"]);
    def("InterfaceTypeAnnotation")
        .bases("FlowType")
        .build("body", "extends")
        .field("body", def("ObjectTypeAnnotation"))
        .field("extends", or([def("InterfaceExtends")], null), defaults["null"]);
    def("InterfaceDeclaration")
        .bases("Declaration")
        .build("id", "body", "extends")
        .field("id", def("Identifier"))
        .field("typeParameters", or(def("TypeParameterDeclaration"), null), defaults["null"])
        .field("body", def("ObjectTypeAnnotation"))
        .field("extends", [def("InterfaceExtends")]);
    def("DeclareInterface")
        .bases("InterfaceDeclaration")
        .build("id", "body", "extends");
    def("InterfaceExtends")
        .bases("Node")
        .build("id")
        .field("id", def("Identifier"))
        .field("typeParameters", or(def("TypeParameterInstantiation"), null), defaults["null"]);
    def("TypeAlias")
        .bases("Declaration")
        .build("id", "typeParameters", "right")
        .field("id", def("Identifier"))
        .field("typeParameters", or(def("TypeParameterDeclaration"), null))
        .field("right", def("FlowType"));
    def("DeclareTypeAlias")
        .bases("TypeAlias")
        .build("id", "typeParameters", "right");
    def("OpaqueType")
        .bases("Declaration")
        .build("id", "typeParameters", "impltype", "supertype")
        .field("id", def("Identifier"))
        .field("typeParameters", or(def("TypeParameterDeclaration"), null))
        .field("impltype", def("FlowType"))
        .field("supertype", or(def("FlowType"), null));
    def("DeclareOpaqueType")
        .bases("OpaqueType")
        .build("id", "typeParameters", "supertype")
        .field("impltype", or(def("FlowType"), null));
    def("TypeCastExpression")
        .bases("Expression")
        .build("expression", "typeAnnotation")
        .field("expression", def("Expression"))
        .field("typeAnnotation", def("TypeAnnotation"));
    def("TupleTypeAnnotation")
        .bases("FlowType")
        .build("types")
        .field("types", [def("FlowType")]);
    def("DeclareVariable")
        .bases("Statement")
        .build("id")
        .field("id", def("Identifier"));
    def("DeclareFunction")
        .bases("Statement")
        .build("id")
        .field("id", def("Identifier"))
        .field("predicate", or(def("FlowPredicate"), null), defaults["null"]);
    def("DeclareClass")
        .bases("InterfaceDeclaration")
        .build("id");
    def("DeclareModule")
        .bases("Statement")
        .build("id", "body")
        .field("id", or(def("Identifier"), def("Literal")))
        .field("body", def("BlockStatement"));
    def("DeclareModuleExports")
        .bases("Statement")
        .build("typeAnnotation")
        .field("typeAnnotation", def("TypeAnnotation"));
    def("DeclareExportDeclaration")
        .bases("Declaration")
        .build("default", "declaration", "specifiers", "source")
        .field("default", Boolean)
        .field("declaration", or(def("DeclareVariable"), def("DeclareFunction"), def("DeclareClass"), def("FlowType"), // Implies default.
    def("TypeAlias"), // Implies named type
    def("DeclareOpaqueType"), // Implies named opaque type
    def("InterfaceDeclaration"), null))
        .field("specifiers", [or(def("ExportSpecifier"), def("ExportBatchSpecifier"))], defaults.emptyArray)
        .field("source", or(def("Literal"), null), defaults["null"]);
    def("DeclareExportAllDeclaration")
        .bases("Declaration")
        .build("source")
        .field("source", or(def("Literal"), null), defaults["null"]);
    def("ImportDeclaration")
        .field("importKind", or("value", "type", "typeof"), function () { return "value"; });
    def("FlowPredicate").bases("Flow");
    def("InferredPredicate")
        .bases("FlowPredicate")
        .build();
    def("DeclaredPredicate")
        .bases("FlowPredicate")
        .build("value")
        .field("value", def("Expression"));
    def("Function")
        .field("predicate", or(def("FlowPredicate"), null), defaults["null"]);
    def("CallExpression")
        .field("typeArguments", or(null, def("TypeParameterInstantiation")), defaults["null"]);
    def("NewExpression")
        .field("typeArguments", or(null, def("TypeParameterInstantiation")), defaults["null"]);
    // Enums
    def("EnumDeclaration")
        .bases("Declaration")
        .build("id", "body")
        .field("id", def("Identifier"))
        .field("body", or(def("EnumBooleanBody"), def("EnumNumberBody"), def("EnumStringBody"), def("EnumSymbolBody")));
    def("EnumBooleanBody")
        .build("members", "explicitType")
        .field("members", [def("EnumBooleanMember")])
        .field("explicitType", Boolean);
    def("EnumNumberBody")
        .build("members", "explicitType")
        .field("members", [def("EnumNumberMember")])
        .field("explicitType", Boolean);
    def("EnumStringBody")
        .build("members", "explicitType")
        .field("members", or([def("EnumStringMember")], [def("EnumDefaultedMember")]))
        .field("explicitType", Boolean);
    def("EnumSymbolBody")
        .build("members")
        .field("members", [def("EnumDefaultedMember")]);
    def("EnumBooleanMember")
        .build("id", "init")
        .field("id", def("Identifier"))
        .field("init", or(def("Literal"), Boolean));
    def("EnumNumberMember")
        .build("id", "init")
        .field("id", def("Identifier"))
        .field("init", def("Literal"));
    def("EnumStringMember")
        .build("id", "init")
        .field("id", def("Identifier"))
        .field("init", def("Literal"));
    def("EnumDefaultedMember")
        .build("id")
        .field("id", def("Identifier"));
}
exports["default"] = default_1;
;
(0, shared_1.maybeSetModuleExports)(function () { return module; });
//# sourceMappingURL=flow.js.map

/***/ }),

/***/ 2557:
/***/ ((module, exports, __nccwpck_require__) => {

/* module decorator */ module = __nccwpck_require__.nmd(module);

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __nccwpck_require__(204);
var es_proposals_1 = tslib_1.__importDefault(__nccwpck_require__(3676));
var types_1 = tslib_1.__importDefault(__nccwpck_require__(1018));
var shared_1 = tslib_1.__importStar(__nccwpck_require__(4456));
function default_1(fork) {
    fork.use(es_proposals_1.default);
    var types = fork.use(types_1.default);
    var def = types.Type.def;
    var or = types.Type.or;
    var defaults = fork.use(shared_1.default).defaults;
    def("JSXAttribute")
        .bases("Node")
        .build("name", "value")
        .field("name", or(def("JSXIdentifier"), def("JSXNamespacedName")))
        .field("value", or(def("Literal"), // attr="value"
    def("JSXExpressionContainer"), // attr={value}
    def("JSXElement"), // attr=<div />
    def("JSXFragment"), // attr=<></>
    null // attr= or just attr
    ), defaults["null"]);
    def("JSXIdentifier")
        .bases("Identifier")
        .build("name")
        .field("name", String);
    def("JSXNamespacedName")
        .bases("Node")
        .build("namespace", "name")
        .field("namespace", def("JSXIdentifier"))
        .field("name", def("JSXIdentifier"));
    def("JSXMemberExpression")
        .bases("MemberExpression")
        .build("object", "property")
        .field("object", or(def("JSXIdentifier"), def("JSXMemberExpression")))
        .field("property", def("JSXIdentifier"))
        .field("computed", Boolean, defaults.false);
    var JSXElementName = or(def("JSXIdentifier"), def("JSXNamespacedName"), def("JSXMemberExpression"));
    def("JSXSpreadAttribute")
        .bases("Node")
        .build("argument")
        .field("argument", def("Expression"));
    var JSXAttributes = [or(def("JSXAttribute"), def("JSXSpreadAttribute"))];
    def("JSXExpressionContainer")
        .bases("Expression")
        .build("expression")
        .field("expression", or(def("Expression"), def("JSXEmptyExpression")));
    var JSXChildren = [or(def("JSXText"), def("JSXExpressionContainer"), def("JSXSpreadChild"), def("JSXElement"), def("JSXFragment"), def("Literal") // Legacy: Esprima should return JSXText instead.
        )];
    def("JSXElement")
        .bases("Expression")
        .build("openingElement", "closingElement", "children")
        .field("openingElement", def("JSXOpeningElement"))
        .field("closingElement", or(def("JSXClosingElement"), null), defaults["null"])
        .field("children", JSXChildren, defaults.emptyArray)
        .field("name", JSXElementName, function () {
        // Little-known fact: the `this` object inside a default function
        // is none other than the partially-built object itself, and any
        // fields initialized directly from builder function arguments
        // (like openingElement, closingElement, and children) are
        // guaranteed to be available.
        return this.openingElement.name;
    }, true) // hidden from traversal
        .field("selfClosing", Boolean, function () {
        return this.openingElement.selfClosing;
    }, true) // hidden from traversal
        .field("attributes", JSXAttributes, function () {
        return this.openingElement.attributes;
    }, true); // hidden from traversal
    def("JSXOpeningElement")
        .bases("Node")
        .build("name", "attributes", "selfClosing")
        .field("name", JSXElementName)
        .field("attributes", JSXAttributes, defaults.emptyArray)
        .field("selfClosing", Boolean, defaults["false"]);
    def("JSXClosingElement")
        .bases("Node")
        .build("name")
        .field("name", JSXElementName);
    def("JSXFragment")
        .bases("Expression")
        .build("openingFragment", "closingFragment", "children")
        .field("openingFragment", def("JSXOpeningFragment"))
        .field("closingFragment", def("JSXClosingFragment"))
        .field("children", JSXChildren, defaults.emptyArray);
    def("JSXOpeningFragment")
        .bases("Node")
        .build();
    def("JSXClosingFragment")
        .bases("Node")
        .build();
    def("JSXText")
        .bases("Literal")
        .build("value", "raw")
        .field("value", String)
        .field("raw", String, function () {
        return this.value;
    });
    def("JSXEmptyExpression")
        .bases("Node")
        .build();
    def("JSXSpreadChild")
        .bases("Node")
        .build("expression")
        .field("expression", def("Expression"));
}
exports["default"] = default_1;
;
(0, shared_1.maybeSetModuleExports)(function () { return module; });
//# sourceMappingURL=jsx.js.map

/***/ }),

/***/ 732:
/***/ ((module, exports, __nccwpck_require__) => {

/* module decorator */ module = __nccwpck_require__.nmd(module);

Object.defineProperty(exports, "__esModule", ({ value: true }));
var shared_1 = __nccwpck_require__(4456);
function default_1() {
    return {
        BinaryOperators: [
            "==", "!=", "===", "!==",
            "<", "<=", ">", ">=",
            "<<", ">>", ">>>",
            "+", "-", "*", "/", "%",
            "&",
            "|", "^", "in",
            "instanceof",
        ],
        AssignmentOperators: [
            "=", "+=", "-=", "*=", "/=", "%=",
            "<<=", ">>=", ">>>=",
            "|=", "^=", "&=",
        ],
        LogicalOperators: [
            "||", "&&",
        ],
    };
}
exports["default"] = default_1;
(0, shared_1.maybeSetModuleExports)(function () { return module; });
//# sourceMappingURL=core.js.map

/***/ }),

/***/ 5054:
/***/ ((module, exports, __nccwpck_require__) => {

/* module decorator */ module = __nccwpck_require__.nmd(module);

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __nccwpck_require__(204);
var shared_1 = __nccwpck_require__(4456);
var core_1 = tslib_1.__importDefault(__nccwpck_require__(732));
function default_1(fork) {
    var result = fork.use(core_1.default);
    // Exponentiation operators. Must run before BinaryOperators or
    // AssignmentOperators are used (hence before fork.use(es6Def)).
    // https://github.com/tc39/proposal-exponentiation-operator
    if (result.BinaryOperators.indexOf("**") < 0) {
        result.BinaryOperators.push("**");
    }
    if (result.AssignmentOperators.indexOf("**=") < 0) {
        result.AssignmentOperators.push("**=");
    }
    return result;
}
exports["default"] = default_1;
(0, shared_1.maybeSetModuleExports)(function () { return module; });
//# sourceMappingURL=es2016.js.map

/***/ }),

/***/ 4782:
/***/ ((module, exports, __nccwpck_require__) => {

/* module decorator */ module = __nccwpck_require__.nmd(module);

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __nccwpck_require__(204);
var shared_1 = __nccwpck_require__(4456);
var es2016_1 = tslib_1.__importDefault(__nccwpck_require__(5054));
function default_1(fork) {
    var result = fork.use(es2016_1.default);
    // Nullish coalescing. Must run before LogicalOperators is used.
    // https://github.com/tc39/proposal-nullish-coalescing
    if (result.LogicalOperators.indexOf("??") < 0) {
        result.LogicalOperators.push("??");
    }
    return result;
}
exports["default"] = default_1;
(0, shared_1.maybeSetModuleExports)(function () { return module; });
//# sourceMappingURL=es2020.js.map

/***/ }),

/***/ 9126:
/***/ ((module, exports, __nccwpck_require__) => {

/* module decorator */ module = __nccwpck_require__.nmd(module);

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __nccwpck_require__(204);
var shared_1 = __nccwpck_require__(4456);
var es2020_1 = tslib_1.__importDefault(__nccwpck_require__(4782));
function default_1(fork) {
    var result = fork.use(es2020_1.default);
    // Logical assignment operators. Must run before AssignmentOperators is used.
    // https://github.com/tc39/proposal-logical-assignment
    result.LogicalOperators.forEach(function (op) {
        var assignOp = op + "=";
        if (result.AssignmentOperators.indexOf(assignOp) < 0) {
            result.AssignmentOperators.push(assignOp);
        }
    });
    return result;
}
exports["default"] = default_1;
(0, shared_1.maybeSetModuleExports)(function () { return module; });
//# sourceMappingURL=es2021.js.map

/***/ }),

/***/ 6641:
/***/ ((module, exports, __nccwpck_require__) => {

/* module decorator */ module = __nccwpck_require__.nmd(module);

/**
 * Type annotation defs shared between Flow and TypeScript.
 * These defs could not be defined in ./flow.ts or ./typescript.ts directly
 * because they use the same name.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __nccwpck_require__(204);
var types_1 = tslib_1.__importDefault(__nccwpck_require__(1018));
var shared_1 = tslib_1.__importStar(__nccwpck_require__(4456));
function default_1(fork) {
    var types = fork.use(types_1.default);
    var def = types.Type.def;
    var or = types.Type.or;
    var defaults = fork.use(shared_1.default).defaults;
    var TypeAnnotation = or(def("TypeAnnotation"), def("TSTypeAnnotation"), null);
    var TypeParamDecl = or(def("TypeParameterDeclaration"), def("TSTypeParameterDeclaration"), null);
    def("Identifier")
        .field("typeAnnotation", TypeAnnotation, defaults["null"]);
    def("ObjectPattern")
        .field("typeAnnotation", TypeAnnotation, defaults["null"]);
    def("Function")
        .field("returnType", TypeAnnotation, defaults["null"])
        .field("typeParameters", TypeParamDecl, defaults["null"]);
    def("ClassProperty")
        .build("key", "value", "typeAnnotation", "static")
        .field("value", or(def("Expression"), null))
        .field("static", Boolean, defaults["false"])
        .field("typeAnnotation", TypeAnnotation, defaults["null"]);
    ["ClassDeclaration",
        "ClassExpression",
    ].forEach(function (typeName) {
        def(typeName)
            .field("typeParameters", TypeParamDecl, defaults["null"])
            .field("superTypeParameters", or(def("TypeParameterInstantiation"), def("TSTypeParameterInstantiation"), null), defaults["null"])
            .field("implements", or([def("ClassImplements")], [def("TSExpressionWithTypeArguments")]), defaults.emptyArray);
    });
}
exports["default"] = default_1;
;
(0, shared_1.maybeSetModuleExports)(function () { return module; });
//# sourceMappingURL=type-annotations.js.map

/***/ }),

/***/ 78:
/***/ ((module, exports, __nccwpck_require__) => {

/* module decorator */ module = __nccwpck_require__.nmd(module);

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __nccwpck_require__(204);
var babel_core_1 = tslib_1.__importDefault(__nccwpck_require__(8751));
var type_annotations_1 = tslib_1.__importDefault(__nccwpck_require__(6641));
var types_1 = tslib_1.__importDefault(__nccwpck_require__(1018));
var shared_1 = tslib_1.__importStar(__nccwpck_require__(4456));
function default_1(fork) {
    // Since TypeScript is parsed by Babylon, include the core Babylon types
    // but omit the Flow-related types.
    fork.use(babel_core_1.default);
    fork.use(type_annotations_1.default);
    var types = fork.use(types_1.default);
    var n = types.namedTypes;
    var def = types.Type.def;
    var or = types.Type.or;
    var defaults = fork.use(shared_1.default).defaults;
    var StringLiteral = types.Type.from(function (value, deep) {
        if (n.StringLiteral &&
            n.StringLiteral.check(value, deep)) {
            return true;
        }
        if (n.Literal &&
            n.Literal.check(value, deep) &&
            typeof value.value === "string") {
            return true;
        }
        return false;
    }, "StringLiteral");
    def("TSType")
        .bases("Node");
    var TSEntityName = or(def("Identifier"), def("TSQualifiedName"));
    def("TSTypeReference")
        .bases("TSType", "TSHasOptionalTypeParameterInstantiation")
        .build("typeName", "typeParameters")
        .field("typeName", TSEntityName);
    // An abstract (non-buildable) base type that provide a commonly-needed
    // optional .typeParameters field.
    def("TSHasOptionalTypeParameterInstantiation")
        .field("typeParameters", or(def("TSTypeParameterInstantiation"), null), defaults["null"]);
    // An abstract (non-buildable) base type that provide a commonly-needed
    // optional .typeParameters field.
    def("TSHasOptionalTypeParameters")
        .field("typeParameters", or(def("TSTypeParameterDeclaration"), null, void 0), defaults["null"]);
    // An abstract (non-buildable) base type that provide a commonly-needed
    // optional .typeAnnotation field.
    def("TSHasOptionalTypeAnnotation")
        .field("typeAnnotation", or(def("TSTypeAnnotation"), null), defaults["null"]);
    def("TSQualifiedName")
        .bases("Node")
        .build("left", "right")
        .field("left", TSEntityName)
        .field("right", TSEntityName);
    def("TSAsExpression")
        .bases("Expression", "Pattern")
        .build("expression", "typeAnnotation")
        .field("expression", def("Expression"))
        .field("typeAnnotation", def("TSType"))
        .field("extra", or({ parenthesized: Boolean }, null), defaults["null"]);
    def("TSTypeCastExpression")
        .bases("Expression")
        .build("expression", "typeAnnotation")
        .field("expression", def("Expression"))
        .field("typeAnnotation", def("TSType"));
    def("TSSatisfiesExpression")
        .bases("Expression", "Pattern")
        .build("expression", "typeAnnotation")
        .field("expression", def("Expression"))
        .field("typeAnnotation", def("TSType"));
    def("TSNonNullExpression")
        .bases("Expression", "Pattern")
        .build("expression")
        .field("expression", def("Expression"));
    [
        "TSAnyKeyword",
        "TSBigIntKeyword",
        "TSBooleanKeyword",
        "TSNeverKeyword",
        "TSNullKeyword",
        "TSNumberKeyword",
        "TSObjectKeyword",
        "TSStringKeyword",
        "TSSymbolKeyword",
        "TSUndefinedKeyword",
        "TSUnknownKeyword",
        "TSVoidKeyword",
        "TSIntrinsicKeyword",
        "TSThisType",
    ].forEach(function (keywordType) {
        def(keywordType)
            .bases("TSType")
            .build();
    });
    def("TSArrayType")
        .bases("TSType")
        .build("elementType")
        .field("elementType", def("TSType"));
    def("TSLiteralType")
        .bases("TSType")
        .build("literal")
        .field("literal", or(def("NumericLiteral"), def("StringLiteral"), def("BooleanLiteral"), def("TemplateLiteral"), def("UnaryExpression"), def("BigIntLiteral")));
    def("TemplateLiteral")
        // The TemplateLiteral type appears to be reused for TypeScript template
        // literal types (instead of introducing a new TSTemplateLiteralType type),
        // so we allow the templateLiteral.expressions array to be either all
        // expressions or all TypeScript types.
        .field("expressions", or([def("Expression")], [def("TSType")]));
    ["TSUnionType",
        "TSIntersectionType",
    ].forEach(function (typeName) {
        def(typeName)
            .bases("TSType")
            .build("types")
            .field("types", [def("TSType")]);
    });
    def("TSConditionalType")
        .bases("TSType")
        .build("checkType", "extendsType", "trueType", "falseType")
        .field("checkType", def("TSType"))
        .field("extendsType", def("TSType"))
        .field("trueType", def("TSType"))
        .field("falseType", def("TSType"));
    def("TSInferType")
        .bases("TSType")
        .build("typeParameter")
        .field("typeParameter", def("TSTypeParameter"));
    def("TSParenthesizedType")
        .bases("TSType")
        .build("typeAnnotation")
        .field("typeAnnotation", def("TSType"));
    var ParametersType = [or(def("Identifier"), def("RestElement"), def("ArrayPattern"), def("ObjectPattern"))];
    ["TSFunctionType",
        "TSConstructorType",
    ].forEach(function (typeName) {
        def(typeName)
            .bases("TSType", "TSHasOptionalTypeParameters", "TSHasOptionalTypeAnnotation")
            .build("parameters")
            .field("parameters", ParametersType);
    });
    def("TSDeclareFunction")
        .bases("Declaration", "TSHasOptionalTypeParameters")
        .build("id", "params", "returnType")
        .field("declare", Boolean, defaults["false"])
        .field("async", Boolean, defaults["false"])
        .field("generator", Boolean, defaults["false"])
        .field("id", or(def("Identifier"), null), defaults["null"])
        .field("params", [def("Pattern")])
        // tSFunctionTypeAnnotationCommon
        .field("returnType", or(def("TSTypeAnnotation"), def("Noop"), // Still used?
    null), defaults["null"]);
    def("TSDeclareMethod")
        .bases("Declaration", "TSHasOptionalTypeParameters")
        .build("key", "params", "returnType")
        .field("async", Boolean, defaults["false"])
        .field("generator", Boolean, defaults["false"])
        .field("params", [def("Pattern")])
        // classMethodOrPropertyCommon
        .field("abstract", Boolean, defaults["false"])
        .field("accessibility", or("public", "private", "protected", void 0), defaults["undefined"])
        .field("static", Boolean, defaults["false"])
        .field("computed", Boolean, defaults["false"])
        .field("optional", Boolean, defaults["false"])
        .field("key", or(def("Identifier"), def("StringLiteral"), def("NumericLiteral"), 
    // Only allowed if .computed is true.
    def("Expression")))
        // classMethodOrDeclareMethodCommon
        .field("kind", or("get", "set", "method", "constructor"), function getDefault() { return "method"; })
        .field("access", // Not "accessibility"?
    or("public", "private", "protected", void 0), defaults["undefined"])
        .field("decorators", or([def("Decorator")], null), defaults["null"])
        // tSFunctionTypeAnnotationCommon
        .field("returnType", or(def("TSTypeAnnotation"), def("Noop"), // Still used?
    null), defaults["null"]);
    def("TSMappedType")
        .bases("TSType")
        .build("typeParameter", "typeAnnotation")
        .field("readonly", or(Boolean, "+", "-"), defaults["false"])
        .field("typeParameter", def("TSTypeParameter"))
        .field("optional", or(Boolean, "+", "-"), defaults["false"])
        .field("typeAnnotation", or(def("TSType"), null), defaults["null"]);
    def("TSTupleType")
        .bases("TSType")
        .build("elementTypes")
        .field("elementTypes", [or(def("TSType"), def("TSNamedTupleMember"))]);
    def("TSNamedTupleMember")
        .bases("TSType")
        .build("label", "elementType", "optional")
        .field("label", def("Identifier"))
        .field("optional", Boolean, defaults["false"])
        .field("elementType", def("TSType"));
    def("TSRestType")
        .bases("TSType")
        .build("typeAnnotation")
        .field("typeAnnotation", def("TSType"));
    def("TSOptionalType")
        .bases("TSType")
        .build("typeAnnotation")
        .field("typeAnnotation", def("TSType"));
    def("TSIndexedAccessType")
        .bases("TSType")
        .build("objectType", "indexType")
        .field("objectType", def("TSType"))
        .field("indexType", def("TSType"));
    def("TSTypeOperator")
        .bases("TSType")
        .build("operator")
        .field("operator", String)
        .field("typeAnnotation", def("TSType"));
    def("TSTypeAnnotation")
        .bases("Node")
        .build("typeAnnotation")
        .field("typeAnnotation", or(def("TSType"), def("TSTypeAnnotation")));
    def("TSIndexSignature")
        .bases("Declaration", "TSHasOptionalTypeAnnotation")
        .build("parameters", "typeAnnotation")
        .field("parameters", [def("Identifier")]) // Length === 1
        .field("readonly", Boolean, defaults["false"]);
    def("TSPropertySignature")
        .bases("Declaration", "TSHasOptionalTypeAnnotation")
        .build("key", "typeAnnotation", "optional")
        .field("key", def("Expression"))
        .field("computed", Boolean, defaults["false"])
        .field("readonly", Boolean, defaults["false"])
        .field("optional", Boolean, defaults["false"])
        .field("initializer", or(def("Expression"), null), defaults["null"]);
    def("TSMethodSignature")
        .bases("Declaration", "TSHasOptionalTypeParameters", "TSHasOptionalTypeAnnotation")
        .build("key", "parameters", "typeAnnotation")
        .field("key", def("Expression"))
        .field("computed", Boolean, defaults["false"])
        .field("optional", Boolean, defaults["false"])
        .field("parameters", ParametersType);
    def("TSTypePredicate")
        .bases("TSTypeAnnotation", "TSType")
        .build("parameterName", "typeAnnotation", "asserts")
        .field("parameterName", or(def("Identifier"), def("TSThisType")))
        .field("typeAnnotation", or(def("TSTypeAnnotation"), null), defaults["null"])
        .field("asserts", Boolean, defaults["false"]);
    ["TSCallSignatureDeclaration",
        "TSConstructSignatureDeclaration",
    ].forEach(function (typeName) {
        def(typeName)
            .bases("Declaration", "TSHasOptionalTypeParameters", "TSHasOptionalTypeAnnotation")
            .build("parameters", "typeAnnotation")
            .field("parameters", ParametersType);
    });
    def("TSEnumMember")
        .bases("Node")
        .build("id", "initializer")
        .field("id", or(def("Identifier"), StringLiteral))
        .field("initializer", or(def("Expression"), null), defaults["null"]);
    def("TSTypeQuery")
        .bases("TSType")
        .build("exprName")
        .field("exprName", or(TSEntityName, def("TSImportType")));
    // Inferred from Babylon's tsParseTypeMember method.
    var TSTypeMember = or(def("TSCallSignatureDeclaration"), def("TSConstructSignatureDeclaration"), def("TSIndexSignature"), def("TSMethodSignature"), def("TSPropertySignature"));
    def("TSTypeLiteral")
        .bases("TSType")
        .build("members")
        .field("members", [TSTypeMember]);
    def("TSTypeParameter")
        .bases("Identifier")
        .build("name", "constraint", "default")
        .field("name", or(def("Identifier"), String))
        .field("constraint", or(def("TSType"), void 0), defaults["undefined"])
        .field("default", or(def("TSType"), void 0), defaults["undefined"]);
    def("TSTypeAssertion")
        .bases("Expression", "Pattern")
        .build("typeAnnotation", "expression")
        .field("typeAnnotation", def("TSType"))
        .field("expression", def("Expression"))
        .field("extra", or({ parenthesized: Boolean }, null), defaults["null"]);
    def("TSTypeParameterDeclaration")
        .bases("Declaration")
        .build("params")
        .field("params", [def("TSTypeParameter")]);
    def("TSInstantiationExpression")
        .bases("Expression", "TSHasOptionalTypeParameterInstantiation")
        .build("expression", "typeParameters")
        .field("expression", def("Expression"));
    def("TSTypeParameterInstantiation")
        .bases("Node")
        .build("params")
        .field("params", [def("TSType")]);
    def("TSEnumDeclaration")
        .bases("Declaration")
        .build("id", "members")
        .field("id", def("Identifier"))
        .field("const", Boolean, defaults["false"])
        .field("declare", Boolean, defaults["false"])
        .field("members", [def("TSEnumMember")])
        .field("initializer", or(def("Expression"), null), defaults["null"]);
    def("TSTypeAliasDeclaration")
        .bases("Declaration", "TSHasOptionalTypeParameters")
        .build("id", "typeAnnotation")
        .field("id", def("Identifier"))
        .field("declare", Boolean, defaults["false"])
        .field("typeAnnotation", def("TSType"));
    def("TSModuleBlock")
        .bases("Node")
        .build("body")
        .field("body", [def("Statement")]);
    def("TSModuleDeclaration")
        .bases("Declaration")
        .build("id", "body")
        .field("id", or(StringLiteral, TSEntityName))
        .field("declare", Boolean, defaults["false"])
        .field("global", Boolean, defaults["false"])
        .field("body", or(def("TSModuleBlock"), def("TSModuleDeclaration"), null), defaults["null"]);
    def("TSImportType")
        .bases("TSType", "TSHasOptionalTypeParameterInstantiation")
        .build("argument", "qualifier", "typeParameters")
        .field("argument", StringLiteral)
        .field("qualifier", or(TSEntityName, void 0), defaults["undefined"]);
    def("TSImportEqualsDeclaration")
        .bases("Declaration")
        .build("id", "moduleReference")
        .field("id", def("Identifier"))
        .field("isExport", Boolean, defaults["false"])
        .field("moduleReference", or(TSEntityName, def("TSExternalModuleReference")));
    def("TSExternalModuleReference")
        .bases("Declaration")
        .build("expression")
        .field("expression", StringLiteral);
    def("TSExportAssignment")
        .bases("Statement")
        .build("expression")
        .field("expression", def("Expression"));
    def("TSNamespaceExportDeclaration")
        .bases("Declaration")
        .build("id")
        .field("id", def("Identifier"));
    def("TSInterfaceBody")
        .bases("Node")
        .build("body")
        .field("body", [TSTypeMember]);
    def("TSExpressionWithTypeArguments")
        .bases("TSType", "TSHasOptionalTypeParameterInstantiation")
        .build("expression", "typeParameters")
        .field("expression", TSEntityName);
    def("TSInterfaceDeclaration")
        .bases("Declaration", "TSHasOptionalTypeParameters")
        .build("id", "body")
        .field("id", TSEntityName)
        .field("declare", Boolean, defaults["false"])
        .field("extends", or([def("TSExpressionWithTypeArguments")], null), defaults["null"])
        .field("body", def("TSInterfaceBody"));
    def("TSParameterProperty")
        .bases("Pattern")
        .build("parameter")
        .field("accessibility", or("public", "private", "protected", void 0), defaults["undefined"])
        .field("readonly", Boolean, defaults["false"])
        .field("parameter", or(def("Identifier"), def("AssignmentPattern")));
    def("ClassProperty")
        .field("access", // Not "accessibility"?
    or("public", "private", "protected", void 0), defaults["undefined"]);
    def("ClassAccessorProperty")
        .bases("Declaration", "TSHasOptionalTypeAnnotation");
    // Defined already in es6 and babel-core.
    def("ClassBody")
        .field("body", [or(def("MethodDefinition"), def("VariableDeclarator"), def("ClassPropertyDefinition"), def("ClassProperty"), def("ClassPrivateProperty"), def("ClassAccessorProperty"), def("ClassMethod"), def("ClassPrivateMethod"), def("StaticBlock"), 
        // Just need to add these types:
        def("TSDeclareMethod"), TSTypeMember)]);
}
exports["default"] = default_1;
;
(0, shared_1.maybeSetModuleExports)(function () { return module; });
//# sourceMappingURL=typescript.js.map

/***/ }),

/***/ 3909:
/***/ ((module, exports, __nccwpck_require__) => {

/* module decorator */ module = __nccwpck_require__.nmd(module);

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __nccwpck_require__(204);
var shared_1 = __nccwpck_require__(4456);
var types_1 = tslib_1.__importDefault(__nccwpck_require__(1018));
function default_1(fork) {
    var types = fork.use(types_1.default);
    var getFieldNames = types.getFieldNames;
    var getFieldValue = types.getFieldValue;
    var isArray = types.builtInTypes.array;
    var isObject = types.builtInTypes.object;
    var isDate = types.builtInTypes.Date;
    var isRegExp = types.builtInTypes.RegExp;
    var hasOwn = Object.prototype.hasOwnProperty;
    function astNodesAreEquivalent(a, b, problemPath) {
        if (isArray.check(problemPath)) {
            problemPath.length = 0;
        }
        else {
            problemPath = null;
        }
        return areEquivalent(a, b, problemPath);
    }
    astNodesAreEquivalent.assert = function (a, b) {
        var problemPath = [];
        if (!astNodesAreEquivalent(a, b, problemPath)) {
            if (problemPath.length === 0) {
                if (a !== b) {
                    throw new Error("Nodes must be equal");
                }
            }
            else {
                throw new Error("Nodes differ in the following path: " +
                    problemPath.map(subscriptForProperty).join(""));
            }
        }
    };
    function subscriptForProperty(property) {
        if (/[_$a-z][_$a-z0-9]*/i.test(property)) {
            return "." + property;
        }
        return "[" + JSON.stringify(property) + "]";
    }
    function areEquivalent(a, b, problemPath) {
        if (a === b) {
            return true;
        }
        if (isArray.check(a)) {
            return arraysAreEquivalent(a, b, problemPath);
        }
        if (isObject.check(a)) {
            return objectsAreEquivalent(a, b, problemPath);
        }
        if (isDate.check(a)) {
            return isDate.check(b) && (+a === +b);
        }
        if (isRegExp.check(a)) {
            return isRegExp.check(b) && (a.source === b.source &&
                a.global === b.global &&
                a.multiline === b.multiline &&
                a.ignoreCase === b.ignoreCase);
        }
        return a == b;
    }
    function arraysAreEquivalent(a, b, problemPath) {
        isArray.assert(a);
        var aLength = a.length;
        if (!isArray.check(b) || b.length !== aLength) {
            if (problemPath) {
                problemPath.push("length");
            }
            return false;
        }
        for (var i = 0; i < aLength; ++i) {
            if (problemPath) {
                problemPath.push(i);
            }
            if (i in a !== i in b) {
                return false;
            }
            if (!areEquivalent(a[i], b[i], problemPath)) {
                return false;
            }
            if (problemPath) {
                var problemPathTail = problemPath.pop();
                if (problemPathTail !== i) {
                    throw new Error("" + problemPathTail);
                }
            }
        }
        return true;
    }
    function objectsAreEquivalent(a, b, problemPath) {
        isObject.assert(a);
        if (!isObject.check(b)) {
            return false;
        }
        // Fast path for a common property of AST nodes.
        if (a.type !== b.type) {
            if (problemPath) {
                problemPath.push("type");
            }
            return false;
        }
        var aNames = getFieldNames(a);
        var aNameCount = aNames.length;
        var bNames = getFieldNames(b);
        var bNameCount = bNames.length;
        if (aNameCount === bNameCount) {
            for (var i = 0; i < aNameCount; ++i) {
                var name = aNames[i];
                var aChild = getFieldValue(a, name);
                var bChild = getFieldValue(b, name);
                if (problemPath) {
                    problemPath.push(name);
                }
                if (!areEquivalent(aChild, bChild, problemPath)) {
                    return false;
                }
                if (problemPath) {
                    var problemPathTail = problemPath.pop();
                    if (problemPathTail !== name) {
                        throw new Error("" + problemPathTail);
                    }
                }
            }
            return true;
        }
        if (!problemPath) {
            return false;
        }
        // Since aNameCount !== bNameCount, we need to find some name that's
        // missing in aNames but present in bNames, or vice-versa.
        var seenNames = Object.create(null);
        for (i = 0; i < aNameCount; ++i) {
            seenNames[aNames[i]] = true;
        }
        for (i = 0; i < bNameCount; ++i) {
            name = bNames[i];
            if (!hasOwn.call(seenNames, name)) {
                problemPath.push(name);
                return false;
            }
            delete seenNames[name];
        }
        for (name in seenNames) {
            problemPath.push(name);
            break;
        }
        return false;
    }
    return astNodesAreEquivalent;
}
exports["default"] = default_1;
;
(0, shared_1.maybeSetModuleExports)(function () { return module; });
//# sourceMappingURL=equiv.js.map

/***/ }),

/***/ 7754:
/***/ ((module, exports, __nccwpck_require__) => {

/* module decorator */ module = __nccwpck_require__.nmd(module);

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __nccwpck_require__(204);
var types_1 = tslib_1.__importDefault(__nccwpck_require__(1018));
var path_visitor_1 = tslib_1.__importDefault(__nccwpck_require__(7136));
var equiv_1 = tslib_1.__importDefault(__nccwpck_require__(3909));
var path_1 = tslib_1.__importDefault(__nccwpck_require__(1587));
var node_path_1 = tslib_1.__importDefault(__nccwpck_require__(8238));
var shared_1 = __nccwpck_require__(4456);
function default_1(plugins) {
    var fork = createFork();
    var types = fork.use(types_1.default);
    plugins.forEach(fork.use);
    types.finalize();
    var PathVisitor = fork.use(path_visitor_1.default);
    return {
        Type: types.Type,
        builtInTypes: types.builtInTypes,
        namedTypes: types.namedTypes,
        builders: types.builders,
        defineMethod: types.defineMethod,
        getFieldNames: types.getFieldNames,
        getFieldValue: types.getFieldValue,
        eachField: types.eachField,
        someField: types.someField,
        getSupertypeNames: types.getSupertypeNames,
        getBuilderName: types.getBuilderName,
        astNodesAreEquivalent: fork.use(equiv_1.default),
        finalize: types.finalize,
        Path: fork.use(path_1.default),
        NodePath: fork.use(node_path_1.default),
        PathVisitor: PathVisitor,
        use: fork.use,
        visit: PathVisitor.visit,
    };
}
exports["default"] = default_1;
;
function createFork() {
    var used = [];
    var usedResult = [];
    function use(plugin) {
        var idx = used.indexOf(plugin);
        if (idx === -1) {
            idx = used.length;
            used.push(plugin);
            usedResult[idx] = plugin(fork);
        }
        return usedResult[idx];
    }
    var fork = { use: use };
    return fork;
}
(0, shared_1.maybeSetModuleExports)(function () { return module; });
//# sourceMappingURL=fork.js.map

/***/ }),

/***/ 2098:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.namedTypes = void 0;
var namedTypes;
(function (namedTypes) {
})(namedTypes = exports.namedTypes || (exports.namedTypes = {}));
//# sourceMappingURL=namedTypes.js.map

/***/ }),

/***/ 6587:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.visit = exports.use = exports.Type = exports.someField = exports.PathVisitor = exports.Path = exports.NodePath = exports.namedTypes = exports.getSupertypeNames = exports.getFieldValue = exports.getFieldNames = exports.getBuilderName = exports.finalize = exports.eachField = exports.defineMethod = exports.builtInTypes = exports.builders = exports.astNodesAreEquivalent = void 0;
var tslib_1 = __nccwpck_require__(204);
var fork_1 = tslib_1.__importDefault(__nccwpck_require__(7754));
var es_proposals_1 = tslib_1.__importDefault(__nccwpck_require__(3676));
var jsx_1 = tslib_1.__importDefault(__nccwpck_require__(2557));
var flow_1 = tslib_1.__importDefault(__nccwpck_require__(4110));
var esprima_1 = tslib_1.__importDefault(__nccwpck_require__(8797));
var babel_1 = tslib_1.__importDefault(__nccwpck_require__(2794));
var typescript_1 = tslib_1.__importDefault(__nccwpck_require__(78));
var namedTypes_1 = __nccwpck_require__(2098);
Object.defineProperty(exports, "namedTypes", ({ enumerable: true, get: function () { return namedTypes_1.namedTypes; } }));
var _a = (0, fork_1.default)([
    // Feel free to add to or remove from this list of extension modules to
    // configure the precise type hierarchy that you need.
    es_proposals_1.default,
    jsx_1.default,
    flow_1.default,
    esprima_1.default,
    babel_1.default,
    typescript_1.default,
]), astNodesAreEquivalent = _a.astNodesAreEquivalent, builders = _a.builders, builtInTypes = _a.builtInTypes, defineMethod = _a.defineMethod, eachField = _a.eachField, finalize = _a.finalize, getBuilderName = _a.getBuilderName, getFieldNames = _a.getFieldNames, getFieldValue = _a.getFieldValue, getSupertypeNames = _a.getSupertypeNames, n = _a.namedTypes, NodePath = _a.NodePath, Path = _a.Path, PathVisitor = _a.PathVisitor, someField = _a.someField, Type = _a.Type, use = _a.use, visit = _a.visit;
exports.astNodesAreEquivalent = astNodesAreEquivalent;
exports.builders = builders;
exports.builtInTypes = builtInTypes;
exports.defineMethod = defineMethod;
exports.eachField = eachField;
exports.finalize = finalize;
exports.getBuilderName = getBuilderName;
exports.getFieldNames = getFieldNames;
exports.getFieldValue = getFieldValue;
exports.getSupertypeNames = getSupertypeNames;
exports.NodePath = NodePath;
exports.Path = Path;
exports.PathVisitor = PathVisitor;
exports.someField = someField;
exports.Type = Type;
exports.use = use;
exports.visit = visit;
// Populate the exported fields of the namedTypes namespace, while still
// retaining its member types.
Object.assign(namedTypes_1.namedTypes, n);
//# sourceMappingURL=main.js.map

/***/ }),

/***/ 8238:
/***/ ((module, exports, __nccwpck_require__) => {

/* module decorator */ module = __nccwpck_require__.nmd(module);

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __nccwpck_require__(204);
var types_1 = tslib_1.__importDefault(__nccwpck_require__(1018));
var path_1 = tslib_1.__importDefault(__nccwpck_require__(1587));
var scope_1 = tslib_1.__importDefault(__nccwpck_require__(3166));
var shared_1 = __nccwpck_require__(4456);
function nodePathPlugin(fork) {
    var types = fork.use(types_1.default);
    var n = types.namedTypes;
    var b = types.builders;
    var isNumber = types.builtInTypes.number;
    var isArray = types.builtInTypes.array;
    var Path = fork.use(path_1.default);
    var Scope = fork.use(scope_1.default);
    var NodePath = function NodePath(value, parentPath, name) {
        if (!(this instanceof NodePath)) {
            throw new Error("NodePath constructor cannot be invoked without 'new'");
        }
        Path.call(this, value, parentPath, name);
    };
    var NPp = NodePath.prototype = Object.create(Path.prototype, {
        constructor: {
            value: NodePath,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    Object.defineProperties(NPp, {
        node: {
            get: function () {
                Object.defineProperty(this, "node", {
                    configurable: true,
                    value: this._computeNode()
                });
                return this.node;
            }
        },
        parent: {
            get: function () {
                Object.defineProperty(this, "parent", {
                    configurable: true,
                    value: this._computeParent()
                });
                return this.parent;
            }
        },
        scope: {
            get: function () {
                Object.defineProperty(this, "scope", {
                    configurable: true,
                    value: this._computeScope()
                });
                return this.scope;
            }
        }
    });
    NPp.replace = function () {
        delete this.node;
        delete this.parent;
        delete this.scope;
        return Path.prototype.replace.apply(this, arguments);
    };
    NPp.prune = function () {
        var remainingNodePath = this.parent;
        this.replace();
        return cleanUpNodesAfterPrune(remainingNodePath);
    };
    // The value of the first ancestor Path whose value is a Node.
    NPp._computeNode = function () {
        var value = this.value;
        if (n.Node.check(value)) {
            return value;
        }
        var pp = this.parentPath;
        return pp && pp.node || null;
    };
    // The first ancestor Path whose value is a Node distinct from this.node.
    NPp._computeParent = function () {
        var value = this.value;
        var pp = this.parentPath;
        if (!n.Node.check(value)) {
            while (pp && !n.Node.check(pp.value)) {
                pp = pp.parentPath;
            }
            if (pp) {
                pp = pp.parentPath;
            }
        }
        while (pp && !n.Node.check(pp.value)) {
            pp = pp.parentPath;
        }
        return pp || null;
    };
    // The closest enclosing scope that governs this node.
    NPp._computeScope = function () {
        var value = this.value;
        var pp = this.parentPath;
        var scope = pp && pp.scope;
        if (n.Node.check(value) &&
            Scope.isEstablishedBy(value)) {
            scope = new Scope(this, scope);
        }
        return scope || null;
    };
    NPp.getValueProperty = function (name) {
        return types.getFieldValue(this.value, name);
    };
    /**
     * Determine whether this.node needs to be wrapped in parentheses in order
     * for a parser to reproduce the same local AST structure.
     *
     * For instance, in the expression `(1 + 2) * 3`, the BinaryExpression
     * whose operator is "+" needs parentheses, because `1 + 2 * 3` would
     * parse differently.
     *
     * If assumeExpressionContext === true, we don't worry about edge cases
     * like an anonymous FunctionExpression appearing lexically first in its
     * enclosing statement and thus needing parentheses to avoid being parsed
     * as a FunctionDeclaration with a missing name.
     */
    NPp.needsParens = function (assumeExpressionContext) {
        var pp = this.parentPath;
        if (!pp) {
            return false;
        }
        var node = this.value;
        // Only expressions need parentheses.
        if (!n.Expression.check(node)) {
            return false;
        }
        // Identifiers never need parentheses.
        if (node.type === "Identifier") {
            return false;
        }
        while (!n.Node.check(pp.value)) {
            pp = pp.parentPath;
            if (!pp) {
                return false;
            }
        }
        var parent = pp.value;
        switch (node.type) {
            case "UnaryExpression":
            case "SpreadElement":
            case "SpreadProperty":
                return parent.type === "MemberExpression"
                    && this.name === "object"
                    && parent.object === node;
            case "BinaryExpression":
            case "LogicalExpression":
                switch (parent.type) {
                    case "CallExpression":
                        return this.name === "callee"
                            && parent.callee === node;
                    case "UnaryExpression":
                    case "SpreadElement":
                    case "SpreadProperty":
                        return true;
                    case "MemberExpression":
                        return this.name === "object"
                            && parent.object === node;
                    case "BinaryExpression":
                    case "LogicalExpression": {
                        var n_1 = node;
                        var po = parent.operator;
                        var pp_1 = PRECEDENCE[po];
                        var no = n_1.operator;
                        var np = PRECEDENCE[no];
                        if (pp_1 > np) {
                            return true;
                        }
                        if (pp_1 === np && this.name === "right") {
                            if (parent.right !== n_1) {
                                throw new Error("Nodes must be equal");
                            }
                            return true;
                        }
                    }
                    default:
                        return false;
                }
            case "SequenceExpression":
                switch (parent.type) {
                    case "ForStatement":
                        // Although parentheses wouldn't hurt around sequence
                        // expressions in the head of for loops, traditional style
                        // dictates that e.g. i++, j++ should not be wrapped with
                        // parentheses.
                        return false;
                    case "ExpressionStatement":
                        return this.name !== "expression";
                    default:
                        // Otherwise err on the side of overparenthesization, adding
                        // explicit exceptions above if this proves overzealous.
                        return true;
                }
            case "YieldExpression":
                switch (parent.type) {
                    case "BinaryExpression":
                    case "LogicalExpression":
                    case "UnaryExpression":
                    case "SpreadElement":
                    case "SpreadProperty":
                    case "CallExpression":
                    case "MemberExpression":
                    case "NewExpression":
                    case "ConditionalExpression":
                    case "YieldExpression":
                        return true;
                    default:
                        return false;
                }
            case "Literal":
                return parent.type === "MemberExpression"
                    && isNumber.check(node.value)
                    && this.name === "object"
                    && parent.object === node;
            case "AssignmentExpression":
            case "ConditionalExpression":
                switch (parent.type) {
                    case "UnaryExpression":
                    case "SpreadElement":
                    case "SpreadProperty":
                    case "BinaryExpression":
                    case "LogicalExpression":
                        return true;
                    case "CallExpression":
                        return this.name === "callee"
                            && parent.callee === node;
                    case "ConditionalExpression":
                        return this.name === "test"
                            && parent.test === node;
                    case "MemberExpression":
                        return this.name === "object"
                            && parent.object === node;
                    default:
                        return false;
                }
            default:
                if (parent.type === "NewExpression" &&
                    this.name === "callee" &&
                    parent.callee === node) {
                    return containsCallExpression(node);
                }
        }
        if (assumeExpressionContext !== true &&
            !this.canBeFirstInStatement() &&
            this.firstInStatement())
            return true;
        return false;
    };
    function isBinary(node) {
        return n.BinaryExpression.check(node)
            || n.LogicalExpression.check(node);
    }
    // @ts-ignore 'isUnaryLike' is declared but its value is never read. [6133]
    function isUnaryLike(node) {
        return n.UnaryExpression.check(node)
            // I considered making SpreadElement and SpreadProperty subtypes
            // of UnaryExpression, but they're not really Expression nodes.
            || (n.SpreadElement && n.SpreadElement.check(node))
            || (n.SpreadProperty && n.SpreadProperty.check(node));
    }
    var PRECEDENCE = {};
    [["||"],
        ["&&"],
        ["|"],
        ["^"],
        ["&"],
        ["==", "===", "!=", "!=="],
        ["<", ">", "<=", ">=", "in", "instanceof"],
        [">>", "<<", ">>>"],
        ["+", "-"],
        ["*", "/", "%"]
    ].forEach(function (tier, i) {
        tier.forEach(function (op) {
            PRECEDENCE[op] = i;
        });
    });
    function containsCallExpression(node) {
        if (n.CallExpression.check(node)) {
            return true;
        }
        if (isArray.check(node)) {
            return node.some(containsCallExpression);
        }
        if (n.Node.check(node)) {
            return types.someField(node, function (_name, child) {
                return containsCallExpression(child);
            });
        }
        return false;
    }
    NPp.canBeFirstInStatement = function () {
        var node = this.node;
        return !n.FunctionExpression.check(node)
            && !n.ObjectExpression.check(node);
    };
    NPp.firstInStatement = function () {
        return firstInStatement(this);
    };
    function firstInStatement(path) {
        for (var node, parent; path.parent; path = path.parent) {
            node = path.node;
            parent = path.parent.node;
            if (n.BlockStatement.check(parent) &&
                path.parent.name === "body" &&
                path.name === 0) {
                if (parent.body[0] !== node) {
                    throw new Error("Nodes must be equal");
                }
                return true;
            }
            if (n.ExpressionStatement.check(parent) &&
                path.name === "expression") {
                if (parent.expression !== node) {
                    throw new Error("Nodes must be equal");
                }
                return true;
            }
            if (n.SequenceExpression.check(parent) &&
                path.parent.name === "expressions" &&
                path.name === 0) {
                if (parent.expressions[0] !== node) {
                    throw new Error("Nodes must be equal");
                }
                continue;
            }
            if (n.CallExpression.check(parent) &&
                path.name === "callee") {
                if (parent.callee !== node) {
                    throw new Error("Nodes must be equal");
                }
                continue;
            }
            if (n.MemberExpression.check(parent) &&
                path.name === "object") {
                if (parent.object !== node) {
                    throw new Error("Nodes must be equal");
                }
                continue;
            }
            if (n.ConditionalExpression.check(parent) &&
                path.name === "test") {
                if (parent.test !== node) {
                    throw new Error("Nodes must be equal");
                }
                continue;
            }
            if (isBinary(parent) &&
                path.name === "left") {
                if (parent.left !== node) {
                    throw new Error("Nodes must be equal");
                }
                continue;
            }
            if (n.UnaryExpression.check(parent) &&
                !parent.prefix &&
                path.name === "argument") {
                if (parent.argument !== node) {
                    throw new Error("Nodes must be equal");
                }
                continue;
            }
            return false;
        }
        return true;
    }
    /**
     * Pruning certain nodes will result in empty or incomplete nodes, here we clean those nodes up.
     */
    function cleanUpNodesAfterPrune(remainingNodePath) {
        if (n.VariableDeclaration.check(remainingNodePath.node)) {
            var declarations = remainingNodePath.get('declarations').value;
            if (!declarations || declarations.length === 0) {
                return remainingNodePath.prune();
            }
        }
        else if (n.ExpressionStatement.check(remainingNodePath.node)) {
            if (!remainingNodePath.get('expression').value) {
                return remainingNodePath.prune();
            }
        }
        else if (n.IfStatement.check(remainingNodePath.node)) {
            cleanUpIfStatementAfterPrune(remainingNodePath);
        }
        return remainingNodePath;
    }
    function cleanUpIfStatementAfterPrune(ifStatement) {
        var testExpression = ifStatement.get('test').value;
        var alternate = ifStatement.get('alternate').value;
        var consequent = ifStatement.get('consequent').value;
        if (!consequent && !alternate) {
            var testExpressionStatement = b.expressionStatement(testExpression);
            ifStatement.replace(testExpressionStatement);
        }
        else if (!consequent && alternate) {
            var negatedTestExpression = b.unaryExpression('!', testExpression, true);
            if (n.UnaryExpression.check(testExpression) && testExpression.operator === '!') {
                negatedTestExpression = testExpression.argument;
            }
            ifStatement.get("test").replace(negatedTestExpression);
            ifStatement.get("consequent").replace(alternate);
            ifStatement.get("alternate").replace();
        }
    }
    return NodePath;
}
exports["default"] = nodePathPlugin;
;
(0, shared_1.maybeSetModuleExports)(function () { return module; });
//# sourceMappingURL=node-path.js.map

/***/ }),

/***/ 7136:
/***/ ((module, exports, __nccwpck_require__) => {

/* module decorator */ module = __nccwpck_require__.nmd(module);

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __nccwpck_require__(204);
var types_1 = tslib_1.__importDefault(__nccwpck_require__(1018));
var node_path_1 = tslib_1.__importDefault(__nccwpck_require__(8238));
var shared_1 = __nccwpck_require__(4456);
var hasOwn = Object.prototype.hasOwnProperty;
function pathVisitorPlugin(fork) {
    var types = fork.use(types_1.default);
    var NodePath = fork.use(node_path_1.default);
    var isArray = types.builtInTypes.array;
    var isObject = types.builtInTypes.object;
    var isFunction = types.builtInTypes.function;
    var undefined;
    var PathVisitor = function PathVisitor() {
        if (!(this instanceof PathVisitor)) {
            throw new Error("PathVisitor constructor cannot be invoked without 'new'");
        }
        // Permanent state.
        this._reusableContextStack = [];
        this._methodNameTable = computeMethodNameTable(this);
        this._shouldVisitComments =
            hasOwn.call(this._methodNameTable, "Block") ||
                hasOwn.call(this._methodNameTable, "Line");
        this.Context = makeContextConstructor(this);
        // State reset every time PathVisitor.prototype.visit is called.
        this._visiting = false;
        this._changeReported = false;
    };
    function computeMethodNameTable(visitor) {
        var typeNames = Object.create(null);
        for (var methodName in visitor) {
            if (/^visit[A-Z]/.test(methodName)) {
                typeNames[methodName.slice("visit".length)] = true;
            }
        }
        var supertypeTable = types.computeSupertypeLookupTable(typeNames);
        var methodNameTable = Object.create(null);
        var typeNameKeys = Object.keys(supertypeTable);
        var typeNameCount = typeNameKeys.length;
        for (var i = 0; i < typeNameCount; ++i) {
            var typeName = typeNameKeys[i];
            methodName = "visit" + supertypeTable[typeName];
            if (isFunction.check(visitor[methodName])) {
                methodNameTable[typeName] = methodName;
            }
        }
        return methodNameTable;
    }
    PathVisitor.fromMethodsObject = function fromMethodsObject(methods) {
        if (methods instanceof PathVisitor) {
            return methods;
        }
        if (!isObject.check(methods)) {
            // An empty visitor?
            return new PathVisitor;
        }
        var Visitor = function Visitor() {
            if (!(this instanceof Visitor)) {
                throw new Error("Visitor constructor cannot be invoked without 'new'");
            }
            PathVisitor.call(this);
        };
        var Vp = Visitor.prototype = Object.create(PVp);
        Vp.constructor = Visitor;
        extend(Vp, methods);
        extend(Visitor, PathVisitor);
        isFunction.assert(Visitor.fromMethodsObject);
        isFunction.assert(Visitor.visit);
        return new Visitor;
    };
    function extend(target, source) {
        for (var property in source) {
            if (hasOwn.call(source, property)) {
                target[property] = source[property];
            }
        }
        return target;
    }
    PathVisitor.visit = function visit(node, methods) {
        return PathVisitor.fromMethodsObject(methods).visit(node);
    };
    var PVp = PathVisitor.prototype;
    PVp.visit = function () {
        if (this._visiting) {
            throw new Error("Recursively calling visitor.visit(path) resets visitor state. " +
                "Try this.visit(path) or this.traverse(path) instead.");
        }
        // Private state that needs to be reset before every traversal.
        this._visiting = true;
        this._changeReported = false;
        this._abortRequested = false;
        var argc = arguments.length;
        var args = new Array(argc);
        for (var i = 0; i < argc; ++i) {
            args[i] = arguments[i];
        }
        if (!(args[0] instanceof NodePath)) {
            args[0] = new NodePath({ root: args[0] }).get("root");
        }
        // Called with the same arguments as .visit.
        this.reset.apply(this, args);
        var didNotThrow;
        try {
            var root = this.visitWithoutReset(args[0]);
            didNotThrow = true;
        }
        finally {
            this._visiting = false;
            if (!didNotThrow && this._abortRequested) {
                // If this.visitWithoutReset threw an exception and
                // this._abortRequested was set to true, return the root of
                // the AST instead of letting the exception propagate, so that
                // client code does not have to provide a try-catch block to
                // intercept the AbortRequest exception.  Other kinds of
                // exceptions will propagate without being intercepted and
                // rethrown by a catch block, so their stacks will accurately
                // reflect the original throwing context.
                return args[0].value;
            }
        }
        return root;
    };
    PVp.AbortRequest = function AbortRequest() { };
    PVp.abort = function () {
        var visitor = this;
        visitor._abortRequested = true;
        var request = new visitor.AbortRequest();
        // If you decide to catch this exception and stop it from propagating,
        // make sure to call its cancel method to avoid silencing other
        // exceptions that might be thrown later in the traversal.
        request.cancel = function () {
            visitor._abortRequested = false;
        };
        throw request;
    };
    PVp.reset = function (_path /*, additional arguments */) {
        // Empty stub; may be reassigned or overridden by subclasses.
    };
    PVp.visitWithoutReset = function (path) {
        if (this instanceof this.Context) {
            // Since this.Context.prototype === this, there's a chance we
            // might accidentally call context.visitWithoutReset. If that
            // happens, re-invoke the method against context.visitor.
            return this.visitor.visitWithoutReset(path);
        }
        if (!(path instanceof NodePath)) {
            throw new Error("");
        }
        var value = path.value;
        var methodName = value &&
            typeof value === "object" &&
            typeof value.type === "string" &&
            this._methodNameTable[value.type];
        if (methodName) {
            var context = this.acquireContext(path);
            try {
                return context.invokeVisitorMethod(methodName);
            }
            finally {
                this.releaseContext(context);
            }
        }
        else {
            // If there was no visitor method to call, visit the children of
            // this node generically.
            return visitChildren(path, this);
        }
    };
    function visitChildren(path, visitor) {
        if (!(path instanceof NodePath)) {
            throw new Error("");
        }
        if (!(visitor instanceof PathVisitor)) {
            throw new Error("");
        }
        var value = path.value;
        if (isArray.check(value)) {
            path.each(visitor.visitWithoutReset, visitor);
        }
        else if (!isObject.check(value)) {
            // No children to visit.
        }
        else {
            var childNames = types.getFieldNames(value);
            // The .comments field of the Node type is hidden, so we only
            // visit it if the visitor defines visitBlock or visitLine, and
            // value.comments is defined.
            if (visitor._shouldVisitComments &&
                value.comments &&
                childNames.indexOf("comments") < 0) {
                childNames.push("comments");
            }
            var childCount = childNames.length;
            var childPaths = [];
            for (var i = 0; i < childCount; ++i) {
                var childName = childNames[i];
                if (!hasOwn.call(value, childName)) {
                    value[childName] = types.getFieldValue(value, childName);
                }
                childPaths.push(path.get(childName));
            }
            for (var i = 0; i < childCount; ++i) {
                visitor.visitWithoutReset(childPaths[i]);
            }
        }
        return path.value;
    }
    PVp.acquireContext = function (path) {
        if (this._reusableContextStack.length === 0) {
            return new this.Context(path);
        }
        return this._reusableContextStack.pop().reset(path);
    };
    PVp.releaseContext = function (context) {
        if (!(context instanceof this.Context)) {
            throw new Error("");
        }
        this._reusableContextStack.push(context);
        context.currentPath = null;
    };
    PVp.reportChanged = function () {
        this._changeReported = true;
    };
    PVp.wasChangeReported = function () {
        return this._changeReported;
    };
    function makeContextConstructor(visitor) {
        function Context(path) {
            if (!(this instanceof Context)) {
                throw new Error("");
            }
            if (!(this instanceof PathVisitor)) {
                throw new Error("");
            }
            if (!(path instanceof NodePath)) {
                throw new Error("");
            }
            Object.defineProperty(this, "visitor", {
                value: visitor,
                writable: false,
                enumerable: true,
                configurable: false
            });
            this.currentPath = path;
            this.needToCallTraverse = true;
            Object.seal(this);
        }
        if (!(visitor instanceof PathVisitor)) {
            throw new Error("");
        }
        // Note that the visitor object is the prototype of Context.prototype,
        // so all visitor methods are inherited by context objects.
        var Cp = Context.prototype = Object.create(visitor);
        Cp.constructor = Context;
        extend(Cp, sharedContextProtoMethods);
        return Context;
    }
    // Every PathVisitor has a different this.Context constructor and
    // this.Context.prototype object, but those prototypes can all use the
    // same reset, invokeVisitorMethod, and traverse function objects.
    var sharedContextProtoMethods = Object.create(null);
    sharedContextProtoMethods.reset =
        function reset(path) {
            if (!(this instanceof this.Context)) {
                throw new Error("");
            }
            if (!(path instanceof NodePath)) {
                throw new Error("");
            }
            this.currentPath = path;
            this.needToCallTraverse = true;
            return this;
        };
    sharedContextProtoMethods.invokeVisitorMethod =
        function invokeVisitorMethod(methodName) {
            if (!(this instanceof this.Context)) {
                throw new Error("");
            }
            if (!(this.currentPath instanceof NodePath)) {
                throw new Error("");
            }
            var result = this.visitor[methodName].call(this, this.currentPath);
            if (result === false) {
                // Visitor methods return false to indicate that they have handled
                // their own traversal needs, and we should not complain if
                // this.needToCallTraverse is still true.
                this.needToCallTraverse = false;
            }
            else if (result !== undefined) {
                // Any other non-undefined value returned from the visitor method
                // is interpreted as a replacement value.
                this.currentPath = this.currentPath.replace(result)[0];
                if (this.needToCallTraverse) {
                    // If this.traverse still hasn't been called, visit the
                    // children of the replacement node.
                    this.traverse(this.currentPath);
                }
            }
            if (this.needToCallTraverse !== false) {
                throw new Error("Must either call this.traverse or return false in " + methodName);
            }
            var path = this.currentPath;
            return path && path.value;
        };
    sharedContextProtoMethods.traverse =
        function traverse(path, newVisitor) {
            if (!(this instanceof this.Context)) {
                throw new Error("");
            }
            if (!(path instanceof NodePath)) {
                throw new Error("");
            }
            if (!(this.currentPath instanceof NodePath)) {
                throw new Error("");
            }
            this.needToCallTraverse = false;
            return visitChildren(path, PathVisitor.fromMethodsObject(newVisitor || this.visitor));
        };
    sharedContextProtoMethods.visit =
        function visit(path, newVisitor) {
            if (!(this instanceof this.Context)) {
                throw new Error("");
            }
            if (!(path instanceof NodePath)) {
                throw new Error("");
            }
            if (!(this.currentPath instanceof NodePath)) {
                throw new Error("");
            }
            this.needToCallTraverse = false;
            return PathVisitor.fromMethodsObject(newVisitor || this.visitor).visitWithoutReset(path);
        };
    sharedContextProtoMethods.reportChanged = function reportChanged() {
        this.visitor.reportChanged();
    };
    sharedContextProtoMethods.abort = function abort() {
        this.needToCallTraverse = false;
        this.visitor.abort();
    };
    return PathVisitor;
}
exports["default"] = pathVisitorPlugin;
;
(0, shared_1.maybeSetModuleExports)(function () { return module; });
//# sourceMappingURL=path-visitor.js.map

/***/ }),

/***/ 1587:
/***/ ((module, exports, __nccwpck_require__) => {

/* module decorator */ module = __nccwpck_require__.nmd(module);

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __nccwpck_require__(204);
var shared_1 = __nccwpck_require__(4456);
var types_1 = tslib_1.__importDefault(__nccwpck_require__(1018));
var Op = Object.prototype;
var hasOwn = Op.hasOwnProperty;
function pathPlugin(fork) {
    var types = fork.use(types_1.default);
    var isArray = types.builtInTypes.array;
    var isNumber = types.builtInTypes.number;
    var Path = function Path(value, parentPath, name) {
        if (!(this instanceof Path)) {
            throw new Error("Path constructor cannot be invoked without 'new'");
        }
        if (parentPath) {
            if (!(parentPath instanceof Path)) {
                throw new Error("");
            }
        }
        else {
            parentPath = null;
            name = null;
        }
        // The value encapsulated by this Path, generally equal to
        // parentPath.value[name] if we have a parentPath.
        this.value = value;
        // The immediate parent Path of this Path.
        this.parentPath = parentPath;
        // The name of the property of parentPath.value through which this
        // Path's value was reached.
        this.name = name;
        // Calling path.get("child") multiple times always returns the same
        // child Path object, for both performance and consistency reasons.
        this.__childCache = null;
    };
    var Pp = Path.prototype;
    function getChildCache(path) {
        // Lazily create the child cache. This also cheapens cache
        // invalidation, since you can just reset path.__childCache to null.
        return path.__childCache || (path.__childCache = Object.create(null));
    }
    function getChildPath(path, name) {
        var cache = getChildCache(path);
        var actualChildValue = path.getValueProperty(name);
        var childPath = cache[name];
        if (!hasOwn.call(cache, name) ||
            // Ensure consistency between cache and reality.
            childPath.value !== actualChildValue) {
            childPath = cache[name] = new path.constructor(actualChildValue, path, name);
        }
        return childPath;
    }
    // This method is designed to be overridden by subclasses that need to
    // handle missing properties, etc.
    Pp.getValueProperty = function getValueProperty(name) {
        return this.value[name];
    };
    Pp.get = function get() {
        var names = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            names[_i] = arguments[_i];
        }
        var path = this;
        var count = names.length;
        for (var i = 0; i < count; ++i) {
            path = getChildPath(path, names[i]);
        }
        return path;
    };
    Pp.each = function each(callback, context) {
        var childPaths = [];
        var len = this.value.length;
        var i = 0;
        // Collect all the original child paths before invoking the callback.
        for (var i = 0; i < len; ++i) {
            if (hasOwn.call(this.value, i)) {
                childPaths[i] = this.get(i);
            }
        }
        // Invoke the callback on just the original child paths, regardless of
        // any modifications made to the array by the callback. I chose these
        // semantics over cleverly invoking the callback on new elements because
        // this way is much easier to reason about.
        context = context || this;
        for (i = 0; i < len; ++i) {
            if (hasOwn.call(childPaths, i)) {
                callback.call(context, childPaths[i]);
            }
        }
    };
    Pp.map = function map(callback, context) {
        var result = [];
        this.each(function (childPath) {
            result.push(callback.call(this, childPath));
        }, context);
        return result;
    };
    Pp.filter = function filter(callback, context) {
        var result = [];
        this.each(function (childPath) {
            if (callback.call(this, childPath)) {
                result.push(childPath);
            }
        }, context);
        return result;
    };
    function emptyMoves() { }
    function getMoves(path, offset, start, end) {
        isArray.assert(path.value);
        if (offset === 0) {
            return emptyMoves;
        }
        var length = path.value.length;
        if (length < 1) {
            return emptyMoves;
        }
        var argc = arguments.length;
        if (argc === 2) {
            start = 0;
            end = length;
        }
        else if (argc === 3) {
            start = Math.max(start, 0);
            end = length;
        }
        else {
            start = Math.max(start, 0);
            end = Math.min(end, length);
        }
        isNumber.assert(start);
        isNumber.assert(end);
        var moves = Object.create(null);
        var cache = getChildCache(path);
        for (var i = start; i < end; ++i) {
            if (hasOwn.call(path.value, i)) {
                var childPath = path.get(i);
                if (childPath.name !== i) {
                    throw new Error("");
                }
                var newIndex = i + offset;
                childPath.name = newIndex;
                moves[newIndex] = childPath;
                delete cache[i];
            }
        }
        delete cache.length;
        return function () {
            for (var newIndex in moves) {
                var childPath = moves[newIndex];
                if (childPath.name !== +newIndex) {
                    throw new Error("");
                }
                cache[newIndex] = childPath;
                path.value[newIndex] = childPath.value;
            }
        };
    }
    Pp.shift = function shift() {
        var move = getMoves(this, -1);
        var result = this.value.shift();
        move();
        return result;
    };
    Pp.unshift = function unshift() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var move = getMoves(this, args.length);
        var result = this.value.unshift.apply(this.value, args);
        move();
        return result;
    };
    Pp.push = function push() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        isArray.assert(this.value);
        delete getChildCache(this).length;
        return this.value.push.apply(this.value, args);
    };
    Pp.pop = function pop() {
        isArray.assert(this.value);
        var cache = getChildCache(this);
        delete cache[this.value.length - 1];
        delete cache.length;
        return this.value.pop();
    };
    Pp.insertAt = function insertAt(index) {
        var argc = arguments.length;
        var move = getMoves(this, argc - 1, index);
        if (move === emptyMoves && argc <= 1) {
            return this;
        }
        index = Math.max(index, 0);
        for (var i = 1; i < argc; ++i) {
            this.value[index + i - 1] = arguments[i];
        }
        move();
        return this;
    };
    Pp.insertBefore = function insertBefore() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var pp = this.parentPath;
        var argc = args.length;
        var insertAtArgs = [this.name];
        for (var i = 0; i < argc; ++i) {
            insertAtArgs.push(args[i]);
        }
        return pp.insertAt.apply(pp, insertAtArgs);
    };
    Pp.insertAfter = function insertAfter() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var pp = this.parentPath;
        var argc = args.length;
        var insertAtArgs = [this.name + 1];
        for (var i = 0; i < argc; ++i) {
            insertAtArgs.push(args[i]);
        }
        return pp.insertAt.apply(pp, insertAtArgs);
    };
    function repairRelationshipWithParent(path) {
        if (!(path instanceof Path)) {
            throw new Error("");
        }
        var pp = path.parentPath;
        if (!pp) {
            // Orphan paths have no relationship to repair.
            return path;
        }
        var parentValue = pp.value;
        var parentCache = getChildCache(pp);
        // Make sure parentCache[path.name] is populated.
        if (parentValue[path.name] === path.value) {
            parentCache[path.name] = path;
        }
        else if (isArray.check(parentValue)) {
            // Something caused path.name to become out of date, so attempt to
            // recover by searching for path.value in parentValue.
            var i = parentValue.indexOf(path.value);
            if (i >= 0) {
                parentCache[path.name = i] = path;
            }
        }
        else {
            // If path.value disagrees with parentValue[path.name], and
            // path.name is not an array index, let path.value become the new
            // parentValue[path.name] and update parentCache accordingly.
            parentValue[path.name] = path.value;
            parentCache[path.name] = path;
        }
        if (parentValue[path.name] !== path.value) {
            throw new Error("");
        }
        if (path.parentPath.get(path.name) !== path) {
            throw new Error("");
        }
        return path;
    }
    Pp.replace = function replace(replacement) {
        var results = [];
        var parentValue = this.parentPath.value;
        var parentCache = getChildCache(this.parentPath);
        var count = arguments.length;
        repairRelationshipWithParent(this);
        if (isArray.check(parentValue)) {
            var originalLength = parentValue.length;
            var move = getMoves(this.parentPath, count - 1, this.name + 1);
            var spliceArgs = [this.name, 1];
            for (var i = 0; i < count; ++i) {
                spliceArgs.push(arguments[i]);
            }
            var splicedOut = parentValue.splice.apply(parentValue, spliceArgs);
            if (splicedOut[0] !== this.value) {
                throw new Error("");
            }
            if (parentValue.length !== (originalLength - 1 + count)) {
                throw new Error("");
            }
            move();
            if (count === 0) {
                delete this.value;
                delete parentCache[this.name];
                this.__childCache = null;
            }
            else {
                if (parentValue[this.name] !== replacement) {
                    throw new Error("");
                }
                if (this.value !== replacement) {
                    this.value = replacement;
                    this.__childCache = null;
                }
                for (i = 0; i < count; ++i) {
                    results.push(this.parentPath.get(this.name + i));
                }
                if (results[0] !== this) {
                    throw new Error("");
                }
            }
        }
        else if (count === 1) {
            if (this.value !== replacement) {
                this.__childCache = null;
            }
            this.value = parentValue[this.name] = replacement;
            results.push(this);
        }
        else if (count === 0) {
            delete parentValue[this.name];
            delete this.value;
            this.__childCache = null;
            // Leave this path cached as parentCache[this.name], even though
            // it no longer has a value defined.
        }
        else {
            throw new Error("Could not replace path");
        }
        return results;
    };
    return Path;
}
exports["default"] = pathPlugin;
;
(0, shared_1.maybeSetModuleExports)(function () { return module; });
//# sourceMappingURL=path.js.map

/***/ }),

/***/ 3166:
/***/ ((module, exports, __nccwpck_require__) => {

/* module decorator */ module = __nccwpck_require__.nmd(module);

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __nccwpck_require__(204);
var shared_1 = __nccwpck_require__(4456);
var types_1 = tslib_1.__importDefault(__nccwpck_require__(1018));
var hasOwn = Object.prototype.hasOwnProperty;
function scopePlugin(fork) {
    var types = fork.use(types_1.default);
    var Type = types.Type;
    var namedTypes = types.namedTypes;
    var Node = namedTypes.Node;
    var Expression = namedTypes.Expression;
    var isArray = types.builtInTypes.array;
    var b = types.builders;
    var Scope = function Scope(path, parentScope) {
        if (!(this instanceof Scope)) {
            throw new Error("Scope constructor cannot be invoked without 'new'");
        }
        if (!TypeParameterScopeType.check(path.value)) {
            ScopeType.assert(path.value);
        }
        var depth;
        if (parentScope) {
            if (!(parentScope instanceof Scope)) {
                throw new Error("");
            }
            depth = parentScope.depth + 1;
        }
        else {
            parentScope = null;
            depth = 0;
        }
        Object.defineProperties(this, {
            path: { value: path },
            node: { value: path.value },
            isGlobal: { value: !parentScope, enumerable: true },
            depth: { value: depth },
            parent: { value: parentScope },
            bindings: { value: {} },
            types: { value: {} },
        });
    };
    var ScopeType = Type.or(
    // Program nodes introduce global scopes.
    namedTypes.Program, 
    // Function is the supertype of FunctionExpression,
    // FunctionDeclaration, ArrowExpression, etc.
    namedTypes.Function, 
    // In case you didn't know, the caught parameter shadows any variable
    // of the same name in an outer scope.
    namedTypes.CatchClause);
    // These types introduce scopes that are restricted to type parameters in
    // Flow (this doesn't apply to ECMAScript).
    var TypeParameterScopeType = Type.or(namedTypes.Function, namedTypes.ClassDeclaration, namedTypes.ClassExpression, namedTypes.InterfaceDeclaration, namedTypes.TSInterfaceDeclaration, namedTypes.TypeAlias, namedTypes.TSTypeAliasDeclaration);
    var FlowOrTSTypeParameterType = Type.or(namedTypes.TypeParameter, namedTypes.TSTypeParameter);
    Scope.isEstablishedBy = function (node) {
        return ScopeType.check(node) || TypeParameterScopeType.check(node);
    };
    var Sp = Scope.prototype;
    // Will be overridden after an instance lazily calls scanScope.
    Sp.didScan = false;
    Sp.declares = function (name) {
        this.scan();
        return hasOwn.call(this.bindings, name);
    };
    Sp.declaresType = function (name) {
        this.scan();
        return hasOwn.call(this.types, name);
    };
    Sp.declareTemporary = function (prefix) {
        if (prefix) {
            if (!/^[a-z$_]/i.test(prefix)) {
                throw new Error("");
            }
        }
        else {
            prefix = "t$";
        }
        // Include this.depth in the name to make sure the name does not
        // collide with any variables in nested/enclosing scopes.
        prefix += this.depth.toString(36) + "$";
        this.scan();
        var index = 0;
        while (this.declares(prefix + index)) {
            ++index;
        }
        var name = prefix + index;
        return this.bindings[name] = types.builders.identifier(name);
    };
    Sp.injectTemporary = function (identifier, init) {
        identifier || (identifier = this.declareTemporary());
        var bodyPath = this.path.get("body");
        if (namedTypes.BlockStatement.check(bodyPath.value)) {
            bodyPath = bodyPath.get("body");
        }
        bodyPath.unshift(b.variableDeclaration("var", [b.variableDeclarator(identifier, init || null)]));
        return identifier;
    };
    Sp.scan = function (force) {
        if (force || !this.didScan) {
            for (var name in this.bindings) {
                // Empty out this.bindings, just in cases.
                delete this.bindings[name];
            }
            for (var name in this.types) {
                // Empty out this.types, just in cases.
                delete this.types[name];
            }
            scanScope(this.path, this.bindings, this.types);
            this.didScan = true;
        }
    };
    Sp.getBindings = function () {
        this.scan();
        return this.bindings;
    };
    Sp.getTypes = function () {
        this.scan();
        return this.types;
    };
    function scanScope(path, bindings, scopeTypes) {
        var node = path.value;
        if (TypeParameterScopeType.check(node)) {
            var params = path.get('typeParameters', 'params');
            if (isArray.check(params.value)) {
                params.each(function (childPath) {
                    addTypeParameter(childPath, scopeTypes);
                });
            }
        }
        if (ScopeType.check(node)) {
            if (namedTypes.CatchClause.check(node)) {
                // A catch clause establishes a new scope but the only variable
                // bound in that scope is the catch parameter. Any other
                // declarations create bindings in the outer scope.
                addPattern(path.get("param"), bindings);
            }
            else {
                recursiveScanScope(path, bindings, scopeTypes);
            }
        }
    }
    function recursiveScanScope(path, bindings, scopeTypes) {
        var node = path.value;
        if (path.parent &&
            namedTypes.FunctionExpression.check(path.parent.node) &&
            path.parent.node.id) {
            addPattern(path.parent.get("id"), bindings);
        }
        if (!node) {
            // None of the remaining cases matter if node is falsy.
        }
        else if (isArray.check(node)) {
            path.each(function (childPath) {
                recursiveScanChild(childPath, bindings, scopeTypes);
            });
        }
        else if (namedTypes.Function.check(node)) {
            path.get("params").each(function (paramPath) {
                addPattern(paramPath, bindings);
            });
            recursiveScanChild(path.get("body"), bindings, scopeTypes);
            recursiveScanScope(path.get("typeParameters"), bindings, scopeTypes);
        }
        else if ((namedTypes.TypeAlias && namedTypes.TypeAlias.check(node)) ||
            (namedTypes.InterfaceDeclaration && namedTypes.InterfaceDeclaration.check(node)) ||
            (namedTypes.TSTypeAliasDeclaration && namedTypes.TSTypeAliasDeclaration.check(node)) ||
            (namedTypes.TSInterfaceDeclaration && namedTypes.TSInterfaceDeclaration.check(node))) {
            addTypePattern(path.get("id"), scopeTypes);
        }
        else if (namedTypes.VariableDeclarator.check(node)) {
            addPattern(path.get("id"), bindings);
            recursiveScanChild(path.get("init"), bindings, scopeTypes);
        }
        else if (node.type === "ImportSpecifier" ||
            node.type === "ImportNamespaceSpecifier" ||
            node.type === "ImportDefaultSpecifier") {
            addPattern(
            // Esprima used to use the .name field to refer to the local
            // binding identifier for ImportSpecifier nodes, but .id for
            // ImportNamespaceSpecifier and ImportDefaultSpecifier nodes.
            // ESTree/Acorn/ESpree use .local for all three node types.
            path.get(node.local ? "local" :
                node.name ? "name" : "id"), bindings);
        }
        else if (Node.check(node) && !Expression.check(node)) {
            types.eachField(node, function (name, child) {
                var childPath = path.get(name);
                if (!pathHasValue(childPath, child)) {
                    throw new Error("");
                }
                recursiveScanChild(childPath, bindings, scopeTypes);
            });
        }
    }
    function pathHasValue(path, value) {
        if (path.value === value) {
            return true;
        }
        // Empty arrays are probably produced by defaults.emptyArray, in which
        // case is makes sense to regard them as equivalent, if not ===.
        if (Array.isArray(path.value) &&
            path.value.length === 0 &&
            Array.isArray(value) &&
            value.length === 0) {
            return true;
        }
        return false;
    }
    function recursiveScanChild(path, bindings, scopeTypes) {
        var node = path.value;
        if (!node || Expression.check(node)) {
            // Ignore falsy values and Expressions.
        }
        else if (namedTypes.FunctionDeclaration.check(node) &&
            node.id !== null) {
            addPattern(path.get("id"), bindings);
        }
        else if (namedTypes.ClassDeclaration &&
            namedTypes.ClassDeclaration.check(node) &&
            node.id !== null) {
            addPattern(path.get("id"), bindings);
            recursiveScanScope(path.get("typeParameters"), bindings, scopeTypes);
        }
        else if ((namedTypes.InterfaceDeclaration &&
            namedTypes.InterfaceDeclaration.check(node)) ||
            (namedTypes.TSInterfaceDeclaration &&
                namedTypes.TSInterfaceDeclaration.check(node))) {
            addTypePattern(path.get("id"), scopeTypes);
        }
        else if (ScopeType.check(node)) {
            if (namedTypes.CatchClause.check(node) &&
                // TODO Broaden this to accept any pattern.
                namedTypes.Identifier.check(node.param)) {
                var catchParamName = node.param.name;
                var hadBinding = hasOwn.call(bindings, catchParamName);
                // Any declarations that occur inside the catch body that do
                // not have the same name as the catch parameter should count
                // as bindings in the outer scope.
                recursiveScanScope(path.get("body"), bindings, scopeTypes);
                // If a new binding matching the catch parameter name was
                // created while scanning the catch body, ignore it because it
                // actually refers to the catch parameter and not the outer
                // scope that we're currently scanning.
                if (!hadBinding) {
                    delete bindings[catchParamName];
                }
            }
        }
        else {
            recursiveScanScope(path, bindings, scopeTypes);
        }
    }
    function addPattern(patternPath, bindings) {
        var pattern = patternPath.value;
        namedTypes.Pattern.assert(pattern);
        if (namedTypes.Identifier.check(pattern)) {
            if (hasOwn.call(bindings, pattern.name)) {
                bindings[pattern.name].push(patternPath);
            }
            else {
                bindings[pattern.name] = [patternPath];
            }
        }
        else if (namedTypes.AssignmentPattern &&
            namedTypes.AssignmentPattern.check(pattern)) {
            addPattern(patternPath.get('left'), bindings);
        }
        else if (namedTypes.ObjectPattern &&
            namedTypes.ObjectPattern.check(pattern)) {
            patternPath.get('properties').each(function (propertyPath) {
                var property = propertyPath.value;
                if (namedTypes.Pattern.check(property)) {
                    addPattern(propertyPath, bindings);
                }
                else if (namedTypes.Property.check(property) ||
                    (namedTypes.ObjectProperty &&
                        namedTypes.ObjectProperty.check(property))) {
                    addPattern(propertyPath.get('value'), bindings);
                }
                else if (namedTypes.SpreadProperty &&
                    namedTypes.SpreadProperty.check(property)) {
                    addPattern(propertyPath.get('argument'), bindings);
                }
            });
        }
        else if (namedTypes.ArrayPattern &&
            namedTypes.ArrayPattern.check(pattern)) {
            patternPath.get('elements').each(function (elementPath) {
                var element = elementPath.value;
                if (namedTypes.Pattern.check(element)) {
                    addPattern(elementPath, bindings);
                }
                else if (namedTypes.SpreadElement &&
                    namedTypes.SpreadElement.check(element)) {
                    addPattern(elementPath.get("argument"), bindings);
                }
            });
        }
        else if (namedTypes.PropertyPattern &&
            namedTypes.PropertyPattern.check(pattern)) {
            addPattern(patternPath.get('pattern'), bindings);
        }
        else if ((namedTypes.SpreadElementPattern &&
            namedTypes.SpreadElementPattern.check(pattern)) ||
            (namedTypes.RestElement &&
                namedTypes.RestElement.check(pattern)) ||
            (namedTypes.SpreadPropertyPattern &&
                namedTypes.SpreadPropertyPattern.check(pattern))) {
            addPattern(patternPath.get('argument'), bindings);
        }
    }
    function addTypePattern(patternPath, types) {
        var pattern = patternPath.value;
        namedTypes.Pattern.assert(pattern);
        if (namedTypes.Identifier.check(pattern)) {
            if (hasOwn.call(types, pattern.name)) {
                types[pattern.name].push(patternPath);
            }
            else {
                types[pattern.name] = [patternPath];
            }
        }
    }
    function addTypeParameter(parameterPath, types) {
        var parameter = parameterPath.value;
        FlowOrTSTypeParameterType.assert(parameter);
        if (hasOwn.call(types, parameter.name)) {
            types[parameter.name].push(parameterPath);
        }
        else {
            types[parameter.name] = [parameterPath];
        }
    }
    Sp.lookup = function (name) {
        for (var scope = this; scope; scope = scope.parent)
            if (scope.declares(name))
                break;
        return scope;
    };
    Sp.lookupType = function (name) {
        for (var scope = this; scope; scope = scope.parent)
            if (scope.declaresType(name))
                break;
        return scope;
    };
    Sp.getGlobalScope = function () {
        var scope = this;
        while (!scope.isGlobal)
            scope = scope.parent;
        return scope;
    };
    return Scope;
}
exports["default"] = scopePlugin;
;
(0, shared_1.maybeSetModuleExports)(function () { return module; });
//# sourceMappingURL=scope.js.map

/***/ }),

/***/ 4456:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.maybeSetModuleExports = void 0;
var tslib_1 = __nccwpck_require__(204);
var types_1 = tslib_1.__importDefault(__nccwpck_require__(1018));
function default_1(fork) {
    var types = fork.use(types_1.default);
    var Type = types.Type;
    var builtin = types.builtInTypes;
    var isNumber = builtin.number;
    // An example of constructing a new type with arbitrary constraints from
    // an existing type.
    function geq(than) {
        return Type.from(function (value) { return isNumber.check(value) && value >= than; }, isNumber + " >= " + than);
    }
    ;
    // Default value-returning functions that may optionally be passed as a
    // third argument to Def.prototype.field.
    var defaults = {
        // Functions were used because (among other reasons) that's the most
        // elegant way to allow for the emptyArray one always to give a new
        // array instance.
        "null": function () { return null; },
        "emptyArray": function () { return []; },
        "false": function () { return false; },
        "true": function () { return true; },
        "undefined": function () { },
        "use strict": function () { return "use strict"; }
    };
    var naiveIsPrimitive = Type.or(builtin.string, builtin.number, builtin.boolean, builtin.null, builtin.undefined);
    var isPrimitive = Type.from(function (value) {
        if (value === null)
            return true;
        var type = typeof value;
        if (type === "object" ||
            type === "function") {
            return false;
        }
        return true;
    }, naiveIsPrimitive.toString());
    return {
        geq: geq,
        defaults: defaults,
        isPrimitive: isPrimitive,
    };
}
exports["default"] = default_1;
;
// This function accepts a getter function that should return an object
// conforming to the NodeModule interface above. Typically, this means calling
// maybeSetModuleExports(() => module) at the very end of any module that has a
// default export, so the default export value can replace module.exports and
// thus CommonJS consumers can continue to rely on require("./that/module")
// returning the default-exported value, rather than always returning an exports
// object with a default property equal to that value. This function should help
// preserve backwards compatibility for CommonJS consumers, as a replacement for
// the ts-add-module-exports package.
function maybeSetModuleExports(moduleGetter) {
    try {
        var nodeModule = moduleGetter();
        var originalExports = nodeModule.exports;
        var defaultExport = originalExports["default"];
    }
    catch (_a) {
        // It's normal/acceptable for this code to throw a ReferenceError due to
        // the moduleGetter function attempting to access a non-existent global
        // `module` variable. That's the reason we use a getter function here:
        // so the calling code doesn't have to do its own typeof module ===
        // "object" checking (because it's always safe to pass `() => module` as
        // an argument, even when `module` is not defined in the calling scope).
        return;
    }
    if (defaultExport &&
        defaultExport !== originalExports &&
        typeof originalExports === "object") {
        // Make all properties found in originalExports properties of the
        // default export, including the default property itself, so that
        // require(nodeModule.id).default === require(nodeModule.id).
        Object.assign(defaultExport, originalExports, { "default": defaultExport });
        // Object.assign only transfers enumerable properties, and
        // __esModule is (and should remain) non-enumerable.
        if (originalExports.__esModule) {
            Object.defineProperty(defaultExport, "__esModule", { value: true });
        }
        // This line allows require(nodeModule.id) === defaultExport, rather
        // than (only) require(nodeModule.id).default === defaultExport.
        nodeModule.exports = defaultExport;
    }
}
exports.maybeSetModuleExports = maybeSetModuleExports;
//# sourceMappingURL=shared.js.map

/***/ }),

/***/ 1018:
/***/ ((module, exports, __nccwpck_require__) => {

/* module decorator */ module = __nccwpck_require__.nmd(module);

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Def = void 0;
var tslib_1 = __nccwpck_require__(204);
var shared_1 = __nccwpck_require__(4456);
var Op = Object.prototype;
var objToStr = Op.toString;
var hasOwn = Op.hasOwnProperty;
var BaseType = /** @class */ (function () {
    function BaseType() {
    }
    BaseType.prototype.assert = function (value, deep) {
        if (!this.check(value, deep)) {
            var str = shallowStringify(value);
            throw new Error(str + " does not match type " + this);
        }
        return true;
    };
    BaseType.prototype.arrayOf = function () {
        var elemType = this;
        return new ArrayType(elemType);
    };
    return BaseType;
}());
var ArrayType = /** @class */ (function (_super) {
    tslib_1.__extends(ArrayType, _super);
    function ArrayType(elemType) {
        var _this = _super.call(this) || this;
        _this.elemType = elemType;
        _this.kind = "ArrayType";
        return _this;
    }
    ArrayType.prototype.toString = function () {
        return "[" + this.elemType + "]";
    };
    ArrayType.prototype.check = function (value, deep) {
        var _this = this;
        return Array.isArray(value) && value.every(function (elem) { return _this.elemType.check(elem, deep); });
    };
    return ArrayType;
}(BaseType));
var IdentityType = /** @class */ (function (_super) {
    tslib_1.__extends(IdentityType, _super);
    function IdentityType(value) {
        var _this = _super.call(this) || this;
        _this.value = value;
        _this.kind = "IdentityType";
        return _this;
    }
    IdentityType.prototype.toString = function () {
        return String(this.value);
    };
    IdentityType.prototype.check = function (value, deep) {
        var result = value === this.value;
        if (!result && typeof deep === "function") {
            deep(this, value);
        }
        return result;
    };
    return IdentityType;
}(BaseType));
var ObjectType = /** @class */ (function (_super) {
    tslib_1.__extends(ObjectType, _super);
    function ObjectType(fields) {
        var _this = _super.call(this) || this;
        _this.fields = fields;
        _this.kind = "ObjectType";
        return _this;
    }
    ObjectType.prototype.toString = function () {
        return "{ " + this.fields.join(", ") + " }";
    };
    ObjectType.prototype.check = function (value, deep) {
        return (objToStr.call(value) === objToStr.call({}) &&
            this.fields.every(function (field) {
                return field.type.check(value[field.name], deep);
            }));
    };
    return ObjectType;
}(BaseType));
var OrType = /** @class */ (function (_super) {
    tslib_1.__extends(OrType, _super);
    function OrType(types) {
        var _this = _super.call(this) || this;
        _this.types = types;
        _this.kind = "OrType";
        return _this;
    }
    OrType.prototype.toString = function () {
        return this.types.join(" | ");
    };
    OrType.prototype.check = function (value, deep) {
        if (this.types.some(function (type) { return type.check(value, !!deep); })) {
            return true;
        }
        if (typeof deep === "function") {
            deep(this, value);
        }
        return false;
    };
    return OrType;
}(BaseType));
var PredicateType = /** @class */ (function (_super) {
    tslib_1.__extends(PredicateType, _super);
    function PredicateType(name, predicate) {
        var _this = _super.call(this) || this;
        _this.name = name;
        _this.predicate = predicate;
        _this.kind = "PredicateType";
        return _this;
    }
    PredicateType.prototype.toString = function () {
        return this.name;
    };
    PredicateType.prototype.check = function (value, deep) {
        var result = this.predicate(value, deep);
        if (!result && typeof deep === "function") {
            deep(this, value);
        }
        return result;
    };
    return PredicateType;
}(BaseType));
var Def = /** @class */ (function () {
    function Def(type, typeName) {
        this.type = type;
        this.typeName = typeName;
        this.baseNames = [];
        this.ownFields = Object.create(null);
        // Includes own typeName. Populated during finalization.
        this.allSupertypes = Object.create(null);
        // Linear inheritance hierarchy. Populated during finalization.
        this.supertypeList = [];
        // Includes inherited fields.
        this.allFields = Object.create(null);
        // Non-hidden keys of allFields.
        this.fieldNames = [];
        // This property will be overridden as true by individual Def instances
        // when they are finalized.
        this.finalized = false;
        // False by default until .build(...) is called on an instance.
        this.buildable = false;
        this.buildParams = [];
    }
    Def.prototype.isSupertypeOf = function (that) {
        if (that instanceof Def) {
            if (this.finalized !== true ||
                that.finalized !== true) {
                throw new Error("");
            }
            return hasOwn.call(that.allSupertypes, this.typeName);
        }
        else {
            throw new Error(that + " is not a Def");
        }
    };
    Def.prototype.checkAllFields = function (value, deep) {
        var allFields = this.allFields;
        if (this.finalized !== true) {
            throw new Error("" + this.typeName);
        }
        function checkFieldByName(name) {
            var field = allFields[name];
            var type = field.type;
            var child = field.getValue(value);
            return type.check(child, deep);
        }
        return value !== null &&
            typeof value === "object" &&
            Object.keys(allFields).every(checkFieldByName);
    };
    Def.prototype.bases = function () {
        var supertypeNames = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            supertypeNames[_i] = arguments[_i];
        }
        var bases = this.baseNames;
        if (this.finalized) {
            if (supertypeNames.length !== bases.length) {
                throw new Error("");
            }
            for (var i = 0; i < supertypeNames.length; i++) {
                if (supertypeNames[i] !== bases[i]) {
                    throw new Error("");
                }
            }
            return this;
        }
        supertypeNames.forEach(function (baseName) {
            // This indexOf lookup may be O(n), but the typical number of base
            // names is very small, and indexOf is a native Array method.
            if (bases.indexOf(baseName) < 0) {
                bases.push(baseName);
            }
        });
        return this; // For chaining.
    };
    return Def;
}());
exports.Def = Def;
var Field = /** @class */ (function () {
    function Field(name, type, defaultFn, hidden) {
        this.name = name;
        this.type = type;
        this.defaultFn = defaultFn;
        this.hidden = !!hidden;
    }
    Field.prototype.toString = function () {
        return JSON.stringify(this.name) + ": " + this.type;
    };
    Field.prototype.getValue = function (obj) {
        var value = obj[this.name];
        if (typeof value !== "undefined") {
            return value;
        }
        if (typeof this.defaultFn === "function") {
            value = this.defaultFn.call(obj);
        }
        return value;
    };
    return Field;
}());
function shallowStringify(value) {
    if (Array.isArray(value)) {
        return "[" + value.map(shallowStringify).join(", ") + "]";
    }
    if (value && typeof value === "object") {
        return "{ " + Object.keys(value).map(function (key) {
            return key + ": " + value[key];
        }).join(", ") + " }";
    }
    return JSON.stringify(value);
}
function typesPlugin(_fork) {
    var Type = {
        or: function () {
            var types = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                types[_i] = arguments[_i];
            }
            return new OrType(types.map(function (type) { return Type.from(type); }));
        },
        from: function (value, name) {
            if (value instanceof ArrayType ||
                value instanceof IdentityType ||
                value instanceof ObjectType ||
                value instanceof OrType ||
                value instanceof PredicateType) {
                return value;
            }
            // The Def type is used as a helper for constructing compound
            // interface types for AST nodes.
            if (value instanceof Def) {
                return value.type;
            }
            // Support [ElemType] syntax.
            if (isArray.check(value)) {
                if (value.length !== 1) {
                    throw new Error("only one element type is permitted for typed arrays");
                }
                return new ArrayType(Type.from(value[0]));
            }
            // Support { someField: FieldType, ... } syntax.
            if (isObject.check(value)) {
                return new ObjectType(Object.keys(value).map(function (name) {
                    return new Field(name, Type.from(value[name], name));
                }));
            }
            if (typeof value === "function") {
                var bicfIndex = builtInCtorFns.indexOf(value);
                if (bicfIndex >= 0) {
                    return builtInCtorTypes[bicfIndex];
                }
                if (typeof name !== "string") {
                    throw new Error("missing name");
                }
                return new PredicateType(name, value);
            }
            // As a last resort, toType returns a type that matches any value that
            // is === from. This is primarily useful for literal values like
            // toType(null), but it has the additional advantage of allowing
            // toType to be a total function.
            return new IdentityType(value);
        },
        // Define a type whose name is registered in a namespace (the defCache) so
        // that future definitions will return the same type given the same name.
        // In particular, this system allows for circular and forward definitions.
        // The Def object d returned from Type.def may be used to configure the
        // type d.type by calling methods such as d.bases, d.build, and d.field.
        def: function (typeName) {
            return hasOwn.call(defCache, typeName)
                ? defCache[typeName]
                : defCache[typeName] = new DefImpl(typeName);
        },
        hasDef: function (typeName) {
            return hasOwn.call(defCache, typeName);
        }
    };
    var builtInCtorFns = [];
    var builtInCtorTypes = [];
    function defBuiltInType(name, example) {
        var objStr = objToStr.call(example);
        var type = new PredicateType(name, function (value) { return objToStr.call(value) === objStr; });
        if (example && typeof example.constructor === "function") {
            builtInCtorFns.push(example.constructor);
            builtInCtorTypes.push(type);
        }
        return type;
    }
    // These types check the underlying [[Class]] attribute of the given
    // value, rather than using the problematic typeof operator. Note however
    // that no subtyping is considered; so, for instance, isObject.check
    // returns false for [], /./, new Date, and null.
    var isString = defBuiltInType("string", "truthy");
    var isFunction = defBuiltInType("function", function () { });
    var isArray = defBuiltInType("array", []);
    var isObject = defBuiltInType("object", {});
    var isRegExp = defBuiltInType("RegExp", /./);
    var isDate = defBuiltInType("Date", new Date());
    var isNumber = defBuiltInType("number", 3);
    var isBoolean = defBuiltInType("boolean", true);
    var isNull = defBuiltInType("null", null);
    var isUndefined = defBuiltInType("undefined", undefined);
    var isBigInt = typeof BigInt === "function"
        ? defBuiltInType("BigInt", BigInt(1234))
        : new PredicateType("BigInt", function () { return false; });
    var builtInTypes = {
        string: isString,
        function: isFunction,
        array: isArray,
        object: isObject,
        RegExp: isRegExp,
        Date: isDate,
        number: isNumber,
        boolean: isBoolean,
        null: isNull,
        undefined: isUndefined,
        BigInt: isBigInt,
    };
    // In order to return the same Def instance every time Type.def is called
    // with a particular name, those instances need to be stored in a cache.
    var defCache = Object.create(null);
    function defFromValue(value) {
        if (value && typeof value === "object") {
            var type = value.type;
            if (typeof type === "string" &&
                hasOwn.call(defCache, type)) {
                var d = defCache[type];
                if (d.finalized) {
                    return d;
                }
            }
        }
        return null;
    }
    var DefImpl = /** @class */ (function (_super) {
        tslib_1.__extends(DefImpl, _super);
        function DefImpl(typeName) {
            var _this = _super.call(this, new PredicateType(typeName, function (value, deep) { return _this.check(value, deep); }), typeName) || this;
            return _this;
        }
        DefImpl.prototype.check = function (value, deep) {
            if (this.finalized !== true) {
                throw new Error("prematurely checking unfinalized type " + this.typeName);
            }
            // A Def type can only match an object value.
            if (value === null || typeof value !== "object") {
                return false;
            }
            var vDef = defFromValue(value);
            if (!vDef) {
                // If we couldn't infer the Def associated with the given value,
                // and we expected it to be a SourceLocation or a Position, it was
                // probably just missing a "type" field (because Esprima does not
                // assign a type property to such nodes). Be optimistic and let
                // this.checkAllFields make the final decision.
                if (this.typeName === "SourceLocation" ||
                    this.typeName === "Position") {
                    return this.checkAllFields(value, deep);
                }
                // Calling this.checkAllFields for any other type of node is both
                // bad for performance and way too forgiving.
                return false;
            }
            // If checking deeply and vDef === this, then we only need to call
            // checkAllFields once. Calling checkAllFields is too strict when deep
            // is false, because then we only care about this.isSupertypeOf(vDef).
            if (deep && vDef === this) {
                return this.checkAllFields(value, deep);
            }
            // In most cases we rely exclusively on isSupertypeOf to make O(1)
            // subtyping determinations. This suffices in most situations outside
            // of unit tests, since interface conformance is checked whenever new
            // instances are created using builder functions.
            if (!this.isSupertypeOf(vDef)) {
                return false;
            }
            // The exception is when deep is true; then, we recursively check all
            // fields.
            if (!deep) {
                return true;
            }
            // Use the more specific Def (vDef) to perform the deep check, but
            // shallow-check fields defined by the less specific Def (this).
            return vDef.checkAllFields(value, deep)
                && this.checkAllFields(value, false);
        };
        DefImpl.prototype.build = function () {
            var _this = this;
            var buildParams = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                buildParams[_i] = arguments[_i];
            }
            // Calling Def.prototype.build multiple times has the effect of merely
            // redefining this property.
            this.buildParams = buildParams;
            if (this.buildable) {
                // If this Def is already buildable, update self.buildParams and
                // continue using the old builder function.
                return this;
            }
            // Every buildable type will have its "type" field filled in
            // automatically. This includes types that are not subtypes of Node,
            // like SourceLocation, but that seems harmless (TODO?).
            this.field("type", String, function () { return _this.typeName; });
            // Override Dp.buildable for this Def instance.
            this.buildable = true;
            var addParam = function (built, param, arg, isArgAvailable) {
                if (hasOwn.call(built, param))
                    return;
                var all = _this.allFields;
                if (!hasOwn.call(all, param)) {
                    throw new Error("" + param);
                }
                var field = all[param];
                var type = field.type;
                var value;
                if (isArgAvailable) {
                    value = arg;
                }
                else if (field.defaultFn) {
                    // Expose the partially-built object to the default
                    // function as its `this` object.
                    value = field.defaultFn.call(built);
                }
                else {
                    var message = "no value or default function given for field " +
                        JSON.stringify(param) + " of " + _this.typeName + "(" +
                        _this.buildParams.map(function (name) {
                            return all[name];
                        }).join(", ") + ")";
                    throw new Error(message);
                }
                if (!type.check(value)) {
                    throw new Error(shallowStringify(value) +
                        " does not match field " + field +
                        " of type " + _this.typeName);
                }
                built[param] = value;
            };
            // Calling the builder function will construct an instance of the Def,
            // with positional arguments mapped to the fields original passed to .build.
            // If not enough arguments are provided, the default value for the remaining fields
            // will be used.
            var builder = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var argc = args.length;
                if (!_this.finalized) {
                    throw new Error("attempting to instantiate unfinalized type " +
                        _this.typeName);
                }
                var built = Object.create(nodePrototype);
                _this.buildParams.forEach(function (param, i) {
                    if (i < argc) {
                        addParam(built, param, args[i], true);
                    }
                    else {
                        addParam(built, param, null, false);
                    }
                });
                Object.keys(_this.allFields).forEach(function (param) {
                    // Use the default value.
                    addParam(built, param, null, false);
                });
                // Make sure that the "type" field was filled automatically.
                if (built.type !== _this.typeName) {
                    throw new Error("");
                }
                return built;
            };
            // Calling .from on the builder function will construct an instance of the Def,
            // using field values from the passed object. For fields missing from the passed object,
            // their default value will be used.
            builder.from = function (obj) {
                if (!_this.finalized) {
                    throw new Error("attempting to instantiate unfinalized type " +
                        _this.typeName);
                }
                var built = Object.create(nodePrototype);
                Object.keys(_this.allFields).forEach(function (param) {
                    if (hasOwn.call(obj, param)) {
                        addParam(built, param, obj[param], true);
                    }
                    else {
                        addParam(built, param, null, false);
                    }
                });
                // Make sure that the "type" field was filled automatically.
                if (built.type !== _this.typeName) {
                    throw new Error("");
                }
                return built;
            };
            Object.defineProperty(builders, getBuilderName(this.typeName), {
                enumerable: true,
                value: builder
            });
            return this;
        };
        // The reason fields are specified using .field(...) instead of an object
        // literal syntax is somewhat subtle: the object literal syntax would
        // support only one key and one value, but with .field(...) we can pass
        // any number of arguments to specify the field.
        DefImpl.prototype.field = function (name, type, defaultFn, hidden) {
            if (this.finalized) {
                console.error("Ignoring attempt to redefine field " +
                    JSON.stringify(name) + " of finalized type " +
                    JSON.stringify(this.typeName));
                return this;
            }
            this.ownFields[name] = new Field(name, Type.from(type), defaultFn, hidden);
            return this; // For chaining.
        };
        DefImpl.prototype.finalize = function () {
            var _this = this;
            // It's not an error to finalize a type more than once, but only the
            // first call to .finalize does anything.
            if (!this.finalized) {
                var allFields = this.allFields;
                var allSupertypes = this.allSupertypes;
                this.baseNames.forEach(function (name) {
                    var def = defCache[name];
                    if (def instanceof Def) {
                        def.finalize();
                        extend(allFields, def.allFields);
                        extend(allSupertypes, def.allSupertypes);
                    }
                    else {
                        var message = "unknown supertype name " +
                            JSON.stringify(name) +
                            " for subtype " +
                            JSON.stringify(_this.typeName);
                        throw new Error(message);
                    }
                });
                // TODO Warn if fields are overridden with incompatible types.
                extend(allFields, this.ownFields);
                allSupertypes[this.typeName] = this;
                this.fieldNames.length = 0;
                for (var fieldName in allFields) {
                    if (hasOwn.call(allFields, fieldName) &&
                        !allFields[fieldName].hidden) {
                        this.fieldNames.push(fieldName);
                    }
                }
                // Types are exported only once they have been finalized.
                Object.defineProperty(namedTypes, this.typeName, {
                    enumerable: true,
                    value: this.type
                });
                this.finalized = true;
                // A linearization of the inheritance hierarchy.
                populateSupertypeList(this.typeName, this.supertypeList);
                if (this.buildable &&
                    this.supertypeList.lastIndexOf("Expression") >= 0) {
                    wrapExpressionBuilderWithStatement(this.typeName);
                }
            }
        };
        return DefImpl;
    }(Def));
    // Note that the list returned by this function is a copy of the internal
    // supertypeList, *without* the typeName itself as the first element.
    function getSupertypeNames(typeName) {
        if (!hasOwn.call(defCache, typeName)) {
            throw new Error("");
        }
        var d = defCache[typeName];
        if (d.finalized !== true) {
            throw new Error("");
        }
        return d.supertypeList.slice(1);
    }
    // Returns an object mapping from every known type in the defCache to the
    // most specific supertype whose name is an own property of the candidates
    // object.
    function computeSupertypeLookupTable(candidates) {
        var table = {};
        var typeNames = Object.keys(defCache);
        var typeNameCount = typeNames.length;
        for (var i = 0; i < typeNameCount; ++i) {
            var typeName = typeNames[i];
            var d = defCache[typeName];
            if (d.finalized !== true) {
                throw new Error("" + typeName);
            }
            for (var j = 0; j < d.supertypeList.length; ++j) {
                var superTypeName = d.supertypeList[j];
                if (hasOwn.call(candidates, superTypeName)) {
                    table[typeName] = superTypeName;
                    break;
                }
            }
        }
        return table;
    }
    var builders = Object.create(null);
    // This object is used as prototype for any node created by a builder.
    var nodePrototype = {};
    // Call this function to define a new method to be shared by all AST
    // nodes. The replaced method (if any) is returned for easy wrapping.
    function defineMethod(name, func) {
        var old = nodePrototype[name];
        // Pass undefined as func to delete nodePrototype[name].
        if (isUndefined.check(func)) {
            delete nodePrototype[name];
        }
        else {
            isFunction.assert(func);
            Object.defineProperty(nodePrototype, name, {
                enumerable: true,
                configurable: true,
                value: func
            });
        }
        return old;
    }
    function getBuilderName(typeName) {
        return typeName.replace(/^[A-Z]+/, function (upperCasePrefix) {
            var len = upperCasePrefix.length;
            switch (len) {
                case 0: return "";
                // If there's only one initial capital letter, just lower-case it.
                case 1: return upperCasePrefix.toLowerCase();
                default:
                    // If there's more than one initial capital letter, lower-case
                    // all but the last one, so that XMLDefaultDeclaration (for
                    // example) becomes xmlDefaultDeclaration.
                    return upperCasePrefix.slice(0, len - 1).toLowerCase() +
                        upperCasePrefix.charAt(len - 1);
            }
        });
    }
    function getStatementBuilderName(typeName) {
        typeName = getBuilderName(typeName);
        return typeName.replace(/(Expression)?$/, "Statement");
    }
    var namedTypes = {};
    // Like Object.keys, but aware of what fields each AST type should have.
    function getFieldNames(object) {
        var d = defFromValue(object);
        if (d) {
            return d.fieldNames.slice(0);
        }
        if ("type" in object) {
            throw new Error("did not recognize object of type " +
                JSON.stringify(object.type));
        }
        return Object.keys(object);
    }
    // Get the value of an object property, taking object.type and default
    // functions into account.
    function getFieldValue(object, fieldName) {
        var d = defFromValue(object);
        if (d) {
            var field = d.allFields[fieldName];
            if (field) {
                return field.getValue(object);
            }
        }
        return object && object[fieldName];
    }
    // Iterate over all defined fields of an object, including those missing
    // or undefined, passing each field name and effective value (as returned
    // by getFieldValue) to the callback. If the object has no corresponding
    // Def, the callback will never be called.
    function eachField(object, callback, context) {
        getFieldNames(object).forEach(function (name) {
            callback.call(this, name, getFieldValue(object, name));
        }, context);
    }
    // Similar to eachField, except that iteration stops as soon as the
    // callback returns a truthy value. Like Array.prototype.some, the final
    // result is either true or false to indicates whether the callback
    // returned true for any element or not.
    function someField(object, callback, context) {
        return getFieldNames(object).some(function (name) {
            return callback.call(this, name, getFieldValue(object, name));
        }, context);
    }
    // Adds an additional builder for Expression subtypes
    // that wraps the built Expression in an ExpressionStatements.
    function wrapExpressionBuilderWithStatement(typeName) {
        var wrapperName = getStatementBuilderName(typeName);
        // skip if the builder already exists
        if (builders[wrapperName])
            return;
        // the builder function to wrap with builders.ExpressionStatement
        var wrapped = builders[getBuilderName(typeName)];
        // skip if there is nothing to wrap
        if (!wrapped)
            return;
        var builder = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return builders.expressionStatement(wrapped.apply(builders, args));
        };
        builder.from = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return builders.expressionStatement(wrapped.from.apply(builders, args));
        };
        builders[wrapperName] = builder;
    }
    function populateSupertypeList(typeName, list) {
        list.length = 0;
        list.push(typeName);
        var lastSeen = Object.create(null);
        for (var pos = 0; pos < list.length; ++pos) {
            typeName = list[pos];
            var d = defCache[typeName];
            if (d.finalized !== true) {
                throw new Error("");
            }
            // If we saw typeName earlier in the breadth-first traversal,
            // delete the last-seen occurrence.
            if (hasOwn.call(lastSeen, typeName)) {
                delete list[lastSeen[typeName]];
            }
            // Record the new index of the last-seen occurrence of typeName.
            lastSeen[typeName] = pos;
            // Enqueue the base names of this type.
            list.push.apply(list, d.baseNames);
        }
        // Compaction loop to remove array holes.
        for (var to = 0, from = to, len = list.length; from < len; ++from) {
            if (hasOwn.call(list, from)) {
                list[to++] = list[from];
            }
        }
        list.length = to;
    }
    function extend(into, from) {
        Object.keys(from).forEach(function (name) {
            into[name] = from[name];
        });
        return into;
    }
    function finalize() {
        Object.keys(defCache).forEach(function (name) {
            defCache[name].finalize();
        });
    }
    return {
        Type: Type,
        builtInTypes: builtInTypes,
        getSupertypeNames: getSupertypeNames,
        computeSupertypeLookupTable: computeSupertypeLookupTable,
        builders: builders,
        defineMethod: defineMethod,
        getBuilderName: getBuilderName,
        getStatementBuilderName: getStatementBuilderName,
        namedTypes: namedTypes,
        getFieldNames: getFieldNames,
        getFieldValue: getFieldValue,
        eachField: eachField,
        someField: someField,
        finalize: finalize,
    };
}
exports["default"] = typesPlugin;
;
(0, shared_1.maybeSetModuleExports)(function () { return module; });
//# sourceMappingURL=types.js.map

/***/ }),

/***/ 1486:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {


const ansiStyles = __nccwpck_require__(7566);
const {stdout: stdoutColor, stderr: stderrColor} = __nccwpck_require__(2227);
const {
	stringReplaceAll,
	stringEncaseCRLFWithFirstIndex
} = __nccwpck_require__(1185);

const {isArray} = Array;

// `supportsColor.level` → `ansiStyles.color[name]` mapping
const levelMapping = [
	'ansi',
	'ansi',
	'ansi256',
	'ansi16m'
];

const styles = Object.create(null);

const applyOptions = (object, options = {}) => {
	if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {
		throw new Error('The `level` option should be an integer from 0 to 3');
	}

	// Detect level if not set manually
	const colorLevel = stdoutColor ? stdoutColor.level : 0;
	object.level = options.level === undefined ? colorLevel : options.level;
};

class ChalkClass {
	constructor(options) {
		// eslint-disable-next-line no-constructor-return
		return chalkFactory(options);
	}
}

const chalkFactory = options => {
	const chalk = {};
	applyOptions(chalk, options);

	chalk.template = (...arguments_) => chalkTag(chalk.template, ...arguments_);

	Object.setPrototypeOf(chalk, Chalk.prototype);
	Object.setPrototypeOf(chalk.template, chalk);

	chalk.template.constructor = () => {
		throw new Error('`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.');
	};

	chalk.template.Instance = ChalkClass;

	return chalk.template;
};

function Chalk(options) {
	return chalkFactory(options);
}

for (const [styleName, style] of Object.entries(ansiStyles)) {
	styles[styleName] = {
		get() {
			const builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);
			Object.defineProperty(this, styleName, {value: builder});
			return builder;
		}
	};
}

styles.visible = {
	get() {
		const builder = createBuilder(this, this._styler, true);
		Object.defineProperty(this, 'visible', {value: builder});
		return builder;
	}
};

const usedModels = ['rgb', 'hex', 'keyword', 'hsl', 'hsv', 'hwb', 'ansi', 'ansi256'];

for (const model of usedModels) {
	styles[model] = {
		get() {
			const {level} = this;
			return function (...arguments_) {
				const styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);
				return createBuilder(this, styler, this._isEmpty);
			};
		}
	};
}

for (const model of usedModels) {
	const bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);
	styles[bgModel] = {
		get() {
			const {level} = this;
			return function (...arguments_) {
				const styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);
				return createBuilder(this, styler, this._isEmpty);
			};
		}
	};
}

const proto = Object.defineProperties(() => {}, {
	...styles,
	level: {
		enumerable: true,
		get() {
			return this._generator.level;
		},
		set(level) {
			this._generator.level = level;
		}
	}
});

const createStyler = (open, close, parent) => {
	let openAll;
	let closeAll;
	if (parent === undefined) {
		openAll = open;
		closeAll = close;
	} else {
		openAll = parent.openAll + open;
		closeAll = close + parent.closeAll;
	}

	return {
		open,
		close,
		openAll,
		closeAll,
		parent
	};
};

const createBuilder = (self, _styler, _isEmpty) => {
	const builder = (...arguments_) => {
		if (isArray(arguments_[0]) && isArray(arguments_[0].raw)) {
			// Called as a template literal, for example: chalk.red`2 + 3 = {bold ${2+3}}`
			return applyStyle(builder, chalkTag(builder, ...arguments_));
		}

		// Single argument is hot path, implicit coercion is faster than anything
		// eslint-disable-next-line no-implicit-coercion
		return applyStyle(builder, (arguments_.length === 1) ? ('' + arguments_[0]) : arguments_.join(' '));
	};

	// We alter the prototype because we must return a function, but there is
	// no way to create a function with a different prototype
	Object.setPrototypeOf(builder, proto);

	builder._generator = self;
	builder._styler = _styler;
	builder._isEmpty = _isEmpty;

	return builder;
};

const applyStyle = (self, string) => {
	if (self.level <= 0 || !string) {
		return self._isEmpty ? '' : string;
	}

	let styler = self._styler;

	if (styler === undefined) {
		return string;
	}

	const {openAll, closeAll} = styler;
	if (string.indexOf('\u001B') !== -1) {
		while (styler !== undefined) {
			// Replace any instances already present with a re-opening code
			// otherwise only the part of the string until said closing code
			// will be colored, and the rest will simply be 'plain'.
			string = stringReplaceAll(string, styler.close, styler.open);

			styler = styler.parent;
		}
	}

	// We can move both next actions out of loop, because remaining actions in loop won't have
	// any/visible effect on parts we add here. Close the styling before a linebreak and reopen
	// after next line to fix a bleed issue on macOS: https://github.com/chalk/chalk/pull/92
	const lfIndex = string.indexOf('\n');
	if (lfIndex !== -1) {
		string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
	}

	return openAll + string + closeAll;
};

let template;
const chalkTag = (chalk, ...strings) => {
	const [firstString] = strings;

	if (!isArray(firstString) || !isArray(firstString.raw)) {
		// If chalk() was called by itself or with a string,
		// return the string itself as a string.
		return strings.join(' ');
	}

	const arguments_ = strings.slice(1);
	const parts = [firstString.raw[0]];

	for (let i = 1; i < firstString.length; i++) {
		parts.push(
			String(arguments_[i - 1]).replace(/[{}\\]/g, '\\$&'),
			String(firstString.raw[i])
		);
	}

	if (template === undefined) {
		template = __nccwpck_require__(4676);
	}

	return template(chalk, parts.join(''));
};

Object.defineProperties(Chalk.prototype, styles);

const chalk = Chalk(); // eslint-disable-line new-cap
chalk.supportsColor = stdoutColor;
chalk.stderr = Chalk({level: stderrColor ? stderrColor.level : 0}); // eslint-disable-line new-cap
chalk.stderr.supportsColor = stderrColor;

module.exports = chalk;


/***/ }),

/***/ 4676:
/***/ ((module) => {


const TEMPLATE_REGEX = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
const STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
const STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
const ESCAPE_REGEX = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi;

const ESCAPES = new Map([
	['n', '\n'],
	['r', '\r'],
	['t', '\t'],
	['b', '\b'],
	['f', '\f'],
	['v', '\v'],
	['0', '\0'],
	['\\', '\\'],
	['e', '\u001B'],
	['a', '\u0007']
]);

function unescape(c) {
	const u = c[0] === 'u';
	const bracket = c[1] === '{';

	if ((u && !bracket && c.length === 5) || (c[0] === 'x' && c.length === 3)) {
		return String.fromCharCode(parseInt(c.slice(1), 16));
	}

	if (u && bracket) {
		return String.fromCodePoint(parseInt(c.slice(2, -1), 16));
	}

	return ESCAPES.get(c) || c;
}

function parseArguments(name, arguments_) {
	const results = [];
	const chunks = arguments_.trim().split(/\s*,\s*/g);
	let matches;

	for (const chunk of chunks) {
		const number = Number(chunk);
		if (!Number.isNaN(number)) {
			results.push(number);
		} else if ((matches = chunk.match(STRING_REGEX))) {
			results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, character) => escape ? unescape(escape) : character));
		} else {
			throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
		}
	}

	return results;
}

function parseStyle(style) {
	STYLE_REGEX.lastIndex = 0;

	const results = [];
	let matches;

	while ((matches = STYLE_REGEX.exec(style)) !== null) {
		const name = matches[1];

		if (matches[2]) {
			const args = parseArguments(name, matches[2]);
			results.push([name].concat(args));
		} else {
			results.push([name]);
		}
	}

	return results;
}

function buildStyle(chalk, styles) {
	const enabled = {};

	for (const layer of styles) {
		for (const style of layer.styles) {
			enabled[style[0]] = layer.inverse ? null : style.slice(1);
		}
	}

	let current = chalk;
	for (const [styleName, styles] of Object.entries(enabled)) {
		if (!Array.isArray(styles)) {
			continue;
		}

		if (!(styleName in current)) {
			throw new Error(`Unknown Chalk style: ${styleName}`);
		}

		current = styles.length > 0 ? current[styleName](...styles) : current[styleName];
	}

	return current;
}

module.exports = (chalk, temporary) => {
	const styles = [];
	const chunks = [];
	let chunk = [];

	// eslint-disable-next-line max-params
	temporary.replace(TEMPLATE_REGEX, (m, escapeCharacter, inverse, style, close, character) => {
		if (escapeCharacter) {
			chunk.push(unescape(escapeCharacter));
		} else if (style) {
			const string = chunk.join('');
			chunk = [];
			chunks.push(styles.length === 0 ? string : buildStyle(chalk, styles)(string));
			styles.push({inverse, styles: parseStyle(style)});
		} else if (close) {
			if (styles.length === 0) {
				throw new Error('Found extraneous } in Chalk template literal');
			}

			chunks.push(buildStyle(chalk, styles)(chunk.join('')));
			chunk = [];
			styles.pop();
		} else {
			chunk.push(character);
		}
	});

	chunks.push(chunk.join(''));

	if (styles.length > 0) {
		const errMessage = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? '' : 's'} (\`}\`)`;
		throw new Error(errMessage);
	}

	return chunks.join('');
};


/***/ }),

/***/ 1185:
/***/ ((module) => {



const stringReplaceAll = (string, substring, replacer) => {
	let index = string.indexOf(substring);
	if (index === -1) {
		return string;
	}

	const substringLength = substring.length;
	let endIndex = 0;
	let returnValue = '';
	do {
		returnValue += string.substr(endIndex, index - endIndex) + substring + replacer;
		endIndex = index + substringLength;
		index = string.indexOf(substring, endIndex);
	} while (index !== -1);

	returnValue += string.substr(endIndex);
	return returnValue;
};

const stringEncaseCRLFWithFirstIndex = (string, prefix, postfix, index) => {
	let endIndex = 0;
	let returnValue = '';
	do {
		const gotCR = string[index - 1] === '\r';
		returnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? '\r\n' : '\n') + postfix;
		endIndex = index + 1;
		index = string.indexOf('\n', endIndex);
	} while (index !== -1);

	returnValue += string.substr(endIndex);
	return returnValue;
};

module.exports = {
	stringReplaceAll,
	stringEncaseCRLFWithFirstIndex
};


/***/ }),

/***/ 4661:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/* MIT license */
/* eslint-disable no-mixed-operators */
const cssKeywords = __nccwpck_require__(376);

// NOTE: conversions should only return primitive values (i.e. arrays, or
//       values that give correct `typeof` results).
//       do not use box values types (i.e. Number(), String(), etc.)

const reverseKeywords = {};
for (const key of Object.keys(cssKeywords)) {
	reverseKeywords[cssKeywords[key]] = key;
}

const convert = {
	rgb: {channels: 3, labels: 'rgb'},
	hsl: {channels: 3, labels: 'hsl'},
	hsv: {channels: 3, labels: 'hsv'},
	hwb: {channels: 3, labels: 'hwb'},
	cmyk: {channels: 4, labels: 'cmyk'},
	xyz: {channels: 3, labels: 'xyz'},
	lab: {channels: 3, labels: 'lab'},
	lch: {channels: 3, labels: 'lch'},
	hex: {channels: 1, labels: ['hex']},
	keyword: {channels: 1, labels: ['keyword']},
	ansi16: {channels: 1, labels: ['ansi16']},
	ansi256: {channels: 1, labels: ['ansi256']},
	hcg: {channels: 3, labels: ['h', 'c', 'g']},
	apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
	gray: {channels: 1, labels: ['gray']}
};

module.exports = convert;

// Hide .channels and .labels properties
for (const model of Object.keys(convert)) {
	if (!('channels' in convert[model])) {
		throw new Error('missing channels property: ' + model);
	}

	if (!('labels' in convert[model])) {
		throw new Error('missing channel labels property: ' + model);
	}

	if (convert[model].labels.length !== convert[model].channels) {
		throw new Error('channel and label counts mismatch: ' + model);
	}

	const {channels, labels} = convert[model];
	delete convert[model].channels;
	delete convert[model].labels;
	Object.defineProperty(convert[model], 'channels', {value: channels});
	Object.defineProperty(convert[model], 'labels', {value: labels});
}

convert.rgb.hsl = function (rgb) {
	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;
	const min = Math.min(r, g, b);
	const max = Math.max(r, g, b);
	const delta = max - min;
	let h;
	let s;

	if (max === min) {
		h = 0;
	} else if (r === max) {
		h = (g - b) / delta;
	} else if (g === max) {
		h = 2 + (b - r) / delta;
	} else if (b === max) {
		h = 4 + (r - g) / delta;
	}

	h = Math.min(h * 60, 360);

	if (h < 0) {
		h += 360;
	}

	const l = (min + max) / 2;

	if (max === min) {
		s = 0;
	} else if (l <= 0.5) {
		s = delta / (max + min);
	} else {
		s = delta / (2 - max - min);
	}

	return [h, s * 100, l * 100];
};

convert.rgb.hsv = function (rgb) {
	let rdif;
	let gdif;
	let bdif;
	let h;
	let s;

	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;
	const v = Math.max(r, g, b);
	const diff = v - Math.min(r, g, b);
	const diffc = function (c) {
		return (v - c) / 6 / diff + 1 / 2;
	};

	if (diff === 0) {
		h = 0;
		s = 0;
	} else {
		s = diff / v;
		rdif = diffc(r);
		gdif = diffc(g);
		bdif = diffc(b);

		if (r === v) {
			h = bdif - gdif;
		} else if (g === v) {
			h = (1 / 3) + rdif - bdif;
		} else if (b === v) {
			h = (2 / 3) + gdif - rdif;
		}

		if (h < 0) {
			h += 1;
		} else if (h > 1) {
			h -= 1;
		}
	}

	return [
		h * 360,
		s * 100,
		v * 100
	];
};

convert.rgb.hwb = function (rgb) {
	const r = rgb[0];
	const g = rgb[1];
	let b = rgb[2];
	const h = convert.rgb.hsl(rgb)[0];
	const w = 1 / 255 * Math.min(r, Math.min(g, b));

	b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

	return [h, w * 100, b * 100];
};

convert.rgb.cmyk = function (rgb) {
	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;

	const k = Math.min(1 - r, 1 - g, 1 - b);
	const c = (1 - r - k) / (1 - k) || 0;
	const m = (1 - g - k) / (1 - k) || 0;
	const y = (1 - b - k) / (1 - k) || 0;

	return [c * 100, m * 100, y * 100, k * 100];
};

function comparativeDistance(x, y) {
	/*
		See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
	*/
	return (
		((x[0] - y[0]) ** 2) +
		((x[1] - y[1]) ** 2) +
		((x[2] - y[2]) ** 2)
	);
}

convert.rgb.keyword = function (rgb) {
	const reversed = reverseKeywords[rgb];
	if (reversed) {
		return reversed;
	}

	let currentClosestDistance = Infinity;
	let currentClosestKeyword;

	for (const keyword of Object.keys(cssKeywords)) {
		const value = cssKeywords[keyword];

		// Compute comparative distance
		const distance = comparativeDistance(rgb, value);

		// Check if its less, if so set as closest
		if (distance < currentClosestDistance) {
			currentClosestDistance = distance;
			currentClosestKeyword = keyword;
		}
	}

	return currentClosestKeyword;
};

convert.keyword.rgb = function (keyword) {
	return cssKeywords[keyword];
};

convert.rgb.xyz = function (rgb) {
	let r = rgb[0] / 255;
	let g = rgb[1] / 255;
	let b = rgb[2] / 255;

	// Assume sRGB
	r = r > 0.04045 ? (((r + 0.055) / 1.055) ** 2.4) : (r / 12.92);
	g = g > 0.04045 ? (((g + 0.055) / 1.055) ** 2.4) : (g / 12.92);
	b = b > 0.04045 ? (((b + 0.055) / 1.055) ** 2.4) : (b / 12.92);

	const x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
	const y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
	const z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

	return [x * 100, y * 100, z * 100];
};

convert.rgb.lab = function (rgb) {
	const xyz = convert.rgb.xyz(rgb);
	let x = xyz[0];
	let y = xyz[1];
	let z = xyz[2];

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);

	const l = (116 * y) - 16;
	const a = 500 * (x - y);
	const b = 200 * (y - z);

	return [l, a, b];
};

convert.hsl.rgb = function (hsl) {
	const h = hsl[0] / 360;
	const s = hsl[1] / 100;
	const l = hsl[2] / 100;
	let t2;
	let t3;
	let val;

	if (s === 0) {
		val = l * 255;
		return [val, val, val];
	}

	if (l < 0.5) {
		t2 = l * (1 + s);
	} else {
		t2 = l + s - l * s;
	}

	const t1 = 2 * l - t2;

	const rgb = [0, 0, 0];
	for (let i = 0; i < 3; i++) {
		t3 = h + 1 / 3 * -(i - 1);
		if (t3 < 0) {
			t3++;
		}

		if (t3 > 1) {
			t3--;
		}

		if (6 * t3 < 1) {
			val = t1 + (t2 - t1) * 6 * t3;
		} else if (2 * t3 < 1) {
			val = t2;
		} else if (3 * t3 < 2) {
			val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
		} else {
			val = t1;
		}

		rgb[i] = val * 255;
	}

	return rgb;
};

convert.hsl.hsv = function (hsl) {
	const h = hsl[0];
	let s = hsl[1] / 100;
	let l = hsl[2] / 100;
	let smin = s;
	const lmin = Math.max(l, 0.01);

	l *= 2;
	s *= (l <= 1) ? l : 2 - l;
	smin *= lmin <= 1 ? lmin : 2 - lmin;
	const v = (l + s) / 2;
	const sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

	return [h, sv * 100, v * 100];
};

convert.hsv.rgb = function (hsv) {
	const h = hsv[0] / 60;
	const s = hsv[1] / 100;
	let v = hsv[2] / 100;
	const hi = Math.floor(h) % 6;

	const f = h - Math.floor(h);
	const p = 255 * v * (1 - s);
	const q = 255 * v * (1 - (s * f));
	const t = 255 * v * (1 - (s * (1 - f)));
	v *= 255;

	switch (hi) {
		case 0:
			return [v, t, p];
		case 1:
			return [q, v, p];
		case 2:
			return [p, v, t];
		case 3:
			return [p, q, v];
		case 4:
			return [t, p, v];
		case 5:
			return [v, p, q];
	}
};

convert.hsv.hsl = function (hsv) {
	const h = hsv[0];
	const s = hsv[1] / 100;
	const v = hsv[2] / 100;
	const vmin = Math.max(v, 0.01);
	let sl;
	let l;

	l = (2 - s) * v;
	const lmin = (2 - s) * vmin;
	sl = s * vmin;
	sl /= (lmin <= 1) ? lmin : 2 - lmin;
	sl = sl || 0;
	l /= 2;

	return [h, sl * 100, l * 100];
};

// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
convert.hwb.rgb = function (hwb) {
	const h = hwb[0] / 360;
	let wh = hwb[1] / 100;
	let bl = hwb[2] / 100;
	const ratio = wh + bl;
	let f;

	// Wh + bl cant be > 1
	if (ratio > 1) {
		wh /= ratio;
		bl /= ratio;
	}

	const i = Math.floor(6 * h);
	const v = 1 - bl;
	f = 6 * h - i;

	if ((i & 0x01) !== 0) {
		f = 1 - f;
	}

	const n = wh + f * (v - wh); // Linear interpolation

	let r;
	let g;
	let b;
	/* eslint-disable max-statements-per-line,no-multi-spaces */
	switch (i) {
		default:
		case 6:
		case 0: r = v;  g = n;  b = wh; break;
		case 1: r = n;  g = v;  b = wh; break;
		case 2: r = wh; g = v;  b = n; break;
		case 3: r = wh; g = n;  b = v; break;
		case 4: r = n;  g = wh; b = v; break;
		case 5: r = v;  g = wh; b = n; break;
	}
	/* eslint-enable max-statements-per-line,no-multi-spaces */

	return [r * 255, g * 255, b * 255];
};

convert.cmyk.rgb = function (cmyk) {
	const c = cmyk[0] / 100;
	const m = cmyk[1] / 100;
	const y = cmyk[2] / 100;
	const k = cmyk[3] / 100;

	const r = 1 - Math.min(1, c * (1 - k) + k);
	const g = 1 - Math.min(1, m * (1 - k) + k);
	const b = 1 - Math.min(1, y * (1 - k) + k);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.rgb = function (xyz) {
	const x = xyz[0] / 100;
	const y = xyz[1] / 100;
	const z = xyz[2] / 100;
	let r;
	let g;
	let b;

	r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
	g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
	b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

	// Assume sRGB
	r = r > 0.0031308
		? ((1.055 * (r ** (1.0 / 2.4))) - 0.055)
		: r * 12.92;

	g = g > 0.0031308
		? ((1.055 * (g ** (1.0 / 2.4))) - 0.055)
		: g * 12.92;

	b = b > 0.0031308
		? ((1.055 * (b ** (1.0 / 2.4))) - 0.055)
		: b * 12.92;

	r = Math.min(Math.max(0, r), 1);
	g = Math.min(Math.max(0, g), 1);
	b = Math.min(Math.max(0, b), 1);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.lab = function (xyz) {
	let x = xyz[0];
	let y = xyz[1];
	let z = xyz[2];

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);

	const l = (116 * y) - 16;
	const a = 500 * (x - y);
	const b = 200 * (y - z);

	return [l, a, b];
};

convert.lab.xyz = function (lab) {
	const l = lab[0];
	const a = lab[1];
	const b = lab[2];
	let x;
	let y;
	let z;

	y = (l + 16) / 116;
	x = a / 500 + y;
	z = y - b / 200;

	const y2 = y ** 3;
	const x2 = x ** 3;
	const z2 = z ** 3;
	y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
	x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
	z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

	x *= 95.047;
	y *= 100;
	z *= 108.883;

	return [x, y, z];
};

convert.lab.lch = function (lab) {
	const l = lab[0];
	const a = lab[1];
	const b = lab[2];
	let h;

	const hr = Math.atan2(b, a);
	h = hr * 360 / 2 / Math.PI;

	if (h < 0) {
		h += 360;
	}

	const c = Math.sqrt(a * a + b * b);

	return [l, c, h];
};

convert.lch.lab = function (lch) {
	const l = lch[0];
	const c = lch[1];
	const h = lch[2];

	const hr = h / 360 * 2 * Math.PI;
	const a = c * Math.cos(hr);
	const b = c * Math.sin(hr);

	return [l, a, b];
};

convert.rgb.ansi16 = function (args, saturation = null) {
	const [r, g, b] = args;
	let value = saturation === null ? convert.rgb.hsv(args)[2] : saturation; // Hsv -> ansi16 optimization

	value = Math.round(value / 50);

	if (value === 0) {
		return 30;
	}

	let ansi = 30
		+ ((Math.round(b / 255) << 2)
		| (Math.round(g / 255) << 1)
		| Math.round(r / 255));

	if (value === 2) {
		ansi += 60;
	}

	return ansi;
};

convert.hsv.ansi16 = function (args) {
	// Optimization here; we already know the value and don't need to get
	// it converted for us.
	return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
};

convert.rgb.ansi256 = function (args) {
	const r = args[0];
	const g = args[1];
	const b = args[2];

	// We use the extended greyscale palette here, with the exception of
	// black and white. normal palette only has 4 greyscale shades.
	if (r === g && g === b) {
		if (r < 8) {
			return 16;
		}

		if (r > 248) {
			return 231;
		}

		return Math.round(((r - 8) / 247) * 24) + 232;
	}

	const ansi = 16
		+ (36 * Math.round(r / 255 * 5))
		+ (6 * Math.round(g / 255 * 5))
		+ Math.round(b / 255 * 5);

	return ansi;
};

convert.ansi16.rgb = function (args) {
	let color = args % 10;

	// Handle greyscale
	if (color === 0 || color === 7) {
		if (args > 50) {
			color += 3.5;
		}

		color = color / 10.5 * 255;

		return [color, color, color];
	}

	const mult = (~~(args > 50) + 1) * 0.5;
	const r = ((color & 1) * mult) * 255;
	const g = (((color >> 1) & 1) * mult) * 255;
	const b = (((color >> 2) & 1) * mult) * 255;

	return [r, g, b];
};

convert.ansi256.rgb = function (args) {
	// Handle greyscale
	if (args >= 232) {
		const c = (args - 232) * 10 + 8;
		return [c, c, c];
	}

	args -= 16;

	let rem;
	const r = Math.floor(args / 36) / 5 * 255;
	const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
	const b = (rem % 6) / 5 * 255;

	return [r, g, b];
};

convert.rgb.hex = function (args) {
	const integer = ((Math.round(args[0]) & 0xFF) << 16)
		+ ((Math.round(args[1]) & 0xFF) << 8)
		+ (Math.round(args[2]) & 0xFF);

	const string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.hex.rgb = function (args) {
	const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
	if (!match) {
		return [0, 0, 0];
	}

	let colorString = match[0];

	if (match[0].length === 3) {
		colorString = colorString.split('').map(char => {
			return char + char;
		}).join('');
	}

	const integer = parseInt(colorString, 16);
	const r = (integer >> 16) & 0xFF;
	const g = (integer >> 8) & 0xFF;
	const b = integer & 0xFF;

	return [r, g, b];
};

convert.rgb.hcg = function (rgb) {
	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;
	const max = Math.max(Math.max(r, g), b);
	const min = Math.min(Math.min(r, g), b);
	const chroma = (max - min);
	let grayscale;
	let hue;

	if (chroma < 1) {
		grayscale = min / (1 - chroma);
	} else {
		grayscale = 0;
	}

	if (chroma <= 0) {
		hue = 0;
	} else
	if (max === r) {
		hue = ((g - b) / chroma) % 6;
	} else
	if (max === g) {
		hue = 2 + (b - r) / chroma;
	} else {
		hue = 4 + (r - g) / chroma;
	}

	hue /= 6;
	hue %= 1;

	return [hue * 360, chroma * 100, grayscale * 100];
};

convert.hsl.hcg = function (hsl) {
	const s = hsl[1] / 100;
	const l = hsl[2] / 100;

	const c = l < 0.5 ? (2.0 * s * l) : (2.0 * s * (1.0 - l));

	let f = 0;
	if (c < 1.0) {
		f = (l - 0.5 * c) / (1.0 - c);
	}

	return [hsl[0], c * 100, f * 100];
};

convert.hsv.hcg = function (hsv) {
	const s = hsv[1] / 100;
	const v = hsv[2] / 100;

	const c = s * v;
	let f = 0;

	if (c < 1.0) {
		f = (v - c) / (1 - c);
	}

	return [hsv[0], c * 100, f * 100];
};

convert.hcg.rgb = function (hcg) {
	const h = hcg[0] / 360;
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;

	if (c === 0.0) {
		return [g * 255, g * 255, g * 255];
	}

	const pure = [0, 0, 0];
	const hi = (h % 1) * 6;
	const v = hi % 1;
	const w = 1 - v;
	let mg = 0;

	/* eslint-disable max-statements-per-line */
	switch (Math.floor(hi)) {
		case 0:
			pure[0] = 1; pure[1] = v; pure[2] = 0; break;
		case 1:
			pure[0] = w; pure[1] = 1; pure[2] = 0; break;
		case 2:
			pure[0] = 0; pure[1] = 1; pure[2] = v; break;
		case 3:
			pure[0] = 0; pure[1] = w; pure[2] = 1; break;
		case 4:
			pure[0] = v; pure[1] = 0; pure[2] = 1; break;
		default:
			pure[0] = 1; pure[1] = 0; pure[2] = w;
	}
	/* eslint-enable max-statements-per-line */

	mg = (1.0 - c) * g;

	return [
		(c * pure[0] + mg) * 255,
		(c * pure[1] + mg) * 255,
		(c * pure[2] + mg) * 255
	];
};

convert.hcg.hsv = function (hcg) {
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;

	const v = c + g * (1.0 - c);
	let f = 0;

	if (v > 0.0) {
		f = c / v;
	}

	return [hcg[0], f * 100, v * 100];
};

convert.hcg.hsl = function (hcg) {
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;

	const l = g * (1.0 - c) + 0.5 * c;
	let s = 0;

	if (l > 0.0 && l < 0.5) {
		s = c / (2 * l);
	} else
	if (l >= 0.5 && l < 1.0) {
		s = c / (2 * (1 - l));
	}

	return [hcg[0], s * 100, l * 100];
};

convert.hcg.hwb = function (hcg) {
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;
	const v = c + g * (1.0 - c);
	return [hcg[0], (v - c) * 100, (1 - v) * 100];
};

convert.hwb.hcg = function (hwb) {
	const w = hwb[1] / 100;
	const b = hwb[2] / 100;
	const v = 1 - b;
	const c = v - w;
	let g = 0;

	if (c < 1) {
		g = (v - c) / (1 - c);
	}

	return [hwb[0], c * 100, g * 100];
};

convert.apple.rgb = function (apple) {
	return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
};

convert.rgb.apple = function (rgb) {
	return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
};

convert.gray.rgb = function (args) {
	return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
};

convert.gray.hsl = function (args) {
	return [0, 0, args[0]];
};

convert.gray.hsv = convert.gray.hsl;

convert.gray.hwb = function (gray) {
	return [0, 100, gray[0]];
};

convert.gray.cmyk = function (gray) {
	return [0, 0, 0, gray[0]];
};

convert.gray.lab = function (gray) {
	return [gray[0], 0, 0];
};

convert.gray.hex = function (gray) {
	const val = Math.round(gray[0] / 100 * 255) & 0xFF;
	const integer = (val << 16) + (val << 8) + val;

	const string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.rgb.gray = function (rgb) {
	const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
	return [val / 255 * 100];
};


/***/ }),

/***/ 2441:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const conversions = __nccwpck_require__(4661);
const route = __nccwpck_require__(1383);

const convert = {};

const models = Object.keys(conversions);

function wrapRaw(fn) {
	const wrappedFn = function (...args) {
		const arg0 = args[0];
		if (arg0 === undefined || arg0 === null) {
			return arg0;
		}

		if (arg0.length > 1) {
			args = arg0;
		}

		return fn(args);
	};

	// Preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

function wrapRounded(fn) {
	const wrappedFn = function (...args) {
		const arg0 = args[0];

		if (arg0 === undefined || arg0 === null) {
			return arg0;
		}

		if (arg0.length > 1) {
			args = arg0;
		}

		const result = fn(args);

		// We're assuming the result is an array here.
		// see notice in conversions.js; don't use box types
		// in conversion functions.
		if (typeof result === 'object') {
			for (let len = result.length, i = 0; i < len; i++) {
				result[i] = Math.round(result[i]);
			}
		}

		return result;
	};

	// Preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

models.forEach(fromModel => {
	convert[fromModel] = {};

	Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});
	Object.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});

	const routes = route(fromModel);
	const routeModels = Object.keys(routes);

	routeModels.forEach(toModel => {
		const fn = routes[toModel];

		convert[fromModel][toModel] = wrapRounded(fn);
		convert[fromModel][toModel].raw = wrapRaw(fn);
	});
});

module.exports = convert;


/***/ }),

/***/ 1383:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const conversions = __nccwpck_require__(4661);

/*
	This function routes a model to all other models.

	all functions that are routed have a property `.conversion` attached
	to the returned synthetic function. This property is an array
	of strings, each with the steps in between the 'from' and 'to'
	color models (inclusive).

	conversions that are not possible simply are not included.
*/

function buildGraph() {
	const graph = {};
	// https://jsperf.com/object-keys-vs-for-in-with-closure/3
	const models = Object.keys(conversions);

	for (let len = models.length, i = 0; i < len; i++) {
		graph[models[i]] = {
			// http://jsperf.com/1-vs-infinity
			// micro-opt, but this is simple.
			distance: -1,
			parent: null
		};
	}

	return graph;
}

// https://en.wikipedia.org/wiki/Breadth-first_search
function deriveBFS(fromModel) {
	const graph = buildGraph();
	const queue = [fromModel]; // Unshift -> queue -> pop

	graph[fromModel].distance = 0;

	while (queue.length) {
		const current = queue.pop();
		const adjacents = Object.keys(conversions[current]);

		for (let len = adjacents.length, i = 0; i < len; i++) {
			const adjacent = adjacents[i];
			const node = graph[adjacent];

			if (node.distance === -1) {
				node.distance = graph[current].distance + 1;
				node.parent = current;
				queue.unshift(adjacent);
			}
		}
	}

	return graph;
}

function link(from, to) {
	return function (args) {
		return to(from(args));
	};
}

function wrapConversion(toModel, graph) {
	const path = [graph[toModel].parent, toModel];
	let fn = conversions[graph[toModel].parent][toModel];

	let cur = graph[toModel].parent;
	while (graph[cur].parent) {
		path.unshift(graph[cur].parent);
		fn = link(conversions[graph[cur].parent][cur], fn);
		cur = graph[cur].parent;
	}

	fn.conversion = path;
	return fn;
}

module.exports = function (fromModel) {
	const graph = deriveBFS(fromModel);
	const conversion = {};

	const models = Object.keys(graph);
	for (let len = models.length, i = 0; i < len; i++) {
		const toModel = models[i];
		const node = graph[toModel];

		if (node.parent === null) {
			// No possible conversion, or this node is the source model.
			continue;
		}

		conversion[toModel] = wrapConversion(toModel, graph);
	}

	return conversion;
};



/***/ }),

/***/ 376:
/***/ ((module) => {



module.exports = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};


/***/ }),

/***/ 7898:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var camelCase = _interopDefault(__nccwpck_require__(3807));

/**
 * Takes any input and guarantees an array back.
 *
 * - Converts array-like objects (e.g. `arguments`, `Set`) to a real array.
 * - Converts `undefined` to an empty array.
 * - Converts any another other, singular value (including `null`, objects and iterables other than `Set`) into an array containing that value.
 * - Ignores input which is already an array.
 *
 * @module array-back
 * @example
 * > const arrayify = require('array-back')
 *
 * > arrayify(undefined)
 * []
 *
 * > arrayify(null)
 * [ null ]
 *
 * > arrayify(0)
 * [ 0 ]
 *
 * > arrayify([ 1, 2 ])
 * [ 1, 2 ]
 *
 * > arrayify(new Set([ 1, 2 ]))
 * [ 1, 2 ]
 *
 * > function f(){ return arrayify(arguments); }
 * > f(1,2,3)
 * [ 1, 2, 3 ]
 */

function isObject (input) {
  return typeof input === 'object' && input !== null
}

function isArrayLike (input) {
  return isObject(input) && typeof input.length === 'number'
}

/**
 * @param {*} - The input value to convert to an array
 * @returns {Array}
 * @alias module:array-back
 */
function arrayify (input) {
  if (Array.isArray(input)) {
    return input
  }

  if (input === undefined) {
    return []
  }

  if (isArrayLike(input) || input instanceof Set) {
    return Array.from(input)
  }

  return [ input ]
}

/**
 * Takes any input and guarantees an array back.
 *
 * - converts array-like objects (e.g. `arguments`) to a real array
 * - converts `undefined` to an empty array
 * - converts any another other, singular value (including `null`) into an array containing that value
 * - ignores input which is already an array
 *
 * @module array-back
 * @example
 * > const arrayify = require('array-back')
 *
 * > arrayify(undefined)
 * []
 *
 * > arrayify(null)
 * [ null ]
 *
 * > arrayify(0)
 * [ 0 ]
 *
 * > arrayify([ 1, 2 ])
 * [ 1, 2 ]
 *
 * > function f(){ return arrayify(arguments); }
 * > f(1,2,3)
 * [ 1, 2, 3 ]
 */

function isObject$1 (input) {
  return typeof input === 'object' && input !== null
}

function isArrayLike$1 (input) {
  return isObject$1(input) && typeof input.length === 'number'
}

/**
 * @param {*} - the input value to convert to an array
 * @returns {Array}
 * @alias module:array-back
 */
function arrayify$1 (input) {
  if (Array.isArray(input)) {
    return input
  } else {
    if (input === undefined) {
      return []
    } else if (isArrayLike$1(input)) {
      return Array.prototype.slice.call(input)
    } else {
      return [ input ]
    }
  }
}

/**
 * Find and either replace or remove items in an array.
 *
 * @module find-replace
 * @example
 * > const findReplace = require('find-replace')
 * > const numbers = [ 1, 2, 3]
 *
 * > findReplace(numbers, n => n === 2, 'two')
 * [ 1, 'two', 3 ]
 *
 * > findReplace(numbers, n => n === 2, [ 'two', 'zwei' ])
 * [ 1, [ 'two', 'zwei' ], 3 ]
 *
 * > findReplace(numbers, n => n === 2, 'two', 'zwei')
 * [ 1, 'two', 'zwei', 3 ]
 *
 * > findReplace(numbers, n => n === 2) // no replacement, so remove
 * [ 1, 3 ]
 */

/**
 * @param {array} - The input array
 * @param {testFn} - A predicate function which, if returning `true` causes the current item to be operated on.
 * @param [replaceWith] {...any} - If specified, found values will be replaced with these values, else removed.
 * @returns {array}
 * @alias module:find-replace
 */
function findReplace (array, testFn) {
  const found = [];
  const replaceWiths = arrayify$1(arguments);
  replaceWiths.splice(0, 2);

  arrayify$1(array).forEach((value, index) => {
    let expanded = [];
    replaceWiths.forEach(replaceWith => {
      if (typeof replaceWith === 'function') {
        expanded = expanded.concat(replaceWith(value));
      } else {
        expanded.push(replaceWith);
      }
    });

    if (testFn(value)) {
      found.push({
        index: index,
        replaceWithValue: expanded
      });
    }
  });

  found.reverse().forEach(item => {
    const spliceArgs = [ item.index, 1 ].concat(item.replaceWithValue);
    array.splice.apply(array, spliceArgs);
  });

  return array
}

/**
 * Some useful tools for working with `process.argv`.
 *
 * @module argv-tools
 * @typicalName argvTools
 * @example
 * const argvTools = require('argv-tools')
 */

/**
 * Regular expressions for matching option formats.
 * @static
 */
const re = {
  short: /^-([^\d-])$/,
  long: /^--(\S+)/,
  combinedShort: /^-[^\d-]{2,}$/,
  optEquals: /^(--\S+?)=(.*)/
};

/**
 * Array subclass encapsulating common operations on `process.argv`.
 * @static
 */
class ArgvArray extends Array {
  /**
   * Clears the array has loads the supplied input.
   * @param {string[]} argv - The argv list to load. Defaults to `process.argv`.
   */
  load (argv) {
    this.clear();
    if (argv && argv !== process.argv) {
      argv = arrayify(argv);
    } else {
      /* if no argv supplied, assume we are parsing process.argv */
      argv = process.argv.slice(0);
      const deleteCount = process.execArgv.some(isExecArg) ? 1 : 2;
      argv.splice(0, deleteCount);
    }
    argv.forEach(arg => this.push(String(arg)));
  }

  /**
   * Clear the array.
   */
  clear () {
    this.length = 0;
  }

  /**
   * expand ``--option=value` style args.
   */
  expandOptionEqualsNotation () {
    if (this.some(arg => re.optEquals.test(arg))) {
      const expandedArgs = [];
      this.forEach(arg => {
        const matches = arg.match(re.optEquals);
        if (matches) {
          expandedArgs.push(matches[1], matches[2]);
        } else {
          expandedArgs.push(arg);
        }
      });
      this.clear();
      this.load(expandedArgs);
    }
  }

  /**
   * expand getopt-style combinedShort options.
   */
  expandGetoptNotation () {
    if (this.hasCombinedShortOptions()) {
      findReplace(this, re.combinedShort, expandCombinedShortArg);
    }
  }

  /**
   * Returns true if the array contains combined short options (e.g. `-ab`).
   * @returns {boolean}
   */
  hasCombinedShortOptions () {
    return this.some(arg => re.combinedShort.test(arg))
  }

  static from (argv) {
    const result = new this();
    result.load(argv);
    return result
  }
}

/**
 * Expand a combined short option.
 * @param {string} - the string to expand, e.g. `-ab`
 * @returns {string[]}
 * @static
 */
function expandCombinedShortArg (arg) {
  /* remove initial hypen */
  arg = arg.slice(1);
  return arg.split('').map(letter => '-' + letter)
}

/**
 * Returns true if the supplied arg matches `--option=value` notation.
 * @param {string} - the arg to test, e.g. `--one=something`
 * @returns {boolean}
 * @static
 */
function isOptionEqualsNotation (arg) {
  return re.optEquals.test(arg)
}

/**
 * Returns true if the supplied arg is in either long (`--one`) or short (`-o`) format.
 * @param {string} - the arg to test, e.g. `--one`
 * @returns {boolean}
 * @static
 */
function isOption (arg) {
  return (re.short.test(arg) || re.long.test(arg)) && !re.optEquals.test(arg)
}

/**
 * Returns true if the supplied arg is in long (`--one`) format.
 * @param {string} - the arg to test, e.g. `--one`
 * @returns {boolean}
 * @static
 */
function isLongOption (arg) {
  return re.long.test(arg) && !isOptionEqualsNotation(arg)
}

/**
 * Returns the name from a long, short or `--options=value` arg.
 * @param {string} - the arg to inspect, e.g. `--one`
 * @returns {string}
 * @static
 */
function getOptionName (arg) {
  if (re.short.test(arg)) {
    return arg.match(re.short)[1]
  } else if (isLongOption(arg)) {
    return arg.match(re.long)[1]
  } else if (isOptionEqualsNotation(arg)) {
    return arg.match(re.optEquals)[1].replace(/^--/, '')
  } else {
    return null
  }
}

function isValue (arg) {
  return !(isOption(arg) || re.combinedShort.test(arg) || re.optEquals.test(arg))
}

function isExecArg (arg) {
  return ['--eval', '-e'].indexOf(arg) > -1 || arg.startsWith('--eval=')
}

/**
 * For type-checking Javascript values.
 * @module typical
 * @typicalname t
 * @example
 * const t = require('typical')
 */

/**
 * Returns true if input is a number
 * @param {*} - the input to test
 * @returns {boolean}
 * @static
 * @example
 * > t.isNumber(0)
 * true
 * > t.isNumber(1)
 * true
 * > t.isNumber(1.1)
 * true
 * > t.isNumber(0xff)
 * true
 * > t.isNumber(0644)
 * true
 * > t.isNumber(6.2e5)
 * true
 * > t.isNumber(NaN)
 * false
 * > t.isNumber(Infinity)
 * false
 */
function isNumber (n) {
  return !isNaN(parseFloat(n)) && isFinite(n)
}

/**
 * A plain object is a simple object literal, it is not an instance of a class. Returns true if the input `typeof` is `object` and directly decends from `Object`.
 *
 * @param {*} - the input to test
 * @returns {boolean}
 * @static
 * @example
 * > t.isPlainObject({ something: 'one' })
 * true
 * > t.isPlainObject(new Date())
 * false
 * > t.isPlainObject([ 0, 1 ])
 * false
 * > t.isPlainObject(/test/)
 * false
 * > t.isPlainObject(1)
 * false
 * > t.isPlainObject('one')
 * false
 * > t.isPlainObject(null)
 * false
 * > t.isPlainObject((function * () {})())
 * false
 * > t.isPlainObject(function * () {})
 * false
 */
function isPlainObject (input) {
  return input !== null && typeof input === 'object' && input.constructor === Object
}

/**
 * An array-like value has all the properties of an array, but is not an array instance. Examples in the `arguments` object. Returns true if the input value is an object, not null and has a `length` property with a numeric value.
 *
 * @param {*} - the input to test
 * @returns {boolean}
 * @static
 * @example
 * function sum(x, y){
 *     console.log(t.isArrayLike(arguments))
 *     // prints `true`
 * }
 */
function isArrayLike$2 (input) {
  return isObject$2(input) && typeof input.length === 'number'
}

/**
 * returns true if the typeof input is `'object'`, but not null!
 * @param {*} - the input to test
 * @returns {boolean}
 * @static
 */
function isObject$2 (input) {
  return typeof input === 'object' && input !== null
}

/**
 * Returns true if the input value is defined
 * @param {*} - the input to test
 * @returns {boolean}
 * @static
 */
function isDefined (input) {
  return typeof input !== 'undefined'
}

/**
 * Returns true if the input value is a string
 * @param {*} - the input to test
 * @returns {boolean}
 * @static
 */
function isString (input) {
  return typeof input === 'string'
}

/**
 * Returns true if the input value is a boolean
 * @param {*} - the input to test
 * @returns {boolean}
 * @static
 */
function isBoolean (input) {
  return typeof input === 'boolean'
}

/**
 * Returns true if the input value is a function
 * @param {*} - the input to test
 * @returns {boolean}
 * @static
 */
function isFunction (input) {
  return typeof input === 'function'
}

/**
 * Returns true if the input value is an es2015 `class`.
 * @param {*} - the input to test
 * @returns {boolean}
 * @static
 */
function isClass (input) {
  if (isFunction(input)) {
    return /^class /.test(Function.prototype.toString.call(input))
  } else {
    return false
  }
}

/**
 * Returns true if the input is a string, number, symbol, boolean, null or undefined value.
 * @param {*} - the input to test
 * @returns {boolean}
 * @static
 */
function isPrimitive (input) {
  if (input === null) return true
  switch (typeof input) {
    case 'string':
    case 'number':
    case 'symbol':
    case 'undefined':
    case 'boolean':
      return true
    default:
      return false
  }
}

/**
 * Returns true if the input is a Promise.
 * @param {*} - the input to test
 * @returns {boolean}
 * @static
 */
function isPromise (input) {
  if (input) {
    const isPromise = isDefined(Promise) && input instanceof Promise;
    const isThenable = input.then && typeof input.then === 'function';
    return !!(isPromise || isThenable)
  } else {
    return false
  }
}

/**
 * Returns true if the input is an iterable (`Map`, `Set`, `Array`, Generator etc.).
 * @param {*} - the input to test
 * @returns {boolean}
 * @static
 * @example
 * > t.isIterable('string')
 * true
 * > t.isIterable(new Map())
 * true
 * > t.isIterable([])
 * true
 * > t.isIterable((function * () {})())
 * true
 * > t.isIterable(Promise.resolve())
 * false
 * > t.isIterable(Promise)
 * false
 * > t.isIterable(true)
 * false
 * > t.isIterable({})
 * false
 * > t.isIterable(0)
 * false
 * > t.isIterable(1.1)
 * false
 * > t.isIterable(NaN)
 * false
 * > t.isIterable(Infinity)
 * false
 * > t.isIterable(function () {})
 * false
 * > t.isIterable(Date)
 * false
 * > t.isIterable()
 * false
 * > t.isIterable({ then: function () {} })
 * false
 */
function isIterable (input) {
  if (input === null || !isDefined(input)) {
    return false
  } else {
    return (
      typeof input[Symbol.iterator] === 'function' ||
      typeof input[Symbol.asyncIterator] === 'function'
    )
  }
}

var t = {
  isNumber,
  isString,
  isBoolean,
  isPlainObject,
  isArrayLike: isArrayLike$2,
  isObject: isObject$2,
  isDefined,
  isFunction,
  isClass,
  isPrimitive,
  isPromise,
  isIterable
};

/**
 * @module option-definition
 */

/**
 * Describes a command-line option. Additionally, if generating a usage guide with [command-line-usage](https://github.com/75lb/command-line-usage) you could optionally add `description` and `typeLabel` properties to each definition.
 *
 * @alias module:option-definition
 * @typicalname option
 */
class OptionDefinition {
  constructor (definition) {
    /**
    * The only required definition property is `name`, so the simplest working example is
    * ```js
    * const optionDefinitions = [
    *   { name: 'file' },
    *   { name: 'depth' }
    * ]
    * ```
    *
    * Where a `type` property is not specified it will default to `String`.
    *
    * | #   | argv input | commandLineArgs() output |
    * | --- | -------------------- | ------------ |
    * | 1   | `--file` | `{ file: null }` |
    * | 2   | `--file lib.js` | `{ file: 'lib.js' }` |
    * | 3   | `--depth 2` | `{ depth: '2' }` |
    *
    * Unicode option names and aliases are valid, for example:
    * ```js
    * const optionDefinitions = [
    *   { name: 'один' },
    *   { name: '两' },
    *   { name: 'три', alias: 'т' }
    * ]
    * ```
    * @type {string}
    */
    this.name = definition.name;

    /**
    * The `type` value is a setter function (you receive the output from this), enabling you to be specific about the type and value received.
    *
    * The most common values used are `String` (the default), `Number` and `Boolean` but you can use a custom function, for example:
    *
    * ```js
    * const fs = require('fs')
    *
    * class FileDetails {
    *   constructor (filename) {
    *     this.filename = filename
    *     this.exists = fs.existsSync(filename)
    *   }
    * }
    *
    * const cli = commandLineArgs([
    *   { name: 'file', type: filename => new FileDetails(filename) },
    *   { name: 'depth', type: Number }
    * ])
    * ```
    *
    * | #   | argv input | commandLineArgs() output |
    * | --- | ----------------- | ------------ |
    * | 1   | `--file asdf.txt` | `{ file: { filename: 'asdf.txt', exists: false } }` |
    *
    * The `--depth` option expects a `Number`. If no value was set, you will receive `null`.
    *
    * | #   | argv input | commandLineArgs() output |
    * | --- | ----------------- | ------------ |
    * | 2   | `--depth` | `{ depth: null }` |
    * | 3   | `--depth 2` | `{ depth: 2 }` |
    *
    * @type {function}
    * @default String
    */
    this.type = definition.type || String;

    /**
    * getopt-style short option names. Can be any single character (unicode included) except a digit or hyphen.
    *
    * ```js
    * const optionDefinitions = [
    *   { name: 'hot', alias: 'h', type: Boolean },
    *   { name: 'discount', alias: 'd', type: Boolean },
    *   { name: 'courses', alias: 'c' , type: Number }
    * ]
    * ```
    *
    * | #   | argv input | commandLineArgs() output |
    * | --- | ------------ | ------------ |
    * | 1   | `-hcd` | `{ hot: true, courses: null, discount: true }` |
    * | 2   | `-hdc 3` | `{ hot: true, discount: true, courses: 3 }` |
    *
    * @type {string}
    */
    this.alias = definition.alias;

    /**
    * Set this flag if the option takes a list of values. You will receive an array of values, each passed through the `type` function (if specified).
    *
    * ```js
    * const optionDefinitions = [
    *   { name: 'files', type: String, multiple: true }
    * ]
    * ```
    *
    * Note, examples 1 and 3 below demonstrate "greedy" parsing which can be disabled by using `lazyMultiple`.
    *
    * | #   | argv input | commandLineArgs() output |
    * | --- | ------------ | ------------ |
    * | 1   | `--files one.js two.js` | `{ files: [ 'one.js', 'two.js' ] }` |
    * | 2   | `--files one.js --files two.js` | `{ files: [ 'one.js', 'two.js' ] }` |
    * | 3   | `--files *` | `{ files: [ 'one.js', 'two.js' ] }` |
    *
    * @type {boolean}
    */
    this.multiple = definition.multiple;

    /**
     * Identical to `multiple` but with greedy parsing disabled.
     *
     * ```js
     * const optionDefinitions = [
     *   { name: 'files', lazyMultiple: true },
     *   { name: 'verbose', alias: 'v', type: Boolean, lazyMultiple: true }
     * ]
     * ```
     *
     * | #   | argv input | commandLineArgs() output |
     * | --- | ------------ | ------------ |
     * | 1   | `--files one.js --files two.js` | `{ files: [ 'one.js', 'two.js' ] }` |
     * | 2   | `-vvv` | `{ verbose: [ true, true, true ] }` |
     *
     * @type {boolean}
     */
    this.lazyMultiple = definition.lazyMultiple;

    /**
    * Any values unaccounted for by an option definition will be set on the `defaultOption`. This flag is typically set on the most commonly-used option to make for more concise usage (i.e. `$ example *.js` instead of `$ example --files *.js`).
    *
    * ```js
    * const optionDefinitions = [
    *   { name: 'files', multiple: true, defaultOption: true }
    * ]
    * ```
    *
    * | #   | argv input | commandLineArgs() output |
    * | --- | ------------ | ------------ |
    * | 1   | `--files one.js two.js` | `{ files: [ 'one.js', 'two.js' ] }` |
    * | 2   | `one.js two.js` | `{ files: [ 'one.js', 'two.js' ] }` |
    * | 3   | `*` | `{ files: [ 'one.js', 'two.js' ] }` |
    *
    * @type {boolean}
    */
    this.defaultOption = definition.defaultOption;

    /**
    * An initial value for the option.
    *
    * ```js
    * const optionDefinitions = [
    *   { name: 'files', multiple: true, defaultValue: [ 'one.js' ] },
    *   { name: 'max', type: Number, defaultValue: 3 }
    * ]
    * ```
    *
    * | #   | argv input | commandLineArgs() output |
    * | --- | ------------ | ------------ |
    * | 1   |  | `{ files: [ 'one.js' ], max: 3 }` |
    * | 2   | `--files two.js` | `{ files: [ 'two.js' ], max: 3 }` |
    * | 3   | `--max 4` | `{ files: [ 'one.js' ], max: 4 }` |
    *
    * @type {*}
    */
    this.defaultValue = definition.defaultValue;

    /**
    * When your app has a large amount of options it makes sense to organise them in groups.
    *
    * There are two automatic groups: `_all` (contains all options) and `_none` (contains options without a `group` specified in their definition).
    *
    * ```js
    * const optionDefinitions = [
    *   { name: 'verbose', group: 'standard' },
    *   { name: 'help', group: [ 'standard', 'main' ] },
    *   { name: 'compress', group: [ 'server', 'main' ] },
    *   { name: 'static', group: 'server' },
    *   { name: 'debug' }
    * ]
    * ```
    *
    *<table>
    *  <tr>
    *    <th>#</th><th>Command Line</th><th>commandLineArgs() output</th>
    *  </tr>
    *  <tr>
    *    <td>1</td><td><code>--verbose</code></td><td><pre><code>
    *{
    *  _all: { verbose: true },
    *  standard: { verbose: true }
    *}
    *</code></pre></td>
    *  </tr>
    *  <tr>
    *    <td>2</td><td><code>--debug</code></td><td><pre><code>
    *{
    *  _all: { debug: true },
    *  _none: { debug: true }
    *}
    *</code></pre></td>
    *  </tr>
    *  <tr>
    *    <td>3</td><td><code>--verbose --debug --compress</code></td><td><pre><code>
    *{
    *  _all: {
    *    verbose: true,
    *    debug: true,
    *    compress: true
    *  },
    *  standard: { verbose: true },
    *  server: { compress: true },
    *  main: { compress: true },
    *  _none: { debug: true }
    *}
    *</code></pre></td>
    *  </tr>
    *  <tr>
    *    <td>4</td><td><code>--compress</code></td><td><pre><code>
    *{
    *  _all: { compress: true },
    *  server: { compress: true },
    *  main: { compress: true }
    *}
    *</code></pre></td>
    *  </tr>
    *</table>
    *
    * @type {string|string[]}
    */
    this.group = definition.group;

    /* pick up any remaining properties */
    for (const prop in definition) {
      if (!this[prop]) this[prop] = definition[prop];
    }
  }

  isBoolean () {
    return this.type === Boolean || (t.isFunction(this.type) && this.type.name === 'Boolean')
  }

  isMultiple () {
    return this.multiple || this.lazyMultiple
  }

  static create (def) {
    const result = new this(def);
    return result
  }
}

/**
 * @module option-definitions
 */

/**
 * @alias module:option-definitions
 */
class Definitions extends Array {
  /**
   * validate option definitions
   * @param {boolean} [caseInsensitive=false] - whether arguments will be parsed in a case insensitive manner
   * @returns {string}
   */
  validate (caseInsensitive) {
    const someHaveNoName = this.some(def => !def.name);
    if (someHaveNoName) {
      halt(
        'INVALID_DEFINITIONS',
        'Invalid option definitions: the `name` property is required on each definition'
      );
    }

    const someDontHaveFunctionType = this.some(def => def.type && typeof def.type !== 'function');
    if (someDontHaveFunctionType) {
      halt(
        'INVALID_DEFINITIONS',
        'Invalid option definitions: the `type` property must be a setter fuction (default: `Boolean`)'
      );
    }

    let invalidOption;

    const numericAlias = this.some(def => {
      invalidOption = def;
      return t.isDefined(def.alias) && t.isNumber(def.alias)
    });
    if (numericAlias) {
      halt(
        'INVALID_DEFINITIONS',
        'Invalid option definition: to avoid ambiguity an alias cannot be numeric [--' + invalidOption.name + ' alias is -' + invalidOption.alias + ']'
      );
    }

    const multiCharacterAlias = this.some(def => {
      invalidOption = def;
      return t.isDefined(def.alias) && def.alias.length !== 1
    });
    if (multiCharacterAlias) {
      halt(
        'INVALID_DEFINITIONS',
        'Invalid option definition: an alias must be a single character'
      );
    }

    const hypenAlias = this.some(def => {
      invalidOption = def;
      return def.alias === '-'
    });
    if (hypenAlias) {
      halt(
        'INVALID_DEFINITIONS',
        'Invalid option definition: an alias cannot be "-"'
      );
    }

    const duplicateName = hasDuplicates(this.map(def => caseInsensitive ? def.name.toLowerCase() : def.name));
    if (duplicateName) {
      halt(
        'INVALID_DEFINITIONS',
        'Two or more option definitions have the same name'
      );
    }

    const duplicateAlias = hasDuplicates(this.map(def => caseInsensitive && t.isDefined(def.alias) ? def.alias.toLowerCase() : def.alias));
    if (duplicateAlias) {
      halt(
        'INVALID_DEFINITIONS',
        'Two or more option definitions have the same alias'
      );
    }

    const duplicateDefaultOption = this.filter(def => def.defaultOption === true).length > 1;
    if (duplicateDefaultOption) {
      halt(
        'INVALID_DEFINITIONS',
        'Only one option definition can be the defaultOption'
      );
    }

    const defaultBoolean = this.some(def => {
      invalidOption = def;
      return def.isBoolean() && def.defaultOption
    });
    if (defaultBoolean) {
      halt(
        'INVALID_DEFINITIONS',
        `A boolean option ["${invalidOption.name}"] can not also be the defaultOption.`
      );
    }
  }

  /**
   * Get definition by option arg (e.g. `--one` or `-o`)
   * @param {string} [arg] the argument name to get the definition for
   * @param {boolean} [caseInsensitive] whether to use case insensitive comparisons when finding the appropriate definition
   * @returns {Definition}
   */
  get (arg, caseInsensitive) {
    if (isOption(arg)) {
      if (re.short.test(arg)) {
        const shortOptionName = getOptionName(arg);
        if (caseInsensitive) {
          const lowercaseShortOptionName = shortOptionName.toLowerCase();
          return this.find(def => t.isDefined(def.alias) && def.alias.toLowerCase() === lowercaseShortOptionName)
        } else {
          return this.find(def => def.alias === shortOptionName)
        }
      } else {
        const optionName = getOptionName(arg);
        if (caseInsensitive) {
          const lowercaseOptionName = optionName.toLowerCase();
          return this.find(def => def.name.toLowerCase() === lowercaseOptionName)
        } else {
          return this.find(def => def.name === optionName)
        }
      }
    } else {
      return this.find(def => def.name === arg)
    }
  }

  getDefault () {
    return this.find(def => def.defaultOption === true)
  }

  isGrouped () {
    return this.some(def => def.group)
  }

  whereGrouped () {
    return this.filter(containsValidGroup)
  }

  whereNotGrouped () {
    return this.filter(def => !containsValidGroup(def))
  }

  whereDefaultValueSet () {
    return this.filter(def => t.isDefined(def.defaultValue))
  }

  static from (definitions, caseInsensitive) {
    if (definitions instanceof this) return definitions
    const result = super.from(arrayify(definitions), def => OptionDefinition.create(def));
    result.validate(caseInsensitive);
    return result
  }
}

function halt (name, message) {
  const err = new Error(message);
  err.name = name;
  throw err
}

function containsValidGroup (def) {
  return arrayify(def.group).some(group => group)
}

function hasDuplicates (array) {
  const items = {};
  for (let i = 0; i < array.length; i++) {
    const value = array[i];
    if (items[value]) {
      return true
    } else {
      if (t.isDefined(value)) items[value] = true;
    }
  }
}

/**
 * @module argv-parser
 */

/**
 * @alias module:argv-parser
 */
class ArgvParser {
  /**
   * @param {OptionDefinitions} - Definitions array
   * @param {object} [options] - Options
   * @param {string[]} [options.argv] - Overrides `process.argv`
   * @param {boolean} [options.stopAtFirstUnknown] -
   * @param {boolean} [options.caseInsensitive] - Arguments will be parsed in a case insensitive manner. Defaults to false.
   */
  constructor (definitions, options) {
    this.options = Object.assign({}, options);
    /**
     * Option Definitions
     */
    this.definitions = Definitions.from(definitions, this.options.caseInsensitive);

    /**
     * Argv
     */
    this.argv = ArgvArray.from(this.options.argv);
    if (this.argv.hasCombinedShortOptions()) {
      findReplace(this.argv, re.combinedShort.test.bind(re.combinedShort), arg => {
        arg = arg.slice(1);
        return arg.split('').map(letter => ({ origArg: `-${arg}`, arg: '-' + letter }))
      });
    }
  }

  /**
   * Yields one `{ event, name, value, arg, def }` argInfo object for each arg in `process.argv` (or `options.argv`).
   */
  * [Symbol.iterator] () {
    const definitions = this.definitions;

    let def;
    let value;
    let name;
    let event;
    let singularDefaultSet = false;
    let unknownFound = false;
    let origArg;

    for (let arg of this.argv) {
      if (t.isPlainObject(arg)) {
        origArg = arg.origArg;
        arg = arg.arg;
      }

      if (unknownFound && this.options.stopAtFirstUnknown) {
        yield { event: 'unknown_value', arg, name: '_unknown', value: undefined };
        continue
      }

      /* handle long or short option */
      if (isOption(arg)) {
        def = definitions.get(arg, this.options.caseInsensitive);
        value = undefined;
        if (def) {
          value = def.isBoolean() ? true : null;
          event = 'set';
        } else {
          event = 'unknown_option';
        }

      /* handle --option-value notation */
      } else if (isOptionEqualsNotation(arg)) {
        const matches = arg.match(re.optEquals);
        def = definitions.get(matches[1], this.options.caseInsensitive);
        if (def) {
          if (def.isBoolean()) {
            yield { event: 'unknown_value', arg, name: '_unknown', value, def };
            event = 'set';
            value = true;
          } else {
            event = 'set';
            value = matches[2];
          }
        } else {
          event = 'unknown_option';
        }

      /* handle value */
      } else if (isValue(arg)) {
        if (def) {
          value = arg;
          event = 'set';
        } else {
          /* get the defaultOption */
          def = this.definitions.getDefault();
          if (def && !singularDefaultSet) {
            value = arg;
            event = 'set';
          } else {
            event = 'unknown_value';
            def = undefined;
          }
        }
      }

      name = def ? def.name : '_unknown';
      const argInfo = { event, arg, name, value, def };
      if (origArg) {
        argInfo.subArg = arg;
        argInfo.arg = origArg;
      }
      yield argInfo;

      /* unknownFound logic */
      if (name === '_unknown') unknownFound = true;

      /* singularDefaultSet logic */
      if (def && def.defaultOption && !def.isMultiple() && event === 'set') singularDefaultSet = true;

      /* reset values once consumed and yielded */
      if (def && def.isBoolean()) def = undefined;
      /* reset the def if it's a singular which has been set */
      if (def && !def.multiple && t.isDefined(value) && value !== null) {
        def = undefined;
      }
      value = undefined;
      event = undefined;
      name = undefined;
      origArg = undefined;
    }
  }
}

const _value = new WeakMap();

/**
 * Encapsulates behaviour (defined by an OptionDefinition) when setting values
 */
class Option {
  constructor (definition) {
    this.definition = new OptionDefinition(definition);
    this.state = null; /* set or default */
    this.resetToDefault();
  }

  get () {
    return _value.get(this)
  }

  set (val) {
    this._set(val, 'set');
  }

  _set (val, state) {
    const def = this.definition;
    if (def.isMultiple()) {
      /* don't add null or undefined to a multiple */
      if (val !== null && val !== undefined) {
        const arr = this.get();
        if (this.state === 'default') arr.length = 0;
        arr.push(def.type(val));
        this.state = state;
      }
    } else {
      /* throw if already set on a singlar defaultOption */
      if (!def.isMultiple() && this.state === 'set') {
        const err = new Error(`Singular option already set [${this.definition.name}=${this.get()}]`);
        err.name = 'ALREADY_SET';
        err.value = val;
        err.optionName = def.name;
        throw err
      } else if (val === null || val === undefined) {
        _value.set(this, val);
        // /* required to make 'partial: defaultOption with value equal to defaultValue 2' pass */
        // if (!(def.defaultOption && !def.isMultiple())) {
        //   this.state = state
        // }
      } else {
        _value.set(this, def.type(val));
        this.state = state;
      }
    }
  }

  resetToDefault () {
    if (t.isDefined(this.definition.defaultValue)) {
      if (this.definition.isMultiple()) {
        _value.set(this, arrayify(this.definition.defaultValue).slice());
      } else {
        _value.set(this, this.definition.defaultValue);
      }
    } else {
      if (this.definition.isMultiple()) {
        _value.set(this, []);
      } else {
        _value.set(this, null);
      }
    }
    this.state = 'default';
  }

  static create (definition) {
    definition = new OptionDefinition(definition);
    if (definition.isBoolean()) {
      return FlagOption.create(definition)
    } else {
      return new this(definition)
    }
  }
}

class FlagOption extends Option {
  set (val) {
    super.set(true);
  }

  static create (def) {
    return new this(def)
  }
}

/**
 * A map of { DefinitionNameString: Option }. By default, an Output has an `_unknown` property and any options with defaultValues.
 */
class Output extends Map {
  constructor (definitions) {
    super();
    /**
     * @type {OptionDefinitions}
     */
    this.definitions = Definitions.from(definitions);

    /* by default, an Output has an `_unknown` property and any options with defaultValues */
    this.set('_unknown', Option.create({ name: '_unknown', multiple: true }));
    for (const def of this.definitions.whereDefaultValueSet()) {
      this.set(def.name, Option.create(def));
    }
  }

  toObject (options) {
    options = options || {};
    const output = {};
    for (const item of this) {
      const name = options.camelCase && item[0] !== '_unknown' ? camelCase(item[0]) : item[0];
      const option = item[1];
      if (name === '_unknown' && !option.get().length) continue
      output[name] = option.get();
    }

    if (options.skipUnknown) delete output._unknown;
    return output
  }
}

class GroupedOutput extends Output {
  toObject (options) {
    const superOutputNoCamel = super.toObject({ skipUnknown: options.skipUnknown });
    const superOutput = super.toObject(options);
    const unknown = superOutput._unknown;
    delete superOutput._unknown;
    const grouped = {
      _all: superOutput
    };
    if (unknown && unknown.length) grouped._unknown = unknown;

    this.definitions.whereGrouped().forEach(def => {
      const name = options.camelCase ? camelCase(def.name) : def.name;
      const outputValue = superOutputNoCamel[def.name];
      for (const groupName of arrayify(def.group)) {
        grouped[groupName] = grouped[groupName] || {};
        if (t.isDefined(outputValue)) {
          grouped[groupName][name] = outputValue;
        }
      }
    });

    this.definitions.whereNotGrouped().forEach(def => {
      const name = options.camelCase ? camelCase(def.name) : def.name;
      const outputValue = superOutputNoCamel[def.name];
      if (t.isDefined(outputValue)) {
        if (!grouped._none) grouped._none = {};
        grouped._none[name] = outputValue;
      }
    });
    return grouped
  }
}

/**
 * @module command-line-args
 */

/**
 * Returns an object containing all option values set on the command line. By default it parses the global  [`process.argv`](https://nodejs.org/api/process.html#process_process_argv) array.
 *
 * Parsing is strict by default - an exception is thrown if the user sets a singular option more than once or sets an unknown value or option (one without a valid [definition](https://github.com/75lb/command-line-args/blob/master/doc/option-definition.md)). To be more permissive, enabling [partial](https://github.com/75lb/command-line-args/wiki/Partial-mode-example) or [stopAtFirstUnknown](https://github.com/75lb/command-line-args/wiki/stopAtFirstUnknown) modes will return known options in the usual manner while collecting unknown arguments in a separate `_unknown` property.
 *
 * @param {Array<OptionDefinition>} - An array of [OptionDefinition](https://github.com/75lb/command-line-args/blob/master/doc/option-definition.md) objects
 * @param {object} [options] - Options.
 * @param {string[]} [options.argv] - An array of strings which, if present will be parsed instead  of `process.argv`.
 * @param {boolean} [options.partial] - If `true`, an array of unknown arguments is returned in the `_unknown` property of the output.
 * @param {boolean} [options.stopAtFirstUnknown] - If `true`, parsing will stop at the first unknown argument and the remaining arguments returned in `_unknown`. When set, `partial: true` is also implied.
 * @param {boolean} [options.camelCase] - If `true`, options with hypenated names (e.g. `move-to`) will be returned in camel-case (e.g. `moveTo`).
 * @param {boolean} [options.caseInsensitive] - If `true`, the case of each option name or alias parsed is insignificant. In other words, both `--Verbose` and `--verbose`, `-V` and `-v` would be equivalent. Defaults to false.
 * @returns {object}
 * @throws `UNKNOWN_OPTION` If `options.partial` is false and the user set an undefined option. The `err.optionName` property contains the arg that specified an unknown option, e.g. `--one`.
 * @throws `UNKNOWN_VALUE` If `options.partial` is false and the user set a value unaccounted for by an option definition. The `err.value` property contains the unknown value, e.g. `5`.
 * @throws `ALREADY_SET` If a user sets a singular, non-multiple option more than once. The `err.optionName` property contains the option name that has already been set, e.g. `one`.
 * @throws `INVALID_DEFINITIONS`
 *   - If an option definition is missing the required `name` property
 *   - If an option definition has a `type` value that's not a function
 *   - If an alias is numeric, a hyphen or a length other than 1
 *   - If an option definition name was used more than once
 *   - If an option definition alias was used more than once
 *   - If more than one option definition has `defaultOption: true`
 *   - If a `Boolean` option is also set as the `defaultOption`.
 * @alias module:command-line-args
 */
function commandLineArgs (optionDefinitions, options) {
  options = options || {};
  if (options.stopAtFirstUnknown) options.partial = true;
  optionDefinitions = Definitions.from(optionDefinitions, options.caseInsensitive);

  const parser = new ArgvParser(optionDefinitions, {
    argv: options.argv,
    stopAtFirstUnknown: options.stopAtFirstUnknown,
    caseInsensitive: options.caseInsensitive
  });

  const OutputClass = optionDefinitions.isGrouped() ? GroupedOutput : Output;
  const output = new OutputClass(optionDefinitions);

  /* Iterate the parser setting each known value to the output. Optionally, throw on unknowns. */
  for (const argInfo of parser) {
    const arg = argInfo.subArg || argInfo.arg;
    if (!options.partial) {
      if (argInfo.event === 'unknown_value') {
        const err = new Error(`Unknown value: ${arg}`);
        err.name = 'UNKNOWN_VALUE';
        err.value = arg;
        throw err
      } else if (argInfo.event === 'unknown_option') {
        const err = new Error(`Unknown option: ${arg}`);
        err.name = 'UNKNOWN_OPTION';
        err.optionName = arg;
        throw err
      }
    }

    let option;
    if (output.has(argInfo.name)) {
      option = output.get(argInfo.name);
    } else {
      option = Option.create(argInfo.def);
      output.set(argInfo.name, option);
    }

    if (argInfo.name === '_unknown') {
      option.set(arg);
    } else {
      option.set(argInfo.value);
    }
  }

  return output.toObject({ skipUnknown: !options.partial, camelCase: options.camelCase })
}

module.exports = commandLineArgs;


/***/ }),

/***/ 5046:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/**
 * @module command-line-commands
 * @example
 * const commandLineCommands = require('command-line-commands')
 */
module.exports = commandLineCommands

/**
 * Parses the `argv` value supplied (or `process.argv` by default), extracting and returning the `command` and remainder of `argv`. The command will be the first value in the `argv` array unless it is an option (e.g. `--help`).
 *
 * @param {string|string[]} - One or more command strings, one of which the user must supply. Include `null` to represent "no command" (effectively making a command optional).
 * @param [argv] {string[]} - An argv array, defaults to the global `process.argv` if not supplied.
 * @returns {{ command: string, argv: string[] }}
 * @throws `INVALID_COMMAND` - user supplied a command not specified in `commands`.
 * @alias module:command-line-commands
 */
function commandLineCommands (commands, argv) {
  const arrayify = __nccwpck_require__(9068)
  const option = __nccwpck_require__(1636)

  if (!commands || (Array.isArray(commands) && !commands.length)) {
    throw new Error('Please supply one or more commands')
  }
  if (argv) {
    argv = arrayify(argv)
  } else {
    /* if no argv supplied, assume we are parsing process.argv. */
    /* never modify the global process.argv directly. */
    argv = process.argv.slice(0)
    argv.splice(0, 2)
  }

  /* the command is the first arg, unless it's an option (e.g. --help) */
  const command = (option.isOption(argv[0]) || !argv.length) ? null : argv.shift()

  if (arrayify(commands).indexOf(command) === -1) {
    const err = new Error('Command not recognised: ' + command)
    err.command = command
    err.name = 'INVALID_COMMAND'
    throw err
  }

  return { command, argv }
}


/***/ }),

/***/ 9068:
/***/ (function(module) {

(function (global, factory) {
   true ? module.exports = factory() :
  0;
}(this, (function () { 'use strict';

  /**
   * Takes any input and guarantees an array back.
   *
   * - Converts array-like objects (e.g. `arguments`, `Set`) to a real array.
   * - Converts `undefined` to an empty array.
   * - Converts any another other, singular value (including `null`, objects and iterables other than `Set`) into an array containing that value.
   * - Ignores input which is already an array.
   *
   * @module array-back
   * @example
   * > const arrayify = require('array-back')
   *
   * > arrayify(undefined)
   * []
   *
   * > arrayify(null)
   * [ null ]
   *
   * > arrayify(0)
   * [ 0 ]
   *
   * > arrayify([ 1, 2 ])
   * [ 1, 2 ]
   *
   * > arrayify(new Set([ 1, 2 ]))
   * [ 1, 2 ]
   *
   * > function f(){ return arrayify(arguments); }
   * > f(1,2,3)
   * [ 1, 2, 3 ]
   */

  function isObject (input) {
    return typeof input === 'object' && input !== null
  }

  function isArrayLike (input) {
    return isObject(input) && typeof input.length === 'number'
  }

  /**
   * @param {*} - The input value to convert to an array
   * @returns {Array}
   * @alias module:array-back
   */
  function arrayify (input) {
    if (Array.isArray(input)) {
      return input
    }

    if (input === undefined) {
      return []
    }

    if (isArrayLike(input) || input instanceof Set) {
      return Array.from(input)
    }

    return [input]
  }

  return arrayify;

})));


/***/ }),

/***/ 1636:
/***/ ((__unused_webpack_module, exports) => {

/**
 * A module for testing for and extracting names from options (e.g. `--one`, `-o`)
 */

class Arg {
  constructor (re) {
    this.re = re
  }

  test (arg) {
    return this.re.test(arg)
  }
}

exports.isShort = new Arg(/^-([^\d-])$/)
exports.isLong = new Arg(/^--(\S+)/)
exports.isCombined = new Arg(/^-([^\d-]{2,})$/)
exports.isOption = function (arg) {
  return this.isShort.test(arg) || this.isLong.test(arg) || this.isCombined.test(arg)
}
exports.optEquals = new Arg(/^(--\S+)=(.*)/)


/***/ }),

/***/ 143:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const cp = __nccwpck_require__(2081);
const parse = __nccwpck_require__(9718);
const enoent = __nccwpck_require__(8958);

function spawn(command, args, options) {
    // Parse the arguments
    const parsed = parse(command, args, options);

    // Spawn the child process
    const spawned = cp.spawn(parsed.command, parsed.args, parsed.options);

    // Hook into child process "exit" event to emit an error if the command
    // does not exists, see: https://github.com/IndigoUnited/node-cross-spawn/issues/16
    enoent.hookChildProcess(spawned, parsed);

    return spawned;
}

function spawnSync(command, args, options) {
    // Parse the arguments
    const parsed = parse(command, args, options);

    // Spawn the child process
    const result = cp.spawnSync(parsed.command, parsed.args, parsed.options);

    // Analyze if the command does not exist, see: https://github.com/IndigoUnited/node-cross-spawn/issues/16
    result.error = result.error || enoent.verifyENOENTSync(result.status, parsed);

    return result;
}

module.exports = spawn;
module.exports.spawn = spawn;
module.exports.sync = spawnSync;

module.exports._parse = parse;
module.exports._enoent = enoent;


/***/ }),

/***/ 8958:
/***/ ((module) => {



const isWin = process.platform === 'win32';

function notFoundError(original, syscall) {
    return Object.assign(new Error(`${syscall} ${original.command} ENOENT`), {
        code: 'ENOENT',
        errno: 'ENOENT',
        syscall: `${syscall} ${original.command}`,
        path: original.command,
        spawnargs: original.args,
    });
}

function hookChildProcess(cp, parsed) {
    if (!isWin) {
        return;
    }

    const originalEmit = cp.emit;

    cp.emit = function (name, arg1) {
        // If emitting "exit" event and exit code is 1, we need to check if
        // the command exists and emit an "error" instead
        // See https://github.com/IndigoUnited/node-cross-spawn/issues/16
        if (name === 'exit') {
            const err = verifyENOENT(arg1, parsed, 'spawn');

            if (err) {
                return originalEmit.call(cp, 'error', err);
            }
        }

        return originalEmit.apply(cp, arguments); // eslint-disable-line prefer-rest-params
    };
}

function verifyENOENT(status, parsed) {
    if (isWin && status === 1 && !parsed.file) {
        return notFoundError(parsed.original, 'spawn');
    }

    return null;
}

function verifyENOENTSync(status, parsed) {
    if (isWin && status === 1 && !parsed.file) {
        return notFoundError(parsed.original, 'spawnSync');
    }

    return null;
}

module.exports = {
    hookChildProcess,
    verifyENOENT,
    verifyENOENTSync,
    notFoundError,
};


/***/ }),

/***/ 9718:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const path = __nccwpck_require__(1017);
const resolveCommand = __nccwpck_require__(6621);
const escape = __nccwpck_require__(729);
const readShebang = __nccwpck_require__(6010);

const isWin = process.platform === 'win32';
const isExecutableRegExp = /\.(?:com|exe)$/i;
const isCmdShimRegExp = /node_modules[\\/].bin[\\/][^\\/]+\.cmd$/i;

function detectShebang(parsed) {
    parsed.file = resolveCommand(parsed);

    const shebang = parsed.file && readShebang(parsed.file);

    if (shebang) {
        parsed.args.unshift(parsed.file);
        parsed.command = shebang;

        return resolveCommand(parsed);
    }

    return parsed.file;
}

function parseNonShell(parsed) {
    if (!isWin) {
        return parsed;
    }

    // Detect & add support for shebangs
    const commandFile = detectShebang(parsed);

    // We don't need a shell if the command filename is an executable
    const needsShell = !isExecutableRegExp.test(commandFile);

    // If a shell is required, use cmd.exe and take care of escaping everything correctly
    // Note that `forceShell` is an hidden option used only in tests
    if (parsed.options.forceShell || needsShell) {
        // Need to double escape meta chars if the command is a cmd-shim located in `node_modules/.bin/`
        // The cmd-shim simply calls execute the package bin file with NodeJS, proxying any argument
        // Because the escape of metachars with ^ gets interpreted when the cmd.exe is first called,
        // we need to double escape them
        const needsDoubleEscapeMetaChars = isCmdShimRegExp.test(commandFile);

        // Normalize posix paths into OS compatible paths (e.g.: foo/bar -> foo\bar)
        // This is necessary otherwise it will always fail with ENOENT in those cases
        parsed.command = path.normalize(parsed.command);

        // Escape command & arguments
        parsed.command = escape.command(parsed.command);
        parsed.args = parsed.args.map((arg) => escape.argument(arg, needsDoubleEscapeMetaChars));

        const shellCommand = [parsed.command].concat(parsed.args).join(' ');

        parsed.args = ['/d', '/s', '/c', `"${shellCommand}"`];
        parsed.command = process.env.comspec || 'cmd.exe';
        parsed.options.windowsVerbatimArguments = true; // Tell node's spawn that the arguments are already escaped
    }

    return parsed;
}

function parse(command, args, options) {
    // Normalize arguments, similar to nodejs
    if (args && !Array.isArray(args)) {
        options = args;
        args = null;
    }

    args = args ? args.slice(0) : []; // Clone array to avoid changing the original
    options = Object.assign({}, options); // Clone object to avoid changing the original

    // Build our parsed object
    const parsed = {
        command,
        args,
        options,
        file: undefined,
        original: {
            command,
            args,
        },
    };

    // Delegate further parsing to shell or non-shell
    return options.shell ? parsed : parseNonShell(parsed);
}

module.exports = parse;


/***/ }),

/***/ 729:
/***/ ((module) => {



// See http://www.robvanderwoude.com/escapechars.php
const metaCharsRegExp = /([()\][%!^"`<>&|;, *?])/g;

function escapeCommand(arg) {
    // Escape meta chars
    arg = arg.replace(metaCharsRegExp, '^$1');

    return arg;
}

function escapeArgument(arg, doubleEscapeMetaChars) {
    // Convert to string
    arg = `${arg}`;

    // Algorithm below is based on https://qntm.org/cmd

    // Sequence of backslashes followed by a double quote:
    // double up all the backslashes and escape the double quote
    arg = arg.replace(/(\\*)"/g, '$1$1\\"');

    // Sequence of backslashes followed by the end of the string
    // (which will become a double quote later):
    // double up all the backslashes
    arg = arg.replace(/(\\*)$/, '$1$1');

    // All other backslashes occur literally

    // Quote the whole thing:
    arg = `"${arg}"`;

    // Escape meta chars
    arg = arg.replace(metaCharsRegExp, '^$1');

    // Double escape meta chars if necessary
    if (doubleEscapeMetaChars) {
        arg = arg.replace(metaCharsRegExp, '^$1');
    }

    return arg;
}

module.exports.command = escapeCommand;
module.exports.argument = escapeArgument;


/***/ }),

/***/ 6010:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const fs = __nccwpck_require__(7147);
const shebangCommand = __nccwpck_require__(9440);

function readShebang(command) {
    // Read the first 150 bytes from the file
    const size = 150;
    const buffer = Buffer.alloc(size);

    let fd;

    try {
        fd = fs.openSync(command, 'r');
        fs.readSync(fd, buffer, 0, size, 0);
        fs.closeSync(fd);
    } catch (e) { /* Empty */ }

    // Attempt to extract shebang (null is returned if not a shebang)
    return shebangCommand(buffer.toString());
}

module.exports = readShebang;


/***/ }),

/***/ 6621:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const path = __nccwpck_require__(1017);
const which = __nccwpck_require__(3623);
const getPathKey = __nccwpck_require__(154);

function resolveCommandAttempt(parsed, withoutPathExt) {
    const env = parsed.options.env || process.env;
    const cwd = process.cwd();
    const hasCustomCwd = parsed.options.cwd != null;
    // Worker threads do not have process.chdir()
    const shouldSwitchCwd = hasCustomCwd && process.chdir !== undefined && !process.chdir.disabled;

    // If a custom `cwd` was specified, we need to change the process cwd
    // because `which` will do stat calls but does not support a custom cwd
    if (shouldSwitchCwd) {
        try {
            process.chdir(parsed.options.cwd);
        } catch (err) {
            /* Empty */
        }
    }

    let resolved;

    try {
        resolved = which.sync(parsed.command, {
            path: env[getPathKey({ env })],
            pathExt: withoutPathExt ? path.delimiter : undefined,
        });
    } catch (e) {
        /* Empty */
    } finally {
        if (shouldSwitchCwd) {
            process.chdir(cwd);
        }
    }

    // If we successfully resolved, ensure that an absolute path is returned
    // Note that when a custom `cwd` was used, we need to resolve to an absolute path based on it
    if (resolved) {
        resolved = path.resolve(hasCustomCwd ? parsed.options.cwd : '', resolved);
    }

    return resolved;
}

function resolveCommand(parsed) {
    return resolveCommandAttempt(parsed) || resolveCommandAttempt(parsed, true);
}

module.exports = resolveCommand;


/***/ }),

/***/ 2285:
/***/ (function(module) {

(function webpackUniversalModuleDefinition(root, factory) {
/* istanbul ignore next */
	if(true)
		module.exports = factory();
	else {}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __nested_webpack_require_583__(moduleId) {

/******/ 		// Check if module is in cache
/* istanbul ignore if */
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_583__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__nested_webpack_require_583__.m = modules;

/******/ 	// expose the module cache
/******/ 	__nested_webpack_require_583__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__nested_webpack_require_583__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __nested_webpack_require_583__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __nested_webpack_require_1808__) {

	"use strict";
	/*
	  Copyright JS Foundation and other contributors, https://js.foundation/

	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:

	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.

	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	var comment_handler_1 = __nested_webpack_require_1808__(1);
	var jsx_parser_1 = __nested_webpack_require_1808__(3);
	var parser_1 = __nested_webpack_require_1808__(8);
	var tokenizer_1 = __nested_webpack_require_1808__(15);
	function parse(code, options, delegate) {
	    var commentHandler = null;
	    var proxyDelegate = function (node, metadata) {
	        if (delegate) {
	            delegate(node, metadata);
	        }
	        if (commentHandler) {
	            commentHandler.visit(node, metadata);
	        }
	    };
	    var parserDelegate = (typeof delegate === 'function') ? proxyDelegate : null;
	    var collectComment = false;
	    if (options) {
	        collectComment = (typeof options.comment === 'boolean' && options.comment);
	        var attachComment = (typeof options.attachComment === 'boolean' && options.attachComment);
	        if (collectComment || attachComment) {
	            commentHandler = new comment_handler_1.CommentHandler();
	            commentHandler.attach = attachComment;
	            options.comment = true;
	            parserDelegate = proxyDelegate;
	        }
	    }
	    var isModule = false;
	    if (options && typeof options.sourceType === 'string') {
	        isModule = (options.sourceType === 'module');
	    }
	    var parser;
	    if (options && typeof options.jsx === 'boolean' && options.jsx) {
	        parser = new jsx_parser_1.JSXParser(code, options, parserDelegate);
	    }
	    else {
	        parser = new parser_1.Parser(code, options, parserDelegate);
	    }
	    var program = isModule ? parser.parseModule() : parser.parseScript();
	    var ast = program;
	    if (collectComment && commentHandler) {
	        ast.comments = commentHandler.comments;
	    }
	    if (parser.config.tokens) {
	        ast.tokens = parser.tokens;
	    }
	    if (parser.config.tolerant) {
	        ast.errors = parser.errorHandler.errors;
	    }
	    return ast;
	}
	exports.parse = parse;
	function parseModule(code, options, delegate) {
	    var parsingOptions = options || {};
	    parsingOptions.sourceType = 'module';
	    return parse(code, parsingOptions, delegate);
	}
	exports.parseModule = parseModule;
	function parseScript(code, options, delegate) {
	    var parsingOptions = options || {};
	    parsingOptions.sourceType = 'script';
	    return parse(code, parsingOptions, delegate);
	}
	exports.parseScript = parseScript;
	function tokenize(code, options, delegate) {
	    var tokenizer = new tokenizer_1.Tokenizer(code, options);
	    var tokens;
	    tokens = [];
	    try {
	        while (true) {
	            var token = tokenizer.getNextToken();
	            if (!token) {
	                break;
	            }
	            if (delegate) {
	                token = delegate(token);
	            }
	            tokens.push(token);
	        }
	    }
	    catch (e) {
	        tokenizer.errorHandler.tolerate(e);
	    }
	    if (tokenizer.errorHandler.tolerant) {
	        tokens.errors = tokenizer.errors();
	    }
	    return tokens;
	}
	exports.tokenize = tokenize;
	var syntax_1 = __nested_webpack_require_1808__(2);
	exports.Syntax = syntax_1.Syntax;
	// Sync with *.json manifests.
	exports.version = '4.0.1';


/***/ },
/* 1 */
/***/ function(module, exports, __nested_webpack_require_6456__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var syntax_1 = __nested_webpack_require_6456__(2);
	var CommentHandler = (function () {
	    function CommentHandler() {
	        this.attach = false;
	        this.comments = [];
	        this.stack = [];
	        this.leading = [];
	        this.trailing = [];
	    }
	    CommentHandler.prototype.insertInnerComments = function (node, metadata) {
	        //  innnerComments for properties empty block
	        //  `function a() {/** comments **\/}`
	        if (node.type === syntax_1.Syntax.BlockStatement && node.body.length === 0) {
	            var innerComments = [];
	            for (var i = this.leading.length - 1; i >= 0; --i) {
	                var entry = this.leading[i];
	                if (metadata.end.offset >= entry.start) {
	                    innerComments.unshift(entry.comment);
	                    this.leading.splice(i, 1);
	                    this.trailing.splice(i, 1);
	                }
	            }
	            if (innerComments.length) {
	                node.innerComments = innerComments;
	            }
	        }
	    };
	    CommentHandler.prototype.findTrailingComments = function (metadata) {
	        var trailingComments = [];
	        if (this.trailing.length > 0) {
	            for (var i = this.trailing.length - 1; i >= 0; --i) {
	                var entry_1 = this.trailing[i];
	                if (entry_1.start >= metadata.end.offset) {
	                    trailingComments.unshift(entry_1.comment);
	                }
	            }
	            this.trailing.length = 0;
	            return trailingComments;
	        }
	        var entry = this.stack[this.stack.length - 1];
	        if (entry && entry.node.trailingComments) {
	            var firstComment = entry.node.trailingComments[0];
	            if (firstComment && firstComment.range[0] >= metadata.end.offset) {
	                trailingComments = entry.node.trailingComments;
	                delete entry.node.trailingComments;
	            }
	        }
	        return trailingComments;
	    };
	    CommentHandler.prototype.findLeadingComments = function (metadata) {
	        var leadingComments = [];
	        var target;
	        while (this.stack.length > 0) {
	            var entry = this.stack[this.stack.length - 1];
	            if (entry && entry.start >= metadata.start.offset) {
	                target = entry.node;
	                this.stack.pop();
	            }
	            else {
	                break;
	            }
	        }
	        if (target) {
	            var count = target.leadingComments ? target.leadingComments.length : 0;
	            for (var i = count - 1; i >= 0; --i) {
	                var comment = target.leadingComments[i];
	                if (comment.range[1] <= metadata.start.offset) {
	                    leadingComments.unshift(comment);
	                    target.leadingComments.splice(i, 1);
	                }
	            }
	            if (target.leadingComments && target.leadingComments.length === 0) {
	                delete target.leadingComments;
	            }
	            return leadingComments;
	        }
	        for (var i = this.leading.length - 1; i >= 0; --i) {
	            var entry = this.leading[i];
	            if (entry.start <= metadata.start.offset) {
	                leadingComments.unshift(entry.comment);
	                this.leading.splice(i, 1);
	            }
	        }
	        return leadingComments;
	    };
	    CommentHandler.prototype.visitNode = function (node, metadata) {
	        if (node.type === syntax_1.Syntax.Program && node.body.length > 0) {
	            return;
	        }
	        this.insertInnerComments(node, metadata);
	        var trailingComments = this.findTrailingComments(metadata);
	        var leadingComments = this.findLeadingComments(metadata);
	        if (leadingComments.length > 0) {
	            node.leadingComments = leadingComments;
	        }
	        if (trailingComments.length > 0) {
	            node.trailingComments = trailingComments;
	        }
	        this.stack.push({
	            node: node,
	            start: metadata.start.offset
	        });
	    };
	    CommentHandler.prototype.visitComment = function (node, metadata) {
	        var type = (node.type[0] === 'L') ? 'Line' : 'Block';
	        var comment = {
	            type: type,
	            value: node.value
	        };
	        if (node.range) {
	            comment.range = node.range;
	        }
	        if (node.loc) {
	            comment.loc = node.loc;
	        }
	        this.comments.push(comment);
	        if (this.attach) {
	            var entry = {
	                comment: {
	                    type: type,
	                    value: node.value,
	                    range: [metadata.start.offset, metadata.end.offset]
	                },
	                start: metadata.start.offset
	            };
	            if (node.loc) {
	                entry.comment.loc = node.loc;
	            }
	            node.type = type;
	            this.leading.push(entry);
	            this.trailing.push(entry);
	        }
	    };
	    CommentHandler.prototype.visit = function (node, metadata) {
	        if (node.type === 'LineComment') {
	            this.visitComment(node, metadata);
	        }
	        else if (node.type === 'BlockComment') {
	            this.visitComment(node, metadata);
	        }
	        else if (this.attach) {
	            this.visitNode(node, metadata);
	        }
	    };
	    return CommentHandler;
	}());
	exports.CommentHandler = CommentHandler;


/***/ },
/* 2 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Syntax = {
	    AssignmentExpression: 'AssignmentExpression',
	    AssignmentPattern: 'AssignmentPattern',
	    ArrayExpression: 'ArrayExpression',
	    ArrayPattern: 'ArrayPattern',
	    ArrowFunctionExpression: 'ArrowFunctionExpression',
	    AwaitExpression: 'AwaitExpression',
	    BlockStatement: 'BlockStatement',
	    BinaryExpression: 'BinaryExpression',
	    BreakStatement: 'BreakStatement',
	    CallExpression: 'CallExpression',
	    CatchClause: 'CatchClause',
	    ClassBody: 'ClassBody',
	    ClassDeclaration: 'ClassDeclaration',
	    ClassExpression: 'ClassExpression',
	    ConditionalExpression: 'ConditionalExpression',
	    ContinueStatement: 'ContinueStatement',
	    DoWhileStatement: 'DoWhileStatement',
	    DebuggerStatement: 'DebuggerStatement',
	    EmptyStatement: 'EmptyStatement',
	    ExportAllDeclaration: 'ExportAllDeclaration',
	    ExportDefaultDeclaration: 'ExportDefaultDeclaration',
	    ExportNamedDeclaration: 'ExportNamedDeclaration',
	    ExportSpecifier: 'ExportSpecifier',
	    ExpressionStatement: 'ExpressionStatement',
	    ForStatement: 'ForStatement',
	    ForOfStatement: 'ForOfStatement',
	    ForInStatement: 'ForInStatement',
	    FunctionDeclaration: 'FunctionDeclaration',
	    FunctionExpression: 'FunctionExpression',
	    Identifier: 'Identifier',
	    IfStatement: 'IfStatement',
	    ImportDeclaration: 'ImportDeclaration',
	    ImportDefaultSpecifier: 'ImportDefaultSpecifier',
	    ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
	    ImportSpecifier: 'ImportSpecifier',
	    Literal: 'Literal',
	    LabeledStatement: 'LabeledStatement',
	    LogicalExpression: 'LogicalExpression',
	    MemberExpression: 'MemberExpression',
	    MetaProperty: 'MetaProperty',
	    MethodDefinition: 'MethodDefinition',
	    NewExpression: 'NewExpression',
	    ObjectExpression: 'ObjectExpression',
	    ObjectPattern: 'ObjectPattern',
	    Program: 'Program',
	    Property: 'Property',
	    RestElement: 'RestElement',
	    ReturnStatement: 'ReturnStatement',
	    SequenceExpression: 'SequenceExpression',
	    SpreadElement: 'SpreadElement',
	    Super: 'Super',
	    SwitchCase: 'SwitchCase',
	    SwitchStatement: 'SwitchStatement',
	    TaggedTemplateExpression: 'TaggedTemplateExpression',
	    TemplateElement: 'TemplateElement',
	    TemplateLiteral: 'TemplateLiteral',
	    ThisExpression: 'ThisExpression',
	    ThrowStatement: 'ThrowStatement',
	    TryStatement: 'TryStatement',
	    UnaryExpression: 'UnaryExpression',
	    UpdateExpression: 'UpdateExpression',
	    VariableDeclaration: 'VariableDeclaration',
	    VariableDeclarator: 'VariableDeclarator',
	    WhileStatement: 'WhileStatement',
	    WithStatement: 'WithStatement',
	    YieldExpression: 'YieldExpression'
	};


/***/ },
/* 3 */
/***/ function(module, exports, __nested_webpack_require_15019__) {

	"use strict";
/* istanbul ignore next */
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var character_1 = __nested_webpack_require_15019__(4);
	var JSXNode = __nested_webpack_require_15019__(5);
	var jsx_syntax_1 = __nested_webpack_require_15019__(6);
	var Node = __nested_webpack_require_15019__(7);
	var parser_1 = __nested_webpack_require_15019__(8);
	var token_1 = __nested_webpack_require_15019__(13);
	var xhtml_entities_1 = __nested_webpack_require_15019__(14);
	token_1.TokenName[100 /* Identifier */] = 'JSXIdentifier';
	token_1.TokenName[101 /* Text */] = 'JSXText';
	// Fully qualified element name, e.g. <svg:path> returns "svg:path"
	function getQualifiedElementName(elementName) {
	    var qualifiedName;
	    switch (elementName.type) {
	        case jsx_syntax_1.JSXSyntax.JSXIdentifier:
	            var id = elementName;
	            qualifiedName = id.name;
	            break;
	        case jsx_syntax_1.JSXSyntax.JSXNamespacedName:
	            var ns = elementName;
	            qualifiedName = getQualifiedElementName(ns.namespace) + ':' +
	                getQualifiedElementName(ns.name);
	            break;
	        case jsx_syntax_1.JSXSyntax.JSXMemberExpression:
	            var expr = elementName;
	            qualifiedName = getQualifiedElementName(expr.object) + '.' +
	                getQualifiedElementName(expr.property);
	            break;
	        /* istanbul ignore next */
	        default:
	            break;
	    }
	    return qualifiedName;
	}
	var JSXParser = (function (_super) {
	    __extends(JSXParser, _super);
	    function JSXParser(code, options, delegate) {
	        return _super.call(this, code, options, delegate) || this;
	    }
	    JSXParser.prototype.parsePrimaryExpression = function () {
	        return this.match('<') ? this.parseJSXRoot() : _super.prototype.parsePrimaryExpression.call(this);
	    };
	    JSXParser.prototype.startJSX = function () {
	        // Unwind the scanner before the lookahead token.
	        this.scanner.index = this.startMarker.index;
	        this.scanner.lineNumber = this.startMarker.line;
	        this.scanner.lineStart = this.startMarker.index - this.startMarker.column;
	    };
	    JSXParser.prototype.finishJSX = function () {
	        // Prime the next lookahead.
	        this.nextToken();
	    };
	    JSXParser.prototype.reenterJSX = function () {
	        this.startJSX();
	        this.expectJSX('}');
	        // Pop the closing '}' added from the lookahead.
	        if (this.config.tokens) {
	            this.tokens.pop();
	        }
	    };
	    JSXParser.prototype.createJSXNode = function () {
	        this.collectComments();
	        return {
	            index: this.scanner.index,
	            line: this.scanner.lineNumber,
	            column: this.scanner.index - this.scanner.lineStart
	        };
	    };
	    JSXParser.prototype.createJSXChildNode = function () {
	        return {
	            index: this.scanner.index,
	            line: this.scanner.lineNumber,
	            column: this.scanner.index - this.scanner.lineStart
	        };
	    };
	    JSXParser.prototype.scanXHTMLEntity = function (quote) {
	        var result = '&';
	        var valid = true;
	        var terminated = false;
	        var numeric = false;
	        var hex = false;
	        while (!this.scanner.eof() && valid && !terminated) {
	            var ch = this.scanner.source[this.scanner.index];
	            if (ch === quote) {
	                break;
	            }
	            terminated = (ch === ';');
	            result += ch;
	            ++this.scanner.index;
	            if (!terminated) {
	                switch (result.length) {
	                    case 2:
	                        // e.g. '&#123;'
	                        numeric = (ch === '#');
	                        break;
	                    case 3:
	                        if (numeric) {
	                            // e.g. '&#x41;'
	                            hex = (ch === 'x');
	                            valid = hex || character_1.Character.isDecimalDigit(ch.charCodeAt(0));
	                            numeric = numeric && !hex;
	                        }
	                        break;
	                    default:
	                        valid = valid && !(numeric && !character_1.Character.isDecimalDigit(ch.charCodeAt(0)));
	                        valid = valid && !(hex && !character_1.Character.isHexDigit(ch.charCodeAt(0)));
	                        break;
	                }
	            }
	        }
	        if (valid && terminated && result.length > 2) {
	            // e.g. '&#x41;' becomes just '#x41'
	            var str = result.substr(1, result.length - 2);
	            if (numeric && str.length > 1) {
	                result = String.fromCharCode(parseInt(str.substr(1), 10));
	            }
	            else if (hex && str.length > 2) {
	                result = String.fromCharCode(parseInt('0' + str.substr(1), 16));
	            }
	            else if (!numeric && !hex && xhtml_entities_1.XHTMLEntities[str]) {
	                result = xhtml_entities_1.XHTMLEntities[str];
	            }
	        }
	        return result;
	    };
	    // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.
	    JSXParser.prototype.lexJSX = function () {
	        var cp = this.scanner.source.charCodeAt(this.scanner.index);
	        // < > / : = { }
	        if (cp === 60 || cp === 62 || cp === 47 || cp === 58 || cp === 61 || cp === 123 || cp === 125) {
	            var value = this.scanner.source[this.scanner.index++];
	            return {
	                type: 7 /* Punctuator */,
	                value: value,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: this.scanner.index - 1,
	                end: this.scanner.index
	            };
	        }
	        // " '
	        if (cp === 34 || cp === 39) {
	            var start = this.scanner.index;
	            var quote = this.scanner.source[this.scanner.index++];
	            var str = '';
	            while (!this.scanner.eof()) {
	                var ch = this.scanner.source[this.scanner.index++];
	                if (ch === quote) {
	                    break;
	                }
	                else if (ch === '&') {
	                    str += this.scanXHTMLEntity(quote);
	                }
	                else {
	                    str += ch;
	                }
	            }
	            return {
	                type: 8 /* StringLiteral */,
	                value: str,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: start,
	                end: this.scanner.index
	            };
	        }
	        // ... or .
	        if (cp === 46) {
	            var n1 = this.scanner.source.charCodeAt(this.scanner.index + 1);
	            var n2 = this.scanner.source.charCodeAt(this.scanner.index + 2);
	            var value = (n1 === 46 && n2 === 46) ? '...' : '.';
	            var start = this.scanner.index;
	            this.scanner.index += value.length;
	            return {
	                type: 7 /* Punctuator */,
	                value: value,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: start,
	                end: this.scanner.index
	            };
	        }
	        // `
	        if (cp === 96) {
	            // Only placeholder, since it will be rescanned as a real assignment expression.
	            return {
	                type: 10 /* Template */,
	                value: '',
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: this.scanner.index,
	                end: this.scanner.index
	            };
	        }
	        // Identifer can not contain backslash (char code 92).
	        if (character_1.Character.isIdentifierStart(cp) && (cp !== 92)) {
	            var start = this.scanner.index;
	            ++this.scanner.index;
	            while (!this.scanner.eof()) {
	                var ch = this.scanner.source.charCodeAt(this.scanner.index);
	                if (character_1.Character.isIdentifierPart(ch) && (ch !== 92)) {
	                    ++this.scanner.index;
	                }
	                else if (ch === 45) {
	                    // Hyphen (char code 45) can be part of an identifier.
	                    ++this.scanner.index;
	                }
	                else {
	                    break;
	                }
	            }
	            var id = this.scanner.source.slice(start, this.scanner.index);
	            return {
	                type: 100 /* Identifier */,
	                value: id,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: start,
	                end: this.scanner.index
	            };
	        }
	        return this.scanner.lex();
	    };
	    JSXParser.prototype.nextJSXToken = function () {
	        this.collectComments();
	        this.startMarker.index = this.scanner.index;
	        this.startMarker.line = this.scanner.lineNumber;
	        this.startMarker.column = this.scanner.index - this.scanner.lineStart;
	        var token = this.lexJSX();
	        this.lastMarker.index = this.scanner.index;
	        this.lastMarker.line = this.scanner.lineNumber;
	        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
	        if (this.config.tokens) {
	            this.tokens.push(this.convertToken(token));
	        }
	        return token;
	    };
	    JSXParser.prototype.nextJSXText = function () {
	        this.startMarker.index = this.scanner.index;
	        this.startMarker.line = this.scanner.lineNumber;
	        this.startMarker.column = this.scanner.index - this.scanner.lineStart;
	        var start = this.scanner.index;
	        var text = '';
	        while (!this.scanner.eof()) {
	            var ch = this.scanner.source[this.scanner.index];
	            if (ch === '{' || ch === '<') {
	                break;
	            }
	            ++this.scanner.index;
	            text += ch;
	            if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                ++this.scanner.lineNumber;
	                if (ch === '\r' && this.scanner.source[this.scanner.index] === '\n') {
	                    ++this.scanner.index;
	                }
	                this.scanner.lineStart = this.scanner.index;
	            }
	        }
	        this.lastMarker.index = this.scanner.index;
	        this.lastMarker.line = this.scanner.lineNumber;
	        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
	        var token = {
	            type: 101 /* Text */,
	            value: text,
	            lineNumber: this.scanner.lineNumber,
	            lineStart: this.scanner.lineStart,
	            start: start,
	            end: this.scanner.index
	        };
	        if ((text.length > 0) && this.config.tokens) {
	            this.tokens.push(this.convertToken(token));
	        }
	        return token;
	    };
	    JSXParser.prototype.peekJSXToken = function () {
	        var state = this.scanner.saveState();
	        this.scanner.scanComments();
	        var next = this.lexJSX();
	        this.scanner.restoreState(state);
	        return next;
	    };
	    // Expect the next JSX token to match the specified punctuator.
	    // If not, an exception will be thrown.
	    JSXParser.prototype.expectJSX = function (value) {
	        var token = this.nextJSXToken();
	        if (token.type !== 7 /* Punctuator */ || token.value !== value) {
	            this.throwUnexpectedToken(token);
	        }
	    };
	    // Return true if the next JSX token matches the specified punctuator.
	    JSXParser.prototype.matchJSX = function (value) {
	        var next = this.peekJSXToken();
	        return next.type === 7 /* Punctuator */ && next.value === value;
	    };
	    JSXParser.prototype.parseJSXIdentifier = function () {
	        var node = this.createJSXNode();
	        var token = this.nextJSXToken();
	        if (token.type !== 100 /* Identifier */) {
	            this.throwUnexpectedToken(token);
	        }
	        return this.finalize(node, new JSXNode.JSXIdentifier(token.value));
	    };
	    JSXParser.prototype.parseJSXElementName = function () {
	        var node = this.createJSXNode();
	        var elementName = this.parseJSXIdentifier();
	        if (this.matchJSX(':')) {
	            var namespace = elementName;
	            this.expectJSX(':');
	            var name_1 = this.parseJSXIdentifier();
	            elementName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_1));
	        }
	        else if (this.matchJSX('.')) {
	            while (this.matchJSX('.')) {
	                var object = elementName;
	                this.expectJSX('.');
	                var property = this.parseJSXIdentifier();
	                elementName = this.finalize(node, new JSXNode.JSXMemberExpression(object, property));
	            }
	        }
	        return elementName;
	    };
	    JSXParser.prototype.parseJSXAttributeName = function () {
	        var node = this.createJSXNode();
	        var attributeName;
	        var identifier = this.parseJSXIdentifier();
	        if (this.matchJSX(':')) {
	            var namespace = identifier;
	            this.expectJSX(':');
	            var name_2 = this.parseJSXIdentifier();
	            attributeName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_2));
	        }
	        else {
	            attributeName = identifier;
	        }
	        return attributeName;
	    };
	    JSXParser.prototype.parseJSXStringLiteralAttribute = function () {
	        var node = this.createJSXNode();
	        var token = this.nextJSXToken();
	        if (token.type !== 8 /* StringLiteral */) {
	            this.throwUnexpectedToken(token);
	        }
	        var raw = this.getTokenRaw(token);
	        return this.finalize(node, new Node.Literal(token.value, raw));
	    };
	    JSXParser.prototype.parseJSXExpressionAttribute = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('{');
	        this.finishJSX();
	        if (this.match('}')) {
	            this.tolerateError('JSX attributes must only be assigned a non-empty expression');
	        }
	        var expression = this.parseAssignmentExpression();
	        this.reenterJSX();
	        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));
	    };
	    JSXParser.prototype.parseJSXAttributeValue = function () {
	        return this.matchJSX('{') ? this.parseJSXExpressionAttribute() :
	            this.matchJSX('<') ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();
	    };
	    JSXParser.prototype.parseJSXNameValueAttribute = function () {
	        var node = this.createJSXNode();
	        var name = this.parseJSXAttributeName();
	        var value = null;
	        if (this.matchJSX('=')) {
	            this.expectJSX('=');
	            value = this.parseJSXAttributeValue();
	        }
	        return this.finalize(node, new JSXNode.JSXAttribute(name, value));
	    };
	    JSXParser.prototype.parseJSXSpreadAttribute = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('{');
	        this.expectJSX('...');
	        this.finishJSX();
	        var argument = this.parseAssignmentExpression();
	        this.reenterJSX();
	        return this.finalize(node, new JSXNode.JSXSpreadAttribute(argument));
	    };
	    JSXParser.prototype.parseJSXAttributes = function () {
	        var attributes = [];
	        while (!this.matchJSX('/') && !this.matchJSX('>')) {
	            var attribute = this.matchJSX('{') ? this.parseJSXSpreadAttribute() :
	                this.parseJSXNameValueAttribute();
	            attributes.push(attribute);
	        }
	        return attributes;
	    };
	    JSXParser.prototype.parseJSXOpeningElement = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('<');
	        var name = this.parseJSXElementName();
	        var attributes = this.parseJSXAttributes();
	        var selfClosing = this.matchJSX('/');
	        if (selfClosing) {
	            this.expectJSX('/');
	        }
	        this.expectJSX('>');
	        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));
	    };
	    JSXParser.prototype.parseJSXBoundaryElement = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('<');
	        if (this.matchJSX('/')) {
	            this.expectJSX('/');
	            var name_3 = this.parseJSXElementName();
	            this.expectJSX('>');
	            return this.finalize(node, new JSXNode.JSXClosingElement(name_3));
	        }
	        var name = this.parseJSXElementName();
	        var attributes = this.parseJSXAttributes();
	        var selfClosing = this.matchJSX('/');
	        if (selfClosing) {
	            this.expectJSX('/');
	        }
	        this.expectJSX('>');
	        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));
	    };
	    JSXParser.prototype.parseJSXEmptyExpression = function () {
	        var node = this.createJSXChildNode();
	        this.collectComments();
	        this.lastMarker.index = this.scanner.index;
	        this.lastMarker.line = this.scanner.lineNumber;
	        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
	        return this.finalize(node, new JSXNode.JSXEmptyExpression());
	    };
	    JSXParser.prototype.parseJSXExpressionContainer = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('{');
	        var expression;
	        if (this.matchJSX('}')) {
	            expression = this.parseJSXEmptyExpression();
	            this.expectJSX('}');
	        }
	        else {
	            this.finishJSX();
	            expression = this.parseAssignmentExpression();
	            this.reenterJSX();
	        }
	        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));
	    };
	    JSXParser.prototype.parseJSXChildren = function () {
	        var children = [];
	        while (!this.scanner.eof()) {
	            var node = this.createJSXChildNode();
	            var token = this.nextJSXText();
	            if (token.start < token.end) {
	                var raw = this.getTokenRaw(token);
	                var child = this.finalize(node, new JSXNode.JSXText(token.value, raw));
	                children.push(child);
	            }
	            if (this.scanner.source[this.scanner.index] === '{') {
	                var container = this.parseJSXExpressionContainer();
	                children.push(container);
	            }
	            else {
	                break;
	            }
	        }
	        return children;
	    };
	    JSXParser.prototype.parseComplexJSXElement = function (el) {
	        var stack = [];
	        while (!this.scanner.eof()) {
	            el.children = el.children.concat(this.parseJSXChildren());
	            var node = this.createJSXChildNode();
	            var element = this.parseJSXBoundaryElement();
	            if (element.type === jsx_syntax_1.JSXSyntax.JSXOpeningElement) {
	                var opening = element;
	                if (opening.selfClosing) {
	                    var child = this.finalize(node, new JSXNode.JSXElement(opening, [], null));
	                    el.children.push(child);
	                }
	                else {
	                    stack.push(el);
	                    el = { node: node, opening: opening, closing: null, children: [] };
	                }
	            }
	            if (element.type === jsx_syntax_1.JSXSyntax.JSXClosingElement) {
	                el.closing = element;
	                var open_1 = getQualifiedElementName(el.opening.name);
	                var close_1 = getQualifiedElementName(el.closing.name);
	                if (open_1 !== close_1) {
	                    this.tolerateError('Expected corresponding JSX closing tag for %0', open_1);
	                }
	                if (stack.length > 0) {
	                    var child = this.finalize(el.node, new JSXNode.JSXElement(el.opening, el.children, el.closing));
	                    el = stack[stack.length - 1];
	                    el.children.push(child);
	                    stack.pop();
	                }
	                else {
	                    break;
	                }
	            }
	        }
	        return el;
	    };
	    JSXParser.prototype.parseJSXElement = function () {
	        var node = this.createJSXNode();
	        var opening = this.parseJSXOpeningElement();
	        var children = [];
	        var closing = null;
	        if (!opening.selfClosing) {
	            var el = this.parseComplexJSXElement({ node: node, opening: opening, closing: closing, children: children });
	            children = el.children;
	            closing = el.closing;
	        }
	        return this.finalize(node, new JSXNode.JSXElement(opening, children, closing));
	    };
	    JSXParser.prototype.parseJSXRoot = function () {
	        // Pop the opening '<' added from the lookahead.
	        if (this.config.tokens) {
	            this.tokens.pop();
	        }
	        this.startJSX();
	        var element = this.parseJSXElement();
	        this.finishJSX();
	        return element;
	    };
	    JSXParser.prototype.isStartOfExpression = function () {
	        return _super.prototype.isStartOfExpression.call(this) || this.match('<');
	    };
	    return JSXParser;
	}(parser_1.Parser));
	exports.JSXParser = JSXParser;


/***/ },
/* 4 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	// See also tools/generate-unicode-regex.js.
	var Regex = {
	    // Unicode v8.0.0 NonAsciiIdentifierStart:
	    NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,
	    // Unicode v8.0.0 NonAsciiIdentifierPart:
	    NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
	};
	exports.Character = {
	    /* tslint:disable:no-bitwise */
	    fromCodePoint: function (cp) {
	        return (cp < 0x10000) ? String.fromCharCode(cp) :
	            String.fromCharCode(0xD800 + ((cp - 0x10000) >> 10)) +
	                String.fromCharCode(0xDC00 + ((cp - 0x10000) & 1023));
	    },
	    // https://tc39.github.io/ecma262/#sec-white-space
	    isWhiteSpace: function (cp) {
	        return (cp === 0x20) || (cp === 0x09) || (cp === 0x0B) || (cp === 0x0C) || (cp === 0xA0) ||
	            (cp >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(cp) >= 0);
	    },
	    // https://tc39.github.io/ecma262/#sec-line-terminators
	    isLineTerminator: function (cp) {
	        return (cp === 0x0A) || (cp === 0x0D) || (cp === 0x2028) || (cp === 0x2029);
	    },
	    // https://tc39.github.io/ecma262/#sec-names-and-keywords
	    isIdentifierStart: function (cp) {
	        return (cp === 0x24) || (cp === 0x5F) ||
	            (cp >= 0x41 && cp <= 0x5A) ||
	            (cp >= 0x61 && cp <= 0x7A) ||
	            (cp === 0x5C) ||
	            ((cp >= 0x80) && Regex.NonAsciiIdentifierStart.test(exports.Character.fromCodePoint(cp)));
	    },
	    isIdentifierPart: function (cp) {
	        return (cp === 0x24) || (cp === 0x5F) ||
	            (cp >= 0x41 && cp <= 0x5A) ||
	            (cp >= 0x61 && cp <= 0x7A) ||
	            (cp >= 0x30 && cp <= 0x39) ||
	            (cp === 0x5C) ||
	            ((cp >= 0x80) && Regex.NonAsciiIdentifierPart.test(exports.Character.fromCodePoint(cp)));
	    },
	    // https://tc39.github.io/ecma262/#sec-literals-numeric-literals
	    isDecimalDigit: function (cp) {
	        return (cp >= 0x30 && cp <= 0x39); // 0..9
	    },
	    isHexDigit: function (cp) {
	        return (cp >= 0x30 && cp <= 0x39) ||
	            (cp >= 0x41 && cp <= 0x46) ||
	            (cp >= 0x61 && cp <= 0x66); // a..f
	    },
	    isOctalDigit: function (cp) {
	        return (cp >= 0x30 && cp <= 0x37); // 0..7
	    }
	};


/***/ },
/* 5 */
/***/ function(module, exports, __nested_webpack_require_54354__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var jsx_syntax_1 = __nested_webpack_require_54354__(6);
	/* tslint:disable:max-classes-per-file */
	var JSXClosingElement = (function () {
	    function JSXClosingElement(name) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXClosingElement;
	        this.name = name;
	    }
	    return JSXClosingElement;
	}());
	exports.JSXClosingElement = JSXClosingElement;
	var JSXElement = (function () {
	    function JSXElement(openingElement, children, closingElement) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXElement;
	        this.openingElement = openingElement;
	        this.children = children;
	        this.closingElement = closingElement;
	    }
	    return JSXElement;
	}());
	exports.JSXElement = JSXElement;
	var JSXEmptyExpression = (function () {
	    function JSXEmptyExpression() {
	        this.type = jsx_syntax_1.JSXSyntax.JSXEmptyExpression;
	    }
	    return JSXEmptyExpression;
	}());
	exports.JSXEmptyExpression = JSXEmptyExpression;
	var JSXExpressionContainer = (function () {
	    function JSXExpressionContainer(expression) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXExpressionContainer;
	        this.expression = expression;
	    }
	    return JSXExpressionContainer;
	}());
	exports.JSXExpressionContainer = JSXExpressionContainer;
	var JSXIdentifier = (function () {
	    function JSXIdentifier(name) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXIdentifier;
	        this.name = name;
	    }
	    return JSXIdentifier;
	}());
	exports.JSXIdentifier = JSXIdentifier;
	var JSXMemberExpression = (function () {
	    function JSXMemberExpression(object, property) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXMemberExpression;
	        this.object = object;
	        this.property = property;
	    }
	    return JSXMemberExpression;
	}());
	exports.JSXMemberExpression = JSXMemberExpression;
	var JSXAttribute = (function () {
	    function JSXAttribute(name, value) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXAttribute;
	        this.name = name;
	        this.value = value;
	    }
	    return JSXAttribute;
	}());
	exports.JSXAttribute = JSXAttribute;
	var JSXNamespacedName = (function () {
	    function JSXNamespacedName(namespace, name) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXNamespacedName;
	        this.namespace = namespace;
	        this.name = name;
	    }
	    return JSXNamespacedName;
	}());
	exports.JSXNamespacedName = JSXNamespacedName;
	var JSXOpeningElement = (function () {
	    function JSXOpeningElement(name, selfClosing, attributes) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXOpeningElement;
	        this.name = name;
	        this.selfClosing = selfClosing;
	        this.attributes = attributes;
	    }
	    return JSXOpeningElement;
	}());
	exports.JSXOpeningElement = JSXOpeningElement;
	var JSXSpreadAttribute = (function () {
	    function JSXSpreadAttribute(argument) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXSpreadAttribute;
	        this.argument = argument;
	    }
	    return JSXSpreadAttribute;
	}());
	exports.JSXSpreadAttribute = JSXSpreadAttribute;
	var JSXText = (function () {
	    function JSXText(value, raw) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXText;
	        this.value = value;
	        this.raw = raw;
	    }
	    return JSXText;
	}());
	exports.JSXText = JSXText;


/***/ },
/* 6 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.JSXSyntax = {
	    JSXAttribute: 'JSXAttribute',
	    JSXClosingElement: 'JSXClosingElement',
	    JSXElement: 'JSXElement',
	    JSXEmptyExpression: 'JSXEmptyExpression',
	    JSXExpressionContainer: 'JSXExpressionContainer',
	    JSXIdentifier: 'JSXIdentifier',
	    JSXMemberExpression: 'JSXMemberExpression',
	    JSXNamespacedName: 'JSXNamespacedName',
	    JSXOpeningElement: 'JSXOpeningElement',
	    JSXSpreadAttribute: 'JSXSpreadAttribute',
	    JSXText: 'JSXText'
	};


/***/ },
/* 7 */
/***/ function(module, exports, __nested_webpack_require_58416__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var syntax_1 = __nested_webpack_require_58416__(2);
	/* tslint:disable:max-classes-per-file */
	var ArrayExpression = (function () {
	    function ArrayExpression(elements) {
	        this.type = syntax_1.Syntax.ArrayExpression;
	        this.elements = elements;
	    }
	    return ArrayExpression;
	}());
	exports.ArrayExpression = ArrayExpression;
	var ArrayPattern = (function () {
	    function ArrayPattern(elements) {
	        this.type = syntax_1.Syntax.ArrayPattern;
	        this.elements = elements;
	    }
	    return ArrayPattern;
	}());
	exports.ArrayPattern = ArrayPattern;
	var ArrowFunctionExpression = (function () {
	    function ArrowFunctionExpression(params, body, expression) {
	        this.type = syntax_1.Syntax.ArrowFunctionExpression;
	        this.id = null;
	        this.params = params;
	        this.body = body;
	        this.generator = false;
	        this.expression = expression;
	        this.async = false;
	    }
	    return ArrowFunctionExpression;
	}());
	exports.ArrowFunctionExpression = ArrowFunctionExpression;
	var AssignmentExpression = (function () {
	    function AssignmentExpression(operator, left, right) {
	        this.type = syntax_1.Syntax.AssignmentExpression;
	        this.operator = operator;
	        this.left = left;
	        this.right = right;
	    }
	    return AssignmentExpression;
	}());
	exports.AssignmentExpression = AssignmentExpression;
	var AssignmentPattern = (function () {
	    function AssignmentPattern(left, right) {
	        this.type = syntax_1.Syntax.AssignmentPattern;
	        this.left = left;
	        this.right = right;
	    }
	    return AssignmentPattern;
	}());
	exports.AssignmentPattern = AssignmentPattern;
	var AsyncArrowFunctionExpression = (function () {
	    function AsyncArrowFunctionExpression(params, body, expression) {
	        this.type = syntax_1.Syntax.ArrowFunctionExpression;
	        this.id = null;
	        this.params = params;
	        this.body = body;
	        this.generator = false;
	        this.expression = expression;
	        this.async = true;
	    }
	    return AsyncArrowFunctionExpression;
	}());
	exports.AsyncArrowFunctionExpression = AsyncArrowFunctionExpression;
	var AsyncFunctionDeclaration = (function () {
	    function AsyncFunctionDeclaration(id, params, body) {
	        this.type = syntax_1.Syntax.FunctionDeclaration;
	        this.id = id;
	        this.params = params;
	        this.body = body;
	        this.generator = false;
	        this.expression = false;
	        this.async = true;
	    }
	    return AsyncFunctionDeclaration;
	}());
	exports.AsyncFunctionDeclaration = AsyncFunctionDeclaration;
	var AsyncFunctionExpression = (function () {
	    function AsyncFunctionExpression(id, params, body) {
	        this.type = syntax_1.Syntax.FunctionExpression;
	        this.id = id;
	        this.params = params;
	        this.body = body;
	        this.generator = false;
	        this.expression = false;
	        this.async = true;
	    }
	    return AsyncFunctionExpression;
	}());
	exports.AsyncFunctionExpression = AsyncFunctionExpression;
	var AwaitExpression = (function () {
	    function AwaitExpression(argument) {
	        this.type = syntax_1.Syntax.AwaitExpression;
	        this.argument = argument;
	    }
	    return AwaitExpression;
	}());
	exports.AwaitExpression = AwaitExpression;
	var BinaryExpression = (function () {
	    function BinaryExpression(operator, left, right) {
	        var logical = (operator === '||' || operator === '&&');
	        this.type = logical ? syntax_1.Syntax.LogicalExpression : syntax_1.Syntax.BinaryExpression;
	        this.operator = operator;
	        this.left = left;
	        this.right = right;
	    }
	    return BinaryExpression;
	}());
	exports.BinaryExpression = BinaryExpression;
	var BlockStatement = (function () {
	    function BlockStatement(body) {
	        this.type = syntax_1.Syntax.BlockStatement;
	        this.body = body;
	    }
	    return BlockStatement;
	}());
	exports.BlockStatement = BlockStatement;
	var BreakStatement = (function () {
	    function BreakStatement(label) {
	        this.type = syntax_1.Syntax.BreakStatement;
	        this.label = label;
	    }
	    return BreakStatement;
	}());
	exports.BreakStatement = BreakStatement;
	var CallExpression = (function () {
	    function CallExpression(callee, args) {
	        this.type = syntax_1.Syntax.CallExpression;
	        this.callee = callee;
	        this.arguments = args;
	    }
	    return CallExpression;
	}());
	exports.CallExpression = CallExpression;
	var CatchClause = (function () {
	    function CatchClause(param, body) {
	        this.type = syntax_1.Syntax.CatchClause;
	        this.param = param;
	        this.body = body;
	    }
	    return CatchClause;
	}());
	exports.CatchClause = CatchClause;
	var ClassBody = (function () {
	    function ClassBody(body) {
	        this.type = syntax_1.Syntax.ClassBody;
	        this.body = body;
	    }
	    return ClassBody;
	}());
	exports.ClassBody = ClassBody;
	var ClassDeclaration = (function () {
	    function ClassDeclaration(id, superClass, body) {
	        this.type = syntax_1.Syntax.ClassDeclaration;
	        this.id = id;
	        this.superClass = superClass;
	        this.body = body;
	    }
	    return ClassDeclaration;
	}());
	exports.ClassDeclaration = ClassDeclaration;
	var ClassExpression = (function () {
	    function ClassExpression(id, superClass, body) {
	        this.type = syntax_1.Syntax.ClassExpression;
	        this.id = id;
	        this.superClass = superClass;
	        this.body = body;
	    }
	    return ClassExpression;
	}());
	exports.ClassExpression = ClassExpression;
	var ComputedMemberExpression = (function () {
	    function ComputedMemberExpression(object, property) {
	        this.type = syntax_1.Syntax.MemberExpression;
	        this.computed = true;
	        this.object = object;
	        this.property = property;
	    }
	    return ComputedMemberExpression;
	}());
	exports.ComputedMemberExpression = ComputedMemberExpression;
	var ConditionalExpression = (function () {
	    function ConditionalExpression(test, consequent, alternate) {
	        this.type = syntax_1.Syntax.ConditionalExpression;
	        this.test = test;
	        this.consequent = consequent;
	        this.alternate = alternate;
	    }
	    return ConditionalExpression;
	}());
	exports.ConditionalExpression = ConditionalExpression;
	var ContinueStatement = (function () {
	    function ContinueStatement(label) {
	        this.type = syntax_1.Syntax.ContinueStatement;
	        this.label = label;
	    }
	    return ContinueStatement;
	}());
	exports.ContinueStatement = ContinueStatement;
	var DebuggerStatement = (function () {
	    function DebuggerStatement() {
	        this.type = syntax_1.Syntax.DebuggerStatement;
	    }
	    return DebuggerStatement;
	}());
	exports.DebuggerStatement = DebuggerStatement;
	var Directive = (function () {
	    function Directive(expression, directive) {
	        this.type = syntax_1.Syntax.ExpressionStatement;
	        this.expression = expression;
	        this.directive = directive;
	    }
	    return Directive;
	}());
	exports.Directive = Directive;
	var DoWhileStatement = (function () {
	    function DoWhileStatement(body, test) {
	        this.type = syntax_1.Syntax.DoWhileStatement;
	        this.body = body;
	        this.test = test;
	    }
	    return DoWhileStatement;
	}());
	exports.DoWhileStatement = DoWhileStatement;
	var EmptyStatement = (function () {
	    function EmptyStatement() {
	        this.type = syntax_1.Syntax.EmptyStatement;
	    }
	    return EmptyStatement;
	}());
	exports.EmptyStatement = EmptyStatement;
	var ExportAllDeclaration = (function () {
	    function ExportAllDeclaration(source) {
	        this.type = syntax_1.Syntax.ExportAllDeclaration;
	        this.source = source;
	    }
	    return ExportAllDeclaration;
	}());
	exports.ExportAllDeclaration = ExportAllDeclaration;
	var ExportDefaultDeclaration = (function () {
	    function ExportDefaultDeclaration(declaration) {
	        this.type = syntax_1.Syntax.ExportDefaultDeclaration;
	        this.declaration = declaration;
	    }
	    return ExportDefaultDeclaration;
	}());
	exports.ExportDefaultDeclaration = ExportDefaultDeclaration;
	var ExportNamedDeclaration = (function () {
	    function ExportNamedDeclaration(declaration, specifiers, source) {
	        this.type = syntax_1.Syntax.ExportNamedDeclaration;
	        this.declaration = declaration;
	        this.specifiers = specifiers;
	        this.source = source;
	    }
	    return ExportNamedDeclaration;
	}());
	exports.ExportNamedDeclaration = ExportNamedDeclaration;
	var ExportSpecifier = (function () {
	    function ExportSpecifier(local, exported) {
	        this.type = syntax_1.Syntax.ExportSpecifier;
	        this.exported = exported;
	        this.local = local;
	    }
	    return ExportSpecifier;
	}());
	exports.ExportSpecifier = ExportSpecifier;
	var ExpressionStatement = (function () {
	    function ExpressionStatement(expression) {
	        this.type = syntax_1.Syntax.ExpressionStatement;
	        this.expression = expression;
	    }
	    return ExpressionStatement;
	}());
	exports.ExpressionStatement = ExpressionStatement;
	var ForInStatement = (function () {
	    function ForInStatement(left, right, body) {
	        this.type = syntax_1.Syntax.ForInStatement;
	        this.left = left;
	        this.right = right;
	        this.body = body;
	        this.each = false;
	    }
	    return ForInStatement;
	}());
	exports.ForInStatement = ForInStatement;
	var ForOfStatement = (function () {
	    function ForOfStatement(left, right, body) {
	        this.type = syntax_1.Syntax.ForOfStatement;
	        this.left = left;
	        this.right = right;
	        this.body = body;
	    }
	    return ForOfStatement;
	}());
	exports.ForOfStatement = ForOfStatement;
	var ForStatement = (function () {
	    function ForStatement(init, test, update, body) {
	        this.type = syntax_1.Syntax.ForStatement;
	        this.init = init;
	        this.test = test;
	        this.update = update;
	        this.body = body;
	    }
	    return ForStatement;
	}());
	exports.ForStatement = ForStatement;
	var FunctionDeclaration = (function () {
	    function FunctionDeclaration(id, params, body, generator) {
	        this.type = syntax_1.Syntax.FunctionDeclaration;
	        this.id = id;
	        this.params = params;
	        this.body = body;
	        this.generator = generator;
	        this.expression = false;
	        this.async = false;
	    }
	    return FunctionDeclaration;
	}());
	exports.FunctionDeclaration = FunctionDeclaration;
	var FunctionExpression = (function () {
	    function FunctionExpression(id, params, body, generator) {
	        this.type = syntax_1.Syntax.FunctionExpression;
	        this.id = id;
	        this.params = params;
	        this.body = body;
	        this.generator = generator;
	        this.expression = false;
	        this.async = false;
	    }
	    return FunctionExpression;
	}());
	exports.FunctionExpression = FunctionExpression;
	var Identifier = (function () {
	    function Identifier(name) {
	        this.type = syntax_1.Syntax.Identifier;
	        this.name = name;
	    }
	    return Identifier;
	}());
	exports.Identifier = Identifier;
	var IfStatement = (function () {
	    function IfStatement(test, consequent, alternate) {
	        this.type = syntax_1.Syntax.IfStatement;
	        this.test = test;
	        this.consequent = consequent;
	        this.alternate = alternate;
	    }
	    return IfStatement;
	}());
	exports.IfStatement = IfStatement;
	var ImportDeclaration = (function () {
	    function ImportDeclaration(specifiers, source) {
	        this.type = syntax_1.Syntax.ImportDeclaration;
	        this.specifiers = specifiers;
	        this.source = source;
	    }
	    return ImportDeclaration;
	}());
	exports.ImportDeclaration = ImportDeclaration;
	var ImportDefaultSpecifier = (function () {
	    function ImportDefaultSpecifier(local) {
	        this.type = syntax_1.Syntax.ImportDefaultSpecifier;
	        this.local = local;
	    }
	    return ImportDefaultSpecifier;
	}());
	exports.ImportDefaultSpecifier = ImportDefaultSpecifier;
	var ImportNamespaceSpecifier = (function () {
	    function ImportNamespaceSpecifier(local) {
	        this.type = syntax_1.Syntax.ImportNamespaceSpecifier;
	        this.local = local;
	    }
	    return ImportNamespaceSpecifier;
	}());
	exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;
	var ImportSpecifier = (function () {
	    function ImportSpecifier(local, imported) {
	        this.type = syntax_1.Syntax.ImportSpecifier;
	        this.local = local;
	        this.imported = imported;
	    }
	    return ImportSpecifier;
	}());
	exports.ImportSpecifier = ImportSpecifier;
	var LabeledStatement = (function () {
	    function LabeledStatement(label, body) {
	        this.type = syntax_1.Syntax.LabeledStatement;
	        this.label = label;
	        this.body = body;
	    }
	    return LabeledStatement;
	}());
	exports.LabeledStatement = LabeledStatement;
	var Literal = (function () {
	    function Literal(value, raw) {
	        this.type = syntax_1.Syntax.Literal;
	        this.value = value;
	        this.raw = raw;
	    }
	    return Literal;
	}());
	exports.Literal = Literal;
	var MetaProperty = (function () {
	    function MetaProperty(meta, property) {
	        this.type = syntax_1.Syntax.MetaProperty;
	        this.meta = meta;
	        this.property = property;
	    }
	    return MetaProperty;
	}());
	exports.MetaProperty = MetaProperty;
	var MethodDefinition = (function () {
	    function MethodDefinition(key, computed, value, kind, isStatic) {
	        this.type = syntax_1.Syntax.MethodDefinition;
	        this.key = key;
	        this.computed = computed;
	        this.value = value;
	        this.kind = kind;
	        this.static = isStatic;
	    }
	    return MethodDefinition;
	}());
	exports.MethodDefinition = MethodDefinition;
	var Module = (function () {
	    function Module(body) {
	        this.type = syntax_1.Syntax.Program;
	        this.body = body;
	        this.sourceType = 'module';
	    }
	    return Module;
	}());
	exports.Module = Module;
	var NewExpression = (function () {
	    function NewExpression(callee, args) {
	        this.type = syntax_1.Syntax.NewExpression;
	        this.callee = callee;
	        this.arguments = args;
	    }
	    return NewExpression;
	}());
	exports.NewExpression = NewExpression;
	var ObjectExpression = (function () {
	    function ObjectExpression(properties) {
	        this.type = syntax_1.Syntax.ObjectExpression;
	        this.properties = properties;
	    }
	    return ObjectExpression;
	}());
	exports.ObjectExpression = ObjectExpression;
	var ObjectPattern = (function () {
	    function ObjectPattern(properties) {
	        this.type = syntax_1.Syntax.ObjectPattern;
	        this.properties = properties;
	    }
	    return ObjectPattern;
	}());
	exports.ObjectPattern = ObjectPattern;
	var Property = (function () {
	    function Property(kind, key, computed, value, method, shorthand) {
	        this.type = syntax_1.Syntax.Property;
	        this.key = key;
	        this.computed = computed;
	        this.value = value;
	        this.kind = kind;
	        this.method = method;
	        this.shorthand = shorthand;
	    }
	    return Property;
	}());
	exports.Property = Property;
	var RegexLiteral = (function () {
	    function RegexLiteral(value, raw, pattern, flags) {
	        this.type = syntax_1.Syntax.Literal;
	        this.value = value;
	        this.raw = raw;
	        this.regex = { pattern: pattern, flags: flags };
	    }
	    return RegexLiteral;
	}());
	exports.RegexLiteral = RegexLiteral;
	var RestElement = (function () {
	    function RestElement(argument) {
	        this.type = syntax_1.Syntax.RestElement;
	        this.argument = argument;
	    }
	    return RestElement;
	}());
	exports.RestElement = RestElement;
	var ReturnStatement = (function () {
	    function ReturnStatement(argument) {
	        this.type = syntax_1.Syntax.ReturnStatement;
	        this.argument = argument;
	    }
	    return ReturnStatement;
	}());
	exports.ReturnStatement = ReturnStatement;
	var Script = (function () {
	    function Script(body) {
	        this.type = syntax_1.Syntax.Program;
	        this.body = body;
	        this.sourceType = 'script';
	    }
	    return Script;
	}());
	exports.Script = Script;
	var SequenceExpression = (function () {
	    function SequenceExpression(expressions) {
	        this.type = syntax_1.Syntax.SequenceExpression;
	        this.expressions = expressions;
	    }
	    return SequenceExpression;
	}());
	exports.SequenceExpression = SequenceExpression;
	var SpreadElement = (function () {
	    function SpreadElement(argument) {
	        this.type = syntax_1.Syntax.SpreadElement;
	        this.argument = argument;
	    }
	    return SpreadElement;
	}());
	exports.SpreadElement = SpreadElement;
	var StaticMemberExpression = (function () {
	    function StaticMemberExpression(object, property) {
	        this.type = syntax_1.Syntax.MemberExpression;
	        this.computed = false;
	        this.object = object;
	        this.property = property;
	    }
	    return StaticMemberExpression;
	}());
	exports.StaticMemberExpression = StaticMemberExpression;
	var Super = (function () {
	    function Super() {
	        this.type = syntax_1.Syntax.Super;
	    }
	    return Super;
	}());
	exports.Super = Super;
	var SwitchCase = (function () {
	    function SwitchCase(test, consequent) {
	        this.type = syntax_1.Syntax.SwitchCase;
	        this.test = test;
	        this.consequent = consequent;
	    }
	    return SwitchCase;
	}());
	exports.SwitchCase = SwitchCase;
	var SwitchStatement = (function () {
	    function SwitchStatement(discriminant, cases) {
	        this.type = syntax_1.Syntax.SwitchStatement;
	        this.discriminant = discriminant;
	        this.cases = cases;
	    }
	    return SwitchStatement;
	}());
	exports.SwitchStatement = SwitchStatement;
	var TaggedTemplateExpression = (function () {
	    function TaggedTemplateExpression(tag, quasi) {
	        this.type = syntax_1.Syntax.TaggedTemplateExpression;
	        this.tag = tag;
	        this.quasi = quasi;
	    }
	    return TaggedTemplateExpression;
	}());
	exports.TaggedTemplateExpression = TaggedTemplateExpression;
	var TemplateElement = (function () {
	    function TemplateElement(value, tail) {
	        this.type = syntax_1.Syntax.TemplateElement;
	        this.value = value;
	        this.tail = tail;
	    }
	    return TemplateElement;
	}());
	exports.TemplateElement = TemplateElement;
	var TemplateLiteral = (function () {
	    function TemplateLiteral(quasis, expressions) {
	        this.type = syntax_1.Syntax.TemplateLiteral;
	        this.quasis = quasis;
	        this.expressions = expressions;
	    }
	    return TemplateLiteral;
	}());
	exports.TemplateLiteral = TemplateLiteral;
	var ThisExpression = (function () {
	    function ThisExpression() {
	        this.type = syntax_1.Syntax.ThisExpression;
	    }
	    return ThisExpression;
	}());
	exports.ThisExpression = ThisExpression;
	var ThrowStatement = (function () {
	    function ThrowStatement(argument) {
	        this.type = syntax_1.Syntax.ThrowStatement;
	        this.argument = argument;
	    }
	    return ThrowStatement;
	}());
	exports.ThrowStatement = ThrowStatement;
	var TryStatement = (function () {
	    function TryStatement(block, handler, finalizer) {
	        this.type = syntax_1.Syntax.TryStatement;
	        this.block = block;
	        this.handler = handler;
	        this.finalizer = finalizer;
	    }
	    return TryStatement;
	}());
	exports.TryStatement = TryStatement;
	var UnaryExpression = (function () {
	    function UnaryExpression(operator, argument) {
	        this.type = syntax_1.Syntax.UnaryExpression;
	        this.operator = operator;
	        this.argument = argument;
	        this.prefix = true;
	    }
	    return UnaryExpression;
	}());
	exports.UnaryExpression = UnaryExpression;
	var UpdateExpression = (function () {
	    function UpdateExpression(operator, argument, prefix) {
	        this.type = syntax_1.Syntax.UpdateExpression;
	        this.operator = operator;
	        this.argument = argument;
	        this.prefix = prefix;
	    }
	    return UpdateExpression;
	}());
	exports.UpdateExpression = UpdateExpression;
	var VariableDeclaration = (function () {
	    function VariableDeclaration(declarations, kind) {
	        this.type = syntax_1.Syntax.VariableDeclaration;
	        this.declarations = declarations;
	        this.kind = kind;
	    }
	    return VariableDeclaration;
	}());
	exports.VariableDeclaration = VariableDeclaration;
	var VariableDeclarator = (function () {
	    function VariableDeclarator(id, init) {
	        this.type = syntax_1.Syntax.VariableDeclarator;
	        this.id = id;
	        this.init = init;
	    }
	    return VariableDeclarator;
	}());
	exports.VariableDeclarator = VariableDeclarator;
	var WhileStatement = (function () {
	    function WhileStatement(test, body) {
	        this.type = syntax_1.Syntax.WhileStatement;
	        this.test = test;
	        this.body = body;
	    }
	    return WhileStatement;
	}());
	exports.WhileStatement = WhileStatement;
	var WithStatement = (function () {
	    function WithStatement(object, body) {
	        this.type = syntax_1.Syntax.WithStatement;
	        this.object = object;
	        this.body = body;
	    }
	    return WithStatement;
	}());
	exports.WithStatement = WithStatement;
	var YieldExpression = (function () {
	    function YieldExpression(argument, delegate) {
	        this.type = syntax_1.Syntax.YieldExpression;
	        this.argument = argument;
	        this.delegate = delegate;
	    }
	    return YieldExpression;
	}());
	exports.YieldExpression = YieldExpression;


/***/ },
/* 8 */
/***/ function(module, exports, __nested_webpack_require_80491__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var assert_1 = __nested_webpack_require_80491__(9);
	var error_handler_1 = __nested_webpack_require_80491__(10);
	var messages_1 = __nested_webpack_require_80491__(11);
	var Node = __nested_webpack_require_80491__(7);
	var scanner_1 = __nested_webpack_require_80491__(12);
	var syntax_1 = __nested_webpack_require_80491__(2);
	var token_1 = __nested_webpack_require_80491__(13);
	var ArrowParameterPlaceHolder = 'ArrowParameterPlaceHolder';
	var Parser = (function () {
	    function Parser(code, options, delegate) {
	        if (options === void 0) { options = {}; }
	        this.config = {
	            range: (typeof options.range === 'boolean') && options.range,
	            loc: (typeof options.loc === 'boolean') && options.loc,
	            source: null,
	            tokens: (typeof options.tokens === 'boolean') && options.tokens,
	            comment: (typeof options.comment === 'boolean') && options.comment,
	            tolerant: (typeof options.tolerant === 'boolean') && options.tolerant
	        };
	        if (this.config.loc && options.source && options.source !== null) {
	            this.config.source = String(options.source);
	        }
	        this.delegate = delegate;
	        this.errorHandler = new error_handler_1.ErrorHandler();
	        this.errorHandler.tolerant = this.config.tolerant;
	        this.scanner = new scanner_1.Scanner(code, this.errorHandler);
	        this.scanner.trackComment = this.config.comment;
	        this.operatorPrecedence = {
	            ')': 0,
	            ';': 0,
	            ',': 0,
	            '=': 0,
	            ']': 0,
	            '||': 1,
	            '&&': 2,
	            '|': 3,
	            '^': 4,
	            '&': 5,
	            '==': 6,
	            '!=': 6,
	            '===': 6,
	            '!==': 6,
	            '<': 7,
	            '>': 7,
	            '<=': 7,
	            '>=': 7,
	            '<<': 8,
	            '>>': 8,
	            '>>>': 8,
	            '+': 9,
	            '-': 9,
	            '*': 11,
	            '/': 11,
	            '%': 11
	        };
	        this.lookahead = {
	            type: 2 /* EOF */,
	            value: '',
	            lineNumber: this.scanner.lineNumber,
	            lineStart: 0,
	            start: 0,
	            end: 0
	        };
	        this.hasLineTerminator = false;
	        this.context = {
	            isModule: false,
	            await: false,
	            allowIn: true,
	            allowStrictDirective: true,
	            allowYield: true,
	            firstCoverInitializedNameError: null,
	            isAssignmentTarget: false,
	            isBindingElement: false,
	            inFunctionBody: false,
	            inIteration: false,
	            inSwitch: false,
	            labelSet: {},
	            strict: false
	        };
	        this.tokens = [];
	        this.startMarker = {
	            index: 0,
	            line: this.scanner.lineNumber,
	            column: 0
	        };
	        this.lastMarker = {
	            index: 0,
	            line: this.scanner.lineNumber,
	            column: 0
	        };
	        this.nextToken();
	        this.lastMarker = {
	            index: this.scanner.index,
	            line: this.scanner.lineNumber,
	            column: this.scanner.index - this.scanner.lineStart
	        };
	    }
	    Parser.prototype.throwError = function (messageFormat) {
	        var values = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            values[_i - 1] = arguments[_i];
	        }
	        var args = Array.prototype.slice.call(arguments, 1);
	        var msg = messageFormat.replace(/%(\d)/g, function (whole, idx) {
	            assert_1.assert(idx < args.length, 'Message reference must be in range');
	            return args[idx];
	        });
	        var index = this.lastMarker.index;
	        var line = this.lastMarker.line;
	        var column = this.lastMarker.column + 1;
	        throw this.errorHandler.createError(index, line, column, msg);
	    };
	    Parser.prototype.tolerateError = function (messageFormat) {
	        var values = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            values[_i - 1] = arguments[_i];
	        }
	        var args = Array.prototype.slice.call(arguments, 1);
	        var msg = messageFormat.replace(/%(\d)/g, function (whole, idx) {
	            assert_1.assert(idx < args.length, 'Message reference must be in range');
	            return args[idx];
	        });
	        var index = this.lastMarker.index;
	        var line = this.scanner.lineNumber;
	        var column = this.lastMarker.column + 1;
	        this.errorHandler.tolerateError(index, line, column, msg);
	    };
	    // Throw an exception because of the token.
	    Parser.prototype.unexpectedTokenError = function (token, message) {
	        var msg = message || messages_1.Messages.UnexpectedToken;
	        var value;
	        if (token) {
	            if (!message) {
	                msg = (token.type === 2 /* EOF */) ? messages_1.Messages.UnexpectedEOS :
	                    (token.type === 3 /* Identifier */) ? messages_1.Messages.UnexpectedIdentifier :
	                        (token.type === 6 /* NumericLiteral */) ? messages_1.Messages.UnexpectedNumber :
	                            (token.type === 8 /* StringLiteral */) ? messages_1.Messages.UnexpectedString :
	                                (token.type === 10 /* Template */) ? messages_1.Messages.UnexpectedTemplate :
	                                    messages_1.Messages.UnexpectedToken;
	                if (token.type === 4 /* Keyword */) {
	                    if (this.scanner.isFutureReservedWord(token.value)) {
	                        msg = messages_1.Messages.UnexpectedReserved;
	                    }
	                    else if (this.context.strict && this.scanner.isStrictModeReservedWord(token.value)) {
	                        msg = messages_1.Messages.StrictReservedWord;
	                    }
	                }
	            }
	            value = token.value;
	        }
	        else {
	            value = 'ILLEGAL';
	        }
	        msg = msg.replace('%0', value);
	        if (token && typeof token.lineNumber === 'number') {
	            var index = token.start;
	            var line = token.lineNumber;
	            var lastMarkerLineStart = this.lastMarker.index - this.lastMarker.column;
	            var column = token.start - lastMarkerLineStart + 1;
	            return this.errorHandler.createError(index, line, column, msg);
	        }
	        else {
	            var index = this.lastMarker.index;
	            var line = this.lastMarker.line;
	            var column = this.lastMarker.column + 1;
	            return this.errorHandler.createError(index, line, column, msg);
	        }
	    };
	    Parser.prototype.throwUnexpectedToken = function (token, message) {
	        throw this.unexpectedTokenError(token, message);
	    };
	    Parser.prototype.tolerateUnexpectedToken = function (token, message) {
	        this.errorHandler.tolerate(this.unexpectedTokenError(token, message));
	    };
	    Parser.prototype.collectComments = function () {
	        if (!this.config.comment) {
	            this.scanner.scanComments();
	        }
	        else {
	            var comments = this.scanner.scanComments();
	            if (comments.length > 0 && this.delegate) {
	                for (var i = 0; i < comments.length; ++i) {
	                    var e = comments[i];
	                    var node = void 0;
	                    node = {
	                        type: e.multiLine ? 'BlockComment' : 'LineComment',
	                        value: this.scanner.source.slice(e.slice[0], e.slice[1])
	                    };
	                    if (this.config.range) {
	                        node.range = e.range;
	                    }
	                    if (this.config.loc) {
	                        node.loc = e.loc;
	                    }
	                    var metadata = {
	                        start: {
	                            line: e.loc.start.line,
	                            column: e.loc.start.column,
	                            offset: e.range[0]
	                        },
	                        end: {
	                            line: e.loc.end.line,
	                            column: e.loc.end.column,
	                            offset: e.range[1]
	                        }
	                    };
	                    this.delegate(node, metadata);
	                }
	            }
	        }
	    };
	    // From internal representation to an external structure
	    Parser.prototype.getTokenRaw = function (token) {
	        return this.scanner.source.slice(token.start, token.end);
	    };
	    Parser.prototype.convertToken = function (token) {
	        var t = {
	            type: token_1.TokenName[token.type],
	            value: this.getTokenRaw(token)
	        };
	        if (this.config.range) {
	            t.range = [token.start, token.end];
	        }
	        if (this.config.loc) {
	            t.loc = {
	                start: {
	                    line: this.startMarker.line,
	                    column: this.startMarker.column
	                },
	                end: {
	                    line: this.scanner.lineNumber,
	                    column: this.scanner.index - this.scanner.lineStart
	                }
	            };
	        }
	        if (token.type === 9 /* RegularExpression */) {
	            var pattern = token.pattern;
	            var flags = token.flags;
	            t.regex = { pattern: pattern, flags: flags };
	        }
	        return t;
	    };
	    Parser.prototype.nextToken = function () {
	        var token = this.lookahead;
	        this.lastMarker.index = this.scanner.index;
	        this.lastMarker.line = this.scanner.lineNumber;
	        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
	        this.collectComments();
	        if (this.scanner.index !== this.startMarker.index) {
	            this.startMarker.index = this.scanner.index;
	            this.startMarker.line = this.scanner.lineNumber;
	            this.startMarker.column = this.scanner.index - this.scanner.lineStart;
	        }
	        var next = this.scanner.lex();
	        this.hasLineTerminator = (token.lineNumber !== next.lineNumber);
	        if (next && this.context.strict && next.type === 3 /* Identifier */) {
	            if (this.scanner.isStrictModeReservedWord(next.value)) {
	                next.type = 4 /* Keyword */;
	            }
	        }
	        this.lookahead = next;
	        if (this.config.tokens && next.type !== 2 /* EOF */) {
	            this.tokens.push(this.convertToken(next));
	        }
	        return token;
	    };
	    Parser.prototype.nextRegexToken = function () {
	        this.collectComments();
	        var token = this.scanner.scanRegExp();
	        if (this.config.tokens) {
	            // Pop the previous token, '/' or '/='
	            // This is added from the lookahead token.
	            this.tokens.pop();
	            this.tokens.push(this.convertToken(token));
	        }
	        // Prime the next lookahead.
	        this.lookahead = token;
	        this.nextToken();
	        return token;
	    };
	    Parser.prototype.createNode = function () {
	        return {
	            index: this.startMarker.index,
	            line: this.startMarker.line,
	            column: this.startMarker.column
	        };
	    };
	    Parser.prototype.startNode = function (token, lastLineStart) {
	        if (lastLineStart === void 0) { lastLineStart = 0; }
	        var column = token.start - token.lineStart;
	        var line = token.lineNumber;
	        if (column < 0) {
	            column += lastLineStart;
	            line--;
	        }
	        return {
	            index: token.start,
	            line: line,
	            column: column
	        };
	    };
	    Parser.prototype.finalize = function (marker, node) {
	        if (this.config.range) {
	            node.range = [marker.index, this.lastMarker.index];
	        }
	        if (this.config.loc) {
	            node.loc = {
	                start: {
	                    line: marker.line,
	                    column: marker.column,
	                },
	                end: {
	                    line: this.lastMarker.line,
	                    column: this.lastMarker.column
	                }
	            };
	            if (this.config.source) {
	                node.loc.source = this.config.source;
	            }
	        }
	        if (this.delegate) {
	            var metadata = {
	                start: {
	                    line: marker.line,
	                    column: marker.column,
	                    offset: marker.index
	                },
	                end: {
	                    line: this.lastMarker.line,
	                    column: this.lastMarker.column,
	                    offset: this.lastMarker.index
	                }
	            };
	            this.delegate(node, metadata);
	        }
	        return node;
	    };
	    // Expect the next token to match the specified punctuator.
	    // If not, an exception will be thrown.
	    Parser.prototype.expect = function (value) {
	        var token = this.nextToken();
	        if (token.type !== 7 /* Punctuator */ || token.value !== value) {
	            this.throwUnexpectedToken(token);
	        }
	    };
	    // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().
	    Parser.prototype.expectCommaSeparator = function () {
	        if (this.config.tolerant) {
	            var token = this.lookahead;
	            if (token.type === 7 /* Punctuator */ && token.value === ',') {
	                this.nextToken();
	            }
	            else if (token.type === 7 /* Punctuator */ && token.value === ';') {
	                this.nextToken();
	                this.tolerateUnexpectedToken(token);
	            }
	            else {
	                this.tolerateUnexpectedToken(token, messages_1.Messages.UnexpectedToken);
	            }
	        }
	        else {
	            this.expect(',');
	        }
	    };
	    // Expect the next token to match the specified keyword.
	    // If not, an exception will be thrown.
	    Parser.prototype.expectKeyword = function (keyword) {
	        var token = this.nextToken();
	        if (token.type !== 4 /* Keyword */ || token.value !== keyword) {
	            this.throwUnexpectedToken(token);
	        }
	    };
	    // Return true if the next token matches the specified punctuator.
	    Parser.prototype.match = function (value) {
	        return this.lookahead.type === 7 /* Punctuator */ && this.lookahead.value === value;
	    };
	    // Return true if the next token matches the specified keyword
	    Parser.prototype.matchKeyword = function (keyword) {
	        return this.lookahead.type === 4 /* Keyword */ && this.lookahead.value === keyword;
	    };
	    // Return true if the next token matches the specified contextual keyword
	    // (where an identifier is sometimes a keyword depending on the context)
	    Parser.prototype.matchContextualKeyword = function (keyword) {
	        return this.lookahead.type === 3 /* Identifier */ && this.lookahead.value === keyword;
	    };
	    // Return true if the next token is an assignment operator
	    Parser.prototype.matchAssign = function () {
	        if (this.lookahead.type !== 7 /* Punctuator */) {
	            return false;
	        }
	        var op = this.lookahead.value;
	        return op === '=' ||
	            op === '*=' ||
	            op === '**=' ||
	            op === '/=' ||
	            op === '%=' ||
	            op === '+=' ||
	            op === '-=' ||
	            op === '<<=' ||
	            op === '>>=' ||
	            op === '>>>=' ||
	            op === '&=' ||
	            op === '^=' ||
	            op === '|=';
	    };
	    // Cover grammar support.
	    //
	    // When an assignment expression position starts with an left parenthesis, the determination of the type
	    // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)
	    // or the first comma. This situation also defers the determination of all the expressions nested in the pair.
	    //
	    // There are three productions that can be parsed in a parentheses pair that needs to be determined
	    // after the outermost pair is closed. They are:
	    //
	    //   1. AssignmentExpression
	    //   2. BindingElements
	    //   3. AssignmentTargets
	    //
	    // In order to avoid exponential backtracking, we use two flags to denote if the production can be
	    // binding element or assignment target.
	    //
	    // The three productions have the relationship:
	    //
	    //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression
	    //
	    // with a single exception that CoverInitializedName when used directly in an Expression, generates
	    // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the
	    // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.
	    //
	    // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not
	    // effect the current flags. This means the production the parser parses is only used as an expression. Therefore
	    // the CoverInitializedName check is conducted.
	    //
	    // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates
	    // the flags outside of the parser. This means the production the parser parses is used as a part of a potential
	    // pattern. The CoverInitializedName check is deferred.
	    Parser.prototype.isolateCoverGrammar = function (parseFunction) {
	        var previousIsBindingElement = this.context.isBindingElement;
	        var previousIsAssignmentTarget = this.context.isAssignmentTarget;
	        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;
	        this.context.isBindingElement = true;
	        this.context.isAssignmentTarget = true;
	        this.context.firstCoverInitializedNameError = null;
	        var result = parseFunction.call(this);
	        if (this.context.firstCoverInitializedNameError !== null) {
	            this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);
	        }
	        this.context.isBindingElement = previousIsBindingElement;
	        this.context.isAssignmentTarget = previousIsAssignmentTarget;
	        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;
	        return result;
	    };
	    Parser.prototype.inheritCoverGrammar = function (parseFunction) {
	        var previousIsBindingElement = this.context.isBindingElement;
	        var previousIsAssignmentTarget = this.context.isAssignmentTarget;
	        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;
	        this.context.isBindingElement = true;
	        this.context.isAssignmentTarget = true;
	        this.context.firstCoverInitializedNameError = null;
	        var result = parseFunction.call(this);
	        this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement;
	        this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget;
	        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError || this.context.firstCoverInitializedNameError;
	        return result;
	    };
	    Parser.prototype.consumeSemicolon = function () {
	        if (this.match(';')) {
	            this.nextToken();
	        }
	        else if (!this.hasLineTerminator) {
	            if (this.lookahead.type !== 2 /* EOF */ && !this.match('}')) {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	            this.lastMarker.index = this.startMarker.index;
	            this.lastMarker.line = this.startMarker.line;
	            this.lastMarker.column = this.startMarker.column;
	        }
	    };
	    // https://tc39.github.io/ecma262/#sec-primary-expression
	    Parser.prototype.parsePrimaryExpression = function () {
	        var node = this.createNode();
	        var expr;
	        var token, raw;
	        switch (this.lookahead.type) {
	            case 3 /* Identifier */:
	                if ((this.context.isModule || this.context.await) && this.lookahead.value === 'await') {
	                    this.tolerateUnexpectedToken(this.lookahead);
	                }
	                expr = this.matchAsyncFunction() ? this.parseFunctionExpression() : this.finalize(node, new Node.Identifier(this.nextToken().value));
	                break;
	            case 6 /* NumericLiteral */:
	            case 8 /* StringLiteral */:
	                if (this.context.strict && this.lookahead.octal) {
	                    this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.StrictOctalLiteral);
	                }
	                this.context.isAssignmentTarget = false;
	                this.context.isBindingElement = false;
	                token = this.nextToken();
	                raw = this.getTokenRaw(token);
	                expr = this.finalize(node, new Node.Literal(token.value, raw));
	                break;
	            case 1 /* BooleanLiteral */:
	                this.context.isAssignmentTarget = false;
	                this.context.isBindingElement = false;
	                token = this.nextToken();
	                raw = this.getTokenRaw(token);
	                expr = this.finalize(node, new Node.Literal(token.value === 'true', raw));
	                break;
	            case 5 /* NullLiteral */:
	                this.context.isAssignmentTarget = false;
	                this.context.isBindingElement = false;
	                token = this.nextToken();
	                raw = this.getTokenRaw(token);
	                expr = this.finalize(node, new Node.Literal(null, raw));
	                break;
	            case 10 /* Template */:
	                expr = this.parseTemplateLiteral();
	                break;
	            case 7 /* Punctuator */:
	                switch (this.lookahead.value) {
	                    case '(':
	                        this.context.isBindingElement = false;
	                        expr = this.inheritCoverGrammar(this.parseGroupExpression);
	                        break;
	                    case '[':
	                        expr = this.inheritCoverGrammar(this.parseArrayInitializer);
	                        break;
	                    case '{':
	                        expr = this.inheritCoverGrammar(this.parseObjectInitializer);
	                        break;
	                    case '/':
	                    case '/=':
	                        this.context.isAssignmentTarget = false;
	                        this.context.isBindingElement = false;
	                        this.scanner.index = this.startMarker.index;
	                        token = this.nextRegexToken();
	                        raw = this.getTokenRaw(token);
	                        expr = this.finalize(node, new Node.RegexLiteral(token.regex, raw, token.pattern, token.flags));
	                        break;
	                    default:
	                        expr = this.throwUnexpectedToken(this.nextToken());
	                }
	                break;
	            case 4 /* Keyword */:
	                if (!this.context.strict && this.context.allowYield && this.matchKeyword('yield')) {
	                    expr = this.parseIdentifierName();
	                }
	                else if (!this.context.strict && this.matchKeyword('let')) {
	                    expr = this.finalize(node, new Node.Identifier(this.nextToken().value));
	                }
	                else {
	                    this.context.isAssignmentTarget = false;
	                    this.context.isBindingElement = false;
	                    if (this.matchKeyword('function')) {
	                        expr = this.parseFunctionExpression();
	                    }
	                    else if (this.matchKeyword('this')) {
	                        this.nextToken();
	                        expr = this.finalize(node, new Node.ThisExpression());
	                    }
	                    else if (this.matchKeyword('class')) {
	                        expr = this.parseClassExpression();
	                    }
	                    else {
	                        expr = this.throwUnexpectedToken(this.nextToken());
	                    }
	                }
	                break;
	            default:
	                expr = this.throwUnexpectedToken(this.nextToken());
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-array-initializer
	    Parser.prototype.parseSpreadElement = function () {
	        var node = this.createNode();
	        this.expect('...');
	        var arg = this.inheritCoverGrammar(this.parseAssignmentExpression);
	        return this.finalize(node, new Node.SpreadElement(arg));
	    };
	    Parser.prototype.parseArrayInitializer = function () {
	        var node = this.createNode();
	        var elements = [];
	        this.expect('[');
	        while (!this.match(']')) {
	            if (this.match(',')) {
	                this.nextToken();
	                elements.push(null);
	            }
	            else if (this.match('...')) {
	                var element = this.parseSpreadElement();
	                if (!this.match(']')) {
	                    this.context.isAssignmentTarget = false;
	                    this.context.isBindingElement = false;
	                    this.expect(',');
	                }
	                elements.push(element);
	            }
	            else {
	                elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
	                if (!this.match(']')) {
	                    this.expect(',');
	                }
	            }
	        }
	        this.expect(']');
	        return this.finalize(node, new Node.ArrayExpression(elements));
	    };
	    // https://tc39.github.io/ecma262/#sec-object-initializer
	    Parser.prototype.parsePropertyMethod = function (params) {
	        this.context.isAssignmentTarget = false;
	        this.context.isBindingElement = false;
	        var previousStrict = this.context.strict;
	        var previousAllowStrictDirective = this.context.allowStrictDirective;
	        this.context.allowStrictDirective = params.simple;
	        var body = this.isolateCoverGrammar(this.parseFunctionSourceElements);
	        if (this.context.strict && params.firstRestricted) {
	            this.tolerateUnexpectedToken(params.firstRestricted, params.message);
	        }
	        if (this.context.strict && params.stricted) {
	            this.tolerateUnexpectedToken(params.stricted, params.message);
	        }
	        this.context.strict = previousStrict;
	        this.context.allowStrictDirective = previousAllowStrictDirective;
	        return body;
	    };
	    Parser.prototype.parsePropertyMethodFunction = function () {
	        var isGenerator = false;
	        var node = this.createNode();
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = true;
	        var params = this.parseFormalParameters();
	        var method = this.parsePropertyMethod(params);
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
	    };
	    Parser.prototype.parsePropertyMethodAsyncFunction = function () {
	        var node = this.createNode();
	        var previousAllowYield = this.context.allowYield;
	        var previousAwait = this.context.await;
	        this.context.allowYield = false;
	        this.context.await = true;
	        var params = this.parseFormalParameters();
	        var method = this.parsePropertyMethod(params);
	        this.context.allowYield = previousAllowYield;
	        this.context.await = previousAwait;
	        return this.finalize(node, new Node.AsyncFunctionExpression(null, params.params, method));
	    };
	    Parser.prototype.parseObjectPropertyKey = function () {
	        var node = this.createNode();
	        var token = this.nextToken();
	        var key;
	        switch (token.type) {
	            case 8 /* StringLiteral */:
	            case 6 /* NumericLiteral */:
	                if (this.context.strict && token.octal) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictOctalLiteral);
	                }
	                var raw = this.getTokenRaw(token);
	                key = this.finalize(node, new Node.Literal(token.value, raw));
	                break;
	            case 3 /* Identifier */:
	            case 1 /* BooleanLiteral */:
	            case 5 /* NullLiteral */:
	            case 4 /* Keyword */:
	                key = this.finalize(node, new Node.Identifier(token.value));
	                break;
	            case 7 /* Punctuator */:
	                if (token.value === '[') {
	                    key = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                    this.expect(']');
	                }
	                else {
	                    key = this.throwUnexpectedToken(token);
	                }
	                break;
	            default:
	                key = this.throwUnexpectedToken(token);
	        }
	        return key;
	    };
	    Parser.prototype.isPropertyKey = function (key, value) {
	        return (key.type === syntax_1.Syntax.Identifier && key.name === value) ||
	            (key.type === syntax_1.Syntax.Literal && key.value === value);
	    };
	    Parser.prototype.parseObjectProperty = function (hasProto) {
	        var node = this.createNode();
	        var token = this.lookahead;
	        var kind;
	        var key = null;
	        var value = null;
	        var computed = false;
	        var method = false;
	        var shorthand = false;
	        var isAsync = false;
	        if (token.type === 3 /* Identifier */) {
	            var id = token.value;
	            this.nextToken();
	            computed = this.match('[');
	            isAsync = !this.hasLineTerminator && (id === 'async') &&
	                !this.match(':') && !this.match('(') && !this.match('*') && !this.match(',');
	            key = isAsync ? this.parseObjectPropertyKey() : this.finalize(node, new Node.Identifier(id));
	        }
	        else if (this.match('*')) {
	            this.nextToken();
	        }
	        else {
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	        }
	        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);
	        if (token.type === 3 /* Identifier */ && !isAsync && token.value === 'get' && lookaheadPropertyKey) {
	            kind = 'get';
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            this.context.allowYield = false;
	            value = this.parseGetterMethod();
	        }
	        else if (token.type === 3 /* Identifier */ && !isAsync && token.value === 'set' && lookaheadPropertyKey) {
	            kind = 'set';
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            value = this.parseSetterMethod();
	        }
	        else if (token.type === 7 /* Punctuator */ && token.value === '*' && lookaheadPropertyKey) {
	            kind = 'init';
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            value = this.parseGeneratorMethod();
	            method = true;
	        }
	        else {
	            if (!key) {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	            kind = 'init';
	            if (this.match(':') && !isAsync) {
	                if (!computed && this.isPropertyKey(key, '__proto__')) {
	                    if (hasProto.value) {
	                        this.tolerateError(messages_1.Messages.DuplicateProtoProperty);
	                    }
	                    hasProto.value = true;
	                }
	                this.nextToken();
	                value = this.inheritCoverGrammar(this.parseAssignmentExpression);
	            }
	            else if (this.match('(')) {
	                value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();
	                method = true;
	            }
	            else if (token.type === 3 /* Identifier */) {
	                var id = this.finalize(node, new Node.Identifier(token.value));
	                if (this.match('=')) {
	                    this.context.firstCoverInitializedNameError = this.lookahead;
	                    this.nextToken();
	                    shorthand = true;
	                    var init = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                    value = this.finalize(node, new Node.AssignmentPattern(id, init));
	                }
	                else {
	                    shorthand = true;
	                    value = id;
	                }
	            }
	            else {
	                this.throwUnexpectedToken(this.nextToken());
	            }
	        }
	        return this.finalize(node, new Node.Property(kind, key, computed, value, method, shorthand));
	    };
	    Parser.prototype.parseObjectInitializer = function () {
	        var node = this.createNode();
	        this.expect('{');
	        var properties = [];
	        var hasProto = { value: false };
	        while (!this.match('}')) {
	            properties.push(this.parseObjectProperty(hasProto));
	            if (!this.match('}')) {
	                this.expectCommaSeparator();
	            }
	        }
	        this.expect('}');
	        return this.finalize(node, new Node.ObjectExpression(properties));
	    };
	    // https://tc39.github.io/ecma262/#sec-template-literals
	    Parser.prototype.parseTemplateHead = function () {
	        assert_1.assert(this.lookahead.head, 'Template literal must start with a template head');
	        var node = this.createNode();
	        var token = this.nextToken();
	        var raw = token.value;
	        var cooked = token.cooked;
	        return this.finalize(node, new Node.TemplateElement({ raw: raw, cooked: cooked }, token.tail));
	    };
	    Parser.prototype.parseTemplateElement = function () {
	        if (this.lookahead.type !== 10 /* Template */) {
	            this.throwUnexpectedToken();
	        }
	        var node = this.createNode();
	        var token = this.nextToken();
	        var raw = token.value;
	        var cooked = token.cooked;
	        return this.finalize(node, new Node.TemplateElement({ raw: raw, cooked: cooked }, token.tail));
	    };
	    Parser.prototype.parseTemplateLiteral = function () {
	        var node = this.createNode();
	        var expressions = [];
	        var quasis = [];
	        var quasi = this.parseTemplateHead();
	        quasis.push(quasi);
	        while (!quasi.tail) {
	            expressions.push(this.parseExpression());
	            quasi = this.parseTemplateElement();
	            quasis.push(quasi);
	        }
	        return this.finalize(node, new Node.TemplateLiteral(quasis, expressions));
	    };
	    // https://tc39.github.io/ecma262/#sec-grouping-operator
	    Parser.prototype.reinterpretExpressionAsPattern = function (expr) {
	        switch (expr.type) {
	            case syntax_1.Syntax.Identifier:
	            case syntax_1.Syntax.MemberExpression:
	            case syntax_1.Syntax.RestElement:
	            case syntax_1.Syntax.AssignmentPattern:
	                break;
	            case syntax_1.Syntax.SpreadElement:
	                expr.type = syntax_1.Syntax.RestElement;
	                this.reinterpretExpressionAsPattern(expr.argument);
	                break;
	            case syntax_1.Syntax.ArrayExpression:
	                expr.type = syntax_1.Syntax.ArrayPattern;
	                for (var i = 0; i < expr.elements.length; i++) {
	                    if (expr.elements[i] !== null) {
	                        this.reinterpretExpressionAsPattern(expr.elements[i]);
	                    }
	                }
	                break;
	            case syntax_1.Syntax.ObjectExpression:
	                expr.type = syntax_1.Syntax.ObjectPattern;
	                for (var i = 0; i < expr.properties.length; i++) {
	                    this.reinterpretExpressionAsPattern(expr.properties[i].value);
	                }
	                break;
	            case syntax_1.Syntax.AssignmentExpression:
	                expr.type = syntax_1.Syntax.AssignmentPattern;
	                delete expr.operator;
	                this.reinterpretExpressionAsPattern(expr.left);
	                break;
	            default:
	                // Allow other node type for tolerant parsing.
	                break;
	        }
	    };
	    Parser.prototype.parseGroupExpression = function () {
	        var expr;
	        this.expect('(');
	        if (this.match(')')) {
	            this.nextToken();
	            if (!this.match('=>')) {
	                this.expect('=>');
	            }
	            expr = {
	                type: ArrowParameterPlaceHolder,
	                params: [],
	                async: false
	            };
	        }
	        else {
	            var startToken = this.lookahead;
	            var params = [];
	            if (this.match('...')) {
	                expr = this.parseRestElement(params);
	                this.expect(')');
	                if (!this.match('=>')) {
	                    this.expect('=>');
	                }
	                expr = {
	                    type: ArrowParameterPlaceHolder,
	                    params: [expr],
	                    async: false
	                };
	            }
	            else {
	                var arrow = false;
	                this.context.isBindingElement = true;
	                expr = this.inheritCoverGrammar(this.parseAssignmentExpression);
	                if (this.match(',')) {
	                    var expressions = [];
	                    this.context.isAssignmentTarget = false;
	                    expressions.push(expr);
	                    while (this.lookahead.type !== 2 /* EOF */) {
	                        if (!this.match(',')) {
	                            break;
	                        }
	                        this.nextToken();
	                        if (this.match(')')) {
	                            this.nextToken();
	                            for (var i = 0; i < expressions.length; i++) {
	                                this.reinterpretExpressionAsPattern(expressions[i]);
	                            }
	                            arrow = true;
	                            expr = {
	                                type: ArrowParameterPlaceHolder,
	                                params: expressions,
	                                async: false
	                            };
	                        }
	                        else if (this.match('...')) {
	                            if (!this.context.isBindingElement) {
	                                this.throwUnexpectedToken(this.lookahead);
	                            }
	                            expressions.push(this.parseRestElement(params));
	                            this.expect(')');
	                            if (!this.match('=>')) {
	                                this.expect('=>');
	                            }
	                            this.context.isBindingElement = false;
	                            for (var i = 0; i < expressions.length; i++) {
	                                this.reinterpretExpressionAsPattern(expressions[i]);
	                            }
	                            arrow = true;
	                            expr = {
	                                type: ArrowParameterPlaceHolder,
	                                params: expressions,
	                                async: false
	                            };
	                        }
	                        else {
	                            expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
	                        }
	                        if (arrow) {
	                            break;
	                        }
	                    }
	                    if (!arrow) {
	                        expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));
	                    }
	                }
	                if (!arrow) {
	                    this.expect(')');
	                    if (this.match('=>')) {
	                        if (expr.type === syntax_1.Syntax.Identifier && expr.name === 'yield') {
	                            arrow = true;
	                            expr = {
	                                type: ArrowParameterPlaceHolder,
	                                params: [expr],
	                                async: false
	                            };
	                        }
	                        if (!arrow) {
	                            if (!this.context.isBindingElement) {
	                                this.throwUnexpectedToken(this.lookahead);
	                            }
	                            if (expr.type === syntax_1.Syntax.SequenceExpression) {
	                                for (var i = 0; i < expr.expressions.length; i++) {
	                                    this.reinterpretExpressionAsPattern(expr.expressions[i]);
	                                }
	                            }
	                            else {
	                                this.reinterpretExpressionAsPattern(expr);
	                            }
	                            var parameters = (expr.type === syntax_1.Syntax.SequenceExpression ? expr.expressions : [expr]);
	                            expr = {
	                                type: ArrowParameterPlaceHolder,
	                                params: parameters,
	                                async: false
	                            };
	                        }
	                    }
	                    this.context.isBindingElement = false;
	                }
	            }
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-left-hand-side-expressions
	    Parser.prototype.parseArguments = function () {
	        this.expect('(');
	        var args = [];
	        if (!this.match(')')) {
	            while (true) {
	                var expr = this.match('...') ? this.parseSpreadElement() :
	                    this.isolateCoverGrammar(this.parseAssignmentExpression);
	                args.push(expr);
	                if (this.match(')')) {
	                    break;
	                }
	                this.expectCommaSeparator();
	                if (this.match(')')) {
	                    break;
	                }
	            }
	        }
	        this.expect(')');
	        return args;
	    };
	    Parser.prototype.isIdentifierName = function (token) {
	        return token.type === 3 /* Identifier */ ||
	            token.type === 4 /* Keyword */ ||
	            token.type === 1 /* BooleanLiteral */ ||
	            token.type === 5 /* NullLiteral */;
	    };
	    Parser.prototype.parseIdentifierName = function () {
	        var node = this.createNode();
	        var token = this.nextToken();
	        if (!this.isIdentifierName(token)) {
	            this.throwUnexpectedToken(token);
	        }
	        return this.finalize(node, new Node.Identifier(token.value));
	    };
	    Parser.prototype.parseNewExpression = function () {
	        var node = this.createNode();
	        var id = this.parseIdentifierName();
	        assert_1.assert(id.name === 'new', 'New expression must start with `new`');
	        var expr;
	        if (this.match('.')) {
	            this.nextToken();
	            if (this.lookahead.type === 3 /* Identifier */ && this.context.inFunctionBody && this.lookahead.value === 'target') {
	                var property = this.parseIdentifierName();
	                expr = new Node.MetaProperty(id, property);
	            }
	            else {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	        }
	        else {
	            var callee = this.isolateCoverGrammar(this.parseLeftHandSideExpression);
	            var args = this.match('(') ? this.parseArguments() : [];
	            expr = new Node.NewExpression(callee, args);
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	        }
	        return this.finalize(node, expr);
	    };
	    Parser.prototype.parseAsyncArgument = function () {
	        var arg = this.parseAssignmentExpression();
	        this.context.firstCoverInitializedNameError = null;
	        return arg;
	    };
	    Parser.prototype.parseAsyncArguments = function () {
	        this.expect('(');
	        var args = [];
	        if (!this.match(')')) {
	            while (true) {
	                var expr = this.match('...') ? this.parseSpreadElement() :
	                    this.isolateCoverGrammar(this.parseAsyncArgument);
	                args.push(expr);
	                if (this.match(')')) {
	                    break;
	                }
	                this.expectCommaSeparator();
	                if (this.match(')')) {
	                    break;
	                }
	            }
	        }
	        this.expect(')');
	        return args;
	    };
	    Parser.prototype.parseLeftHandSideExpressionAllowCall = function () {
	        var startToken = this.lookahead;
	        var maybeAsync = this.matchContextualKeyword('async');
	        var previousAllowIn = this.context.allowIn;
	        this.context.allowIn = true;
	        var expr;
	        if (this.matchKeyword('super') && this.context.inFunctionBody) {
	            expr = this.createNode();
	            this.nextToken();
	            expr = this.finalize(expr, new Node.Super());
	            if (!this.match('(') && !this.match('.') && !this.match('[')) {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	        }
	        else {
	            expr = this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);
	        }
	        while (true) {
	            if (this.match('.')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = true;
	                this.expect('.');
	                var property = this.parseIdentifierName();
	                expr = this.finalize(this.startNode(startToken), new Node.StaticMemberExpression(expr, property));
	            }
	            else if (this.match('(')) {
	                var asyncArrow = maybeAsync && (startToken.lineNumber === this.lookahead.lineNumber);
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = false;
	                var args = asyncArrow ? this.parseAsyncArguments() : this.parseArguments();
	                expr = this.finalize(this.startNode(startToken), new Node.CallExpression(expr, args));
	                if (asyncArrow && this.match('=>')) {
	                    for (var i = 0; i < args.length; ++i) {
	                        this.reinterpretExpressionAsPattern(args[i]);
	                    }
	                    expr = {
	                        type: ArrowParameterPlaceHolder,
	                        params: args,
	                        async: true
	                    };
	                }
	            }
	            else if (this.match('[')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = true;
	                this.expect('[');
	                var property = this.isolateCoverGrammar(this.parseExpression);
	                this.expect(']');
	                expr = this.finalize(this.startNode(startToken), new Node.ComputedMemberExpression(expr, property));
	            }
	            else if (this.lookahead.type === 10 /* Template */ && this.lookahead.head) {
	                var quasi = this.parseTemplateLiteral();
	                expr = this.finalize(this.startNode(startToken), new Node.TaggedTemplateExpression(expr, quasi));
	            }
	            else {
	                break;
	            }
	        }
	        this.context.allowIn = previousAllowIn;
	        return expr;
	    };
	    Parser.prototype.parseSuper = function () {
	        var node = this.createNode();
	        this.expectKeyword('super');
	        if (!this.match('[') && !this.match('.')) {
	            this.throwUnexpectedToken(this.lookahead);
	        }
	        return this.finalize(node, new Node.Super());
	    };
	    Parser.prototype.parseLeftHandSideExpression = function () {
	        assert_1.assert(this.context.allowIn, 'callee of new expression always allow in keyword.');
	        var node = this.startNode(this.lookahead);
	        var expr = (this.matchKeyword('super') && this.context.inFunctionBody) ? this.parseSuper() :
	            this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);
	        while (true) {
	            if (this.match('[')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = true;
	                this.expect('[');
	                var property = this.isolateCoverGrammar(this.parseExpression);
	                this.expect(']');
	                expr = this.finalize(node, new Node.ComputedMemberExpression(expr, property));
	            }
	            else if (this.match('.')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = true;
	                this.expect('.');
	                var property = this.parseIdentifierName();
	                expr = this.finalize(node, new Node.StaticMemberExpression(expr, property));
	            }
	            else if (this.lookahead.type === 10 /* Template */ && this.lookahead.head) {
	                var quasi = this.parseTemplateLiteral();
	                expr = this.finalize(node, new Node.TaggedTemplateExpression(expr, quasi));
	            }
	            else {
	                break;
	            }
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-update-expressions
	    Parser.prototype.parseUpdateExpression = function () {
	        var expr;
	        var startToken = this.lookahead;
	        if (this.match('++') || this.match('--')) {
	            var node = this.startNode(startToken);
	            var token = this.nextToken();
	            expr = this.inheritCoverGrammar(this.parseUnaryExpression);
	            if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {
	                this.tolerateError(messages_1.Messages.StrictLHSPrefix);
	            }
	            if (!this.context.isAssignmentTarget) {
	                this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
	            }
	            var prefix = true;
	            expr = this.finalize(node, new Node.UpdateExpression(token.value, expr, prefix));
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	        }
	        else {
	            expr = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
	            if (!this.hasLineTerminator && this.lookahead.type === 7 /* Punctuator */) {
	                if (this.match('++') || this.match('--')) {
	                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {
	                        this.tolerateError(messages_1.Messages.StrictLHSPostfix);
	                    }
	                    if (!this.context.isAssignmentTarget) {
	                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
	                    }
	                    this.context.isAssignmentTarget = false;
	                    this.context.isBindingElement = false;
	                    var operator = this.nextToken().value;
	                    var prefix = false;
	                    expr = this.finalize(this.startNode(startToken), new Node.UpdateExpression(operator, expr, prefix));
	                }
	            }
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-unary-operators
	    Parser.prototype.parseAwaitExpression = function () {
	        var node = this.createNode();
	        this.nextToken();
	        var argument = this.parseUnaryExpression();
	        return this.finalize(node, new Node.AwaitExpression(argument));
	    };
	    Parser.prototype.parseUnaryExpression = function () {
	        var expr;
	        if (this.match('+') || this.match('-') || this.match('~') || this.match('!') ||
	            this.matchKeyword('delete') || this.matchKeyword('void') || this.matchKeyword('typeof')) {
	            var node = this.startNode(this.lookahead);
	            var token = this.nextToken();
	            expr = this.inheritCoverGrammar(this.parseUnaryExpression);
	            expr = this.finalize(node, new Node.UnaryExpression(token.value, expr));
	            if (this.context.strict && expr.operator === 'delete' && expr.argument.type === syntax_1.Syntax.Identifier) {
	                this.tolerateError(messages_1.Messages.StrictDelete);
	            }
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	        }
	        else if (this.context.await && this.matchContextualKeyword('await')) {
	            expr = this.parseAwaitExpression();
	        }
	        else {
	            expr = this.parseUpdateExpression();
	        }
	        return expr;
	    };
	    Parser.prototype.parseExponentiationExpression = function () {
	        var startToken = this.lookahead;
	        var expr = this.inheritCoverGrammar(this.parseUnaryExpression);
	        if (expr.type !== syntax_1.Syntax.UnaryExpression && this.match('**')) {
	            this.nextToken();
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	            var left = expr;
	            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
	            expr = this.finalize(this.startNode(startToken), new Node.BinaryExpression('**', left, right));
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-exp-operator
	    // https://tc39.github.io/ecma262/#sec-multiplicative-operators
	    // https://tc39.github.io/ecma262/#sec-additive-operators
	    // https://tc39.github.io/ecma262/#sec-bitwise-shift-operators
	    // https://tc39.github.io/ecma262/#sec-relational-operators
	    // https://tc39.github.io/ecma262/#sec-equality-operators
	    // https://tc39.github.io/ecma262/#sec-binary-bitwise-operators
	    // https://tc39.github.io/ecma262/#sec-binary-logical-operators
	    Parser.prototype.binaryPrecedence = function (token) {
	        var op = token.value;
	        var precedence;
	        if (token.type === 7 /* Punctuator */) {
	            precedence = this.operatorPrecedence[op] || 0;
	        }
	        else if (token.type === 4 /* Keyword */) {
	            precedence = (op === 'instanceof' || (this.context.allowIn && op === 'in')) ? 7 : 0;
	        }
	        else {
	            precedence = 0;
	        }
	        return precedence;
	    };
	    Parser.prototype.parseBinaryExpression = function () {
	        var startToken = this.lookahead;
	        var expr = this.inheritCoverGrammar(this.parseExponentiationExpression);
	        var token = this.lookahead;
	        var prec = this.binaryPrecedence(token);
	        if (prec > 0) {
	            this.nextToken();
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	            var markers = [startToken, this.lookahead];
	            var left = expr;
	            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
	            var stack = [left, token.value, right];
	            var precedences = [prec];
	            while (true) {
	                prec = this.binaryPrecedence(this.lookahead);
	                if (prec <= 0) {
	                    break;
	                }
	                // Reduce: make a binary expression from the three topmost entries.
	                while ((stack.length > 2) && (prec <= precedences[precedences.length - 1])) {
	                    right = stack.pop();
	                    var operator = stack.pop();
	                    precedences.pop();
	                    left = stack.pop();
	                    markers.pop();
	                    var node = this.startNode(markers[markers.length - 1]);
	                    stack.push(this.finalize(node, new Node.BinaryExpression(operator, left, right)));
	                }
	                // Shift.
	                stack.push(this.nextToken().value);
	                precedences.push(prec);
	                markers.push(this.lookahead);
	                stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));
	            }
	            // Final reduce to clean-up the stack.
	            var i = stack.length - 1;
	            expr = stack[i];
	            var lastMarker = markers.pop();
	            while (i > 1) {
	                var marker = markers.pop();
	                var lastLineStart = lastMarker && lastMarker.lineStart;
	                var node = this.startNode(marker, lastLineStart);
	                var operator = stack[i - 1];
	                expr = this.finalize(node, new Node.BinaryExpression(operator, stack[i - 2], expr));
	                i -= 2;
	                lastMarker = marker;
	            }
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-conditional-operator
	    Parser.prototype.parseConditionalExpression = function () {
	        var startToken = this.lookahead;
	        var expr = this.inheritCoverGrammar(this.parseBinaryExpression);
	        if (this.match('?')) {
	            this.nextToken();
	            var previousAllowIn = this.context.allowIn;
	            this.context.allowIn = true;
	            var consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);
	            this.context.allowIn = previousAllowIn;
	            this.expect(':');
	            var alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);
	            expr = this.finalize(this.startNode(startToken), new Node.ConditionalExpression(expr, consequent, alternate));
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-assignment-operators
	    Parser.prototype.checkPatternParam = function (options, param) {
	        switch (param.type) {
	            case syntax_1.Syntax.Identifier:
	                this.validateParam(options, param, param.name);
	                break;
	            case syntax_1.Syntax.RestElement:
	                this.checkPatternParam(options, param.argument);
	                break;
	            case syntax_1.Syntax.AssignmentPattern:
	                this.checkPatternParam(options, param.left);
	                break;
	            case syntax_1.Syntax.ArrayPattern:
	                for (var i = 0; i < param.elements.length; i++) {
	                    if (param.elements[i] !== null) {
	                        this.checkPatternParam(options, param.elements[i]);
	                    }
	                }
	                break;
	            case syntax_1.Syntax.ObjectPattern:
	                for (var i = 0; i < param.properties.length; i++) {
	                    this.checkPatternParam(options, param.properties[i].value);
	                }
	                break;
	            default:
	                break;
	        }
	        options.simple = options.simple && (param instanceof Node.Identifier);
	    };
	    Parser.prototype.reinterpretAsCoverFormalsList = function (expr) {
	        var params = [expr];
	        var options;
	        var asyncArrow = false;
	        switch (expr.type) {
	            case syntax_1.Syntax.Identifier:
	                break;
	            case ArrowParameterPlaceHolder:
	                params = expr.params;
	                asyncArrow = expr.async;
	                break;
	            default:
	                return null;
	        }
	        options = {
	            simple: true,
	            paramSet: {}
	        };
	        for (var i = 0; i < params.length; ++i) {
	            var param = params[i];
	            if (param.type === syntax_1.Syntax.AssignmentPattern) {
	                if (param.right.type === syntax_1.Syntax.YieldExpression) {
	                    if (param.right.argument) {
	                        this.throwUnexpectedToken(this.lookahead);
	                    }
	                    param.right.type = syntax_1.Syntax.Identifier;
	                    param.right.name = 'yield';
	                    delete param.right.argument;
	                    delete param.right.delegate;
	                }
	            }
	            else if (asyncArrow && param.type === syntax_1.Syntax.Identifier && param.name === 'await') {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	            this.checkPatternParam(options, param);
	            params[i] = param;
	        }
	        if (this.context.strict || !this.context.allowYield) {
	            for (var i = 0; i < params.length; ++i) {
	                var param = params[i];
	                if (param.type === syntax_1.Syntax.YieldExpression) {
	                    this.throwUnexpectedToken(this.lookahead);
	                }
	            }
	        }
	        if (options.message === messages_1.Messages.StrictParamDupe) {
	            var token = this.context.strict ? options.stricted : options.firstRestricted;
	            this.throwUnexpectedToken(token, options.message);
	        }
	        return {
	            simple: options.simple,
	            params: params,
	            stricted: options.stricted,
	            firstRestricted: options.firstRestricted,
	            message: options.message
	        };
	    };
	    Parser.prototype.parseAssignmentExpression = function () {
	        var expr;
	        if (!this.context.allowYield && this.matchKeyword('yield')) {
	            expr = this.parseYieldExpression();
	        }
	        else {
	            var startToken = this.lookahead;
	            var token = startToken;
	            expr = this.parseConditionalExpression();
	            if (token.type === 3 /* Identifier */ && (token.lineNumber === this.lookahead.lineNumber) && token.value === 'async') {
	                if (this.lookahead.type === 3 /* Identifier */ || this.matchKeyword('yield')) {
	                    var arg = this.parsePrimaryExpression();
	                    this.reinterpretExpressionAsPattern(arg);
	                    expr = {
	                        type: ArrowParameterPlaceHolder,
	                        params: [arg],
	                        async: true
	                    };
	                }
	            }
	            if (expr.type === ArrowParameterPlaceHolder || this.match('=>')) {
	                // https://tc39.github.io/ecma262/#sec-arrow-function-definitions
	                this.context.isAssignmentTarget = false;
	                this.context.isBindingElement = false;
	                var isAsync = expr.async;
	                var list = this.reinterpretAsCoverFormalsList(expr);
	                if (list) {
	                    if (this.hasLineTerminator) {
	                        this.tolerateUnexpectedToken(this.lookahead);
	                    }
	                    this.context.firstCoverInitializedNameError = null;
	                    var previousStrict = this.context.strict;
	                    var previousAllowStrictDirective = this.context.allowStrictDirective;
	                    this.context.allowStrictDirective = list.simple;
	                    var previousAllowYield = this.context.allowYield;
	                    var previousAwait = this.context.await;
	                    this.context.allowYield = true;
	                    this.context.await = isAsync;
	                    var node = this.startNode(startToken);
	                    this.expect('=>');
	                    var body = void 0;
	                    if (this.match('{')) {
	                        var previousAllowIn = this.context.allowIn;
	                        this.context.allowIn = true;
	                        body = this.parseFunctionSourceElements();
	                        this.context.allowIn = previousAllowIn;
	                    }
	                    else {
	                        body = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                    }
	                    var expression = body.type !== syntax_1.Syntax.BlockStatement;
	                    if (this.context.strict && list.firstRestricted) {
	                        this.throwUnexpectedToken(list.firstRestricted, list.message);
	                    }
	                    if (this.context.strict && list.stricted) {
	                        this.tolerateUnexpectedToken(list.stricted, list.message);
	                    }
	                    expr = isAsync ? this.finalize(node, new Node.AsyncArrowFunctionExpression(list.params, body, expression)) :
	                        this.finalize(node, new Node.ArrowFunctionExpression(list.params, body, expression));
	                    this.context.strict = previousStrict;
	                    this.context.allowStrictDirective = previousAllowStrictDirective;
	                    this.context.allowYield = previousAllowYield;
	                    this.context.await = previousAwait;
	                }
	            }
	            else {
	                if (this.matchAssign()) {
	                    if (!this.context.isAssignmentTarget) {
	                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
	                    }
	                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier) {
	                        var id = expr;
	                        if (this.scanner.isRestrictedWord(id.name)) {
	                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictLHSAssignment);
	                        }
	                        if (this.scanner.isStrictModeReservedWord(id.name)) {
	                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
	                        }
	                    }
	                    if (!this.match('=')) {
	                        this.context.isAssignmentTarget = false;
	                        this.context.isBindingElement = false;
	                    }
	                    else {
	                        this.reinterpretExpressionAsPattern(expr);
	                    }
	                    token = this.nextToken();
	                    var operator = token.value;
	                    var right = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                    expr = this.finalize(this.startNode(startToken), new Node.AssignmentExpression(operator, expr, right));
	                    this.context.firstCoverInitializedNameError = null;
	                }
	            }
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-comma-operator
	    Parser.prototype.parseExpression = function () {
	        var startToken = this.lookahead;
	        var expr = this.isolateCoverGrammar(this.parseAssignmentExpression);
	        if (this.match(',')) {
	            var expressions = [];
	            expressions.push(expr);
	            while (this.lookahead.type !== 2 /* EOF */) {
	                if (!this.match(',')) {
	                    break;
	                }
	                this.nextToken();
	                expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
	            }
	            expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-block
	    Parser.prototype.parseStatementListItem = function () {
	        var statement;
	        this.context.isAssignmentTarget = true;
	        this.context.isBindingElement = true;
	        if (this.lookahead.type === 4 /* Keyword */) {
	            switch (this.lookahead.value) {
	                case 'export':
	                    if (!this.context.isModule) {
	                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalExportDeclaration);
	                    }
	                    statement = this.parseExportDeclaration();
	                    break;
	                case 'import':
	                    if (!this.context.isModule) {
	                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalImportDeclaration);
	                    }
	                    statement = this.parseImportDeclaration();
	                    break;
	                case 'const':
	                    statement = this.parseLexicalDeclaration({ inFor: false });
	                    break;
	                case 'function':
	                    statement = this.parseFunctionDeclaration();
	                    break;
	                case 'class':
	                    statement = this.parseClassDeclaration();
	                    break;
	                case 'let':
	                    statement = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({ inFor: false }) : this.parseStatement();
	                    break;
	                default:
	                    statement = this.parseStatement();
	                    break;
	            }
	        }
	        else {
	            statement = this.parseStatement();
	        }
	        return statement;
	    };
	    Parser.prototype.parseBlock = function () {
	        var node = this.createNode();
	        this.expect('{');
	        var block = [];
	        while (true) {
	            if (this.match('}')) {
	                break;
	            }
	            block.push(this.parseStatementListItem());
	        }
	        this.expect('}');
	        return this.finalize(node, new Node.BlockStatement(block));
	    };
	    // https://tc39.github.io/ecma262/#sec-let-and-const-declarations
	    Parser.prototype.parseLexicalBinding = function (kind, options) {
	        var node = this.createNode();
	        var params = [];
	        var id = this.parsePattern(params, kind);
	        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {
	            if (this.scanner.isRestrictedWord(id.name)) {
	                this.tolerateError(messages_1.Messages.StrictVarName);
	            }
	        }
	        var init = null;
	        if (kind === 'const') {
	            if (!this.matchKeyword('in') && !this.matchContextualKeyword('of')) {
	                if (this.match('=')) {
	                    this.nextToken();
	                    init = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                }
	                else {
	                    this.throwError(messages_1.Messages.DeclarationMissingInitializer, 'const');
	                }
	            }
	        }
	        else if ((!options.inFor && id.type !== syntax_1.Syntax.Identifier) || this.match('=')) {
	            this.expect('=');
	            init = this.isolateCoverGrammar(this.parseAssignmentExpression);
	        }
	        return this.finalize(node, new Node.VariableDeclarator(id, init));
	    };
	    Parser.prototype.parseBindingList = function (kind, options) {
	        var list = [this.parseLexicalBinding(kind, options)];
	        while (this.match(',')) {
	            this.nextToken();
	            list.push(this.parseLexicalBinding(kind, options));
	        }
	        return list;
	    };
	    Parser.prototype.isLexicalDeclaration = function () {
	        var state = this.scanner.saveState();
	        this.scanner.scanComments();
	        var next = this.scanner.lex();
	        this.scanner.restoreState(state);
	        return (next.type === 3 /* Identifier */) ||
	            (next.type === 7 /* Punctuator */ && next.value === '[') ||
	            (next.type === 7 /* Punctuator */ && next.value === '{') ||
	            (next.type === 4 /* Keyword */ && next.value === 'let') ||
	            (next.type === 4 /* Keyword */ && next.value === 'yield');
	    };
	    Parser.prototype.parseLexicalDeclaration = function (options) {
	        var node = this.createNode();
	        var kind = this.nextToken().value;
	        assert_1.assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');
	        var declarations = this.parseBindingList(kind, options);
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.VariableDeclaration(declarations, kind));
	    };
	    // https://tc39.github.io/ecma262/#sec-destructuring-binding-patterns
	    Parser.prototype.parseBindingRestElement = function (params, kind) {
	        var node = this.createNode();
	        this.expect('...');
	        var arg = this.parsePattern(params, kind);
	        return this.finalize(node, new Node.RestElement(arg));
	    };
	    Parser.prototype.parseArrayPattern = function (params, kind) {
	        var node = this.createNode();
	        this.expect('[');
	        var elements = [];
	        while (!this.match(']')) {
	            if (this.match(',')) {
	                this.nextToken();
	                elements.push(null);
	            }
	            else {
	                if (this.match('...')) {
	                    elements.push(this.parseBindingRestElement(params, kind));
	                    break;
	                }
	                else {
	                    elements.push(this.parsePatternWithDefault(params, kind));
	                }
	                if (!this.match(']')) {
	                    this.expect(',');
	                }
	            }
	        }
	        this.expect(']');
	        return this.finalize(node, new Node.ArrayPattern(elements));
	    };
	    Parser.prototype.parsePropertyPattern = function (params, kind) {
	        var node = this.createNode();
	        var computed = false;
	        var shorthand = false;
	        var method = false;
	        var key;
	        var value;
	        if (this.lookahead.type === 3 /* Identifier */) {
	            var keyToken = this.lookahead;
	            key = this.parseVariableIdentifier();
	            var init = this.finalize(node, new Node.Identifier(keyToken.value));
	            if (this.match('=')) {
	                params.push(keyToken);
	                shorthand = true;
	                this.nextToken();
	                var expr = this.parseAssignmentExpression();
	                value = this.finalize(this.startNode(keyToken), new Node.AssignmentPattern(init, expr));
	            }
	            else if (!this.match(':')) {
	                params.push(keyToken);
	                shorthand = true;
	                value = init;
	            }
	            else {
	                this.expect(':');
	                value = this.parsePatternWithDefault(params, kind);
	            }
	        }
	        else {
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            this.expect(':');
	            value = this.parsePatternWithDefault(params, kind);
	        }
	        return this.finalize(node, new Node.Property('init', key, computed, value, method, shorthand));
	    };
	    Parser.prototype.parseObjectPattern = function (params, kind) {
	        var node = this.createNode();
	        var properties = [];
	        this.expect('{');
	        while (!this.match('}')) {
	            properties.push(this.parsePropertyPattern(params, kind));
	            if (!this.match('}')) {
	                this.expect(',');
	            }
	        }
	        this.expect('}');
	        return this.finalize(node, new Node.ObjectPattern(properties));
	    };
	    Parser.prototype.parsePattern = function (params, kind) {
	        var pattern;
	        if (this.match('[')) {
	            pattern = this.parseArrayPattern(params, kind);
	        }
	        else if (this.match('{')) {
	            pattern = this.parseObjectPattern(params, kind);
	        }
	        else {
	            if (this.matchKeyword('let') && (kind === 'const' || kind === 'let')) {
	                this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.LetInLexicalBinding);
	            }
	            params.push(this.lookahead);
	            pattern = this.parseVariableIdentifier(kind);
	        }
	        return pattern;
	    };
	    Parser.prototype.parsePatternWithDefault = function (params, kind) {
	        var startToken = this.lookahead;
	        var pattern = this.parsePattern(params, kind);
	        if (this.match('=')) {
	            this.nextToken();
	            var previousAllowYield = this.context.allowYield;
	            this.context.allowYield = true;
	            var right = this.isolateCoverGrammar(this.parseAssignmentExpression);
	            this.context.allowYield = previousAllowYield;
	            pattern = this.finalize(this.startNode(startToken), new Node.AssignmentPattern(pattern, right));
	        }
	        return pattern;
	    };
	    // https://tc39.github.io/ecma262/#sec-variable-statement
	    Parser.prototype.parseVariableIdentifier = function (kind) {
	        var node = this.createNode();
	        var token = this.nextToken();
	        if (token.type === 4 /* Keyword */ && token.value === 'yield') {
	            if (this.context.strict) {
	                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
	            }
	            else if (!this.context.allowYield) {
	                this.throwUnexpectedToken(token);
	            }
	        }
	        else if (token.type !== 3 /* Identifier */) {
	            if (this.context.strict && token.type === 4 /* Keyword */ && this.scanner.isStrictModeReservedWord(token.value)) {
	                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
	            }
	            else {
	                if (this.context.strict || token.value !== 'let' || kind !== 'var') {
	                    this.throwUnexpectedToken(token);
	                }
	            }
	        }
	        else if ((this.context.isModule || this.context.await) && token.type === 3 /* Identifier */ && token.value === 'await') {
	            this.tolerateUnexpectedToken(token);
	        }
	        return this.finalize(node, new Node.Identifier(token.value));
	    };
	    Parser.prototype.parseVariableDeclaration = function (options) {
	        var node = this.createNode();
	        var params = [];
	        var id = this.parsePattern(params, 'var');
	        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {
	            if (this.scanner.isRestrictedWord(id.name)) {
	                this.tolerateError(messages_1.Messages.StrictVarName);
	            }
	        }
	        var init = null;
	        if (this.match('=')) {
	            this.nextToken();
	            init = this.isolateCoverGrammar(this.parseAssignmentExpression);
	        }
	        else if (id.type !== syntax_1.Syntax.Identifier && !options.inFor) {
	            this.expect('=');
	        }
	        return this.finalize(node, new Node.VariableDeclarator(id, init));
	    };
	    Parser.prototype.parseVariableDeclarationList = function (options) {
	        var opt = { inFor: options.inFor };
	        var list = [];
	        list.push(this.parseVariableDeclaration(opt));
	        while (this.match(',')) {
	            this.nextToken();
	            list.push(this.parseVariableDeclaration(opt));
	        }
	        return list;
	    };
	    Parser.prototype.parseVariableStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('var');
	        var declarations = this.parseVariableDeclarationList({ inFor: false });
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.VariableDeclaration(declarations, 'var'));
	    };
	    // https://tc39.github.io/ecma262/#sec-empty-statement
	    Parser.prototype.parseEmptyStatement = function () {
	        var node = this.createNode();
	        this.expect(';');
	        return this.finalize(node, new Node.EmptyStatement());
	    };
	    // https://tc39.github.io/ecma262/#sec-expression-statement
	    Parser.prototype.parseExpressionStatement = function () {
	        var node = this.createNode();
	        var expr = this.parseExpression();
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.ExpressionStatement(expr));
	    };
	    // https://tc39.github.io/ecma262/#sec-if-statement
	    Parser.prototype.parseIfClause = function () {
	        if (this.context.strict && this.matchKeyword('function')) {
	            this.tolerateError(messages_1.Messages.StrictFunction);
	        }
	        return this.parseStatement();
	    };
	    Parser.prototype.parseIfStatement = function () {
	        var node = this.createNode();
	        var consequent;
	        var alternate = null;
	        this.expectKeyword('if');
	        this.expect('(');
	        var test = this.parseExpression();
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	            consequent = this.finalize(this.createNode(), new Node.EmptyStatement());
	        }
	        else {
	            this.expect(')');
	            consequent = this.parseIfClause();
	            if (this.matchKeyword('else')) {
	                this.nextToken();
	                alternate = this.parseIfClause();
	            }
	        }
	        return this.finalize(node, new Node.IfStatement(test, consequent, alternate));
	    };
	    // https://tc39.github.io/ecma262/#sec-do-while-statement
	    Parser.prototype.parseDoWhileStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('do');
	        var previousInIteration = this.context.inIteration;
	        this.context.inIteration = true;
	        var body = this.parseStatement();
	        this.context.inIteration = previousInIteration;
	        this.expectKeyword('while');
	        this.expect('(');
	        var test = this.parseExpression();
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	        }
	        else {
	            this.expect(')');
	            if (this.match(';')) {
	                this.nextToken();
	            }
	        }
	        return this.finalize(node, new Node.DoWhileStatement(body, test));
	    };
	    // https://tc39.github.io/ecma262/#sec-while-statement
	    Parser.prototype.parseWhileStatement = function () {
	        var node = this.createNode();
	        var body;
	        this.expectKeyword('while');
	        this.expect('(');
	        var test = this.parseExpression();
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	            body = this.finalize(this.createNode(), new Node.EmptyStatement());
	        }
	        else {
	            this.expect(')');
	            var previousInIteration = this.context.inIteration;
	            this.context.inIteration = true;
	            body = this.parseStatement();
	            this.context.inIteration = previousInIteration;
	        }
	        return this.finalize(node, new Node.WhileStatement(test, body));
	    };
	    // https://tc39.github.io/ecma262/#sec-for-statement
	    // https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements
	    Parser.prototype.parseForStatement = function () {
	        var init = null;
	        var test = null;
	        var update = null;
	        var forIn = true;
	        var left, right;
	        var node = this.createNode();
	        this.expectKeyword('for');
	        this.expect('(');
	        if (this.match(';')) {
	            this.nextToken();
	        }
	        else {
	            if (this.matchKeyword('var')) {
	                init = this.createNode();
	                this.nextToken();
	                var previousAllowIn = this.context.allowIn;
	                this.context.allowIn = false;
	                var declarations = this.parseVariableDeclarationList({ inFor: true });
	                this.context.allowIn = previousAllowIn;
	                if (declarations.length === 1 && this.matchKeyword('in')) {
	                    var decl = declarations[0];
	                    if (decl.init && (decl.id.type === syntax_1.Syntax.ArrayPattern || decl.id.type === syntax_1.Syntax.ObjectPattern || this.context.strict)) {
	                        this.tolerateError(messages_1.Messages.ForInOfLoopInitializer, 'for-in');
	                    }
	                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
	                    this.nextToken();
	                    left = init;
	                    right = this.parseExpression();
	                    init = null;
	                }
	                else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {
	                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
	                    this.nextToken();
	                    left = init;
	                    right = this.parseAssignmentExpression();
	                    init = null;
	                    forIn = false;
	                }
	                else {
	                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
	                    this.expect(';');
	                }
	            }
	            else if (this.matchKeyword('const') || this.matchKeyword('let')) {
	                init = this.createNode();
	                var kind = this.nextToken().value;
	                if (!this.context.strict && this.lookahead.value === 'in') {
	                    init = this.finalize(init, new Node.Identifier(kind));
	                    this.nextToken();
	                    left = init;
	                    right = this.parseExpression();
	                    init = null;
	                }
	                else {
	                    var previousAllowIn = this.context.allowIn;
	                    this.context.allowIn = false;
	                    var declarations = this.parseBindingList(kind, { inFor: true });
	                    this.context.allowIn = previousAllowIn;
	                    if (declarations.length === 1 && declarations[0].init === null && this.matchKeyword('in')) {
	                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
	                        this.nextToken();
	                        left = init;
	                        right = this.parseExpression();
	                        init = null;
	                    }
	                    else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {
	                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
	                        this.nextToken();
	                        left = init;
	                        right = this.parseAssignmentExpression();
	                        init = null;
	                        forIn = false;
	                    }
	                    else {
	                        this.consumeSemicolon();
	                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
	                    }
	                }
	            }
	            else {
	                var initStartToken = this.lookahead;
	                var previousAllowIn = this.context.allowIn;
	                this.context.allowIn = false;
	                init = this.inheritCoverGrammar(this.parseAssignmentExpression);
	                this.context.allowIn = previousAllowIn;
	                if (this.matchKeyword('in')) {
	                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {
	                        this.tolerateError(messages_1.Messages.InvalidLHSInForIn);
	                    }
	                    this.nextToken();
	                    this.reinterpretExpressionAsPattern(init);
	                    left = init;
	                    right = this.parseExpression();
	                    init = null;
	                }
	                else if (this.matchContextualKeyword('of')) {
	                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {
	                        this.tolerateError(messages_1.Messages.InvalidLHSInForLoop);
	                    }
	                    this.nextToken();
	                    this.reinterpretExpressionAsPattern(init);
	                    left = init;
	                    right = this.parseAssignmentExpression();
	                    init = null;
	                    forIn = false;
	                }
	                else {
	                    if (this.match(',')) {
	                        var initSeq = [init];
	                        while (this.match(',')) {
	                            this.nextToken();
	                            initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
	                        }
	                        init = this.finalize(this.startNode(initStartToken), new Node.SequenceExpression(initSeq));
	                    }
	                    this.expect(';');
	                }
	            }
	        }
	        if (typeof left === 'undefined') {
	            if (!this.match(';')) {
	                test = this.parseExpression();
	            }
	            this.expect(';');
	            if (!this.match(')')) {
	                update = this.parseExpression();
	            }
	        }
	        var body;
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	            body = this.finalize(this.createNode(), new Node.EmptyStatement());
	        }
	        else {
	            this.expect(')');
	            var previousInIteration = this.context.inIteration;
	            this.context.inIteration = true;
	            body = this.isolateCoverGrammar(this.parseStatement);
	            this.context.inIteration = previousInIteration;
	        }
	        return (typeof left === 'undefined') ?
	            this.finalize(node, new Node.ForStatement(init, test, update, body)) :
	            forIn ? this.finalize(node, new Node.ForInStatement(left, right, body)) :
	                this.finalize(node, new Node.ForOfStatement(left, right, body));
	    };
	    // https://tc39.github.io/ecma262/#sec-continue-statement
	    Parser.prototype.parseContinueStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('continue');
	        var label = null;
	        if (this.lookahead.type === 3 /* Identifier */ && !this.hasLineTerminator) {
	            var id = this.parseVariableIdentifier();
	            label = id;
	            var key = '$' + id.name;
	            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
	                this.throwError(messages_1.Messages.UnknownLabel, id.name);
	            }
	        }
	        this.consumeSemicolon();
	        if (label === null && !this.context.inIteration) {
	            this.throwError(messages_1.Messages.IllegalContinue);
	        }
	        return this.finalize(node, new Node.ContinueStatement(label));
	    };
	    // https://tc39.github.io/ecma262/#sec-break-statement
	    Parser.prototype.parseBreakStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('break');
	        var label = null;
	        if (this.lookahead.type === 3 /* Identifier */ && !this.hasLineTerminator) {
	            var id = this.parseVariableIdentifier();
	            var key = '$' + id.name;
	            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
	                this.throwError(messages_1.Messages.UnknownLabel, id.name);
	            }
	            label = id;
	        }
	        this.consumeSemicolon();
	        if (label === null && !this.context.inIteration && !this.context.inSwitch) {
	            this.throwError(messages_1.Messages.IllegalBreak);
	        }
	        return this.finalize(node, new Node.BreakStatement(label));
	    };
	    // https://tc39.github.io/ecma262/#sec-return-statement
	    Parser.prototype.parseReturnStatement = function () {
	        if (!this.context.inFunctionBody) {
	            this.tolerateError(messages_1.Messages.IllegalReturn);
	        }
	        var node = this.createNode();
	        this.expectKeyword('return');
	        var hasArgument = (!this.match(';') && !this.match('}') &&
	            !this.hasLineTerminator && this.lookahead.type !== 2 /* EOF */) ||
	            this.lookahead.type === 8 /* StringLiteral */ ||
	            this.lookahead.type === 10 /* Template */;
	        var argument = hasArgument ? this.parseExpression() : null;
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.ReturnStatement(argument));
	    };
	    // https://tc39.github.io/ecma262/#sec-with-statement
	    Parser.prototype.parseWithStatement = function () {
	        if (this.context.strict) {
	            this.tolerateError(messages_1.Messages.StrictModeWith);
	        }
	        var node = this.createNode();
	        var body;
	        this.expectKeyword('with');
	        this.expect('(');
	        var object = this.parseExpression();
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	            body = this.finalize(this.createNode(), new Node.EmptyStatement());
	        }
	        else {
	            this.expect(')');
	            body = this.parseStatement();
	        }
	        return this.finalize(node, new Node.WithStatement(object, body));
	    };
	    // https://tc39.github.io/ecma262/#sec-switch-statement
	    Parser.prototype.parseSwitchCase = function () {
	        var node = this.createNode();
	        var test;
	        if (this.matchKeyword('default')) {
	            this.nextToken();
	            test = null;
	        }
	        else {
	            this.expectKeyword('case');
	            test = this.parseExpression();
	        }
	        this.expect(':');
	        var consequent = [];
	        while (true) {
	            if (this.match('}') || this.matchKeyword('default') || this.matchKeyword('case')) {
	                break;
	            }
	            consequent.push(this.parseStatementListItem());
	        }
	        return this.finalize(node, new Node.SwitchCase(test, consequent));
	    };
	    Parser.prototype.parseSwitchStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('switch');
	        this.expect('(');
	        var discriminant = this.parseExpression();
	        this.expect(')');
	        var previousInSwitch = this.context.inSwitch;
	        this.context.inSwitch = true;
	        var cases = [];
	        var defaultFound = false;
	        this.expect('{');
	        while (true) {
	            if (this.match('}')) {
	                break;
	            }
	            var clause = this.parseSwitchCase();
	            if (clause.test === null) {
	                if (defaultFound) {
	                    this.throwError(messages_1.Messages.MultipleDefaultsInSwitch);
	                }
	                defaultFound = true;
	            }
	            cases.push(clause);
	        }
	        this.expect('}');
	        this.context.inSwitch = previousInSwitch;
	        return this.finalize(node, new Node.SwitchStatement(discriminant, cases));
	    };
	    // https://tc39.github.io/ecma262/#sec-labelled-statements
	    Parser.prototype.parseLabelledStatement = function () {
	        var node = this.createNode();
	        var expr = this.parseExpression();
	        var statement;
	        if ((expr.type === syntax_1.Syntax.Identifier) && this.match(':')) {
	            this.nextToken();
	            var id = expr;
	            var key = '$' + id.name;
	            if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
	                this.throwError(messages_1.Messages.Redeclaration, 'Label', id.name);
	            }
	            this.context.labelSet[key] = true;
	            var body = void 0;
	            if (this.matchKeyword('class')) {
	                this.tolerateUnexpectedToken(this.lookahead);
	                body = this.parseClassDeclaration();
	            }
	            else if (this.matchKeyword('function')) {
	                var token = this.lookahead;
	                var declaration = this.parseFunctionDeclaration();
	                if (this.context.strict) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunction);
	                }
	                else if (declaration.generator) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.GeneratorInLegacyContext);
	                }
	                body = declaration;
	            }
	            else {
	                body = this.parseStatement();
	            }
	            delete this.context.labelSet[key];
	            statement = new Node.LabeledStatement(id, body);
	        }
	        else {
	            this.consumeSemicolon();
	            statement = new Node.ExpressionStatement(expr);
	        }
	        return this.finalize(node, statement);
	    };
	    // https://tc39.github.io/ecma262/#sec-throw-statement
	    Parser.prototype.parseThrowStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('throw');
	        if (this.hasLineTerminator) {
	            this.throwError(messages_1.Messages.NewlineAfterThrow);
	        }
	        var argument = this.parseExpression();
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.ThrowStatement(argument));
	    };
	    // https://tc39.github.io/ecma262/#sec-try-statement
	    Parser.prototype.parseCatchClause = function () {
	        var node = this.createNode();
	        this.expectKeyword('catch');
	        this.expect('(');
	        if (this.match(')')) {
	            this.throwUnexpectedToken(this.lookahead);
	        }
	        var params = [];
	        var param = this.parsePattern(params);
	        var paramMap = {};
	        for (var i = 0; i < params.length; i++) {
	            var key = '$' + params[i].value;
	            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {
	                this.tolerateError(messages_1.Messages.DuplicateBinding, params[i].value);
	            }
	            paramMap[key] = true;
	        }
	        if (this.context.strict && param.type === syntax_1.Syntax.Identifier) {
	            if (this.scanner.isRestrictedWord(param.name)) {
	                this.tolerateError(messages_1.Messages.StrictCatchVariable);
	            }
	        }
	        this.expect(')');
	        var body = this.parseBlock();
	        return this.finalize(node, new Node.CatchClause(param, body));
	    };
	    Parser.prototype.parseFinallyClause = function () {
	        this.expectKeyword('finally');
	        return this.parseBlock();
	    };
	    Parser.prototype.parseTryStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('try');
	        var block = this.parseBlock();
	        var handler = this.matchKeyword('catch') ? this.parseCatchClause() : null;
	        var finalizer = this.matchKeyword('finally') ? this.parseFinallyClause() : null;
	        if (!handler && !finalizer) {
	            this.throwError(messages_1.Messages.NoCatchOrFinally);
	        }
	        return this.finalize(node, new Node.TryStatement(block, handler, finalizer));
	    };
	    // https://tc39.github.io/ecma262/#sec-debugger-statement
	    Parser.prototype.parseDebuggerStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('debugger');
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.DebuggerStatement());
	    };
	    // https://tc39.github.io/ecma262/#sec-ecmascript-language-statements-and-declarations
	    Parser.prototype.parseStatement = function () {
	        var statement;
	        switch (this.lookahead.type) {
	            case 1 /* BooleanLiteral */:
	            case 5 /* NullLiteral */:
	            case 6 /* NumericLiteral */:
	            case 8 /* StringLiteral */:
	            case 10 /* Template */:
	            case 9 /* RegularExpression */:
	                statement = this.parseExpressionStatement();
	                break;
	            case 7 /* Punctuator */:
	                var value = this.lookahead.value;
	                if (value === '{') {
	                    statement = this.parseBlock();
	                }
	                else if (value === '(') {
	                    statement = this.parseExpressionStatement();
	                }
	                else if (value === ';') {
	                    statement = this.parseEmptyStatement();
	                }
	                else {
	                    statement = this.parseExpressionStatement();
	                }
	                break;
	            case 3 /* Identifier */:
	                statement = this.matchAsyncFunction() ? this.parseFunctionDeclaration() : this.parseLabelledStatement();
	                break;
	            case 4 /* Keyword */:
	                switch (this.lookahead.value) {
	                    case 'break':
	                        statement = this.parseBreakStatement();
	                        break;
	                    case 'continue':
	                        statement = this.parseContinueStatement();
	                        break;
	                    case 'debugger':
	                        statement = this.parseDebuggerStatement();
	                        break;
	                    case 'do':
	                        statement = this.parseDoWhileStatement();
	                        break;
	                    case 'for':
	                        statement = this.parseForStatement();
	                        break;
	                    case 'function':
	                        statement = this.parseFunctionDeclaration();
	                        break;
	                    case 'if':
	                        statement = this.parseIfStatement();
	                        break;
	                    case 'return':
	                        statement = this.parseReturnStatement();
	                        break;
	                    case 'switch':
	                        statement = this.parseSwitchStatement();
	                        break;
	                    case 'throw':
	                        statement = this.parseThrowStatement();
	                        break;
	                    case 'try':
	                        statement = this.parseTryStatement();
	                        break;
	                    case 'var':
	                        statement = this.parseVariableStatement();
	                        break;
	                    case 'while':
	                        statement = this.parseWhileStatement();
	                        break;
	                    case 'with':
	                        statement = this.parseWithStatement();
	                        break;
	                    default:
	                        statement = this.parseExpressionStatement();
	                        break;
	                }
	                break;
	            default:
	                statement = this.throwUnexpectedToken(this.lookahead);
	        }
	        return statement;
	    };
	    // https://tc39.github.io/ecma262/#sec-function-definitions
	    Parser.prototype.parseFunctionSourceElements = function () {
	        var node = this.createNode();
	        this.expect('{');
	        var body = this.parseDirectivePrologues();
	        var previousLabelSet = this.context.labelSet;
	        var previousInIteration = this.context.inIteration;
	        var previousInSwitch = this.context.inSwitch;
	        var previousInFunctionBody = this.context.inFunctionBody;
	        this.context.labelSet = {};
	        this.context.inIteration = false;
	        this.context.inSwitch = false;
	        this.context.inFunctionBody = true;
	        while (this.lookahead.type !== 2 /* EOF */) {
	            if (this.match('}')) {
	                break;
	            }
	            body.push(this.parseStatementListItem());
	        }
	        this.expect('}');
	        this.context.labelSet = previousLabelSet;
	        this.context.inIteration = previousInIteration;
	        this.context.inSwitch = previousInSwitch;
	        this.context.inFunctionBody = previousInFunctionBody;
	        return this.finalize(node, new Node.BlockStatement(body));
	    };
	    Parser.prototype.validateParam = function (options, param, name) {
	        var key = '$' + name;
	        if (this.context.strict) {
	            if (this.scanner.isRestrictedWord(name)) {
	                options.stricted = param;
	                options.message = messages_1.Messages.StrictParamName;
	            }
	            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
	                options.stricted = param;
	                options.message = messages_1.Messages.StrictParamDupe;
	            }
	        }
	        else if (!options.firstRestricted) {
	            if (this.scanner.isRestrictedWord(name)) {
	                options.firstRestricted = param;
	                options.message = messages_1.Messages.StrictParamName;
	            }
	            else if (this.scanner.isStrictModeReservedWord(name)) {
	                options.firstRestricted = param;
	                options.message = messages_1.Messages.StrictReservedWord;
	            }
	            else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
	                options.stricted = param;
	                options.message = messages_1.Messages.StrictParamDupe;
	            }
	        }
	        /* istanbul ignore next */
	        if (typeof Object.defineProperty === 'function') {
	            Object.defineProperty(options.paramSet, key, { value: true, enumerable: true, writable: true, configurable: true });
	        }
	        else {
	            options.paramSet[key] = true;
	        }
	    };
	    Parser.prototype.parseRestElement = function (params) {
	        var node = this.createNode();
	        this.expect('...');
	        var arg = this.parsePattern(params);
	        if (this.match('=')) {
	            this.throwError(messages_1.Messages.DefaultRestParameter);
	        }
	        if (!this.match(')')) {
	            this.throwError(messages_1.Messages.ParameterAfterRestParameter);
	        }
	        return this.finalize(node, new Node.RestElement(arg));
	    };
	    Parser.prototype.parseFormalParameter = function (options) {
	        var params = [];
	        var param = this.match('...') ? this.parseRestElement(params) : this.parsePatternWithDefault(params);
	        for (var i = 0; i < params.length; i++) {
	            this.validateParam(options, params[i], params[i].value);
	        }
	        options.simple = options.simple && (param instanceof Node.Identifier);
	        options.params.push(param);
	    };
	    Parser.prototype.parseFormalParameters = function (firstRestricted) {
	        var options;
	        options = {
	            simple: true,
	            params: [],
	            firstRestricted: firstRestricted
	        };
	        this.expect('(');
	        if (!this.match(')')) {
	            options.paramSet = {};
	            while (this.lookahead.type !== 2 /* EOF */) {
	                this.parseFormalParameter(options);
	                if (this.match(')')) {
	                    break;
	                }
	                this.expect(',');
	                if (this.match(')')) {
	                    break;
	                }
	            }
	        }
	        this.expect(')');
	        return {
	            simple: options.simple,
	            params: options.params,
	            stricted: options.stricted,
	            firstRestricted: options.firstRestricted,
	            message: options.message
	        };
	    };
	    Parser.prototype.matchAsyncFunction = function () {
	        var match = this.matchContextualKeyword('async');
	        if (match) {
	            var state = this.scanner.saveState();
	            this.scanner.scanComments();
	            var next = this.scanner.lex();
	            this.scanner.restoreState(state);
	            match = (state.lineNumber === next.lineNumber) && (next.type === 4 /* Keyword */) && (next.value === 'function');
	        }
	        return match;
	    };
	    Parser.prototype.parseFunctionDeclaration = function (identifierIsOptional) {
	        var node = this.createNode();
	        var isAsync = this.matchContextualKeyword('async');
	        if (isAsync) {
	            this.nextToken();
	        }
	        this.expectKeyword('function');
	        var isGenerator = isAsync ? false : this.match('*');
	        if (isGenerator) {
	            this.nextToken();
	        }
	        var message;
	        var id = null;
	        var firstRestricted = null;
	        if (!identifierIsOptional || !this.match('(')) {
	            var token = this.lookahead;
	            id = this.parseVariableIdentifier();
	            if (this.context.strict) {
	                if (this.scanner.isRestrictedWord(token.value)) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);
	                }
	            }
	            else {
	                if (this.scanner.isRestrictedWord(token.value)) {
	                    firstRestricted = token;
	                    message = messages_1.Messages.StrictFunctionName;
	                }
	                else if (this.scanner.isStrictModeReservedWord(token.value)) {
	                    firstRestricted = token;
	                    message = messages_1.Messages.StrictReservedWord;
	                }
	            }
	        }
	        var previousAllowAwait = this.context.await;
	        var previousAllowYield = this.context.allowYield;
	        this.context.await = isAsync;
	        this.context.allowYield = !isGenerator;
	        var formalParameters = this.parseFormalParameters(firstRestricted);
	        var params = formalParameters.params;
	        var stricted = formalParameters.stricted;
	        firstRestricted = formalParameters.firstRestricted;
	        if (formalParameters.message) {
	            message = formalParameters.message;
	        }
	        var previousStrict = this.context.strict;
	        var previousAllowStrictDirective = this.context.allowStrictDirective;
	        this.context.allowStrictDirective = formalParameters.simple;
	        var body = this.parseFunctionSourceElements();
	        if (this.context.strict && firstRestricted) {
	            this.throwUnexpectedToken(firstRestricted, message);
	        }
	        if (this.context.strict && stricted) {
	            this.tolerateUnexpectedToken(stricted, message);
	        }
	        this.context.strict = previousStrict;
	        this.context.allowStrictDirective = previousAllowStrictDirective;
	        this.context.await = previousAllowAwait;
	        this.context.allowYield = previousAllowYield;
	        return isAsync ? this.finalize(node, new Node.AsyncFunctionDeclaration(id, params, body)) :
	            this.finalize(node, new Node.FunctionDeclaration(id, params, body, isGenerator));
	    };
	    Parser.prototype.parseFunctionExpression = function () {
	        var node = this.createNode();
	        var isAsync = this.matchContextualKeyword('async');
	        if (isAsync) {
	            this.nextToken();
	        }
	        this.expectKeyword('function');
	        var isGenerator = isAsync ? false : this.match('*');
	        if (isGenerator) {
	            this.nextToken();
	        }
	        var message;
	        var id = null;
	        var firstRestricted;
	        var previousAllowAwait = this.context.await;
	        var previousAllowYield = this.context.allowYield;
	        this.context.await = isAsync;
	        this.context.allowYield = !isGenerator;
	        if (!this.match('(')) {
	            var token = this.lookahead;
	            id = (!this.context.strict && !isGenerator && this.matchKeyword('yield')) ? this.parseIdentifierName() : this.parseVariableIdentifier();
	            if (this.context.strict) {
	                if (this.scanner.isRestrictedWord(token.value)) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);
	                }
	            }
	            else {
	                if (this.scanner.isRestrictedWord(token.value)) {
	                    firstRestricted = token;
	                    message = messages_1.Messages.StrictFunctionName;
	                }
	                else if (this.scanner.isStrictModeReservedWord(token.value)) {
	                    firstRestricted = token;
	                    message = messages_1.Messages.StrictReservedWord;
	                }
	            }
	        }
	        var formalParameters = this.parseFormalParameters(firstRestricted);
	        var params = formalParameters.params;
	        var stricted = formalParameters.stricted;
	        firstRestricted = formalParameters.firstRestricted;
	        if (formalParameters.message) {
	            message = formalParameters.message;
	        }
	        var previousStrict = this.context.strict;
	        var previousAllowStrictDirective = this.context.allowStrictDirective;
	        this.context.allowStrictDirective = formalParameters.simple;
	        var body = this.parseFunctionSourceElements();
	        if (this.context.strict && firstRestricted) {
	            this.throwUnexpectedToken(firstRestricted, message);
	        }
	        if (this.context.strict && stricted) {
	            this.tolerateUnexpectedToken(stricted, message);
	        }
	        this.context.strict = previousStrict;
	        this.context.allowStrictDirective = previousAllowStrictDirective;
	        this.context.await = previousAllowAwait;
	        this.context.allowYield = previousAllowYield;
	        return isAsync ? this.finalize(node, new Node.AsyncFunctionExpression(id, params, body)) :
	            this.finalize(node, new Node.FunctionExpression(id, params, body, isGenerator));
	    };
	    // https://tc39.github.io/ecma262/#sec-directive-prologues-and-the-use-strict-directive
	    Parser.prototype.parseDirective = function () {
	        var token = this.lookahead;
	        var node = this.createNode();
	        var expr = this.parseExpression();
	        var directive = (expr.type === syntax_1.Syntax.Literal) ? this.getTokenRaw(token).slice(1, -1) : null;
	        this.consumeSemicolon();
	        return this.finalize(node, directive ? new Node.Directive(expr, directive) : new Node.ExpressionStatement(expr));
	    };
	    Parser.prototype.parseDirectivePrologues = function () {
	        var firstRestricted = null;
	        var body = [];
	        while (true) {
	            var token = this.lookahead;
	            if (token.type !== 8 /* StringLiteral */) {
	                break;
	            }
	            var statement = this.parseDirective();
	            body.push(statement);
	            var directive = statement.directive;
	            if (typeof directive !== 'string') {
	                break;
	            }
	            if (directive === 'use strict') {
	                this.context.strict = true;
	                if (firstRestricted) {
	                    this.tolerateUnexpectedToken(firstRestricted, messages_1.Messages.StrictOctalLiteral);
	                }
	                if (!this.context.allowStrictDirective) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.IllegalLanguageModeDirective);
	                }
	            }
	            else {
	                if (!firstRestricted && token.octal) {
	                    firstRestricted = token;
	                }
	            }
	        }
	        return body;
	    };
	    // https://tc39.github.io/ecma262/#sec-method-definitions
	    Parser.prototype.qualifiedPropertyName = function (token) {
	        switch (token.type) {
	            case 3 /* Identifier */:
	            case 8 /* StringLiteral */:
	            case 1 /* BooleanLiteral */:
	            case 5 /* NullLiteral */:
	            case 6 /* NumericLiteral */:
	            case 4 /* Keyword */:
	                return true;
	            case 7 /* Punctuator */:
	                return token.value === '[';
	            default:
	                break;
	        }
	        return false;
	    };
	    Parser.prototype.parseGetterMethod = function () {
	        var node = this.createNode();
	        var isGenerator = false;
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = !isGenerator;
	        var formalParameters = this.parseFormalParameters();
	        if (formalParameters.params.length > 0) {
	            this.tolerateError(messages_1.Messages.BadGetterArity);
	        }
	        var method = this.parsePropertyMethod(formalParameters);
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));
	    };
	    Parser.prototype.parseSetterMethod = function () {
	        var node = this.createNode();
	        var isGenerator = false;
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = !isGenerator;
	        var formalParameters = this.parseFormalParameters();
	        if (formalParameters.params.length !== 1) {
	            this.tolerateError(messages_1.Messages.BadSetterArity);
	        }
	        else if (formalParameters.params[0] instanceof Node.RestElement) {
	            this.tolerateError(messages_1.Messages.BadSetterRestParameter);
	        }
	        var method = this.parsePropertyMethod(formalParameters);
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));
	    };
	    Parser.prototype.parseGeneratorMethod = function () {
	        var node = this.createNode();
	        var isGenerator = true;
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = true;
	        var params = this.parseFormalParameters();
	        this.context.allowYield = false;
	        var method = this.parsePropertyMethod(params);
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
	    };
	    // https://tc39.github.io/ecma262/#sec-generator-function-definitions
	    Parser.prototype.isStartOfExpression = function () {
	        var start = true;
	        var value = this.lookahead.value;
	        switch (this.lookahead.type) {
	            case 7 /* Punctuator */:
	                start = (value === '[') || (value === '(') || (value === '{') ||
	                    (value === '+') || (value === '-') ||
	                    (value === '!') || (value === '~') ||
	                    (value === '++') || (value === '--') ||
	                    (value === '/') || (value === '/='); // regular expression literal
	                break;
	            case 4 /* Keyword */:
	                start = (value === 'class') || (value === 'delete') ||
	                    (value === 'function') || (value === 'let') || (value === 'new') ||
	                    (value === 'super') || (value === 'this') || (value === 'typeof') ||
	                    (value === 'void') || (value === 'yield');
	                break;
	            default:
	                break;
	        }
	        return start;
	    };
	    Parser.prototype.parseYieldExpression = function () {
	        var node = this.createNode();
	        this.expectKeyword('yield');
	        var argument = null;
	        var delegate = false;
	        if (!this.hasLineTerminator) {
	            var previousAllowYield = this.context.allowYield;
	            this.context.allowYield = false;
	            delegate = this.match('*');
	            if (delegate) {
	                this.nextToken();
	                argument = this.parseAssignmentExpression();
	            }
	            else if (this.isStartOfExpression()) {
	                argument = this.parseAssignmentExpression();
	            }
	            this.context.allowYield = previousAllowYield;
	        }
	        return this.finalize(node, new Node.YieldExpression(argument, delegate));
	    };
	    // https://tc39.github.io/ecma262/#sec-class-definitions
	    Parser.prototype.parseClassElement = function (hasConstructor) {
	        var token = this.lookahead;
	        var node = this.createNode();
	        var kind = '';
	        var key = null;
	        var value = null;
	        var computed = false;
	        var method = false;
	        var isStatic = false;
	        var isAsync = false;
	        if (this.match('*')) {
	            this.nextToken();
	        }
	        else {
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            var id = key;
	            if (id.name === 'static' && (this.qualifiedPropertyName(this.lookahead) || this.match('*'))) {
	                token = this.lookahead;
	                isStatic = true;
	                computed = this.match('[');
	                if (this.match('*')) {
	                    this.nextToken();
	                }
	                else {
	                    key = this.parseObjectPropertyKey();
	                }
	            }
	            if ((token.type === 3 /* Identifier */) && !this.hasLineTerminator && (token.value === 'async')) {
	                var punctuator = this.lookahead.value;
	                if (punctuator !== ':' && punctuator !== '(' && punctuator !== '*') {
	                    isAsync = true;
	                    token = this.lookahead;
	                    key = this.parseObjectPropertyKey();
	                    if (token.type === 3 /* Identifier */ && token.value === 'constructor') {
	                        this.tolerateUnexpectedToken(token, messages_1.Messages.ConstructorIsAsync);
	                    }
	                }
	            }
	        }
	        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);
	        if (token.type === 3 /* Identifier */) {
	            if (token.value === 'get' && lookaheadPropertyKey) {
	                kind = 'get';
	                computed = this.match('[');
	                key = this.parseObjectPropertyKey();
	                this.context.allowYield = false;
	                value = this.parseGetterMethod();
	            }
	            else if (token.value === 'set' && lookaheadPropertyKey) {
	                kind = 'set';
	                computed = this.match('[');
	                key = this.parseObjectPropertyKey();
	                value = this.parseSetterMethod();
	            }
	        }
	        else if (token.type === 7 /* Punctuator */ && token.value === '*' && lookaheadPropertyKey) {
	            kind = 'init';
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            value = this.parseGeneratorMethod();
	            method = true;
	        }
	        if (!kind && key && this.match('(')) {
	            kind = 'init';
	            value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();
	            method = true;
	        }
	        if (!kind) {
	            this.throwUnexpectedToken(this.lookahead);
	        }
	        if (kind === 'init') {
	            kind = 'method';
	        }
	        if (!computed) {
	            if (isStatic && this.isPropertyKey(key, 'prototype')) {
	                this.throwUnexpectedToken(token, messages_1.Messages.StaticPrototype);
	            }
	            if (!isStatic && this.isPropertyKey(key, 'constructor')) {
	                if (kind !== 'method' || !method || (value && value.generator)) {
	                    this.throwUnexpectedToken(token, messages_1.Messages.ConstructorSpecialMethod);
	                }
	                if (hasConstructor.value) {
	                    this.throwUnexpectedToken(token, messages_1.Messages.DuplicateConstructor);
	                }
	                else {
	                    hasConstructor.value = true;
	                }
	                kind = 'constructor';
	            }
	        }
	        return this.finalize(node, new Node.MethodDefinition(key, computed, value, kind, isStatic));
	    };
	    Parser.prototype.parseClassElementList = function () {
	        var body = [];
	        var hasConstructor = { value: false };
	        this.expect('{');
	        while (!this.match('}')) {
	            if (this.match(';')) {
	                this.nextToken();
	            }
	            else {
	                body.push(this.parseClassElement(hasConstructor));
	            }
	        }
	        this.expect('}');
	        return body;
	    };
	    Parser.prototype.parseClassBody = function () {
	        var node = this.createNode();
	        var elementList = this.parseClassElementList();
	        return this.finalize(node, new Node.ClassBody(elementList));
	    };
	    Parser.prototype.parseClassDeclaration = function (identifierIsOptional) {
	        var node = this.createNode();
	        var previousStrict = this.context.strict;
	        this.context.strict = true;
	        this.expectKeyword('class');
	        var id = (identifierIsOptional && (this.lookahead.type !== 3 /* Identifier */)) ? null : this.parseVariableIdentifier();
	        var superClass = null;
	        if (this.matchKeyword('extends')) {
	            this.nextToken();
	            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
	        }
	        var classBody = this.parseClassBody();
	        this.context.strict = previousStrict;
	        return this.finalize(node, new Node.ClassDeclaration(id, superClass, classBody));
	    };
	    Parser.prototype.parseClassExpression = function () {
	        var node = this.createNode();
	        var previousStrict = this.context.strict;
	        this.context.strict = true;
	        this.expectKeyword('class');
	        var id = (this.lookahead.type === 3 /* Identifier */) ? this.parseVariableIdentifier() : null;
	        var superClass = null;
	        if (this.matchKeyword('extends')) {
	            this.nextToken();
	            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
	        }
	        var classBody = this.parseClassBody();
	        this.context.strict = previousStrict;
	        return this.finalize(node, new Node.ClassExpression(id, superClass, classBody));
	    };
	    // https://tc39.github.io/ecma262/#sec-scripts
	    // https://tc39.github.io/ecma262/#sec-modules
	    Parser.prototype.parseModule = function () {
	        this.context.strict = true;
	        this.context.isModule = true;
	        this.scanner.isModule = true;
	        var node = this.createNode();
	        var body = this.parseDirectivePrologues();
	        while (this.lookahead.type !== 2 /* EOF */) {
	            body.push(this.parseStatementListItem());
	        }
	        return this.finalize(node, new Node.Module(body));
	    };
	    Parser.prototype.parseScript = function () {
	        var node = this.createNode();
	        var body = this.parseDirectivePrologues();
	        while (this.lookahead.type !== 2 /* EOF */) {
	            body.push(this.parseStatementListItem());
	        }
	        return this.finalize(node, new Node.Script(body));
	    };
	    // https://tc39.github.io/ecma262/#sec-imports
	    Parser.prototype.parseModuleSpecifier = function () {
	        var node = this.createNode();
	        if (this.lookahead.type !== 8 /* StringLiteral */) {
	            this.throwError(messages_1.Messages.InvalidModuleSpecifier);
	        }
	        var token = this.nextToken();
	        var raw = this.getTokenRaw(token);
	        return this.finalize(node, new Node.Literal(token.value, raw));
	    };
	    // import {<foo as bar>} ...;
	    Parser.prototype.parseImportSpecifier = function () {
	        var node = this.createNode();
	        var imported;
	        var local;
	        if (this.lookahead.type === 3 /* Identifier */) {
	            imported = this.parseVariableIdentifier();
	            local = imported;
	            if (this.matchContextualKeyword('as')) {
	                this.nextToken();
	                local = this.parseVariableIdentifier();
	            }
	        }
	        else {
	            imported = this.parseIdentifierName();
	            local = imported;
	            if (this.matchContextualKeyword('as')) {
	                this.nextToken();
	                local = this.parseVariableIdentifier();
	            }
	            else {
	                this.throwUnexpectedToken(this.nextToken());
	            }
	        }
	        return this.finalize(node, new Node.ImportSpecifier(local, imported));
	    };
	    // {foo, bar as bas}
	    Parser.prototype.parseNamedImports = function () {
	        this.expect('{');
	        var specifiers = [];
	        while (!this.match('}')) {
	            specifiers.push(this.parseImportSpecifier());
	            if (!this.match('}')) {
	                this.expect(',');
	            }
	        }
	        this.expect('}');
	        return specifiers;
	    };
	    // import <foo> ...;
	    Parser.prototype.parseImportDefaultSpecifier = function () {
	        var node = this.createNode();
	        var local = this.parseIdentifierName();
	        return this.finalize(node, new Node.ImportDefaultSpecifier(local));
	    };
	    // import <* as foo> ...;
	    Parser.prototype.parseImportNamespaceSpecifier = function () {
	        var node = this.createNode();
	        this.expect('*');
	        if (!this.matchContextualKeyword('as')) {
	            this.throwError(messages_1.Messages.NoAsAfterImportNamespace);
	        }
	        this.nextToken();
	        var local = this.parseIdentifierName();
	        return this.finalize(node, new Node.ImportNamespaceSpecifier(local));
	    };
	    Parser.prototype.parseImportDeclaration = function () {
	        if (this.context.inFunctionBody) {
	            this.throwError(messages_1.Messages.IllegalImportDeclaration);
	        }
	        var node = this.createNode();
	        this.expectKeyword('import');
	        var src;
	        var specifiers = [];
	        if (this.lookahead.type === 8 /* StringLiteral */) {
	            // import 'foo';
	            src = this.parseModuleSpecifier();
	        }
	        else {
	            if (this.match('{')) {
	                // import {bar}
	                specifiers = specifiers.concat(this.parseNamedImports());
	            }
	            else if (this.match('*')) {
	                // import * as foo
	                specifiers.push(this.parseImportNamespaceSpecifier());
	            }
	            else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword('default')) {
	                // import foo
	                specifiers.push(this.parseImportDefaultSpecifier());
	                if (this.match(',')) {
	                    this.nextToken();
	                    if (this.match('*')) {
	                        // import foo, * as foo
	                        specifiers.push(this.parseImportNamespaceSpecifier());
	                    }
	                    else if (this.match('{')) {
	                        // import foo, {bar}
	                        specifiers = specifiers.concat(this.parseNamedImports());
	                    }
	                    else {
	                        this.throwUnexpectedToken(this.lookahead);
	                    }
	                }
	            }
	            else {
	                this.throwUnexpectedToken(this.nextToken());
	            }
	            if (!this.matchContextualKeyword('from')) {
	                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
	                this.throwError(message, this.lookahead.value);
	            }
	            this.nextToken();
	            src = this.parseModuleSpecifier();
	        }
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.ImportDeclaration(specifiers, src));
	    };
	    // https://tc39.github.io/ecma262/#sec-exports
	    Parser.prototype.parseExportSpecifier = function () {
	        var node = this.createNode();
	        var local = this.parseIdentifierName();
	        var exported = local;
	        if (this.matchContextualKeyword('as')) {
	            this.nextToken();
	            exported = this.parseIdentifierName();
	        }
	        return this.finalize(node, new Node.ExportSpecifier(local, exported));
	    };
	    Parser.prototype.parseExportDeclaration = function () {
	        if (this.context.inFunctionBody) {
	            this.throwError(messages_1.Messages.IllegalExportDeclaration);
	        }
	        var node = this.createNode();
	        this.expectKeyword('export');
	        var exportDeclaration;
	        if (this.matchKeyword('default')) {
	            // export default ...
	            this.nextToken();
	            if (this.matchKeyword('function')) {
	                // export default function foo () {}
	                // export default function () {}
	                var declaration = this.parseFunctionDeclaration(true);
	                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
	            }
	            else if (this.matchKeyword('class')) {
	                // export default class foo {}
	                var declaration = this.parseClassDeclaration(true);
	                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
	            }
	            else if (this.matchContextualKeyword('async')) {
	                // export default async function f () {}
	                // export default async function () {}
	                // export default async x => x
	                var declaration = this.matchAsyncFunction() ? this.parseFunctionDeclaration(true) : this.parseAssignmentExpression();
	                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
	            }
	            else {
	                if (this.matchContextualKeyword('from')) {
	                    this.throwError(messages_1.Messages.UnexpectedToken, this.lookahead.value);
	                }
	                // export default {};
	                // export default [];
	                // export default (1 + 2);
	                var declaration = this.match('{') ? this.parseObjectInitializer() :
	                    this.match('[') ? this.parseArrayInitializer() : this.parseAssignmentExpression();
	                this.consumeSemicolon();
	                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
	            }
	        }
	        else if (this.match('*')) {
	            // export * from 'foo';
	            this.nextToken();
	            if (!this.matchContextualKeyword('from')) {
	                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
	                this.throwError(message, this.lookahead.value);
	            }
	            this.nextToken();
	            var src = this.parseModuleSpecifier();
	            this.consumeSemicolon();
	            exportDeclaration = this.finalize(node, new Node.ExportAllDeclaration(src));
	        }
	        else if (this.lookahead.type === 4 /* Keyword */) {
	            // export var f = 1;
	            var declaration = void 0;
	            switch (this.lookahead.value) {
	                case 'let':
	                case 'const':
	                    declaration = this.parseLexicalDeclaration({ inFor: false });
	                    break;
	                case 'var':
	                case 'class':
	                case 'function':
	                    declaration = this.parseStatementListItem();
	                    break;
	                default:
	                    this.throwUnexpectedToken(this.lookahead);
	            }
	            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));
	        }
	        else if (this.matchAsyncFunction()) {
	            var declaration = this.parseFunctionDeclaration();
	            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));
	        }
	        else {
	            var specifiers = [];
	            var source = null;
	            var isExportFromIdentifier = false;
	            this.expect('{');
	            while (!this.match('}')) {
	                isExportFromIdentifier = isExportFromIdentifier || this.matchKeyword('default');
	                specifiers.push(this.parseExportSpecifier());
	                if (!this.match('}')) {
	                    this.expect(',');
	                }
	            }
	            this.expect('}');
	            if (this.matchContextualKeyword('from')) {
	                // export {default} from 'foo';
	                // export {foo} from 'foo';
	                this.nextToken();
	                source = this.parseModuleSpecifier();
	                this.consumeSemicolon();
	            }
	            else if (isExportFromIdentifier) {
	                // export {default}; // missing fromClause
	                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
	                this.throwError(message, this.lookahead.value);
	            }
	            else {
	                // export {foo};
	                this.consumeSemicolon();
	            }
	            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(null, specifiers, source));
	        }
	        return exportDeclaration;
	    };
	    return Parser;
	}());
	exports.Parser = Parser;


/***/ },
/* 9 */
/***/ function(module, exports) {

	"use strict";
	// Ensure the condition is true, otherwise throw an error.
	// This is only to have a better contract semantic, i.e. another safety net
	// to catch a logic error. The condition shall be fulfilled in normal case.
	// Do NOT use this to enforce a certain condition on any user input.
	Object.defineProperty(exports, "__esModule", { value: true });
	function assert(condition, message) {
	    /* istanbul ignore if */
	    if (!condition) {
	        throw new Error('ASSERT: ' + message);
	    }
	}
	exports.assert = assert;


/***/ },
/* 10 */
/***/ function(module, exports) {

	"use strict";
	/* tslint:disable:max-classes-per-file */
	Object.defineProperty(exports, "__esModule", { value: true });
	var ErrorHandler = (function () {
	    function ErrorHandler() {
	        this.errors = [];
	        this.tolerant = false;
	    }
	    ErrorHandler.prototype.recordError = function (error) {
	        this.errors.push(error);
	    };
	    ErrorHandler.prototype.tolerate = function (error) {
	        if (this.tolerant) {
	            this.recordError(error);
	        }
	        else {
	            throw error;
	        }
	    };
	    ErrorHandler.prototype.constructError = function (msg, column) {
	        var error = new Error(msg);
	        try {
	            throw error;
	        }
	        catch (base) {
	            /* istanbul ignore else */
	            if (Object.create && Object.defineProperty) {
	                error = Object.create(base);
	                Object.defineProperty(error, 'column', { value: column });
	            }
	        }
	        /* istanbul ignore next */
	        return error;
	    };
	    ErrorHandler.prototype.createError = function (index, line, col, description) {
	        var msg = 'Line ' + line + ': ' + description;
	        var error = this.constructError(msg, col);
	        error.index = index;
	        error.lineNumber = line;
	        error.description = description;
	        return error;
	    };
	    ErrorHandler.prototype.throwError = function (index, line, col, description) {
	        throw this.createError(index, line, col, description);
	    };
	    ErrorHandler.prototype.tolerateError = function (index, line, col, description) {
	        var error = this.createError(index, line, col, description);
	        if (this.tolerant) {
	            this.recordError(error);
	        }
	        else {
	            throw error;
	        }
	    };
	    return ErrorHandler;
	}());
	exports.ErrorHandler = ErrorHandler;


/***/ },
/* 11 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	// Error messages should be identical to V8.
	exports.Messages = {
	    BadGetterArity: 'Getter must not have any formal parameters',
	    BadSetterArity: 'Setter must have exactly one formal parameter',
	    BadSetterRestParameter: 'Setter function argument must not be a rest parameter',
	    ConstructorIsAsync: 'Class constructor may not be an async method',
	    ConstructorSpecialMethod: 'Class constructor may not be an accessor',
	    DeclarationMissingInitializer: 'Missing initializer in %0 declaration',
	    DefaultRestParameter: 'Unexpected token =',
	    DuplicateBinding: 'Duplicate binding %0',
	    DuplicateConstructor: 'A class may only have one constructor',
	    DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',
	    ForInOfLoopInitializer: '%0 loop variable declaration may not have an initializer',
	    GeneratorInLegacyContext: 'Generator declarations are not allowed in legacy contexts',
	    IllegalBreak: 'Illegal break statement',
	    IllegalContinue: 'Illegal continue statement',
	    IllegalExportDeclaration: 'Unexpected token',
	    IllegalImportDeclaration: 'Unexpected token',
	    IllegalLanguageModeDirective: 'Illegal \'use strict\' directive in function with non-simple parameter list',
	    IllegalReturn: 'Illegal return statement',
	    InvalidEscapedReservedWord: 'Keyword must not contain escaped characters',
	    InvalidHexEscapeSequence: 'Invalid hexadecimal escape sequence',
	    InvalidLHSInAssignment: 'Invalid left-hand side in assignment',
	    InvalidLHSInForIn: 'Invalid left-hand side in for-in',
	    InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',
	    InvalidModuleSpecifier: 'Unexpected token',
	    InvalidRegExp: 'Invalid regular expression',
	    LetInLexicalBinding: 'let is disallowed as a lexically bound name',
	    MissingFromClause: 'Unexpected token',
	    MultipleDefaultsInSwitch: 'More than one default clause in switch statement',
	    NewlineAfterThrow: 'Illegal newline after throw',
	    NoAsAfterImportNamespace: 'Unexpected token',
	    NoCatchOrFinally: 'Missing catch or finally after try',
	    ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',
	    Redeclaration: '%0 \'%1\' has already been declared',
	    StaticPrototype: 'Classes may not have static property named prototype',
	    StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',
	    StrictDelete: 'Delete of an unqualified identifier in strict mode.',
	    StrictFunction: 'In strict mode code, functions can only be declared at top level or inside a block',
	    StrictFunctionName: 'Function name may not be eval or arguments in strict mode',
	    StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',
	    StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',
	    StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',
	    StrictModeWith: 'Strict mode code may not include a with statement',
	    StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',
	    StrictParamDupe: 'Strict mode function may not have duplicate parameter names',
	    StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',
	    StrictReservedWord: 'Use of future reserved word in strict mode',
	    StrictVarName: 'Variable name may not be eval or arguments in strict mode',
	    TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',
	    UnexpectedEOS: 'Unexpected end of input',
	    UnexpectedIdentifier: 'Unexpected identifier',
	    UnexpectedNumber: 'Unexpected number',
	    UnexpectedReserved: 'Unexpected reserved word',
	    UnexpectedString: 'Unexpected string',
	    UnexpectedTemplate: 'Unexpected quasi %0',
	    UnexpectedToken: 'Unexpected token %0',
	    UnexpectedTokenIllegal: 'Unexpected token ILLEGAL',
	    UnknownLabel: 'Undefined label \'%0\'',
	    UnterminatedRegExp: 'Invalid regular expression: missing /'
	};


/***/ },
/* 12 */
/***/ function(module, exports, __nested_webpack_require_226595__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var assert_1 = __nested_webpack_require_226595__(9);
	var character_1 = __nested_webpack_require_226595__(4);
	var messages_1 = __nested_webpack_require_226595__(11);
	function hexValue(ch) {
	    return '0123456789abcdef'.indexOf(ch.toLowerCase());
	}
	function octalValue(ch) {
	    return '01234567'.indexOf(ch);
	}
	var Scanner = (function () {
	    function Scanner(code, handler) {
	        this.source = code;
	        this.errorHandler = handler;
	        this.trackComment = false;
	        this.isModule = false;
	        this.length = code.length;
	        this.index = 0;
	        this.lineNumber = (code.length > 0) ? 1 : 0;
	        this.lineStart = 0;
	        this.curlyStack = [];
	    }
	    Scanner.prototype.saveState = function () {
	        return {
	            index: this.index,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart
	        };
	    };
	    Scanner.prototype.restoreState = function (state) {
	        this.index = state.index;
	        this.lineNumber = state.lineNumber;
	        this.lineStart = state.lineStart;
	    };
	    Scanner.prototype.eof = function () {
	        return this.index >= this.length;
	    };
	    Scanner.prototype.throwUnexpectedToken = function (message) {
	        if (message === void 0) { message = messages_1.Messages.UnexpectedTokenIllegal; }
	        return this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);
	    };
	    Scanner.prototype.tolerateUnexpectedToken = function (message) {
	        if (message === void 0) { message = messages_1.Messages.UnexpectedTokenIllegal; }
	        this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);
	    };
	    // https://tc39.github.io/ecma262/#sec-comments
	    Scanner.prototype.skipSingleLineComment = function (offset) {
	        var comments = [];
	        var start, loc;
	        if (this.trackComment) {
	            comments = [];
	            start = this.index - offset;
	            loc = {
	                start: {
	                    line: this.lineNumber,
	                    column: this.index - this.lineStart - offset
	                },
	                end: {}
	            };
	        }
	        while (!this.eof()) {
	            var ch = this.source.charCodeAt(this.index);
	            ++this.index;
	            if (character_1.Character.isLineTerminator(ch)) {
	                if (this.trackComment) {
	                    loc.end = {
	                        line: this.lineNumber,
	                        column: this.index - this.lineStart - 1
	                    };
	                    var entry = {
	                        multiLine: false,
	                        slice: [start + offset, this.index - 1],
	                        range: [start, this.index - 1],
	                        loc: loc
	                    };
	                    comments.push(entry);
	                }
	                if (ch === 13 && this.source.charCodeAt(this.index) === 10) {
	                    ++this.index;
	                }
	                ++this.lineNumber;
	                this.lineStart = this.index;
	                return comments;
	            }
	        }
	        if (this.trackComment) {
	            loc.end = {
	                line: this.lineNumber,
	                column: this.index - this.lineStart
	            };
	            var entry = {
	                multiLine: false,
	                slice: [start + offset, this.index],
	                range: [start, this.index],
	                loc: loc
	            };
	            comments.push(entry);
	        }
	        return comments;
	    };
	    Scanner.prototype.skipMultiLineComment = function () {
	        var comments = [];
	        var start, loc;
	        if (this.trackComment) {
	            comments = [];
	            start = this.index - 2;
	            loc = {
	                start: {
	                    line: this.lineNumber,
	                    column: this.index - this.lineStart - 2
	                },
	                end: {}
	            };
	        }
	        while (!this.eof()) {
	            var ch = this.source.charCodeAt(this.index);
	            if (character_1.Character.isLineTerminator(ch)) {
	                if (ch === 0x0D && this.source.charCodeAt(this.index + 1) === 0x0A) {
	                    ++this.index;
	                }
	                ++this.lineNumber;
	                ++this.index;
	                this.lineStart = this.index;
	            }
	            else if (ch === 0x2A) {
	                // Block comment ends with '*/'.
	                if (this.source.charCodeAt(this.index + 1) === 0x2F) {
	                    this.index += 2;
	                    if (this.trackComment) {
	                        loc.end = {
	                            line: this.lineNumber,
	                            column: this.index - this.lineStart
	                        };
	                        var entry = {
	                            multiLine: true,
	                            slice: [start + 2, this.index - 2],
	                            range: [start, this.index],
	                            loc: loc
	                        };
	                        comments.push(entry);
	                    }
	                    return comments;
	                }
	                ++this.index;
	            }
	            else {
	                ++this.index;
	            }
	        }
	        // Ran off the end of the file - the whole thing is a comment
	        if (this.trackComment) {
	            loc.end = {
	                line: this.lineNumber,
	                column: this.index - this.lineStart
	            };
	            var entry = {
	                multiLine: true,
	                slice: [start + 2, this.index],
	                range: [start, this.index],
	                loc: loc
	            };
	            comments.push(entry);
	        }
	        this.tolerateUnexpectedToken();
	        return comments;
	    };
	    Scanner.prototype.scanComments = function () {
	        var comments;
	        if (this.trackComment) {
	            comments = [];
	        }
	        var start = (this.index === 0);
	        while (!this.eof()) {
	            var ch = this.source.charCodeAt(this.index);
	            if (character_1.Character.isWhiteSpace(ch)) {
	                ++this.index;
	            }
	            else if (character_1.Character.isLineTerminator(ch)) {
	                ++this.index;
	                if (ch === 0x0D && this.source.charCodeAt(this.index) === 0x0A) {
	                    ++this.index;
	                }
	                ++this.lineNumber;
	                this.lineStart = this.index;
	                start = true;
	            }
	            else if (ch === 0x2F) {
	                ch = this.source.charCodeAt(this.index + 1);
	                if (ch === 0x2F) {
	                    this.index += 2;
	                    var comment = this.skipSingleLineComment(2);
	                    if (this.trackComment) {
	                        comments = comments.concat(comment);
	                    }
	                    start = true;
	                }
	                else if (ch === 0x2A) {
	                    this.index += 2;
	                    var comment = this.skipMultiLineComment();
	                    if (this.trackComment) {
	                        comments = comments.concat(comment);
	                    }
	                }
	                else {
	                    break;
	                }
	            }
	            else if (start && ch === 0x2D) {
	                // U+003E is '>'
	                if ((this.source.charCodeAt(this.index + 1) === 0x2D) && (this.source.charCodeAt(this.index + 2) === 0x3E)) {
	                    // '-->' is a single-line comment
	                    this.index += 3;
	                    var comment = this.skipSingleLineComment(3);
	                    if (this.trackComment) {
	                        comments = comments.concat(comment);
	                    }
	                }
	                else {
	                    break;
	                }
	            }
	            else if (ch === 0x3C && !this.isModule) {
	                if (this.source.slice(this.index + 1, this.index + 4) === '!--') {
	                    this.index += 4; // `<!--`
	                    var comment = this.skipSingleLineComment(4);
	                    if (this.trackComment) {
	                        comments = comments.concat(comment);
	                    }
	                }
	                else {
	                    break;
	                }
	            }
	            else {
	                break;
	            }
	        }
	        return comments;
	    };
	    // https://tc39.github.io/ecma262/#sec-future-reserved-words
	    Scanner.prototype.isFutureReservedWord = function (id) {
	        switch (id) {
	            case 'enum':
	            case 'export':
	            case 'import':
	            case 'super':
	                return true;
	            default:
	                return false;
	        }
	    };
	    Scanner.prototype.isStrictModeReservedWord = function (id) {
	        switch (id) {
	            case 'implements':
	            case 'interface':
	            case 'package':
	            case 'private':
	            case 'protected':
	            case 'public':
	            case 'static':
	            case 'yield':
	            case 'let':
	                return true;
	            default:
	                return false;
	        }
	    };
	    Scanner.prototype.isRestrictedWord = function (id) {
	        return id === 'eval' || id === 'arguments';
	    };
	    // https://tc39.github.io/ecma262/#sec-keywords
	    Scanner.prototype.isKeyword = function (id) {
	        switch (id.length) {
	            case 2:
	                return (id === 'if') || (id === 'in') || (id === 'do');
	            case 3:
	                return (id === 'var') || (id === 'for') || (id === 'new') ||
	                    (id === 'try') || (id === 'let');
	            case 4:
	                return (id === 'this') || (id === 'else') || (id === 'case') ||
	                    (id === 'void') || (id === 'with') || (id === 'enum');
	            case 5:
	                return (id === 'while') || (id === 'break') || (id === 'catch') ||
	                    (id === 'throw') || (id === 'const') || (id === 'yield') ||
	                    (id === 'class') || (id === 'super');
	            case 6:
	                return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
	                    (id === 'switch') || (id === 'export') || (id === 'import');
	            case 7:
	                return (id === 'default') || (id === 'finally') || (id === 'extends');
	            case 8:
	                return (id === 'function') || (id === 'continue') || (id === 'debugger');
	            case 10:
	                return (id === 'instanceof');
	            default:
	                return false;
	        }
	    };
	    Scanner.prototype.codePointAt = function (i) {
	        var cp = this.source.charCodeAt(i);
	        if (cp >= 0xD800 && cp <= 0xDBFF) {
	            var second = this.source.charCodeAt(i + 1);
	            if (second >= 0xDC00 && second <= 0xDFFF) {
	                var first = cp;
	                cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
	            }
	        }
	        return cp;
	    };
	    Scanner.prototype.scanHexEscape = function (prefix) {
	        var len = (prefix === 'u') ? 4 : 2;
	        var code = 0;
	        for (var i = 0; i < len; ++i) {
	            if (!this.eof() && character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {
	                code = code * 16 + hexValue(this.source[this.index++]);
	            }
	            else {
	                return null;
	            }
	        }
	        return String.fromCharCode(code);
	    };
	    Scanner.prototype.scanUnicodeCodePointEscape = function () {
	        var ch = this.source[this.index];
	        var code = 0;
	        // At least, one hex digit is required.
	        if (ch === '}') {
	            this.throwUnexpectedToken();
	        }
	        while (!this.eof()) {
	            ch = this.source[this.index++];
	            if (!character_1.Character.isHexDigit(ch.charCodeAt(0))) {
	                break;
	            }
	            code = code * 16 + hexValue(ch);
	        }
	        if (code > 0x10FFFF || ch !== '}') {
	            this.throwUnexpectedToken();
	        }
	        return character_1.Character.fromCodePoint(code);
	    };
	    Scanner.prototype.getIdentifier = function () {
	        var start = this.index++;
	        while (!this.eof()) {
	            var ch = this.source.charCodeAt(this.index);
	            if (ch === 0x5C) {
	                // Blackslash (U+005C) marks Unicode escape sequence.
	                this.index = start;
	                return this.getComplexIdentifier();
	            }
	            else if (ch >= 0xD800 && ch < 0xDFFF) {
	                // Need to handle surrogate pairs.
	                this.index = start;
	                return this.getComplexIdentifier();
	            }
	            if (character_1.Character.isIdentifierPart(ch)) {
	                ++this.index;
	            }
	            else {
	                break;
	            }
	        }
	        return this.source.slice(start, this.index);
	    };
	    Scanner.prototype.getComplexIdentifier = function () {
	        var cp = this.codePointAt(this.index);
	        var id = character_1.Character.fromCodePoint(cp);
	        this.index += id.length;
	        // '\u' (U+005C, U+0075) denotes an escaped character.
	        var ch;
	        if (cp === 0x5C) {
	            if (this.source.charCodeAt(this.index) !== 0x75) {
	                this.throwUnexpectedToken();
	            }
	            ++this.index;
	            if (this.source[this.index] === '{') {
	                ++this.index;
	                ch = this.scanUnicodeCodePointEscape();
	            }
	            else {
	                ch = this.scanHexEscape('u');
	                if (ch === null || ch === '\\' || !character_1.Character.isIdentifierStart(ch.charCodeAt(0))) {
	                    this.throwUnexpectedToken();
	                }
	            }
	            id = ch;
	        }
	        while (!this.eof()) {
	            cp = this.codePointAt(this.index);
	            if (!character_1.Character.isIdentifierPart(cp)) {
	                break;
	            }
	            ch = character_1.Character.fromCodePoint(cp);
	            id += ch;
	            this.index += ch.length;
	            // '\u' (U+005C, U+0075) denotes an escaped character.
	            if (cp === 0x5C) {
	                id = id.substr(0, id.length - 1);
	                if (this.source.charCodeAt(this.index) !== 0x75) {
	                    this.throwUnexpectedToken();
	                }
	                ++this.index;
	                if (this.source[this.index] === '{') {
	                    ++this.index;
	                    ch = this.scanUnicodeCodePointEscape();
	                }
	                else {
	                    ch = this.scanHexEscape('u');
	                    if (ch === null || ch === '\\' || !character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {
	                        this.throwUnexpectedToken();
	                    }
	                }
	                id += ch;
	            }
	        }
	        return id;
	    };
	    Scanner.prototype.octalToDecimal = function (ch) {
	        // \0 is not octal escape sequence
	        var octal = (ch !== '0');
	        var code = octalValue(ch);
	        if (!this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
	            octal = true;
	            code = code * 8 + octalValue(this.source[this.index++]);
	            // 3 digits are only allowed when string starts
	            // with 0, 1, 2, 3
	            if ('0123'.indexOf(ch) >= 0 && !this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
	                code = code * 8 + octalValue(this.source[this.index++]);
	            }
	        }
	        return {
	            code: code,
	            octal: octal
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-names-and-keywords
	    Scanner.prototype.scanIdentifier = function () {
	        var type;
	        var start = this.index;
	        // Backslash (U+005C) starts an escaped character.
	        var id = (this.source.charCodeAt(start) === 0x5C) ? this.getComplexIdentifier() : this.getIdentifier();
	        // There is no keyword or literal with only one character.
	        // Thus, it must be an identifier.
	        if (id.length === 1) {
	            type = 3 /* Identifier */;
	        }
	        else if (this.isKeyword(id)) {
	            type = 4 /* Keyword */;
	        }
	        else if (id === 'null') {
	            type = 5 /* NullLiteral */;
	        }
	        else if (id === 'true' || id === 'false') {
	            type = 1 /* BooleanLiteral */;
	        }
	        else {
	            type = 3 /* Identifier */;
	        }
	        if (type !== 3 /* Identifier */ && (start + id.length !== this.index)) {
	            var restore = this.index;
	            this.index = start;
	            this.tolerateUnexpectedToken(messages_1.Messages.InvalidEscapedReservedWord);
	            this.index = restore;
	        }
	        return {
	            type: type,
	            value: id,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-punctuators
	    Scanner.prototype.scanPunctuator = function () {
	        var start = this.index;
	        // Check for most common single-character punctuators.
	        var str = this.source[this.index];
	        switch (str) {
	            case '(':
	            case '{':
	                if (str === '{') {
	                    this.curlyStack.push('{');
	                }
	                ++this.index;
	                break;
	            case '.':
	                ++this.index;
	                if (this.source[this.index] === '.' && this.source[this.index + 1] === '.') {
	                    // Spread operator: ...
	                    this.index += 2;
	                    str = '...';
	                }
	                break;
	            case '}':
	                ++this.index;
	                this.curlyStack.pop();
	                break;
	            case ')':
	            case ';':
	            case ',':
	            case '[':
	            case ']':
	            case ':':
	            case '?':
	            case '~':
	                ++this.index;
	                break;
	            default:
	                // 4-character punctuator.
	                str = this.source.substr(this.index, 4);
	                if (str === '>>>=') {
	                    this.index += 4;
	                }
	                else {
	                    // 3-character punctuators.
	                    str = str.substr(0, 3);
	                    if (str === '===' || str === '!==' || str === '>>>' ||
	                        str === '<<=' || str === '>>=' || str === '**=') {
	                        this.index += 3;
	                    }
	                    else {
	                        // 2-character punctuators.
	                        str = str.substr(0, 2);
	                        if (str === '&&' || str === '||' || str === '==' || str === '!=' ||
	                            str === '+=' || str === '-=' || str === '*=' || str === '/=' ||
	                            str === '++' || str === '--' || str === '<<' || str === '>>' ||
	                            str === '&=' || str === '|=' || str === '^=' || str === '%=' ||
	                            str === '<=' || str === '>=' || str === '=>' || str === '**') {
	                            this.index += 2;
	                        }
	                        else {
	                            // 1-character punctuators.
	                            str = this.source[this.index];
	                            if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {
	                                ++this.index;
	                            }
	                        }
	                    }
	                }
	        }
	        if (this.index === start) {
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: 7 /* Punctuator */,
	            value: str,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-literals-numeric-literals
	    Scanner.prototype.scanHexLiteral = function (start) {
	        var num = '';
	        while (!this.eof()) {
	            if (!character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {
	                break;
	            }
	            num += this.source[this.index++];
	        }
	        if (num.length === 0) {
	            this.throwUnexpectedToken();
	        }
	        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: 6 /* NumericLiteral */,
	            value: parseInt('0x' + num, 16),
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    Scanner.prototype.scanBinaryLiteral = function (start) {
	        var num = '';
	        var ch;
	        while (!this.eof()) {
	            ch = this.source[this.index];
	            if (ch !== '0' && ch !== '1') {
	                break;
	            }
	            num += this.source[this.index++];
	        }
	        if (num.length === 0) {
	            // only 0b or 0B
	            this.throwUnexpectedToken();
	        }
	        if (!this.eof()) {
	            ch = this.source.charCodeAt(this.index);
	            /* istanbul ignore else */
	            if (character_1.Character.isIdentifierStart(ch) || character_1.Character.isDecimalDigit(ch)) {
	                this.throwUnexpectedToken();
	            }
	        }
	        return {
	            type: 6 /* NumericLiteral */,
	            value: parseInt(num, 2),
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    Scanner.prototype.scanOctalLiteral = function (prefix, start) {
	        var num = '';
	        var octal = false;
	        if (character_1.Character.isOctalDigit(prefix.charCodeAt(0))) {
	            octal = true;
	            num = '0' + this.source[this.index++];
	        }
	        else {
	            ++this.index;
	        }
	        while (!this.eof()) {
	            if (!character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
	                break;
	            }
	            num += this.source[this.index++];
	        }
	        if (!octal && num.length === 0) {
	            // only 0o or 0O
	            this.throwUnexpectedToken();
	        }
	        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: 6 /* NumericLiteral */,
	            value: parseInt(num, 8),
	            octal: octal,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    Scanner.prototype.isImplicitOctalLiteral = function () {
	        // Implicit octal, unless there is a non-octal digit.
	        // (Annex B.1.1 on Numeric Literals)
	        for (var i = this.index + 1; i < this.length; ++i) {
	            var ch = this.source[i];
	            if (ch === '8' || ch === '9') {
	                return false;
	            }
	            if (!character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
	                return true;
	            }
	        }
	        return true;
	    };
	    Scanner.prototype.scanNumericLiteral = function () {
	        var start = this.index;
	        var ch = this.source[start];
	        assert_1.assert(character_1.Character.isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'), 'Numeric literal must start with a decimal digit or a decimal point');
	        var num = '';
	        if (ch !== '.') {
	            num = this.source[this.index++];
	            ch = this.source[this.index];
	            // Hex number starts with '0x'.
	            // Octal number starts with '0'.
	            // Octal number in ES6 starts with '0o'.
	            // Binary number in ES6 starts with '0b'.
	            if (num === '0') {
	                if (ch === 'x' || ch === 'X') {
	                    ++this.index;
	                    return this.scanHexLiteral(start);
	                }
	                if (ch === 'b' || ch === 'B') {
	                    ++this.index;
	                    return this.scanBinaryLiteral(start);
	                }
	                if (ch === 'o' || ch === 'O') {
	                    return this.scanOctalLiteral(ch, start);
	                }
	                if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
	                    if (this.isImplicitOctalLiteral()) {
	                        return this.scanOctalLiteral(ch, start);
	                    }
	                }
	            }
	            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                num += this.source[this.index++];
	            }
	            ch = this.source[this.index];
	        }
	        if (ch === '.') {
	            num += this.source[this.index++];
	            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                num += this.source[this.index++];
	            }
	            ch = this.source[this.index];
	        }
	        if (ch === 'e' || ch === 'E') {
	            num += this.source[this.index++];
	            ch = this.source[this.index];
	            if (ch === '+' || ch === '-') {
	                num += this.source[this.index++];
	            }
	            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                    num += this.source[this.index++];
	                }
	            }
	            else {
	                this.throwUnexpectedToken();
	            }
	        }
	        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: 6 /* NumericLiteral */,
	            value: parseFloat(num),
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-literals-string-literals
	    Scanner.prototype.scanStringLiteral = function () {
	        var start = this.index;
	        var quote = this.source[start];
	        assert_1.assert((quote === '\'' || quote === '"'), 'String literal must starts with a quote');
	        ++this.index;
	        var octal = false;
	        var str = '';
	        while (!this.eof()) {
	            var ch = this.source[this.index++];
	            if (ch === quote) {
	                quote = '';
	                break;
	            }
	            else if (ch === '\\') {
	                ch = this.source[this.index++];
	                if (!ch || !character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                    switch (ch) {
	                        case 'u':
	                            if (this.source[this.index] === '{') {
	                                ++this.index;
	                                str += this.scanUnicodeCodePointEscape();
	                            }
	                            else {
	                                var unescaped_1 = this.scanHexEscape(ch);
	                                if (unescaped_1 === null) {
	                                    this.throwUnexpectedToken();
	                                }
	                                str += unescaped_1;
	                            }
	                            break;
	                        case 'x':
	                            var unescaped = this.scanHexEscape(ch);
	                            if (unescaped === null) {
	                                this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);
	                            }
	                            str += unescaped;
	                            break;
	                        case 'n':
	                            str += '\n';
	                            break;
	                        case 'r':
	                            str += '\r';
	                            break;
	                        case 't':
	                            str += '\t';
	                            break;
	                        case 'b':
	                            str += '\b';
	                            break;
	                        case 'f':
	                            str += '\f';
	                            break;
	                        case 'v':
	                            str += '\x0B';
	                            break;
	                        case '8':
	                        case '9':
	                            str += ch;
	                            this.tolerateUnexpectedToken();
	                            break;
	                        default:
	                            if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
	                                var octToDec = this.octalToDecimal(ch);
	                                octal = octToDec.octal || octal;
	                                str += String.fromCharCode(octToDec.code);
	                            }
	                            else {
	                                str += ch;
	                            }
	                            break;
	                    }
	                }
	                else {
	                    ++this.lineNumber;
	                    if (ch === '\r' && this.source[this.index] === '\n') {
	                        ++this.index;
	                    }
	                    this.lineStart = this.index;
	                }
	            }
	            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                break;
	            }
	            else {
	                str += ch;
	            }
	        }
	        if (quote !== '') {
	            this.index = start;
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: 8 /* StringLiteral */,
	            value: str,
	            octal: octal,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-template-literal-lexical-components
	    Scanner.prototype.scanTemplate = function () {
	        var cooked = '';
	        var terminated = false;
	        var start = this.index;
	        var head = (this.source[start] === '`');
	        var tail = false;
	        var rawOffset = 2;
	        ++this.index;
	        while (!this.eof()) {
	            var ch = this.source[this.index++];
	            if (ch === '`') {
	                rawOffset = 1;
	                tail = true;
	                terminated = true;
	                break;
	            }
	            else if (ch === '$') {
	                if (this.source[this.index] === '{') {
	                    this.curlyStack.push('${');
	                    ++this.index;
	                    terminated = true;
	                    break;
	                }
	                cooked += ch;
	            }
	            else if (ch === '\\') {
	                ch = this.source[this.index++];
	                if (!character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                    switch (ch) {
	                        case 'n':
	                            cooked += '\n';
	                            break;
	                        case 'r':
	                            cooked += '\r';
	                            break;
	                        case 't':
	                            cooked += '\t';
	                            break;
	                        case 'u':
	                            if (this.source[this.index] === '{') {
	                                ++this.index;
	                                cooked += this.scanUnicodeCodePointEscape();
	                            }
	                            else {
	                                var restore = this.index;
	                                var unescaped_2 = this.scanHexEscape(ch);
	                                if (unescaped_2 !== null) {
	                                    cooked += unescaped_2;
	                                }
	                                else {
	                                    this.index = restore;
	                                    cooked += ch;
	                                }
	                            }
	                            break;
	                        case 'x':
	                            var unescaped = this.scanHexEscape(ch);
	                            if (unescaped === null) {
	                                this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);
	                            }
	                            cooked += unescaped;
	                            break;
	                        case 'b':
	                            cooked += '\b';
	                            break;
	                        case 'f':
	                            cooked += '\f';
	                            break;
	                        case 'v':
	                            cooked += '\v';
	                            break;
	                        default:
	                            if (ch === '0') {
	                                if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                                    // Illegal: \01 \02 and so on
	                                    this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
	                                }
	                                cooked += '\0';
	                            }
	                            else if (character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
	                                // Illegal: \1 \2
	                                this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
	                            }
	                            else {
	                                cooked += ch;
	                            }
	                            break;
	                    }
	                }
	                else {
	                    ++this.lineNumber;
	                    if (ch === '\r' && this.source[this.index] === '\n') {
	                        ++this.index;
	                    }
	                    this.lineStart = this.index;
	                }
	            }
	            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                ++this.lineNumber;
	                if (ch === '\r' && this.source[this.index] === '\n') {
	                    ++this.index;
	                }
	                this.lineStart = this.index;
	                cooked += '\n';
	            }
	            else {
	                cooked += ch;
	            }
	        }
	        if (!terminated) {
	            this.throwUnexpectedToken();
	        }
	        if (!head) {
	            this.curlyStack.pop();
	        }
	        return {
	            type: 10 /* Template */,
	            value: this.source.slice(start + 1, this.index - rawOffset),
	            cooked: cooked,
	            head: head,
	            tail: tail,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals
	    Scanner.prototype.testRegExp = function (pattern, flags) {
	        // The BMP character to use as a replacement for astral symbols when
	        // translating an ES6 "u"-flagged pattern to an ES5-compatible
	        // approximation.
	        // Note: replacing with '\uFFFF' enables false positives in unlikely
	        // scenarios. For example, `[\u{1044f}-\u{10440}]` is an invalid
	        // pattern that would not be detected by this substitution.
	        var astralSubstitute = '\uFFFF';
	        var tmp = pattern;
	        var self = this;
	        if (flags.indexOf('u') >= 0) {
	            tmp = tmp
	                .replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {
	                var codePoint = parseInt($1 || $2, 16);
	                if (codePoint > 0x10FFFF) {
	                    self.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
	                }
	                if (codePoint <= 0xFFFF) {
	                    return String.fromCharCode(codePoint);
	                }
	                return astralSubstitute;
	            })
	                .replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, astralSubstitute);
	        }
	        // First, detect invalid regular expressions.
	        try {
	            RegExp(tmp);
	        }
	        catch (e) {
	            this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
	        }
	        // Return a regular expression object for this pattern-flag pair, or
	        // `null` in case the current environment doesn't support the flags it
	        // uses.
	        try {
	            return new RegExp(pattern, flags);
	        }
	        catch (exception) {
	            /* istanbul ignore next */
	            return null;
	        }
	    };
	    Scanner.prototype.scanRegExpBody = function () {
	        var ch = this.source[this.index];
	        assert_1.assert(ch === '/', 'Regular expression literal must start with a slash');
	        var str = this.source[this.index++];
	        var classMarker = false;
	        var terminated = false;
	        while (!this.eof()) {
	            ch = this.source[this.index++];
	            str += ch;
	            if (ch === '\\') {
	                ch = this.source[this.index++];
	                // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals
	                if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                    this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
	                }
	                str += ch;
	            }
	            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
	            }
	            else if (classMarker) {
	                if (ch === ']') {
	                    classMarker = false;
	                }
	            }
	            else {
	                if (ch === '/') {
	                    terminated = true;
	                    break;
	                }
	                else if (ch === '[') {
	                    classMarker = true;
	                }
	            }
	        }
	        if (!terminated) {
	            this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
	        }
	        // Exclude leading and trailing slash.
	        return str.substr(1, str.length - 2);
	    };
	    Scanner.prototype.scanRegExpFlags = function () {
	        var str = '';
	        var flags = '';
	        while (!this.eof()) {
	            var ch = this.source[this.index];
	            if (!character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {
	                break;
	            }
	            ++this.index;
	            if (ch === '\\' && !this.eof()) {
	                ch = this.source[this.index];
	                if (ch === 'u') {
	                    ++this.index;
	                    var restore = this.index;
	                    var char = this.scanHexEscape('u');
	                    if (char !== null) {
	                        flags += char;
	                        for (str += '\\u'; restore < this.index; ++restore) {
	                            str += this.source[restore];
	                        }
	                    }
	                    else {
	                        this.index = restore;
	                        flags += 'u';
	                        str += '\\u';
	                    }
	                    this.tolerateUnexpectedToken();
	                }
	                else {
	                    str += '\\';
	                    this.tolerateUnexpectedToken();
	                }
	            }
	            else {
	                flags += ch;
	                str += ch;
	            }
	        }
	        return flags;
	    };
	    Scanner.prototype.scanRegExp = function () {
	        var start = this.index;
	        var pattern = this.scanRegExpBody();
	        var flags = this.scanRegExpFlags();
	        var value = this.testRegExp(pattern, flags);
	        return {
	            type: 9 /* RegularExpression */,
	            value: '',
	            pattern: pattern,
	            flags: flags,
	            regex: value,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    Scanner.prototype.lex = function () {
	        if (this.eof()) {
	            return {
	                type: 2 /* EOF */,
	                value: '',
	                lineNumber: this.lineNumber,
	                lineStart: this.lineStart,
	                start: this.index,
	                end: this.index
	            };
	        }
	        var cp = this.source.charCodeAt(this.index);
	        if (character_1.Character.isIdentifierStart(cp)) {
	            return this.scanIdentifier();
	        }
	        // Very common: ( and ) and ;
	        if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {
	            return this.scanPunctuator();
	        }
	        // String literal starts with single quote (U+0027) or double quote (U+0022).
	        if (cp === 0x27 || cp === 0x22) {
	            return this.scanStringLiteral();
	        }
	        // Dot (.) U+002E can also start a floating-point number, hence the need
	        // to check the next character.
	        if (cp === 0x2E) {
	            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) {
	                return this.scanNumericLiteral();
	            }
	            return this.scanPunctuator();
	        }
	        if (character_1.Character.isDecimalDigit(cp)) {
	            return this.scanNumericLiteral();
	        }
	        // Template literals start with ` (U+0060) for template head
	        // or } (U+007D) for template middle or template tail.
	        if (cp === 0x60 || (cp === 0x7D && this.curlyStack[this.curlyStack.length - 1] === '${')) {
	            return this.scanTemplate();
	        }
	        // Possible identifier start in a surrogate pair.
	        if (cp >= 0xD800 && cp < 0xDFFF) {
	            if (character_1.Character.isIdentifierStart(this.codePointAt(this.index))) {
	                return this.scanIdentifier();
	            }
	        }
	        return this.scanPunctuator();
	    };
	    return Scanner;
	}());
	exports.Scanner = Scanner;


/***/ },
/* 13 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.TokenName = {};
	exports.TokenName[1 /* BooleanLiteral */] = 'Boolean';
	exports.TokenName[2 /* EOF */] = '<end>';
	exports.TokenName[3 /* Identifier */] = 'Identifier';
	exports.TokenName[4 /* Keyword */] = 'Keyword';
	exports.TokenName[5 /* NullLiteral */] = 'Null';
	exports.TokenName[6 /* NumericLiteral */] = 'Numeric';
	exports.TokenName[7 /* Punctuator */] = 'Punctuator';
	exports.TokenName[8 /* StringLiteral */] = 'String';
	exports.TokenName[9 /* RegularExpression */] = 'RegularExpression';
	exports.TokenName[10 /* Template */] = 'Template';


/***/ },
/* 14 */
/***/ function(module, exports) {

	"use strict";
	// Generated by generate-xhtml-entities.js. DO NOT MODIFY!
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.XHTMLEntities = {
	    quot: '\u0022',
	    amp: '\u0026',
	    apos: '\u0027',
	    gt: '\u003E',
	    nbsp: '\u00A0',
	    iexcl: '\u00A1',
	    cent: '\u00A2',
	    pound: '\u00A3',
	    curren: '\u00A4',
	    yen: '\u00A5',
	    brvbar: '\u00A6',
	    sect: '\u00A7',
	    uml: '\u00A8',
	    copy: '\u00A9',
	    ordf: '\u00AA',
	    laquo: '\u00AB',
	    not: '\u00AC',
	    shy: '\u00AD',
	    reg: '\u00AE',
	    macr: '\u00AF',
	    deg: '\u00B0',
	    plusmn: '\u00B1',
	    sup2: '\u00B2',
	    sup3: '\u00B3',
	    acute: '\u00B4',
	    micro: '\u00B5',
	    para: '\u00B6',
	    middot: '\u00B7',
	    cedil: '\u00B8',
	    sup1: '\u00B9',
	    ordm: '\u00BA',
	    raquo: '\u00BB',
	    frac14: '\u00BC',
	    frac12: '\u00BD',
	    frac34: '\u00BE',
	    iquest: '\u00BF',
	    Agrave: '\u00C0',
	    Aacute: '\u00C1',
	    Acirc: '\u00C2',
	    Atilde: '\u00C3',
	    Auml: '\u00C4',
	    Aring: '\u00C5',
	    AElig: '\u00C6',
	    Ccedil: '\u00C7',
	    Egrave: '\u00C8',
	    Eacute: '\u00C9',
	    Ecirc: '\u00CA',
	    Euml: '\u00CB',
	    Igrave: '\u00CC',
	    Iacute: '\u00CD',
	    Icirc: '\u00CE',
	    Iuml: '\u00CF',
	    ETH: '\u00D0',
	    Ntilde: '\u00D1',
	    Ograve: '\u00D2',
	    Oacute: '\u00D3',
	    Ocirc: '\u00D4',
	    Otilde: '\u00D5',
	    Ouml: '\u00D6',
	    times: '\u00D7',
	    Oslash: '\u00D8',
	    Ugrave: '\u00D9',
	    Uacute: '\u00DA',
	    Ucirc: '\u00DB',
	    Uuml: '\u00DC',
	    Yacute: '\u00DD',
	    THORN: '\u00DE',
	    szlig: '\u00DF',
	    agrave: '\u00E0',
	    aacute: '\u00E1',
	    acirc: '\u00E2',
	    atilde: '\u00E3',
	    auml: '\u00E4',
	    aring: '\u00E5',
	    aelig: '\u00E6',
	    ccedil: '\u00E7',
	    egrave: '\u00E8',
	    eacute: '\u00E9',
	    ecirc: '\u00EA',
	    euml: '\u00EB',
	    igrave: '\u00EC',
	    iacute: '\u00ED',
	    icirc: '\u00EE',
	    iuml: '\u00EF',
	    eth: '\u00F0',
	    ntilde: '\u00F1',
	    ograve: '\u00F2',
	    oacute: '\u00F3',
	    ocirc: '\u00F4',
	    otilde: '\u00F5',
	    ouml: '\u00F6',
	    divide: '\u00F7',
	    oslash: '\u00F8',
	    ugrave: '\u00F9',
	    uacute: '\u00FA',
	    ucirc: '\u00FB',
	    uuml: '\u00FC',
	    yacute: '\u00FD',
	    thorn: '\u00FE',
	    yuml: '\u00FF',
	    OElig: '\u0152',
	    oelig: '\u0153',
	    Scaron: '\u0160',
	    scaron: '\u0161',
	    Yuml: '\u0178',
	    fnof: '\u0192',
	    circ: '\u02C6',
	    tilde: '\u02DC',
	    Alpha: '\u0391',
	    Beta: '\u0392',
	    Gamma: '\u0393',
	    Delta: '\u0394',
	    Epsilon: '\u0395',
	    Zeta: '\u0396',
	    Eta: '\u0397',
	    Theta: '\u0398',
	    Iota: '\u0399',
	    Kappa: '\u039A',
	    Lambda: '\u039B',
	    Mu: '\u039C',
	    Nu: '\u039D',
	    Xi: '\u039E',
	    Omicron: '\u039F',
	    Pi: '\u03A0',
	    Rho: '\u03A1',
	    Sigma: '\u03A3',
	    Tau: '\u03A4',
	    Upsilon: '\u03A5',
	    Phi: '\u03A6',
	    Chi: '\u03A7',
	    Psi: '\u03A8',
	    Omega: '\u03A9',
	    alpha: '\u03B1',
	    beta: '\u03B2',
	    gamma: '\u03B3',
	    delta: '\u03B4',
	    epsilon: '\u03B5',
	    zeta: '\u03B6',
	    eta: '\u03B7',
	    theta: '\u03B8',
	    iota: '\u03B9',
	    kappa: '\u03BA',
	    lambda: '\u03BB',
	    mu: '\u03BC',
	    nu: '\u03BD',
	    xi: '\u03BE',
	    omicron: '\u03BF',
	    pi: '\u03C0',
	    rho: '\u03C1',
	    sigmaf: '\u03C2',
	    sigma: '\u03C3',
	    tau: '\u03C4',
	    upsilon: '\u03C5',
	    phi: '\u03C6',
	    chi: '\u03C7',
	    psi: '\u03C8',
	    omega: '\u03C9',
	    thetasym: '\u03D1',
	    upsih: '\u03D2',
	    piv: '\u03D6',
	    ensp: '\u2002',
	    emsp: '\u2003',
	    thinsp: '\u2009',
	    zwnj: '\u200C',
	    zwj: '\u200D',
	    lrm: '\u200E',
	    rlm: '\u200F',
	    ndash: '\u2013',
	    mdash: '\u2014',
	    lsquo: '\u2018',
	    rsquo: '\u2019',
	    sbquo: '\u201A',
	    ldquo: '\u201C',
	    rdquo: '\u201D',
	    bdquo: '\u201E',
	    dagger: '\u2020',
	    Dagger: '\u2021',
	    bull: '\u2022',
	    hellip: '\u2026',
	    permil: '\u2030',
	    prime: '\u2032',
	    Prime: '\u2033',
	    lsaquo: '\u2039',
	    rsaquo: '\u203A',
	    oline: '\u203E',
	    frasl: '\u2044',
	    euro: '\u20AC',
	    image: '\u2111',
	    weierp: '\u2118',
	    real: '\u211C',
	    trade: '\u2122',
	    alefsym: '\u2135',
	    larr: '\u2190',
	    uarr: '\u2191',
	    rarr: '\u2192',
	    darr: '\u2193',
	    harr: '\u2194',
	    crarr: '\u21B5',
	    lArr: '\u21D0',
	    uArr: '\u21D1',
	    rArr: '\u21D2',
	    dArr: '\u21D3',
	    hArr: '\u21D4',
	    forall: '\u2200',
	    part: '\u2202',
	    exist: '\u2203',
	    empty: '\u2205',
	    nabla: '\u2207',
	    isin: '\u2208',
	    notin: '\u2209',
	    ni: '\u220B',
	    prod: '\u220F',
	    sum: '\u2211',
	    minus: '\u2212',
	    lowast: '\u2217',
	    radic: '\u221A',
	    prop: '\u221D',
	    infin: '\u221E',
	    ang: '\u2220',
	    and: '\u2227',
	    or: '\u2228',
	    cap: '\u2229',
	    cup: '\u222A',
	    int: '\u222B',
	    there4: '\u2234',
	    sim: '\u223C',
	    cong: '\u2245',
	    asymp: '\u2248',
	    ne: '\u2260',
	    equiv: '\u2261',
	    le: '\u2264',
	    ge: '\u2265',
	    sub: '\u2282',
	    sup: '\u2283',
	    nsub: '\u2284',
	    sube: '\u2286',
	    supe: '\u2287',
	    oplus: '\u2295',
	    otimes: '\u2297',
	    perp: '\u22A5',
	    sdot: '\u22C5',
	    lceil: '\u2308',
	    rceil: '\u2309',
	    lfloor: '\u230A',
	    rfloor: '\u230B',
	    loz: '\u25CA',
	    spades: '\u2660',
	    clubs: '\u2663',
	    hearts: '\u2665',
	    diams: '\u2666',
	    lang: '\u27E8',
	    rang: '\u27E9'
	};


/***/ },
/* 15 */
/***/ function(module, exports, __nested_webpack_require_277122__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var error_handler_1 = __nested_webpack_require_277122__(10);
	var scanner_1 = __nested_webpack_require_277122__(12);
	var token_1 = __nested_webpack_require_277122__(13);
	var Reader = (function () {
	    function Reader() {
	        this.values = [];
	        this.curly = this.paren = -1;
	    }
	    // A function following one of those tokens is an expression.
	    Reader.prototype.beforeFunctionExpression = function (t) {
	        return ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',
	            'return', 'case', 'delete', 'throw', 'void',
	            // assignment operators
	            '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=',
	            '&=', '|=', '^=', ',',
	            // binary/unary operators
	            '+', '-', '*', '**', '/', '%', '++', '--', '<<', '>>', '>>>', '&',
	            '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',
	            '<=', '<', '>', '!=', '!=='].indexOf(t) >= 0;
	    };
	    // Determine if forward slash (/) is an operator or part of a regular expression
	    // https://github.com/mozilla/sweet.js/wiki/design
	    Reader.prototype.isRegexStart = function () {
	        var previous = this.values[this.values.length - 1];
	        var regex = (previous !== null);
	        switch (previous) {
	            case 'this':
	            case ']':
	                regex = false;
	                break;
	            case ')':
	                var keyword = this.values[this.paren - 1];
	                regex = (keyword === 'if' || keyword === 'while' || keyword === 'for' || keyword === 'with');
	                break;
	            case '}':
	                // Dividing a function by anything makes little sense,
	                // but we have to check for that.
	                regex = false;
	                if (this.values[this.curly - 3] === 'function') {
	                    // Anonymous function, e.g. function(){} /42
	                    var check = this.values[this.curly - 4];
	                    regex = check ? !this.beforeFunctionExpression(check) : false;
	                }
	                else if (this.values[this.curly - 4] === 'function') {
	                    // Named function, e.g. function f(){} /42/
	                    var check = this.values[this.curly - 5];
	                    regex = check ? !this.beforeFunctionExpression(check) : true;
	                }
	                break;
	            default:
	                break;
	        }
	        return regex;
	    };
	    Reader.prototype.push = function (token) {
	        if (token.type === 7 /* Punctuator */ || token.type === 4 /* Keyword */) {
	            if (token.value === '{') {
	                this.curly = this.values.length;
	            }
	            else if (token.value === '(') {
	                this.paren = this.values.length;
	            }
	            this.values.push(token.value);
	        }
	        else {
	            this.values.push(null);
	        }
	    };
	    return Reader;
	}());
	var Tokenizer = (function () {
	    function Tokenizer(code, config) {
	        this.errorHandler = new error_handler_1.ErrorHandler();
	        this.errorHandler.tolerant = config ? (typeof config.tolerant === 'boolean' && config.tolerant) : false;
	        this.scanner = new scanner_1.Scanner(code, this.errorHandler);
	        this.scanner.trackComment = config ? (typeof config.comment === 'boolean' && config.comment) : false;
	        this.trackRange = config ? (typeof config.range === 'boolean' && config.range) : false;
	        this.trackLoc = config ? (typeof config.loc === 'boolean' && config.loc) : false;
	        this.buffer = [];
	        this.reader = new Reader();
	    }
	    Tokenizer.prototype.errors = function () {
	        return this.errorHandler.errors;
	    };
	    Tokenizer.prototype.getNextToken = function () {
	        if (this.buffer.length === 0) {
	            var comments = this.scanner.scanComments();
	            if (this.scanner.trackComment) {
	                for (var i = 0; i < comments.length; ++i) {
	                    var e = comments[i];
	                    var value = this.scanner.source.slice(e.slice[0], e.slice[1]);
	                    var comment = {
	                        type: e.multiLine ? 'BlockComment' : 'LineComment',
	                        value: value
	                    };
	                    if (this.trackRange) {
	                        comment.range = e.range;
	                    }
	                    if (this.trackLoc) {
	                        comment.loc = e.loc;
	                    }
	                    this.buffer.push(comment);
	                }
	            }
	            if (!this.scanner.eof()) {
	                var loc = void 0;
	                if (this.trackLoc) {
	                    loc = {
	                        start: {
	                            line: this.scanner.lineNumber,
	                            column: this.scanner.index - this.scanner.lineStart
	                        },
	                        end: {}
	                    };
	                }
	                var startRegex = (this.scanner.source[this.scanner.index] === '/') && this.reader.isRegexStart();
	                var token = startRegex ? this.scanner.scanRegExp() : this.scanner.lex();
	                this.reader.push(token);
	                var entry = {
	                    type: token_1.TokenName[token.type],
	                    value: this.scanner.source.slice(token.start, token.end)
	                };
	                if (this.trackRange) {
	                    entry.range = [token.start, token.end];
	                }
	                if (this.trackLoc) {
	                    loc.end = {
	                        line: this.scanner.lineNumber,
	                        column: this.scanner.index - this.scanner.lineStart
	                    };
	                    entry.loc = loc;
	                }
	                if (token.type === 9 /* RegularExpression */) {
	                    var pattern = token.pattern;
	                    var flags = token.flags;
	                    entry.regex = { pattern: pattern, flags: flags };
	                }
	                this.buffer.push(entry);
	            }
	        }
	        return this.buffer.shift();
	    };
	    return Tokenizer;
	}());
	exports.Tokenizer = Tokenizer;


/***/ }
/******/ ])
});
;

/***/ }),

/***/ 702:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=exe, use-js-string=true, version=5.1.1+git-v0.24.0-14347-g60d90e1
(function(a){typeof
globalThis!=="object"&&(this?b():(a.defineProperty(a.prototype,"_T_",{configurable:true,get:b}),_T_));function
b(){var
b=this||self;b.globalThis=b;delete
a.prototype._T_}}(Object));(function(al){"use strict";var
k2="symbol",MK=271,nZ=126548,jG="renders",yM=71127,f3="member_property",yL=65007,MJ=273,Eh=66517,f2="jsx_attribute_value_expression",Eg=119980,dP="function_declaration",bO="<2>",BG=68466,LO="%=",Ef="??",vT=70080,nY="&",cb="identifier",qv=72163,yK=71723,BF="properties",Ee=183969,vS=68223,f1="function_return_annotation",Ed=124903,KN=261,BE=70106,MI=241,LN="(",JN=213,yJ=120074,vR=70708,BD=71679,f0="logical",aW="camlinternalFormat.ml",e0="type_guard_annotation",BC=92975,LM=">>>",vQ="RestElement",yI=67897,KM=179,vP="start",BB=113775,px=126521,KL="%i",lk="`",LL="#",Ec=43702,qu=126,yH=110947,hg="function_identifier",qt=119893,yG=70366,D$=65547,Ea=43743,Eb=-43,iK=8238,JM=",",iU=8286,fZ="keyof_type",vO=66717,pw=12336,MH=201,vN=71338,nX=11565,D_=69289,vM=55291,vL=73030,yF=70479,D8=69572,D9=11623,hf="tuple_spread_element",he="component_type_rest_param",iJ=8239,vK=64310,jA="@]",yE=42993,pv=11558,qs="Map.bal",k1="public",MG=-32,jz="Literal",dO="jsx_member_expression_identifier",eZ="for_in_assignment_pattern",BA=71450,pu=126557,cD=103,yD=12292,vJ=110579,oP=120597,By=13311,Bz=12348,fY="export_default_declaration_decl",hd="tuple_type",vI=113663,oO=170,yC=67413,KK="Assert_failure",LK="comments",lq="%S",cz=127343600,Bx=12341,yB=67646,MF="ENOTEMPTY",yA=72160,D7=70187,JL=222,Bw=12343,LJ=2147483647,vG=126624,vH=43442,D6=70312,ME=281,dN="interface_type",i0="new",yz=66256,oN=68296,Bv=124908,oL=126579,oM=70107,Bu=249,vF=71167,eY="union_type",c=248,vE=126546,dM="enum_bigint_member",LI=133,vC=67871,vD=66955,LH=1027,hc="class_declaration",eX="optional_call",KJ="a string",qr=11703,JK="<<",pt=126564,dL="jsx_element",eW="object_property_type",vB=94207,dK="enum_declaration",D5=68023,yx=67669,yy=8318,KI="prefix",iP="this",yw=126578,eV="if_consequent_statement",KH=-696510241,Bt=66963,iI="default",qq=72967,ch=101,KG="buffer.ml",yv=74649,cy=0xffff,Bs=43709,KF=175,ih="component",MD="===",iH=117,eU="jsx_identifier",JJ="EnumDefaultedMember",nW=70006,Br=70161,yu=126633,D4=66965,eT="member_property_expression",D3=101589,yt=64274,jS="function",yr=66303,ys=42954,Bq=126529,D2=72191,dJ="new_",vA=64433,nV=126559,yq=72144,KE="==",ig=-744106340,D1=43359,vz=171,LG="Printexc.handle_uncaught_exception",vy=66735,Bp=126534,yp=74879,vx=42785,oK=120629,lj="0o",LF="End_of_file",vw=66175,KD="&=",Bo="nan",qp=126503,hb="pattern_number_literal",yo=43470,fX="import_namespace_specifier",yn=77711,oJ=70302,dI="component_param",oI="@])",qo=126515,jJ=118,bL="continue",Bn=43798,ps=";@ ",D0=74751,vv="src/parser/statement_parser.ml",DZ="rmdir",ym=94177,ha="for_in_statement",MC=12520,JI="TypeParameterInstantiation",y="",KC="**=",DY=120126,JH=197,Bm=67829,nU="_bigarr02",g$="export_named_declaration_specifier",qn=": No such file or directory",fW="render_type",qm=64319,vu=69926,dH="pattern_object_p",JG="TypeAnnotation",fV="array_type",k0="@[%s =@ ",yl=72847,dG="export_default_declaration",oH=126590,Bk=42774,Bl=": Not a directory",jF="let",iZ=12288,br="argument",bt="/",pr="an identifier",hJ="typeof",oG=68116,yk=182,fU="declare_export_declaration_decl",vt=67589,vs=66771,lb="class",JF="tokens",oF=70281,la=255,Bj=43638,iO="key",DX=69955,JE=">>",dF="function_expression_or_method",yj=43587,cx="block",yi=100351,pq="mixed",Bi=66503,yh="ENOTDIR",Bh=65135,fT="string_literal",bB="@ ",yg=43334,eS="if_alternate_statement",Bg=70448,nT=8485,eR="type_args",vr=69864,dE="if_statement",MB="+=",g_="typeof_identifier",nS="with",ql=65595,yf=64286,Bf=71086,hI="true",DW=69423,g9="catch_clause",vq="e",jR="asserts",JD=">>=",oE=131,vp=43388,ye=43887,aG=-48,DV=120779,MA=190,vo=194,dD="pattern_bigint_literal",Bd=71351,Be=65629,fS="call",DU=-42,nR=126553,Bc=43695,LE=177,vn=42124,yd=12703,Ba=12442,Bb=11718,pp=70449,oD=126547,vm=67462,hE="left",eQ="infer_type",DT=11742,yc=65597,oC="Unix.Unix_error",A$=122623,DR=124911,DS=72959,yb="opaque",g8="object_internal_slot_property_type",KB="Enum `",iT=65279,vk=71983,vl=12329,aD=110,dC="spread_property",KA="importKind",li=" =",g7="remote_identifier",eP="labeled_statement",dB="jsx_fragment",DQ=120770,dA="function_param",bh=112,DP="exportKind",eO="binary",hC="`.",DO=42511,JC="<=",eN="jsx_spread_attribute",bg="import",fR="typeof_member_identifier",DN=69414,ya=19967,nQ=11687,x$=93823,LD=67714067,Mz=209,DM=71903,vj="of",A_=72000,qk="typeArguments",eL="type_identifier",eM="pattern_array_element_pattern",po=69744,jy=192,dz="class_element",fP="export_source",fQ="component_param_pattern",A9=42508,DL=125124,JB="Unexpected token `",dy="for_in_left_declaration",g6="object_call_property_type",x_="abstract",vi=8584,A8=68786,vh=71999,pn=123214,x9=123565,oB=186,g5="class_implements_interface",pm=126536,DK=69749,JA="Invalid legacy octal ",A6=71295,A7=66927,eK="pattern_expression",A5=11679,DJ=-61,qj=65141,x8=11694,g4="update_expression",Jz="minus",bN="debugger",DI=71352,vg=65470,jI="number",DH=123627,qi=64322,oA=43471,fO="for_of_assignment_pattern",oz=126589,x7=43784,LC="Internal Error: Found object private prop",DG=183983,b="id",A4=123190,oy="finally",pl=120070,DF=72095,g3="as_expression",dx="syntax",x6=110591,hD="false",My=-10,nP="AssignmentPattern",dw="typeof_expression",A3=43764,Jy="FunctionTypeParam",dv="function_body_any",A1=126627,A2=71998,DE=126543,du="call_type_arg",x5=64316,pk=64285,DD=8454,LB=137,Jx="**",fN="object_type_property_setter",DC=68607,cu=108,DB="out",x4=68799,iS=65278,fM="jsx_member_expression",A0=92728,iY="null",AZ=66431,DA=72249,cC=0x80,nO=119994,x3=66207,Dz=43583,pi="else",pj=94179,qh=11735,Dy=64911,g2="jsx_attribute_name_namespaced",Kz="!",Dx=42539,vf=72250,AY=71215,AX=69746,ve=65487,g1="pattern_object_property_key",Jw=", ",AV=8505,AW="=",AU=64111,Dw=8507,qg=120134,ox="while",Du=120596,Dv=43002,lp="protected",vd=68479,x2=43395,AT=68252,Mx="v",vc=70278,vb="rendersType",AS=70853,ph=120145,va=69297,AR=73112,qf=8488,u_=68351,u$=42655,g0="for_of_left_declaration",x0=44031,x1="Failure",AQ=92159,fL="object_key_identifier",Jv=195,iX="bigint",dt="import_default_specifier",k$=256,fK="member",Mw="!==",ds="component_identifier",Dt=73008,Ds=72283,qe=126500,qd=120127,eI="jsx_attribute_name",eJ="for_statement_init",AP=67711,fJ="private_name",ow="case",nN=8489,eH="import_specifier",Dr=64279,AO=94098,xZ=119974,eG="pattern_string_literal",u9=72969,Ju=193,Ky="!=",nM=126520,u8=71944,Jt=259,u7=42191,dr="generic_qualified_identifier_type",iN="implements",AN=194559,LA="%",kZ="hasUnknownMembers",Dq=71039,Mv=211,AM=83526,fH="init",fI="jsx_attribute_value",AL=70271,jQ=240,eF="function_type_return_annotation",AK=70018,Dp="rest",gZ="readonly_type",xY=512,Do=68095,xX=120003,ov=126563,ou=71236,u6=69375,AJ=68850,xW=70105,u5=43866,Kx="T_RENDERS_QUESTION",pg=888960333,AI=43013,gY="assignment_pattern",xV="specifiers",Mu=710,Mt=145,cw="as",AH=120570,Dn=11507,Lz=204,fG="jsx_element_name_identifier",gW="pattern_object_property_string_literal_key",gX="class_expression",Js=257,Dm=44002,AG=82943,jx="src/parser/type_parser.ml",jP="test",Kw=-67,AF=64217,qc="package",Lx="collect_comments",Ly="Pervasives.do_at_exit",Dk=125183,Dl=42606,gV="tuple_element",fF="enum_boolean_member",u4=65312,nL=119981,Dj=65495,qb=120085,Ms=-80,Di=138,ot=126555,u3=65276,ao=128,Jr="{ ",eE="for_statement",fE="class_method",qa="if",fD="generic_type",X=113,AE=43071,xU=72001,Dh=71131,AD=70002,Jq="renders*",xT=42888,nK=8469,kY="instanceof",xS=11502,pf=94178,u2=64321,xR=64913,Kv="Division_by_zero",AC=92879,u1=71945,Jp=185,AB=66938,p$=65535,AA=113800,Mr=": file descriptor already closed",p_=223,Mq="*=",u0=68899,eD="switch_case",fC="pattern_array_element",gU="enum_string_member",eC="pattern_object_property_bigint_literal_key",Mp="visit_trailing_comment",pe="export",nJ=120122,p9=43823,xP=43792,xQ=42527,Dg=70726,dq="enum_defaulted_member",Az=68497,p8=72349,gT="program",eB="member_type_identifier",Ay="object",gS="for_of_statement_lhs",Ax=113791,uZ=67391,dp="jsx_spread_child",or=126554,os=8526,oq=43880,pd=69415,Df=43822,dn="pattern_identifier",Aw=93052,jO="readonly",bK="name",xO=68119,Av=71494,De=120121,nI=8486,Jo=2047,fB="enum_symbol_body",Ku=142,Lw="PropertyDefinition",xN=177976,gR="declare_class",xM=65489,At=72367,Au=70440,dm="import_named_specifier",Lv="Popping lex mode from empty stack",uY=68111,xL=66463,Jn="*-/",xK=43187,nH=8487,As=11567,uX=67861,xJ="\n",xI=66383,gQ="declare_interface",uW=-24976191,Ar=238,xH=-24,Kt="@ }@]",Aq=43645,Dd=176,uV=119976,nG=69959,Ap=126519,xG=";",Lu="trailingComments",p7=65548,eA="number_literal",jw=449540197,xF=43704,op=126584,uU=8467,Mo="||",nF=11695,Ao="exported",xE=120712,hH="void",Ks="mixins",xD=92783,Dc=215,fA="body_expression",Kr="%ni",k_=">",fz="jsx_child",Db=8516,dl="optional_indexed_access_type",ez="typeof_type",ey="spread_element",An=42963,Mn="@[",gP="component_params",Am=43042,nE="\x01\x02",fy="function_",p6="for",oo=65575,cB="params",Al=168,Mm="win32",iG=8202,Kq="@",on="^",Ml=164,bZ="optional",uT=65574,kX="boolean",Lt=139,uS=12548,pc=120539,Mk="Not_found",kW=246,gO="expression_statement",Da="EBADF",uR=66815,ex="module_ref_literal",uQ=55203,dk="function_param_type",Ak=73064,p5=70279,xC=110580,Mj=233,xB="<",Mi="visit_leading_comment",xA=66855,Aj=66966,uP=66499,xz=111355,Ai=68680,C$=206,Kp="--",xy=65497,p4=11711,fx="function_param_pattern",iM="constructor",Ah=5760,Ls="infinity",pb=43642,Ag="fs",C_=92991,p3=126544,xx=101640,pa=72162,C9=67583,o$=8468,bj="typeParameters",Lr="elements",xw=71423,Mh="Sys_blocked_io",gN="interface_declaration",ew="variable_declaration",dj="function_rest_param",ev="type",Af="Invalid number ",Ae=" : flags Open_rdonly and Open_wronly are not compatible",uO=69404,di="jsx_element_name_member_expression",o_="keyof",om="never",eu="with_",ct=0x8000,Lq="|=",o9=70404,p2=70441,Ad=42969,kV="declare",Ac=73061,fw="object_type",gM="object_property_value_type",xv=69687,Lp="Invalid binary/octal ",Jm=230,Ab=64324,Lo="range",Jl="infer",C8=120744,gL="array_element",uN=70730,Aa=43641,Ln=166,C7=70461,uM=69890,z$=69487,uK=74862,uL=68149,nD=73065,Ko="%a",xu=72348,Jk=172,dh="jsx_expression",C6=65663,uJ=126495,z_=245,C5=124907,gK="member_property_identifier",Jj=226,z9=43615,fv="comment",nC=119965,et="catch_clause_pattern",fu="object_type_property_getter",Ji=136,xt=43019,C4=67455,p1=126628,Kn=331416730,Mg="the start of a statement",uI=122654,z8="shorthand",C3=43595,C2=11710,gJ="typeof_qualified_identifier",xs=72750,Km="elementType",aN="typeAnnotation",z7=124895,Lm=162,p0=11559,xr=67382,Ll="??=",uH=72329,xq="target",es="component_type",Lk=180,xp=189,Lj=8206,uG=43513,xo=173823,uF=126467,dg="type_guard",xm=43700,xn=12783,o8=8305,ft="type_annotation",Mf=141,bT="break",nB=42999,uE=65019,Jh=160,C1=70460,df="expression_or_spread",uD=")",fs="class_private_field",C0=55215,uC=65338,z6=40981,lh="members",er="import_declaration",xk=69634,ol=94031,xl="ENOENT",CZ=8457,Jg="satisfies",fr="generic_identifier_type",gI="function_this_param",xj=66993,eq="type_",z5=67423,uB=11557,xi=12799,nA=239,xh=93026,uA=66377,z4=123180,Li=221,Me=-594953737,uz=67967,z3=43586,bY=105,Jf="src/parser/flow_lexer.ml",xg=66559,gH="class_property_value",Kl=150,z2=67637,Lh="closedir",uy=43010,z1=8521,o7=69956,xf=42959,z0=212,zZ=92735,nz="}",k9="method",xe=11498,ok=247,bC="empty",gG=0xffffff,ux=161,zY=42887,gE=116,gF="type_identifier_reference",oj=126634,CY=68029,Lg="regexp",uw=70414,k8=121,fq="template_literal_element",uv=8449,CX=126562,iF=12287,xd=-45,oi=64297,oh=126523,zX=43301,cf=111,CW=126498,uu=43776,Je="EEXIST",CV=119892,CU=43807,Lf=4096,iW=252,hG=0xff,CT=68295,dd="variable_declarator_pattern",de="do_while",og="catch",ut=66962,CS=120654,gD=125,fp="label_identifier",CR=11263,us=8525,ep="assignment",CQ=191456,ur=43273,Md="%u",uq=65381,xb=110927,xc=65479,up=120538,iE="await",zV=71487,zW="jsError",zU=110588,CO=120084,CP=42890,jN=224,gC="object_key",zT=43696,uo=73647,w$=43761,xa=12295,un=64967,ny=11647,Kk=191,ce=123,CN="generator",w_=123583,eo="for_of_statement",fo="enum_bigint_body",ul=110959,um=92995,uk=120686,CM="b",w9=119969,o6=126522,of=64318,zS=71839,pZ=126602,uj=65908,kU=65536,Kj=231,Kh=-602162310,Ki="comment_bounds",cd="-",Le=-55,fn="pattern_object_property",ui=43493,uh=69505,w8=8471,Jd=277,w7=187,oe=120745,fm="enum_member_identifier",CK=71959,CL=66863,ug=65594,zR=253,pY='"',nx=70286,en="jsx_attribute_value_literal",zQ=68447,Kg="the",zP="index out of bounds",fl="declare_export_declaration",em="jsx_attribute",fk="class_extends",af=122,aV=106,gB="binding_pattern",el="ts_type_cast",zO=113807,ue=93951,jv=119,uf="types",zN=8335,gA="statement_fork_point",jE="_",w6=65500,fj="function_type",w5=68220,ek="statement_list",ju=-835925911,zL=123535,zM=258,pX=43815,Jc=199,o5=120571,w4=67514,Kf="Property",pW=72713,Mc="Unexpected ",o4=169,Mb=", characters ",nw=43867,CJ=42537,ej="component_declaration",Ld=" : is a directory",gz="object_key_number_literal",aa=127,aU=-36,k6=912068366,k7="delete",b1=114,CI=120076,dc="regexp_literal",w3=65370,CH=65481,am="value",ud=68405,jD="operator",lo="const",Ke=283,ib=109,pV="any",uc=69958,w2=70831,zK=73111,CG=72767,zJ="Identifier",fi="jsx_opening_attribute",db="conditional_type",w1="loc",w0=67071,od=120004,ub=43492,zI=70005,Ma=188,pU=72272,ua=11389,wZ=251,zH=73055,o3=70280,L$=286,oc=1114111,t$=66421,Jb="Stack_overflow",wY=70301,zG=19903,ie="0x",wX=69967,zF=12447,nv=66512,Kd="Fatal error: exception %s\n",lg=1000,CF=69295,pT=120093,Kc=">=",Lc=149,o2=64325,fh="class_identifier",t9=119967,t_=68415,Kb="end",ei="enum_boolean_body",fg="member_private_name",eh="super_expression",zE=71955,CE=126514,nu=67593,wW=66939,CD=12591,pS=126538,t8=110590,da="component_renders_annotation",CC=72703,t7=72105,ob=65598,CB=73727,pR=126504,nt=126551,wV=70143,k5="from",gy="class_property",eg="enum_number_body",t6=42559,wT=93759,wU=66994,cA="right",L_=225,t5=67702,wR=65473,wS=43697,oa=70855,t4=119993,t3=72103,wQ=178205,ef="call_type_args",zD=66511,gx="export_batch_specifier",gw="component_type_param",cv=782176664,iV="get",kT="local",Ka=228,gv="object_mapped_type_property",c$="class_decorator",J$=220,c_="enum_body",L9="<<=",wP=71956,zC=69839,jH="super",zB=173791,CA=71942,aM="expression",t2=72440,jC=254,wO=70412,J_="renders?",ee="try_catch",Lb=0x7ff0,ed="declare_module_exports",t1=12320,La=134,Cz=94175,lf="enum",Ja=196,c9="import_source",zA=43814,wN=120069,ec="while_",o1=126537,t0=43262,ff="function_rest_param_type",zz=66378,pQ=119996,c8="declare_component",wM=73097,zx=70783,zy=43503,wL=131071,Cy=11492,tZ=92766,K$=173,Cw=113770,Cx=73029,tY=66978,gu="tagged_template",ea="jsx_element_name",eb="for_init_declaration",wK=123213,c7="object_indexer_property_type",d$="object_spread_property_type",oZ=72970,o0=70854,wJ=110930,k4="var",I$=217,Cv=119972,wI=69622,zv=63743,zw=42237,tX=870530776,ns="returnType",I_=0xdc00,J9=143,jM="computed",tW=42735,fe="arg_list",wH=67461,fd="export_named_declaration",tV=72817,tT=73439,tU=43782,tS=66775,zu=70655,oY="bool",Cu=65140,tR=75075,wF=126651,wG=71947,tQ=42961,tP=12735,wE=78894,wD=64262,L8=237,bs="interface",L7="Match_failure",wC=42962,zt=69748,I9="leadingComments",c6="this_expression",le=461894857,pP=12592,I8=8204,Ct=119807,wB=66348,c5="declare_variable",zs=8348,fc="optional_member",d_=120,fb="arrow_function",tO=72768,Cs=70851,fa="array",tN=43249,n$=126468,tM=177983,zr="compare: functional value",tL=126550,zq=64847,gt="binding_type_identifier",wA=120132,gs="function_params",tK=93071,k3=1024,Cr=42783,K_=1039100673,J8="@{",wz=12352,Cq=42653,wy=120628,gr="declare_function",e$="for_in_statement_lhs",Cp=72271,tJ=69807,wx=67826,e9="syntax_opt",e_="object_key_bigint_literal",I7=243,Co=94032,I6="Undefined_recursive_module",I5=-1053382366,tI=72242,c4="variance_opt",zo=101631,zp="arguments",tH=72161,ww=8511,pO="unknown",tG=43560,I3="the end of an expression statement (`;`)",I4=1026,zn=12543,Cn=11670,L6="?",zm=69247,pN=11631,n_="line",wv=72202,c3="pattern_object_rest_property",cg=" ",zl=43487,id=115,wu=-673950933,d9="intersection_type",tF=120144,kS="is",ws=178207,wt=100343,K9="||=",L5="f",pM=8455,c2=102,d8="pattern_object_property_number_literal_key",zk=70418,Cm=8543,L4="Internal Error: Found private field in object props",oX=126540,pL=119995,iD=8287,c1="indexed_access_type",d7="export_named_specifier",K8=266,J7=0xe0,zj=124926,tE=-103,I2=167,oW=65344,n9=126530,Cl=113788,tC=67505,tD="property",zi=43014,bS="return",hB=-85,tB=126601,I1=214,J6="children",e8="type_alias",nr=43259,wp=126583,wq=71958,wr=65613,zh=67431,oV=126535,wo=69599,d5="type_params",d6="object_key_computed",wn=124910,bi="variance",nq=11727,Ck=66954,tA=126463,d4="catch_body",wm=69445,d3="type_param",gq="component_type_params",Cj=124902,np=120687,K7="collect_comments_opt",Ci=0xf,zg=120485,Ch=70416,Cg=125259,gp="jsx_namespaced_name",zf=43712,Cf=72712,K6="~",pK=12448,go="jsx_member_expression_object",no=126499,n8=-97,d2="pattern_object_property_identifier_key",J5=219,e7="component_body",gn="opaque_type",c0=".",wl=43009,ze="consequent",J4="SpreadElement",aE="body",K5=178,L3=202,gm="jsx_opening_element",cZ="declare_module",nn=67638,Ce=8477,d1="object_type_property",wk=110882,d0="function_body",tz=94111,J3="module",I0="alternate",zd=67839,iC=8191,ty=43881,J2=": closedir failed",ia="kind",cY="tuple_labeled_element",iR=-46,Cd=67640,gl="declare_type_alias",oU=70750,tx=77808,kR="column",e6="jsx_closing_element",tw=66977,wj="\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01",tv=65786,gk="function_expression",ca=104,nm=11719,Cc=11505,zc="mkdir",tu=70319,J1="Invalid_argument",Cb=43738,wi=113817,e5="bigint_literal",tt=70084,zb=126566,nl="do",pJ=42622,gj="computed_key",e4="pattern_object_property_computed_key",J0="fd ",nk=126571,wh=126619,L2=140,ic="prototype",IZ=208,ts=67004,nj=130,JY=242,JZ=">>>=",za=68863,tr=11726,cc="raw",y$=64466,bp=107,tq=67679,cX="enum_string_body",y_=244,K4="unreachable jsxtext",L1="*",tp=66335,y9=126570,K3=229,y8=" : file already exists",oT=184,Ca=67807,wg=70753,gi="boolean_literal",B$=65437,to=70451,wf=67002,jL=124,gh="conditional",n7=43260,K2="Sys_error",B_=123135,kQ="meta",B9=64109,gg="pattern_array_rest_element",B8=43255,pI=67644,e3="pattern_object_rest_property_pattern",gf="sequence",we=65855,B6=110951,B7=67643,ge="predicate_expression",bR="static",y7=120512,y6="declaration",pH=64317,y5=68437,pG=126558,gd="meta_property",B5=11564,gc="declare_enum",cs="pattern",y4=216,IY=282,K1=289,tn=68191,nh="undefined",ni=8319,n6=120133,wd=132,tm=42239,IX=-99,wc=124927,y3=120092,B4=43137,dZ="component_rest_param",KZ=144,K0="expected *",B3=125251,L0="%li",tk=55242,tl=12294,cW="enum_number_member",h$="in",JX="\\\\",iL=":",tj=68115,IW="Cygwin",wb=77823,y2=65615,pF=70162,IV="/static/",y1=11519,wa=72966,yY=12686,yZ=165,y0=183,ln=129,ng=72192,B2=42964,nf="try",n5=120655,v$=11702,LZ="expressions",B1=2048,dY="class_body",B0=55238,KY=0xf0,ti=66915,BZ=43311,th=43018,LY=235,tg=73648,IU="([^/]+)",yX=125258,BY=64829,v_=68735,JW="++",KX=163,JV="qualification",LX=0xdfff,IT=931,dX="default_opt",yW=71235,IS=8472,tf=71934,IR=205,KW=218,KV="callee",BV=43711,BW=64284,BX=43754,yV=43790,KU="%Li",gb="pattern_array_rest_element_pattern",n4="decorators",yU=8304,ga="statement",n3=73062,dW="jsx_children",yT=70492,BU=64255,te=11630,v9=1255,oS=67592,ne=43519,n2=64311,pE=12539,v8="proto",n1=120513,yS=68031,iQ="source",lm="a",td=93047,yR=92927,BS=126588,BT=73458,tc=67742,BR=43714,LW=288,JU=236,BQ=-253313196,ll="label",LV="@[<2>{ ",pD=126539,nd=126552,v7=120487,LU="Out_of_memory",BP=605857695,yQ=94026,LT=267,pC=126496,h_="async",KT=203,pB=126560,v6=68287,e2="unary_expression",ta=-26065557,tb=110587,KS=280,nc=120771,v5=69762,v4=126502,jt="set",e1="object_",f$="template_literal",s$=43258,f_="nullable_type",hF="int_of_string",IQ="^=",bQ="predicate",jB="string",oR=8450,JT="camlinternalMod.ml",yP=70285,hA="+",BO=110575,IP=198,f9="extends",JS=-692038429,nb=67827,LS=210,JR=227,oQ="explicitType",na=70452,v3=70497,jK=0x3f,ld="private",s_=64296,yO=67591,BN=92909,LR="T_JSX_TEXT",v2="Fatal error: exception ",BM=120137,m$=68120,dV="pattern_array_e",BK=119964,BL=92862,s9=66461,IO="&&=",KR=174,aT=8231,f8="null_literal",KQ="/=",v1=66811,m_=70108,v0=67504,BJ=11686,s7=67001,s8=" : flags Open_text and Open_binary are not compatible",BI=43741,s6=66204,aO=8233,cV="type_annotation_hint",s5=123197,cU="object_property",LQ="${",m9=70480,JQ="&&",f7="type_cast",lc="%d",pA=8484,LP=207,vY=70066,vZ=68324,n0=120713,JP=135,pz=126556,bq="0",bf="yield",m8=126591,b0=100,BH=69551,f6="jsx_element_name_namespaced",IN=232,dT="object_key_string_literal",dU="function_this_param_type",f5="pattern_object_property_pattern",bM="throw",bP="switch",KP=0x800,py=119970,dS="toplevel_statement_list",js=250,vX=12438,dR="class_implements",f4="variable_declarator",s4=43713,m7=68096,vW=70457,s3=12538,vV=11734,JO="-=",IM=234,cT="component_param_name",s2=43123,cS="class_",KO="|",vU=200,s0=43518,s1=8483,dQ="jsx_attribute_name_identifier",yN=181;function
avd(a,b,c,d,e){if(d<=b)for(var
f=1;f<=e;f++)c[d+f]=a[b+f];else
for(var
f=e;f>=1;f--)c[d+f]=a[b+f];return 0}function
ave(a){var
c=[0];while(a!==0){var
d=a[1];for(var
b=1;b<d.length;b++)c.push(d[b]);a=a[2]}return c}function
avf(a,b,c){var
d=new
Array(c+1);d[0]=0;for(var
e=1,f=b+1;e<=c;e++,f++)d[e]=a[f];return d}function
qI(a,b,c){var
d=String.fromCharCode;if(b==0&&c<=Lf&&c==a.length)return d.apply(null,a);var
e=y;for(;0<c;b+=k3,c-=k3)e+=d.apply(null,a.slice(b,b+Math.min(c,k3)));return e}function
qy(a){var
c=new
Uint8Array(a.l),e=a.c,d=e.length,b=0;for(;b<d;b++)c[b]=e.charCodeAt(b);for(d=a.l;b<d;b++)c[b]=0;a.c=c;a.t=4;return c}function
hL(a,b,c,d,e){if(e==0)return 0;if(d==0&&(e>=c.l||c.t==2&&e>=c.c.length)){c.c=a.t==4?qI(a.c,b,e):b==0&&a.c.length==e?a.c:a.c.substr(b,e);c.t=c.c.length==c.l?0:2}else if(c.t==2&&d==c.c.length){c.c+=a.t==4?qI(a.c,b,e):b==0&&a.c.length==e?a.c:a.c.substr(b,e);c.t=c.c.length==c.l?0:2}else{if(c.t!=4)qy(c);var
g=a.c,h=c.c;if(a.t==4)if(d<=b)for(var
f=0;f<e;f++)h[d+f]=g[b+f];else
for(var
f=e-1;f>=0;f--)h[d+f]=g[b+f];else{var
i=Math.min(e,g.length-b);for(var
f=0;f<i;f++)h[d+f]=g.charCodeAt(b+f);for(;f<e;f++)h[d+f]=0}}return 0}function
jW(a,b){if(a==0)return y;if(b.repeat)return b.repeat(a);var
d=y,c=0;for(;;){if(a&1)d+=b;a>>=1;if(a==0)return d;b+=b;c++;if(c==9)b.slice(0,1)}}function
qz(a){if(a.t==2)a.c+=jW(a.l-a.c.length,"\0");else
a.c=qI(a.c,0,a.c.length);a.t=0}function
EE(a){if(a.length<24){for(var
b=0;b<a.length;b++)if(a.charCodeAt(b)>aa)return false;return true}else
return!/[^\x00-\x7f]/.test(a)}function
Nc(a){for(var
j=y,d=y,g,f,h,b,c=0,i=a.length;c<i;c++){f=a.charCodeAt(c);if(f<cC){for(var
e=c+1;e<i&&(f=a.charCodeAt(e))<cC;e++);if(e-c>xY){d.substr(0,1);j+=d;d=y;j+=a.slice(c,e)}else
d+=a.slice(c,e);if(e==i)break;c=e}b=1;if(++c<i&&((h=a.charCodeAt(c))&-64)==ao){g=h+(f<<6);if(f<J7){b=g-0x3080;if(b<cC)b=1}else{b=2;if(++c<i&&((h=a.charCodeAt(c))&-64)==ao){g=h+(g<<6);if(f<KY){b=g-0xe2080;if(b<KP||b>=0xd7ff&&b<0xe000)b=2}else{b=3;if(++c<i&&((h=a.charCodeAt(c))&-64)==ao&&f<0xf5){b=h-0x3c82080+(g<<6);if(b<0x10000||b>0x10ffff)b=3}}}}}if(b<4){c-=b;d+="\ufffd"}else if(b>cy)d+=String.fromCharCode(0xd7c0+(b>>10),I_+(b&0x3FF));else
d+=String.fromCharCode(b);if(d.length>k3){d.substr(0,1);j+=d;d=y}}return j+d}function
hK(a,b,c){this.t=a;this.c=b;this.l=c}hK.prototype.toString=function(){switch(this.t){case
9:return this.c;default:qz(this);case
0:if(EE(this.c)){this.t=9;return this.c}this.t=8;case
8:return this.c}};hK.prototype.toUtf16=function(){var
a=this.toString();if(this.t==9)return a;return Nc(a)};hK.prototype.slice=function(){var
a=this.t==4?this.c.slice():this.c;return new
hK(this.t,a,this.l)};function
MS(a){return new
hK(0,a,a.length)}function
hP(a){return a}function
hi(a){return MS(hP(a))}function
hh(a,b,c,d,e){hL(hi(a),b,c,d,e);return 0}function
Nd(a){var
b=al.process;if(b&&b.env&&b.env[a]!=undefined)return b.env[a];if(al.jsoo_static_env&&al.jsoo_static_env[a])return al.jsoo_static_env[a]}var
EB=0;(function(){var
c=Nd("OCAMLRUNPARAM");if(c!==undefined){var
b=c.split(JM);for(var
a=0;a<b.length;a++)if(b[a]==CM){EB=1;break}else if(b[a].startsWith("b="))EB=+b[a].slice(2);else
continue}}());var
bl=[0];function
avn(a,b){if(!a.js_error||b||a[0]==c)a.js_error=new
al.Error("Js exception containing backtrace");return a}function
t(a,b){return EB?avn(a,b):a}function
avT(a,b){throw t([0,a,b])}function
cF(a){return a}function
EA(a,b){avT(a,cF(b))}function
aQ(a){EA(bl.Invalid_argument,a)}function
avj(){aQ(zP)}function
ab(a,b,c){c&=hG;if(a.t!=4){if(b==a.c.length){a.c+=String.fromCharCode(c);if(b+1==a.l)a.t=0;return 0}qy(a)}a.c[b]=c;return 0}function
jU(a,b,c){if(b>>>0>=a.l)avj();return ab(a,b,c)}function
bD(a,b){switch(a.t&6){default:if(b>=a.c.length)return 0;case
0:return a.c.charCodeAt(b);case
4:return a.c[b]}}function
hM(d,c){var
f=d.l>=0?d.l:d.l=d.length,e=c.length,b=f-e;if(b==0)return d.apply(null,c);else if(b<0){var
a=d.apply(null,c.slice(0,f));if(typeof
a!=="function")return a;return hM(a,c.slice(f))}else{switch(b){case
1:{var
a=function(a){var
f=new
Array(e+1);for(var
b=0;b<e;b++)f[b]=c[b];f[e]=a;return d.apply(null,f)};break}case
2:{var
a=function(a,b){var
g=new
Array(e+2);for(var
f=0;f<e;f++)g[f]=c[f];g[e]=a;g[e+1]=b;return d.apply(null,g)};break}default:var
a=function(){var
e=arguments.length==0?1:arguments.length,b=new
Array(c.length+e);for(var
a=0;a<c.length;a++)b[a]=c[a];for(var
a=0;a<arguments.length;a++)b[c.length+a]=arguments[a];return hM(d,b)}}a.l=b;return a}}function
ls(){aQ(zP)}function
aH(a,b){if(b>>>0>=a.length-1)ls();return a}function
avl(a){if(isFinite(a)){if(Math.abs(a)>=2.2250738585072014e-308)return 0;if(a!=0)return 1;return 2}return isNaN(a)?4:3}function
avE(a){return 0}var
av2=Math.log2&&Math.log2(1.1235582092889474E+307)==1020;function
av1(a){if(av2)return Math.floor(Math.log2(a));var
b=0;if(a==0)return-Infinity;if(a>=1)while(a>=2){a/=2;b++}else
while(a<1){a*=2;b--}return b}function
Eo(a){var
b=new
Float32Array(1);b[0]=a;var
c=new
Int32Array(b.buffer);return c[0]|0}var
M1=Math.pow(2,-24);function
M8(a){throw a}function
M_(){M8(bl.Division_by_zero)}function
d(a,b,c){this.lo=a&gG;this.mi=b&gG;this.hi=c&cy}d.prototype.caml_custom="_j";d.prototype.copy=function(){return new
d(this.lo,this.mi,this.hi)};d.prototype.ucompare=function(a){if(this.hi>a.hi)return 1;if(this.hi<a.hi)return-1;if(this.mi>a.mi)return 1;if(this.mi<a.mi)return-1;if(this.lo>a.lo)return 1;if(this.lo<a.lo)return-1;return 0};d.prototype.compare=function(a){var
b=this.hi<<16,c=a.hi<<16;if(b>c)return 1;if(b<c)return-1;if(this.mi>a.mi)return 1;if(this.mi<a.mi)return-1;if(this.lo>a.lo)return 1;if(this.lo<a.lo)return-1;return 0};d.prototype.neg=function(){var
a=-this.lo,b=-this.mi+(a>>24),c=-this.hi+(b>>24);return new
d(a,b,c)};d.prototype.add=function(a){var
b=this.lo+a.lo,c=this.mi+a.mi+(b>>24),e=this.hi+a.hi+(c>>24);return new
d(b,c,e)};d.prototype.sub=function(a){var
b=this.lo-a.lo,c=this.mi-a.mi+(b>>24),e=this.hi-a.hi+(c>>24);return new
d(b,c,e)};d.prototype.mul=function(a){var
b=this.lo*a.lo,c=(b*M1|0)+this.mi*a.lo+this.lo*a.mi,e=(c*M1|0)+this.hi*a.lo+this.mi*a.mi+this.lo*a.hi;return new
d(b,c,e)};d.prototype.isZero=function(){return(this.lo|this.mi|this.hi)==0};d.prototype.isNeg=function(){return this.hi<<16<0};d.prototype.and=function(a){return new
d(this.lo&a.lo,this.mi&a.mi,this.hi&a.hi)};d.prototype.or=function(a){return new
d(this.lo|a.lo,this.mi|a.mi,this.hi|a.hi)};d.prototype.xor=function(a){return new
d(this.lo^a.lo,this.mi^a.mi,this.hi^a.hi)};d.prototype.shift_left=function(a){a=a&63;if(a==0)return this;if(a<24)return new
d(this.lo<<a,this.mi<<a|this.lo>>24-a,this.hi<<a|this.mi>>24-a);if(a<48)return new
d(0,this.lo<<a-24,this.mi<<a-24|this.lo>>48-a);return new
d(0,0,this.lo<<a-48)};d.prototype.shift_right_unsigned=function(a){a=a&63;if(a==0)return this;if(a<24)return new
d(this.lo>>a|this.mi<<24-a,this.mi>>a|this.hi<<24-a,this.hi>>a);if(a<48)return new
d(this.mi>>a-24|this.hi<<48-a,this.hi>>a-24,0);return new
d(this.hi>>a-48,0,0)};d.prototype.shift_right=function(a){a=a&63;if(a==0)return this;var
c=this.hi<<16>>16;if(a<24)return new
d(this.lo>>a|this.mi<<24-a,this.mi>>a|c<<24-a,this.hi<<16>>a>>>16);var
b=this.hi<<16>>31;if(a<48)return new
d(this.mi>>a-24|this.hi<<48-a,this.hi<<16>>a-24>>16,b&cy);return new
d(this.hi<<16>>a-32,b,b)};d.prototype.lsl1=function(){this.hi=this.hi<<1|this.mi>>23;this.mi=(this.mi<<1|this.lo>>23)&gG;this.lo=this.lo<<1&gG};d.prototype.lsr1=function(){this.lo=(this.lo>>>1|this.mi<<23)&gG;this.mi=(this.mi>>>1|this.hi<<23)&gG;this.hi=this.hi>>>1};d.prototype.udivmod=function(a){var
e=0,c=this.copy(),b=a.copy(),f=new
d(0,0,0);while(c.ucompare(b)>0){e++;b.lsl1()}while(e>=0){e--;f.lsl1();if(c.ucompare(b)>=0){f.lo++;c=c.sub(b)}b.lsr1()}return{quotient:f,modulus:c}};d.prototype.div=function(a){var
b=this;if(a.isZero())M_();var
d=b.hi^a.hi;if(b.hi&ct)b=b.neg();if(a.hi&ct)a=a.neg();var
c=b.udivmod(a).quotient;if(d&ct)c=c.neg();return c};d.prototype.mod=function(a){var
b=this;if(a.isZero())M_();var
d=b.hi;if(b.hi&ct)b=b.neg();if(a.hi&ct)a=a.neg();var
c=b.udivmod(a).modulus;if(d&ct)c=c.neg();return c};d.prototype.toInt=function(){return this.lo|this.mi<<24};d.prototype.toFloat=function(){return(this.hi<<16)*Math.pow(2,32)+this.mi*Math.pow(2,24)+this.lo};d.prototype.toArray=function(){return[this.hi>>8,this.hi&hG,this.mi>>16,this.mi>>8&hG,this.mi&hG,this.lo>>16,this.lo>>8&hG,this.lo&hG]};d.prototype.lo32=function(){return this.lo|(this.mi&hG)<<24};d.prototype.hi32=function(){return this.mi>>>8&cy|this.hi<<16};function
qC(a,b,c){return new
d(a,b,c)}function
qB(a){if(!isFinite(a)){if(isNaN(a))return qC(1,0,Lb);return a>0?qC(0,0,Lb):qC(0,0,0xfff0)}var
f=a==0&&1/a==-Infinity?ct:a>=0?0:ct;if(f)a=-a;var
b=av1(a)+1023;if(b<=0){b=0;a/=Math.pow(2,-I4)}else{a/=Math.pow(2,b-LH);if(a<16){a*=2;b-=1}if(b==0)a/=2}var
d=Math.pow(2,24),c=a|0;a=(a-c)*d;var
e=a|0;a=(a-e)*d;var
g=a|0;c=c&Ci|f|b<<4;return qC(g,e,c)}function
lx(a){return a.toArray()}function
MR(a,b,c){a.write(32,b.dims.length);a.write(32,b.kind|b.layout<<8);if(b.caml_custom==nU)for(var
d=0;d<b.dims.length;d++)if(b.dims[d]<cy)a.write(16,b.dims[d]);else{a.write(16,cy);a.write(32,0);a.write(32,b.dims[d])}else
for(var
d=0;d<b.dims.length;d++)a.write(32,b.dims[d]);switch(b.kind){case
2:case
3:case
12:for(var
d=0;d<b.data.length;d++)a.write(8,b.data[d]);break;case
4:case
5:for(var
d=0;d<b.data.length;d++)a.write(16,b.data[d]);break;case
6:for(var
d=0;d<b.data.length;d++)a.write(32,b.data[d]);break;case
8:case
9:a.write(8,0);for(var
d=0;d<b.data.length;d++)a.write(32,b.data[d]);break;case
7:for(var
d=0;d<b.data.length/2;d++){var
f=lx(b.get(d));for(var
e=0;e<8;e++)a.write(8,f[e])}break;case
1:for(var
d=0;d<b.data.length;d++){var
f=lx(qB(b.get(d)));for(var
e=0;e<8;e++)a.write(8,f[e])}break;case
0:for(var
d=0;d<b.data.length;d++){var
f=Eo(b.get(d));a.write(32,f)}break;case
10:for(var
d=0;d<b.data.length/2;d++){var
e=b.get(d);a.write(32,Eo(e[1]));a.write(32,Eo(e[2]))}break;case
11:for(var
d=0;d<b.data.length/2;d++){var
g=b.get(d),f=lx(qB(g[1]));for(var
e=0;e<8;e++)a.write(8,f[e]);var
f=lx(qB(g[2]));for(var
e=0;e<8;e++)a.write(8,f[e])}break}c[0]=(4+b.dims.length)*4;c[1]=(4+b.dims.length)*8}function
MP(a){switch(a){case
7:case
10:case
11:return 2;default:return 1}}function
avg(a,b){var
c;switch(a){case
0:c=Float32Array;break;case
1:c=Float64Array;break;case
2:c=Int8Array;break;case
3:c=Uint8Array;break;case
4:c=Int16Array;break;case
5:c=Uint16Array;break;case
6:c=Int32Array;break;case
7:c=Int32Array;break;case
8:c=Int32Array;break;case
9:c=Int32Array;break;case
10:c=Float32Array;break;case
11:c=Float64Array;break;case
12:c=Uint8Array;break}if(!c)aQ("Bigarray.create: unsupported kind");var
d=new
c(b*MP(a));return d}function
Ep(a){var
b=new
Int32Array(1);b[0]=a;var
c=new
Float32Array(b.buffer);return c[0]}function
lv(a){return new
d(a[7]<<0|a[6]<<8|a[5]<<16,a[4]<<0|a[3]<<8|a[2]<<16,a[1]<<0|a[0]<<8)}function
Eq(a){var
f=a.lo,g=a.mi,c=a.hi,d=(c&0x7fff)>>4;if(d==Jo)return(f|g|c&Ci)==0?c&ct?-Infinity:Infinity:NaN;var
e=Math.pow(2,-24),b=(f*e+g)*e+(c&Ci);if(d>0){b+=16;b*=Math.pow(2,d-LH)}else
b*=Math.pow(2,-I4);if(c&ct)b=-b;return b}function
Ei(a){var
d=a.length,c=1;for(var
b=0;b<d;b++){if(a[b]<0)aQ("Bigarray.create: negative dimension");c=c*a[b]}return c}function
avv(a,b){return new
d(a&gG,a>>>24&hG|(b&cy)<<8,b>>>16&cy)}function
Er(a){return a.hi32()}function
Es(a){return a.lo32()}var
avh=nU;function
ii(a,b,c,d){this.kind=a;this.layout=b;this.dims=c;this.data=d}ii.prototype.caml_custom=avh;ii.prototype.offset=function(a){var
c=0;if(typeof
a==="number")a=[a];if(!(a
instanceof
Array))aQ("bigarray.js: invalid offset");if(this.dims.length!=a.length)aQ("Bigarray.get/set: bad number of dimensions");if(this.layout==0)for(var
b=0;b<this.dims.length;b++){if(a[b]<0||a[b]>=this.dims[b])ls();c=c*this.dims[b]+a[b]}else
for(var
b=this.dims.length-1;b>=0;b--){if(a[b]<1||a[b]>this.dims[b])ls();c=c*this.dims[b]+(a[b]-1)}return c};ii.prototype.get=function(a){switch(this.kind){case
7:var
d=this.data[a*2+0],b=this.data[a*2+1];return avv(d,b);case
10:case
11:var
e=this.data[a*2+0],c=this.data[a*2+1];return[jC,e,c];default:return this.data[a]}};ii.prototype.set=function(a,b){switch(this.kind){case
7:this.data[a*2+0]=Es(b);this.data[a*2+1]=Er(b);break;case
10:case
11:this.data[a*2+0]=b[1];this.data[a*2+1]=b[2];break;default:this.data[a]=b;break}return 0};ii.prototype.fill=function(a){switch(this.kind){case
7:var
c=Es(a),e=Er(a);if(c==e)this.data.fill(c);else
for(var
b=0;b<this.data.length;b++)this.data[b]=b%2==0?c:e;break;case
10:case
11:var
d=a[1],f=a[2];if(d==f)this.data.fill(d);else
for(var
b=0;b<this.data.length;b++)this.data[b]=b%2==0?d:f;break;default:this.data.fill(a);break}};ii.prototype.compare=function(a,b){if(this.layout!=a.layout||this.kind!=a.kind){var
f=this.kind|this.layout<<8,g=a.kind|a.layout<<8;return g-f}if(this.dims.length!=a.dims.length)return a.dims.length-this.dims.length;for(var
c=0;c<this.dims.length;c++)if(this.dims[c]!=a.dims[c])return this.dims[c]<a.dims[c]?-1:1;switch(this.kind){case
0:case
1:case
10:case
11:var
d,e;for(var
c=0;c<this.data.length;c++){d=this.data[c];e=a.data[c];if(d<e)return-1;if(d>e)return 1;if(d!=e){if(!b)return NaN;if(d==d)return 1;if(e==e)return-1}}break;case
7:for(var
c=0;c<this.data.length;c+=2){if(this.data[c+1]<a.data[c+1])return-1;if(this.data[c+1]>a.data[c+1])return 1;if(this.data[c]>>>0<a.data[c]>>>0)return-1;if(this.data[c]>>>0>a.data[c]>>>0)return 1}break;case
2:case
3:case
4:case
5:case
6:case
8:case
9:case
12:for(var
c=0;c<this.data.length;c++){if(this.data[c]<a.data[c])return-1;if(this.data[c]>a.data[c])return 1}break}return 0};function
jT(a,b,c,d){this.kind=a;this.layout=b;this.dims=c;this.data=d}jT.prototype=new
ii();jT.prototype.offset=function(a){if(typeof
a!=="number")if(a
instanceof
Array&&a.length==1)a=a[0];else
aQ("Ml_Bigarray_c_1_1.offset");if(a<0||a>=this.dims[0])ls();return a};jT.prototype.get=function(a){return this.data[a]};jT.prototype.set=function(a,b){this.data[a]=b;return 0};jT.prototype.fill=function(a){this.data.fill(a);return 0};function
MN(a,b,c,d){var
e=MP(a);if(Ei(c)*e!=d.length)aQ("length doesn't match dims");if(b==0&&c.length==1&&e==1)return new
jT(a,b,c,d);return new
ii(a,b,c,d)}function
bk(a){if(!bl.Failure)bl.Failure=[c,cF(x1),-3];EA(bl.Failure,a)}function
MO(a,b,c){var
k=a.read32s();if(k<0||k>16)bk("input_value: wrong number of bigarray dimensions");var
r=a.read32s(),l=r&hG,q=r>>8&1,j=[];if(c==nU)for(var
d=0;d<k;d++){var
p=a.read16u();if(p==cy){var
u=a.read32u(),v=a.read32u();if(u!=0)bk("input_value: bigarray dimension overflow in 32bit");p=v}j.push(p)}else
for(var
d=0;d<k;d++)j.push(a.read32u());var
f=Ei(j),h=avg(l,f),i=MN(l,q,j,h);switch(l){case
2:for(var
d=0;d<f;d++)h[d]=a.read8s();break;case
3:case
12:for(var
d=0;d<f;d++)h[d]=a.read8u();break;case
4:for(var
d=0;d<f;d++)h[d]=a.read16s();break;case
5:for(var
d=0;d<f;d++)h[d]=a.read16u();break;case
6:for(var
d=0;d<f;d++)h[d]=a.read32s();break;case
8:case
9:var
t=a.read8u();if(t)bk("input_value: cannot read bigarray with 64-bit OCaml ints");for(var
d=0;d<f;d++)h[d]=a.read32s();break;case
7:var
g=new
Array(8);for(var
d=0;d<f;d++){for(var
e=0;e<8;e++)g[e]=a.read8u();var
s=lv(g);i.set(d,s)}break;case
1:var
g=new
Array(8);for(var
d=0;d<f;d++){for(var
e=0;e<8;e++)g[e]=a.read8u();var
m=Eq(lv(g));i.set(d,m)}break;case
0:for(var
d=0;d<f;d++){var
m=Ep(a.read32s());i.set(d,m)}break;case
10:for(var
d=0;d<f;d++){var
o=Ep(a.read32s()),n=Ep(a.read32s());i.set(d,[jC,o,n])}break;case
11:var
g=new
Array(8);for(var
d=0;d<f;d++){for(var
e=0;e<8;e++)g[e]=a.read8u();var
o=Eq(lv(g));for(var
e=0;e<8;e++)g[e]=a.read8u();var
n=Eq(lv(g));i.set(d,[jC,o,n])}break}b[0]=(4+k)*4;return MN(l,q,j,h)}function
MM(a,b,c){return a.compare(b,c)}function
M4(a,b){return Math.imul(a,b)}function
hO(a,b){b=M4(b,0xcc9e2d51|0);b=b<<15|b>>>32-15;b=M4(b,0x1b873593);a^=b;a=a<<13|a>>>32-13;return(a+(a<<2)|0)+(0xe6546b64|0)|0}function
avq(a,b){a=hO(a,Es(b));a=hO(a,Er(b));return a}function
M0(a,b){return avq(a,qB(b))}function
MQ(a){var
c=Ei(a.dims),d=0;switch(a.kind){case
2:case
3:case
12:if(c>k$)c=k$;var
e=0,b=0;for(b=0;b+4<=a.data.length;b+=4){e=a.data[b+0]|a.data[b+1]<<8|a.data[b+2]<<16|a.data[b+3]<<24;d=hO(d,e)}e=0;switch(c&3){case
3:e=a.data[b+2]<<16;case
2:e|=a.data[b+1]<<8;case
1:e|=a.data[b+0];d=hO(d,e)}break;case
4:case
5:if(c>ao)c=ao;var
e=0,b=0;for(b=0;b+2<=a.data.length;b+=2){e=a.data[b+0]|a.data[b+1]<<16;d=hO(d,e)}if((c&1)!=0)d=hO(d,a.data[b]);break;case
6:if(c>64)c=64;for(var
b=0;b<c;b++)d=hO(d,a.data[b]);break;case
8:case
9:if(c>64)c=64;for(var
b=0;b<c;b++)d=hO(d,a.data[b]);break;case
7:if(c>32)c=32;c*=2;for(var
b=0;b<c;b++)d=hO(d,a.data[b]);break;case
10:c*=2;case
0:if(c>64)c=64;for(var
b=0;b<c;b++)d=M0(d,a.data[b]);break;case
11:c*=2;case
1:if(c>32)c=32;for(var
b=0;b<c;b++)d=M0(d,a.data[b]);break}return d}function
avs(a,b){b[0]=4;return a.read32s()}function
avQ(a,b){switch(a.read8u()){case
1:b[0]=4;return a.read32s();case
2:bk("input_value: native integer value too large");default:bk("input_value: ill-formed native integer")}}function
avD(a,b){var
d=new
Array(8);for(var
c=0;c<8;c++)d[c]=a.read8u();b[0]=8;return lv(d)}function
avA(a,b,c){var
e=lx(b);for(var
d=0;d<8;d++)a.write(8,e[d]);c[0]=8;c[1]=8}function
avu(a,b,c){return a.compare(b)}function
avx(a){return a.lo32()^a.hi32()}var
MW={"_j":{deserialize:avD,serialize:avA,fixed_length:8,compare:avu,hash:avx},"_i":{deserialize:avs,fixed_length:4},"_n":{deserialize:avQ,fixed_length:4},"_bigarray":{deserialize:function(a,b){return MO(a,b,"_bigarray")},serialize:MR,compare:MM,hash:MQ},"_bigarr02":{deserialize:function(a,b){return MO(a,b,nU)},serialize:MR,compare:MM,hash:MQ}};function
Ek(a){return MW[a.caml_custom]&&MW[a.caml_custom].compare}function
MU(a,b,c,d){var
f=Ek(b);if(f){var
e=c>0?f(b,a,d):f(a,b,d);if(d&&e!=e)return c;if(+e!=+e)return+e;if((e|0)!=0)return e|0}return c}function
Ew(a){return typeof
a==="string"&&!/[^\x00-\xff]/.test(a)}function
Ev(a){return a
instanceof
hK}function
MV(a){if(typeof
a==="number")return lg;else if(Ev(a))return iW;else if(Ew(a))return 1252;else if(a
instanceof
Array&&a[0]===a[0]>>>0&&a[0]<=la){var
b=a[0]|0;return b==jC?0:b}else if(a
instanceof
String)return MC;else if(typeof
a=="string")return MC;else if(a
instanceof
Number)return lg;else if(a&&a.caml_custom)return v9;else if(a&&a.compare)return 1256;else if(typeof
a=="function")return 1247;else if(typeof
a=="symbol")return 1251;return 1001}function
ci(a,b){if(a<b)return-1;if(a==b)return 0;return 1}function
z(a,b){return a<b?-1:a>b?1:0}function
avk(a,b){a.t&6&&qz(a);b.t&6&&qz(b);return a.c<b.c?-1:a.c>b.c?1:0}function
qx(a,b,c){var
f=[];for(;;){if(!(c&&a===b)){var
e=MV(a);if(e==js){a=a[1];continue}var
g=MV(b);if(g==js){b=b[1];continue}if(e!==g){if(e==lg){if(g==v9)return MU(a,b,-1,c);return-1}if(g==lg){if(e==v9)return MU(b,a,1,c);return 1}return e<g?-1:1}switch(e){case
247:aQ(zr);break;case
248:var
d=ci(a[2],b[2]);if(d!=0)return d|0;break;case
249:aQ(zr);break;case
250:aQ("equal: got Forward_tag, should not happen");break;case
251:aQ("equal: abstract value");break;case
252:if(a!==b){var
d=avk(a,b);if(d!=0)return d|0}break;case
253:aQ("equal: got Double_tag, should not happen");break;case
254:aQ("equal: got Double_array_tag, should not happen");break;case
255:aQ("equal: got Custom_tag, should not happen");break;case
1247:aQ(zr);break;case
1255:var
i=Ek(a);if(i!=Ek(b))return a.caml_custom<b.caml_custom?-1:1;if(!i)aQ("compare: abstract value");var
d=i(a,b,c);if(d!=d)return c?-1:d;if(d!==(d|0))return-1;if(d!=0)return d|0;break;case
1256:var
d=a.compare(b,c);if(d!=d)return c?-1:d;if(d!==(d|0))return-1;if(d!=0)return d|0;break;case
1000:a=+a;b=+b;if(a<b)return-1;if(a>b)return 1;if(a!=b){if(!c)return NaN;if(a==a)return 1;if(b==b)return-1}break;case
1001:if(a<b)return-1;if(a>b)return 1;if(a!=b){if(!c)return NaN;if(a==a)return 1;if(b==b)return-1}break;case
1251:if(a!==b){if(!c)return NaN;return 1}break;case
1252:var
a=hP(a),b=hP(b);if(a!==b){if(a<b)return-1;if(a>b)return 1}break;case
12520:var
a=a.toString(),b=b.toString();if(a!==b){if(a<b)return-1;if(a>b)return 1}break;case
246:case
254:default:if(avE(e)){aQ("compare: continuation value");break}if(a.length!=b.length)return a.length<b.length?-1:1;if(a.length>1)f.push(a,b,1);break}}if(f.length==0)return 0;var
h=f.pop();b=f.pop();a=f.pop();if(h+1<a.length)f.push(a,b,h+1);a=a[h];b=b[h]}}function
MT(a,b){return qx(a,b,true)}function
avm(){return[0]}function
as(a){if(a<0)aQ("Bytes.create");return new
hK(a?2:9,y,a)}function
lu(a,b){return+(qx(a,b,false)==0)}function
avo(a,b,c,d){if(c>0)if(b==0&&(c>=a.l||a.t==2&&c>=a.c.length))if(d==0){a.c=y;a.t=2}else{a.c=jW(c,String.fromCharCode(d));a.t=c==a.l?0:2}else{if(a.t!=4)qy(a);for(c+=b;b<c;b++)a.c[b]=d}return 0}function
Em(a){var
b;a=hP(a);b=+a;if(a.length>0&&b===b)return b;a=a.replace(/_/g,y);b=+a;if(a.length>0&&b===b||/^[+-]?nan$/i.test(a))return b;var
c=/^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)(p([+-]?[0-9]+))?/i.exec(a);if(c){var
d=c[3].replace(/0+$/,y),f=parseInt(c[1]+c[2]+d,16),e=(c[5]|0)-4*d.length;b=f*Math.pow(2,e);return b}if(/^\+?inf(inity)?$/i.test(a))return Infinity;if(/^-inf(inity)?$/i.test(a))return-Infinity;bk("float_of_string")}function
Ez(a){a=hP(a);var
e=a.length;if(e>31)aQ("format_int: format too long");var
b={justify:hA,signstyle:cd,filler:cg,alternate:false,base:0,signedconv:false,width:0,uppercase:false,sign:1,prec:-1,conv:L5};for(var
d=0;d<e;d++){var
c=a.charAt(d);switch(c){case"-":b.justify=cd;break;case"+":case" ":b.signstyle=c;break;case"0":b.filler=bq;break;case"#":b.alternate=true;break;case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":b.width=0;while(c=a.charCodeAt(d)-48,c>=0&&c<=9){b.width=b.width*10+c;d++}d--;break;case".":b.prec=0;d++;while(c=a.charCodeAt(d)-48,c>=0&&c<=9){b.prec=b.prec*10+c;d++}d--;case"d":case"i":b.signedconv=true;case"u":b.base=10;break;case"x":b.base=16;break;case"X":b.base=16;b.uppercase=true;break;case"o":b.base=8;break;case"e":case"f":case"g":b.signedconv=true;b.conv=c;break;case"E":case"F":case"G":b.signedconv=true;b.uppercase=true;b.conv=c.toLowerCase();break}}return b}function
El(a,b){if(a.uppercase)b=b.toUpperCase();var
e=b.length;if(a.signedconv&&(a.sign<0||a.signstyle!=cd))e++;if(a.alternate){if(a.base==8)e+=1;if(a.base==16)e+=2}var
c=y;if(a.justify==hA&&a.filler==cg)for(var
d=e;d<a.width;d++)c+=cg;if(a.signedconv)if(a.sign<0)c+=cd;else if(a.signstyle!=cd)c+=a.signstyle;if(a.alternate&&a.base==8)c+=bq;if(a.alternate&&a.base==16)c+=a.uppercase?"0X":ie;if(a.justify==hA&&a.filler==bq)for(var
d=e;d<a.width;d++)c+=bq;c+=b;if(a.justify==cd)for(var
d=e;d<a.width;d++)c+=cg;return cF(c)}function
En(a,b){function
j(a,b){if(Math.abs(a)<1.0)return a.toFixed(b);else{var
c=parseInt(a.toString().split(hA)[1]);if(c>20){c-=20;a/=Math.pow(10,c);a+=new
Array(c+1).join(bq);if(b>0)a=a+c0+new
Array(b+1).join(bq);return a}else
return a.toFixed(b)}}var
c,f=Ez(a),e=f.prec<0?6:f.prec;if(b<0||b==0&&1/b==-Infinity){f.sign=-1;b=-b}if(isNaN(b)){c=Bo;f.filler=cg}else if(!isFinite(b)){c="inf";f.filler=cg}else
switch(f.conv){case"e":var
c=b.toExponential(e),d=c.length;if(c.charAt(d-3)==vq)c=c.slice(0,d-1)+bq+c.slice(d-1);break;case"f":c=j(b,e);break;case"g":e=e?e:1;c=b.toExponential(e-1);var
i=c.indexOf(vq),h=+c.slice(i+1);if(h<-4||b>=1e21||b.toFixed(0).length>e){var
d=i-1;while(c.charAt(d)==bq)d--;if(c.charAt(d)==c0)d--;c=c.slice(0,d+1)+c.slice(i);d=c.length;if(c.charAt(d-3)==vq)c=c.slice(0,d-1)+bq+c.slice(d-1);break}else{var
g=e;if(h<0){g-=h+1;c=b.toFixed(g)}else
while(c=b.toFixed(g),c.length>e+1)g--;if(g){var
d=c.length-1;while(c.charAt(d)==bq)d--;if(c.charAt(d)==c0)d--;c=c.slice(0,d+1)}}break}return El(f,c)}function
qA(a,b){if(hP(a)==lc)return cF(y+b);var
c=Ez(a);if(b<0)if(c.signedconv){c.sign=-1;b=-b}else
b>>>=0;var
d=b.toString(c.base);if(c.prec>=0){c.filler=cg;var
e=c.prec-d.length;if(e>0)d=jW(e,bq)+d}return El(c,d)}var
M6=0;function
hN(){return M6++}function
MY(){return[0]}var
qF=[];function
K(a,b,c){var
e=a[1],i=qF[c];if(i===undefined)for(var
h=qF.length;h<c;h++)qF[h]=0;else if(e[i]===b)return e[i-1];var
d=3,g=e[1]*2+1,f;while(d<g){f=d+g>>1|1;if(b<e[f+1])g=f-2;else
d=f}qF[c]=d+1;return b==e[d+1]?e[d]:0}function
av0(a){for(var
f=y,c=f,b,h,d=0,g=a.length;d<g;d++){b=a.charCodeAt(d);if(b<cC){for(var
e=d+1;e<g&&(b=a.charCodeAt(e))<cC;e++);if(e-d>xY){c.substr(0,1);f+=c;c=y;f+=a.slice(d,e)}else
c+=a.slice(d,e);if(e==g)break;d=e}if(b<KP){c+=String.fromCharCode(0xc0|b>>6);c+=String.fromCharCode(cC|b&jK)}else if(b<0xd800||b>=LX)c+=String.fromCharCode(J7|b>>12,cC|b>>6&jK,cC|b&jK);else if(b>=0xdbff||d+1==g||(h=a.charCodeAt(d+1))<I_||h>LX)c+="\xef\xbf\xbd";else{d++;b=(b<<10)+h-0x35fdc00;c+=String.fromCharCode(KY|b>>18,cC|b>>12&jK,cC|b>>6&jK,cC|b&jK)}if(c.length>k3){c.substr(0,1);f+=c;c=y}}return f+c}function
ck(a){return EE(a)?cF(a):cF(av0(a))}function
avr(a,b,c){if(!isFinite(a)){if(isNaN(a))return ck(Bo);return ck(a>0?Ls:"-infinity")}var
j=a==0&&1/a==-Infinity?1:a>=0?0:1;if(j)a=-a;var
e=0;if(a==0);else if(a<1)while(a<1&&e>-1022){a*=2;e--}else
while(a>=2){a/=2;e++}var
k=e<0?y:hA,f=y;if(j)f=cd;else
switch(c){case
43:f=hA;break;case
32:f=cg;break;default:break}if(b>=0&&b<13){var
h=Math.pow(2,b*4);a=Math.round(a*h)/h}var
d=a.toString(16);if(b>=0){var
i=d.indexOf(c0);if(i<0)d+=c0+jW(b,bq);else{var
g=i+1+b;if(d.length<g)d+=jW(g-d.length,bq);else
d=d.substr(0,g)}}return ck(f+ie+d+"p"+k+e.toString(10))}function
avz(a){return+a.isZero()}function
qD(a){return new
d(a&gG,a>>24&gG,a>>31&cy)}function
avC(a){return a.toInt()}function
avy(a){return+a.isNeg()}function
Et(a){return a.neg()}function
avw(a,b){var
c=Ez(a);if(c.signedconv&&avy(b)){c.sign=-1;b=Et(b)}var
d=y,h=qD(c.base),g="0123456789abcdef";do{var
f=b.udivmod(h);b=f.quotient;d=g.charAt(avC(f.modulus))+d}while(!avz(b));if(c.prec>=0){c.filler=cg;var
e=c.prec-d.length;if(e>0)d=jW(e,bq)+d}return El(c,d)}function
H(a){return a.length}function
v(a,b){return a.charCodeAt(b)}function
avt(a,b){return a.add(b)}function
avB(a,b){return a.mul(b)}function
Eu(a,b){return a.ucompare(b)<0}function
M7(a){var
b=0,e=H(a),c=10,d=1;if(e>0)switch(v(a,b)){case
45:b++;d=-1;break;case
43:b++;d=1;break}if(b+1<e&&v(a,b)==48)switch(v(a,b+1)){case
120:case
88:c=16;b+=2;break;case
111:case
79:c=8;b+=2;break;case
98:case
66:c=2;b+=2;break;case
117:case
85:b+=2;break}return[b,d,c]}function
qG(a){if(a>=48&&a<=57)return a-48;if(a>=65&&a<=90)return a-55;if(a>=97&&a<=af)return a-87;return-1}function
lw(a){var
h=M7(a),g=h[0],j=h[1],e=h[2],i=qD(e),k=new
d(gG,0xfffffff,cy).udivmod(i).quotient,f=v(a,g),b=qG(f);if(b<0||b>=e)bk(hF);var
c=qD(b);for(;;){g++;f=v(a,g);if(f==95)continue;b=qG(f);if(b<0||b>=e)break;if(Eu(k,c))bk(hF);b=qD(b);c=avt(avB(i,c),b);if(Eu(c,b))bk(hF)}if(g!=H(a))bk(hF);if(e==10&&Eu(new
d(0,0,ct),c))bk(hF);if(j<0)c=Et(c);return c}function
qE(a){return a.toFloat()}function
b2(a){var
h=M7(a),d=h[0],i=h[1],e=h[2],g=H(a),j=-1>>>0,f=d<g?v(a,d):0,c=qG(f);if(c<0||c>=e)bk(hF);var
b=c;for(d++;d<g;d++){f=v(a,d);if(f==95)continue;c=qG(f);if(c<0||c>=e)break;b=e*b+c;if(b>j)bk(hF)}if(d!=g)bk(hF);b=i*b;if(e==10&&(b|0)!=b)bk(hF);return b|0}function
avG(a){return a.slice(1)}function
L(a){if(EE(a))return a;return Nc(a)}function
avI(a){var
c={};for(var
b=1;b<a.length;b++){var
d=a[b];c[L(d[1])]=d[2]}return c}var
qw=hM;function
avH(a){return a.l>=0?a.l:a.l=a.length}function
avJ(a){return function(){var
d=avH(a),c=new
Array(d);for(var
b=0;b<d;b++)c[b]=arguments[b];return qw(a,c)}}function
avK(a,b){return+(qx(a,b,false)<0)}function
jV(a,b){if(a<0)ls();var
a=a+1|0,c=new
Array(a);c[0]=0;for(var
d=1;d<a;d++)c[d]=b;return c}function
b3(a){return a.l}function
avM(){return 0}function
Y(a){EA(bl.Sys_error,a)}var
hQ=new
Array();function
hj(a){var
b=hQ[a];if(!b.opened)Y("Cannot flush a closed channel");if(!b.buffer||b.buffer_curr==0)return 0;if(b.output)b.output(qI(b.buffer,0,b.buffer_curr));else
b.file.write(b.offset,b.buffer,0,b.buffer_curr);b.offset+=b.buffer_curr;b.buffer_curr=0;return 0}function
ML(){}function
av8(a){var
d=H(a),c=new
Array(d),b=0;for(;b<d;b++)c[b]=v(a,b);return c}function
Nb(a){if(a.t!=4)qy(a);return a.c}function
cE(a,b){this.fs=__nccwpck_require__(7147);this.fd=a;this.flags=b}cE.prototype=new
ML();cE.prototype.constructor=cE;cE.prototype.truncate=function(a){try{this.fs.ftruncateSync(this.fd,a|0)}catch(f){Y(f.toString())}};cE.prototype.length=function(){try{return this.fs.fstatSync(this.fd).size}catch(f){Y(f.toString())}};cE.prototype.write=function(a,b,c,d){try{if(this.flags.isCharacterDevice)this.fs.writeSync(this.fd,b,c,d);else
this.fs.writeSync(this.fd,b,c,d,a)}catch(f){Y(f.toString())}return 0};cE.prototype.read=function(a,b,c,d){try{if(this.flags.isCharacterDevice)var
e=this.fs.readSync(this.fd,b,c,d);else
var
e=this.fs.readSync(this.fd,b,c,d,a);return e}catch(f){Y(f.toString())}};cE.prototype.close=function(){try{this.fs.closeSync(this.fd);return 0}catch(f){Y(f.toString())}};function
avZ(a,b){if(b.name)try{var
d=__nccwpck_require__(7147),c=d.openSync(b.name,"rs");return new
cE(c,b)}catch(f){}return new
cE(a,b)}var
qJ=new
Array(3);function
lz(){return typeof
al.process!=="undefined"&&typeof
al.process.versions!=="undefined"&&typeof
al.process.versions.node!=="undefined"}function
av3(){function
a(a){if(a.charAt(0)===bt)return[y,a.substring(1)];return}function
b(a){var
g=/^([a-zA-Z]:|[\\/]{2}[^\\/]+[\\/]+[^\\/]+)?([\\/])?([\s\S]*?)$/,b=g.exec(a),c=b[1]||y,e=Boolean(c&&c.charAt(1)!==iL);if(Boolean(b[2]||e)){var
d=b[1]||y,f=b[2]||y;return[d,a.substring(d.length+f.length)]}return}return lz()&&al.process&&al.process.platform?al.process.platform===Mm?b:a:a}var
EF=av3();function
Na(a){return a.slice(-1)!==bt?a+bt:a}if(lz()&&al.process&&al.process.cwd)var
lt=al.process.cwd().replace(/\\/g,bt);else
var
lt="/static";lt=Na(lt);function
avL(a){a=L(a);if(!EF(a))a=lt+a;var
e=EF(a),d=e[1].split(bt),b=[];for(var
c=0;c<d.length;c++)switch(d[c]){case"..":if(b.length>1)b.pop();break;case".":break;case"":break;default:b.push(d[c]);break}b.unshift(e[0]);b.orig=a;return b}var
av6=["E2BIG","EACCES","EAGAIN",Da,"EBUSY","ECHILD","EDEADLK","EDOM",Je,"EFAULT","EFBIG","EINTR","EINVAL","EIO","EISDIR","EMFILE","EMLINK","ENAMETOOLONG","ENFILE","ENODEV",xl,"ENOEXEC","ENOLCK","ENOMEM","ENOSPC","ENOSYS",yh,MF,"ENOTTY","ENXIO","EPERM","EPIPE","ERANGE","EROFS","ESPIPE","ESRCH","EXDEV","EWOULDBLOCK","EINPROGRESS","EALREADY","ENOTSOCK","EDESTADDRREQ","EMSGSIZE","EPROTOTYPE","ENOPROTOOPT","EPROTONOSUPPORT","ESOCKTNOSUPPORT","EOPNOTSUPP","EPFNOSUPPORT","EAFNOSUPPORT","EADDRINUSE","EADDRNOTAVAIL","ENETDOWN","ENETUNREACH","ENETRESET","ECONNABORTED","ECONNRESET","ENOBUFS","EISCONN","ENOTCONN","ESHUTDOWN","ETOOMANYREFS","ETIMEDOUT","ECONNREFUSED","EHOSTDOWN","EHOSTUNREACH","ELOOP","EOVERFLOW"];function
hS(a,b,c,d){var
e=av6.indexOf(a);if(e<0){if(d==null)d=-9999;e=[0,d]}var
f=[e,ck(b||y),ck(c||y)];return f}var
M5={};function
ij(a){return M5[a]}function
hR(a,b){throw t([0,a].concat(b))}function
Ej(a){if(!(a
instanceof
Uint8Array))a=new
Uint8Array(a);return new
hK(4,a,a.length)}function
M9(a){Y(a+qn)}function
bu(a){this.data=a}bu.prototype=new
ML();bu.prototype.constructor=bu;bu.prototype.truncate=function(a){var
b=this.data;this.data=as(a|0);hL(b,0,this.data,0,a)};bu.prototype.length=function(){return b3(this.data)};bu.prototype.write=function(a,b,c,d){var
e=this.length();if(a+d>=e){var
f=as(a+d),g=this.data;this.data=f;hL(g,0,this.data,0,e)}hL(Ej(b),c,this.data,a,d);return 0};bu.prototype.read=function(a,b,c,d){var
e=this.length();if(a+d>=e)d=e-a;if(d){var
f=as(d|0);hL(this.data,a,f,0,d);b.set(Nb(f),c)}return d};function
i1(a,b,c){this.file=b;this.name=a;this.flags=c}i1.prototype.err_closed=function(){Y(this.name+Mr)};i1.prototype.length=function(){if(this.file)return this.file.length();this.err_closed()};i1.prototype.write=function(a,b,c,d){if(this.file)return this.file.write(a,b,c,d);this.err_closed()};i1.prototype.read=function(a,b,c,d){if(this.file)return this.file.read(a,b,c,d);this.err_closed()};i1.prototype.close=function(){this.file=undefined};function
a4(a,b){this.content={};this.root=a;this.lookupFun=b}a4.prototype.nm=function(a){return this.root+a};a4.prototype.create_dir_if_needed=function(a){var
d=a.split(bt),c=y;for(var
b=0;b<d.length-1;b++){c+=d[b]+bt;if(this.content[c])continue;this.content[c]=Symbol("directory")}};a4.prototype.slash=function(a){return/\/$/.test(a)?a:a+bt};a4.prototype.lookup=function(a){if(!this.content[a]&&this.lookupFun){var
b=this.lookupFun(cF(this.root),cF(a));if(b!==0){this.create_dir_if_needed(a);this.content[a]=new
bu(hi(b[1]))}}};a4.prototype.exists=function(a){if(a==y)return 1;var
b=this.slash(a);if(this.content[b])return 1;this.lookup(a);return this.content[a]?1:0};a4.prototype.isFile=function(a){return this.exists(a)&&!this.is_dir(a)?1:0};a4.prototype.mkdir=function(a,b,c){var
e=c&&ij(oC);if(this.exists(a))if(e)hR(e,hS(Je,zc,this.nm(a)));else
Y(a+": File exists");var
d=/^(.*)\/[^/]+/.exec(a);d=d&&d[1]||y;if(!this.exists(d))if(e)hR(e,hS(xl,zc,this.nm(d)));else
Y(d+qn);if(!this.is_dir(d))if(e)hR(e,hS(yh,zc,this.nm(d)));else
Y(d+Bl);this.create_dir_if_needed(this.slash(a))};a4.prototype.rmdir=function(a,b){var
c=b&&ij(oC),d=a==y?y:this.slash(a),f=new
RegExp(on+d+IU);if(!this.exists(a))if(c)hR(c,hS(xl,DZ,this.nm(a)));else
Y(a+qn);if(!this.is_dir(a))if(c)hR(c,hS(yh,DZ,this.nm(a)));else
Y(a+Bl);for(var
e
in
this.content)if(e.match(f))if(c)hR(c,hS(MF,DZ,this.nm(a)));else
Y(this.nm(a)+": Directory not empty");delete
this.content[d]};a4.prototype.readdir=function(a){var
f=a==y?y:this.slash(a);if(!this.exists(a))Y(a+qn);if(!this.is_dir(a))Y(a+Bl);var
g=new
RegExp(on+f+IU),d={},c=[];for(var
e
in
this.content){var
b=e.match(g);if(b&&!d[b[1]]){d[b[1]]=true;c.push(b[1])}}return c};a4.prototype.opendir=function(a,b){var
c=b&&ij(oC),d=this.readdir(a),e=false,f=0;return{readSync:function(){if(e)if(c)hR(c,hS(Da,Lh,this.nm(a)));else
Y(a+J2);if(f==d.length)return null;var
b=d[f];f++;return{name:b}},closeSync:function(){if(e)if(c)hR(c,hS(Da,Lh,this.nm(a)));else
Y(a+J2);e=true;d=[]}}};a4.prototype.is_dir=function(a){if(a==y)return true;var
b=this.slash(a);return this.content[b]?1:0};a4.prototype.unlink=function(a){var
b=this.content[a]?true:false;delete
this.content[a];return b};a4.prototype.open=function(a,b){var
c;if(b.rdonly&&b.wronly)Y(this.nm(a)+Ae);if(b.text&&b.binary)Y(this.nm(a)+s8);this.lookup(a);if(this.content[a]){if(this.is_dir(a))Y(this.nm(a)+Ld);if(b.create&&b.excl)Y(this.nm(a)+y8);c=this.content[a];if(b.truncate)c.truncate()}else if(b.create){this.create_dir_if_needed(a);this.content[a]=new
bu(as(0));c=this.content[a]}else
M9(this.nm(a));return new
i1(this.nm(a),c,b)};a4.prototype.open=function(a,b){var
c;if(b.rdonly&&b.wronly)Y(this.nm(a)+Ae);if(b.text&&b.binary)Y(this.nm(a)+s8);this.lookup(a);if(this.content[a]){if(this.is_dir(a))Y(this.nm(a)+Ld);if(b.create&&b.excl)Y(this.nm(a)+y8);c=this.content[a];if(b.truncate)c.truncate()}else if(b.create){this.create_dir_if_needed(a);this.content[a]=new
bu(as(0));c=this.content[a]}else
M9(this.nm(a));return new
i1(this.nm(a),c,b)};a4.prototype.register=function(a,b){var
c;if(this.content[a])Y(this.nm(a)+y8);if(Ev(b))c=new
bu(b);if(Ew(b))c=new
bu(hi(b));else if(b
instanceof
Array)c=new
bu(Ej(b));else if(typeof
b==="string")c=new
bu(MS(b));else if(b.toString){var
d=hi(ck(b.toString()));c=new
bu(d)}if(c){this.create_dir_if_needed(a);this.content[a]=c}else
Y(this.nm(a)+" : registering file with invalid content type")};a4.prototype.constructor=a4;function
aP(a){this.fs=__nccwpck_require__(7147);this.root=a}aP.prototype.nm=function(a){return this.root+a};aP.prototype.exists=function(a){try{return this.fs.existsSync(this.nm(a))?1:0}catch(f){return 0}};aP.prototype.isFile=function(a){try{return this.fs.statSync(this.nm(a)).isFile()?1:0}catch(f){Y(f.toString())}};aP.prototype.mkdir=function(a,b,c){try{this.fs.mkdirSync(this.nm(a),{mode:b});return 0}catch(f){this.raise_nodejs_error(f,c)}};aP.prototype.rmdir=function(a,b){try{this.fs.rmdirSync(this.nm(a));return 0}catch(f){this.raise_nodejs_error(f,b)}};aP.prototype.readdir=function(a,b){try{return this.fs.readdirSync(this.nm(a))}catch(f){this.raise_nodejs_error(f,b)}};aP.prototype.is_dir=function(a){try{return this.fs.statSync(this.nm(a)).isDirectory()?1:0}catch(f){Y(f.toString())}};aP.prototype.unlink=function(a,b){try{var
c=this.fs.existsSync(this.nm(a))?1:0;this.fs.unlinkSync(this.nm(a));return c}catch(f){this.raise_nodejs_error(f,b)}};aP.prototype.open=function(a,b,c){var
d=__nccwpck_require__(2057),e=0;for(var
h
in
b)switch(h){case"rdonly":e|=d.O_RDONLY;break;case"wronly":e|=d.O_WRONLY;break;case"append":e|=d.O_WRONLY|d.O_APPEND;break;case"create":e|=d.O_CREAT;break;case"truncate":e|=d.O_TRUNC;break;case"excl":e|=d.O_EXCL;break;case"binary":e|=d.O_BINARY;break;case"text":e|=d.O_TEXT;break;case"nonblock":e|=d.O_NONBLOCK;break}try{var
f=this.fs.openSync(this.nm(a),e),g=this.fs.lstatSync(this.nm(a)).isCharacterDevice();b.isCharacterDevice=g;return new
cE(f,b)}catch(f){this.raise_nodejs_error(f,c)}};aP.prototype.rename=function(a,b,c){try{this.fs.renameSync(this.nm(a),this.nm(b))}catch(f){this.raise_nodejs_error(f,c)}};aP.prototype.stat=function(a,b){try{var
c=this.fs.statSync(this.nm(a));return this.stats_from_js(c)}catch(f){this.raise_nodejs_error(f,b)}};aP.prototype.lstat=function(a,b){try{var
c=this.fs.lstatSync(this.nm(a));return this.stats_from_js(c)}catch(f){this.raise_nodejs_error(f,b)}};aP.prototype.symlink=function(a,b,c,d){try{this.fs.symlinkSync(this.nm(b),this.nm(c),a?"dir":"file");return 0}catch(f){this.raise_nodejs_error(f,d)}};aP.prototype.readlink=function(a,b){try{var
c=this.fs.readlinkSync(this.nm(a),"utf8");return ck(c)}catch(f){this.raise_nodejs_error(f,b)}};aP.prototype.opendir=function(a,b){try{return this.fs.opendirSync(this.nm(a))}catch(f){this.raise_nodejs_error(f,b)}};aP.prototype.raise_nodejs_error=function(a,b){var
c=ij(oC);if(b&&c){var
d=hS(a.code,a.syscall,a.path,a.errno);hR(c,d)}else
Y(a.toString())};aP.prototype.stats_from_js=function(a){var
b;if(a.isFile())b=0;else if(a.isDirectory())b=1;else if(a.isCharacterDevice())b=2;else if(a.isBlockDevice())b=3;else if(a.isSymbolicLink())b=4;else if(a.isFIFO())b=5;else if(a.isSocket())b=6;return[0,a.dev,a.ino,b,a.mode,a.nlink,a.uid,a.gid,a.rdev,a.size,a.atimeMs,a.mtimeMs,a.ctimeMs]};aP.prototype.constructor=aP;function
MZ(a){var
b=EF(a);if(!b)return;return b[0]+bt}var
qH=MZ(lt)||bk("unable to compute caml_root"),jX=[];if(lz())jX.push({path:qH,device:new
aP(qH)});else
jX.push({path:qH,device:new
a4(qH)});jX.push({path:IV,device:new
a4(IV)});function
av5(a){var
g=avL(a),a=g.join(bt),f=Na(a),c;for(var
e=0;e<jX.length;e++){var
b=jX[e];if(f.search(b.path)==0&&(!c||c.path.length<b.path.length))c={path:b.path,device:b.device,rest:a.substring(b.path.length,a.length)}}if(!c&&lz()){var
d=MZ(a);if(d&&d.match(/^[a-zA-Z]:\/$/)){var
b={path:d,device:new
aP(d)};jX.push(b);c={path:b.path,device:b.device,rest:a.substring(b.path.length,a.length)}}}if(c)return c;Y("no device found for "+f)}function
lr(a,b){bu.call(this,as(0));this.log=function(a){return 0};if(a==1&&typeof
console.log=="function")this.log=console.log;else if(a==2&&typeof
console.error=="function")this.log=console.error;else if(typeof
console.log=="function")this.log=console.log;this.flags=b}lr.prototype.length=function(){return 0};lr.prototype.write=function(a,b,c,d){if(this.log){if(d>0&&c>=0&&c+d<=b.length&&b[c+d-1]==10)d--;var
e=as(d);hL(Ej(b),c,e,0,d);this.log(e.toUtf16());return 0}Y(this.fd+Mr)};lr.prototype.read=function(a,b,c,d){Y(this.fd+": file descriptor is write only")};lr.prototype.close=function(){this.log=undefined};function
qK(a,b){if(b==undefined)b=qJ.length;qJ[b]=a;return b|0}function
av7(a,b,c){var
d={};while(b){switch(b[1]){case
0:d.rdonly=1;break;case
1:d.wronly=1;break;case
2:d.append=1;break;case
3:d.create=1;break;case
4:d.truncate=1;break;case
5:d.excl=1;break;case
6:d.binary=1;break;case
7:d.text=1;break;case
8:d.nonblock=1;break}b=b[2]}if(d.rdonly&&d.wronly)Y(hP(a)+Ae);if(d.text&&d.binary)Y(hP(a)+s8);var
e=av5(a),f=e.device.open(e.rest,d);return qK(f,undefined)}(function(){function
a(a,b){return lz()?avZ(a,b):new
lr(a,b)}qK(a(0,{rdonly:1,altname:"/dev/stdin",isCharacterDevice:true}),0);qK(a(1,{buffered:2,wronly:1,isCharacterDevice:true}),1);qK(a(2,{buffered:2,wronly:1,isCharacterDevice:true}),2)}());function
avN(a){var
b=qJ[a];if(b.flags.wronly)Y(J0+a+" is writeonly");var
d=null,c={file:b,offset:b.flags.append?b.length():0,fd:a,opened:true,out:false,buffer_curr:0,buffer_max:0,buffer:new
Uint8Array(kU),refill:d};hQ[c.fd]=c;return c.fd}function
M2(a){var
b=qJ[a];if(b.flags.rdonly)Y(J0+a+" is readonly");var
d=b.flags.buffered!==undefined?b.flags.buffered:1,c={file:b,offset:b.flags.append?b.length():0,fd:a,opened:true,out:true,buffer_curr:0,buffer:new
Uint8Array(kU),buffered:d};hQ[c.fd]=c;return c.fd}function
avO(){var
b=0;for(var
a=0;a<hQ.length;a++)if(hQ[a]&&hQ[a].opened&&hQ[a].out)b=[0,hQ[a].fd,b];return b}function
ba(a){a.t&6&&qz(a);return cF(a.c)}function
avP(a,b,c,d){var
e=hQ[a];if(!e.opened)Y("Cannot output to a closed channel");var
b=Nb(b);b=b.subarray(c,c+d);if(e.buffer_curr+b.length>e.buffer.length){var
g=new
Uint8Array(e.buffer_curr+b.length);g.set(e.buffer);e.buffer=g}switch(e.buffered){case
0:e.buffer.set(b,e.buffer_curr);e.buffer_curr+=b.length;hj(a);break;case
1:e.buffer.set(b,e.buffer_curr);e.buffer_curr+=b.length;if(e.buffer_curr>=e.buffer.length)hj(a);break;case
2:var
f=b.lastIndexOf(10);if(f<0){e.buffer.set(b,e.buffer_curr);e.buffer_curr+=b.length;if(e.buffer_curr>=e.buffer.length)hj(a)}else{e.buffer.set(b.subarray(0,f+1),e.buffer_curr);e.buffer_curr+=f+1;hj(a);e.buffer.set(b.subarray(f+1),e.buffer_curr);e.buffer_curr+=b.length-f-1}break}return 0}function
Ex(a,b,c,d){return avP(a,hi(b),c,d)}function
M3(a,b){var
c=cF(String.fromCharCode(b));Ex(a,c,0,1);return 0}function
ly(a,b){return+(qx(a,b,false)!=0)}function
Ey(a,b){var
d=new
Array(b+1);d[0]=a;for(var
c=1;c<=b;c++)d[c]=0;return d}function
avR(a,b){a[0]=js;a[1]=b;return 0}function
i2(a){if(a
instanceof
Array&&a[0]==a[0]>>>0)return a[0];else if(Ev(a))return iW;else if(Ew(a))return iW;else if(a
instanceof
Function||typeof
a=="function")return ok;else if(a&&a.caml_custom)return la;else
return lg}function
avi(a){var
b;while(a)if(L(a[1][1])=="SYJS"){b=a[1][2];break}else
a=a[2];var
d={};if(b)for(var
c=1;c<b.length;c++)d[L(b[c][1])]=b[c][2];return d}function
cj(a,b,c){if(c){var
d=c;if(al.toplevelReloc)a=qw(al.toplevelReloc,[d]);else if(bl.toc){if(!bl.symbols)bl.symbols=avi(bl.toc);var
e=bl.symbols[d];if(e>=0)a=e;else
bk("caml_register_global: cannot locate "+d)}}bl[a+1]=b;if(c)bl[c]=b}function
EC(a,b){M5[hP(a)]=b;return 0}function
avU(a){a[2]=M6++;return a}function
V(a,b){if(a===b)return 1;return 0}function
avW(){aQ(zP)}function
ax(a,b){if(b>>>0>=H(a))avW();return v(a,b)}function
l(a,b){return 1-V(a,b)}function
avX(){return 0x7FFFFFFF/4|0}var
av4=al.process&&al.process.platform&&al.process.platform==Mm?IW:"Unix";function
avY(){return[0,cF(av4),32,0]}function
avS(){M8(bl.Not_found)}function
M$(a){var
b=Nd(L(a));if(b===undefined)avS();return ck(b)}function
ED(a){var
b=1;while(a&&a.joo_tramp){a=a.joo_tramp.apply(null,a.joo_args);b++}return a}function
a5(a,b){return{joo_tramp:a,joo_args:b}}function
a(a,b){if(typeof
b==="function"){a.fun=b;return 0}if(b.fun){a.fun=b.fun;return 0}var
c=b.length;while(c--)a[c]=b[c];return 0}function
ay(a){{if(a
instanceof
Array)return a;var
b;if(al.RangeError&&a
instanceof
al.RangeError&&a.message&&a.message.match(/maximum call stack/i))b=bl.Stack_overflow;else if(al.InternalError&&a
instanceof
al.InternalError&&a.message&&a.message.match(/too much recursion/i))b=bl.Stack_overflow;else if(a
instanceof
al.Error&&ij(zW))b=[0,ij(zW),a];else
b=[0,bl.Failure,ck(String(a))];if(a
instanceof
al.Error)b.js_error=a;return b}}function
avF(a){switch(a[2]){case-8:case-11:case-12:return 1;default:return 0}}function
avp(a){var
b=y;if(a[0]==0){b+=a[1][1];if(a.length==3&&a[2][0]==0&&avF(a[1]))var
f=a[2],g=1;else
var
g=2,f=a;b+=LN;for(var
e=g;e<f.length;e++){if(e>g)b+=Jw;var
d=f[e];if(typeof
d=="number")b+=d.toString();else if(d
instanceof
hK)b+=pY+d.toString()+pY;else if(typeof
d=="string")b+=pY+d.toString()+pY;else
b+=jE}b+=uD}else if(a[0]==c)b+=a[1];return b}function
MX(a){if(a
instanceof
Array&&(a[0]==0||a[0]==c)){var
d=ij(LG);if(d)qw(d,[a,false]);else{var
e=avp(a),b=ij(Ly);if(b)qw(b,[0]);console.error(v2+e+"\n");if(a.js_error)throw a.js_error}}else
throw a}function
avV(){var
c=al.process;if(c&&c.on)c.on("uncaughtException",function(a,b){MX(a);c.exit(2)});else if(al.addEventListener)al.addEventListener("error",function(a){if(a.error)MX(a.error)})}avV();function
k(a,b){return(a.l>=0?a.l:a.l=a.length)==1?a(b):hM(a,[b])}function
j(a,b,c){return(a.l>=0?a.l:a.l=a.length)==2?a(b,c):hM(a,[b,c])}function
s(a,b,c,d){return(a.l>=0?a.l:a.l=a.length)==3?a(b,c,d):hM(a,[b,c,d])}function
bA(a,b,c,d,e){return(a.l>=0?a.l:a.l=a.length)==4?a(b,c,d,e):hM(a,[b,c,d,e])}function
bJ(a,b,c,d,e,f){return(a.l>=0?a.l:a.l=a.length)==5?a(b,c,d,e,f):hM(a,[b,c,d,e,f])}function
avc(a,b,c,d,e,f,g,h){return(a.l>=0?a.l:a.l=a.length)==7?a(b,c,d,e,f,g,h):hM(a,[b,c,d,e,f,g,h])}var
qN=[c,LU,-1],EI=[c,K2,-2],cl=[c,x1,-3],qM=[c,J1,-4],a6=[c,Mk,-7],EG=[c,L7,-8],EH=[c,Jb,-9],R=[c,KK,-11],jY=[c,I6,-12],avb=[4,0,0,0,[12,45,[4,0,0,0,0]]],q3=[0,[11,'File "',[2,0,[11,'", line ',[4,0,0,0,[11,Mb,[4,0,0,0,[12,45,[4,0,0,0,[11,": ",[2,0,0]]]]]]]]]],'File "%s", line %d, characters %d-%d: %s'],i$=[0,0,[0,0,0],[0,0,0]],kk=[0,0,0,0,1,0,0,0],GP=[0,"first_leading","last_trailing"],GQ=[0,fe,fa,gL,fV,fb,g3,ep,gY,e5,eO,gB,gt,cx,fA,gi,bT,fS,du,ef,d4,g9,et,cS,dY,hc,c$,dz,gX,fk,fh,dR,g5,fE,fs,gy,gH,fv,e7,ej,ds,dI,cT,fQ,gP,da,dZ,es,gw,gq,he,gj,gh,db,bL,bN,gR,c8,gc,fl,fU,gr,gQ,cZ,ed,gl,c5,dX,de,bC,fo,dM,c_,ei,fF,dK,dq,fm,eg,cW,cX,gU,fB,gx,dG,fY,fd,g$,d7,fP,aM,df,gO,eZ,dy,ha,e$,eb,fO,g0,eo,gS,eE,eJ,fy,d0,dv,dP,gk,dF,hg,dA,fx,dk,gs,dj,ff,f1,gI,dU,fj,eF,fr,dr,fD,cb,eS,eV,dE,bg,er,dt,dm,fX,c9,eH,c1,eQ,bs,gN,dN,d9,em,eI,dQ,g2,fI,f2,en,fz,dW,e6,dL,ea,fG,di,f6,dh,dB,eU,fM,dO,go,gp,fi,gm,eN,dp,fZ,fp,eP,f0,fK,fg,f3,eT,gK,eB,gd,ex,dJ,f8,f_,eA,e1,g6,c7,g8,gC,e_,d6,fL,gz,dT,gv,cU,eW,gM,d$,fw,d1,fu,fN,gn,eX,dl,fc,cs,dV,fC,eM,gg,gb,dD,eK,dn,hb,dH,fn,eC,e4,d2,g1,d8,f5,gW,c3,e3,eG,bQ,ge,fJ,gT,gZ,dc,g7,fW,bS,gf,ey,dC,ga,gA,ek,fT,eh,bP,eD,dx,e9,gu,f$,fq,c6,bM,dS,ee,el,gV,cY,hf,hd,eq,e8,ft,cV,eR,f7,dg,e0,eL,gF,d3,d5,dw,g_,fR,gJ,ez,e2,eY,g4,ew,f4,dd,bi,c4,ec,eu,bf],cr=[0,0,0];cj(11,jY,I6);cj(10,R,KK);cj(9,[c,Mh,My],Mh);cj(8,EH,Jb);cj(7,EG,L7);cj(6,a6,Mk);cj(5,[c,Kv,-6],Kv);cj(4,[c,LF,-5],LF);cj(3,qM,J1);cj(2,cl,x1);cj(1,EI,K2);cj(0,qN,LU);var
Nl="output_substring",Ni=c0,Ng=hI,Nh=hD,Nn="CamlinternalLazy.Undefined",Nq=JX,Nr="\\'",Ns="\\b",Nt="\\t",Nu="\\n",Nv="\\r",Ny="List.iter2",Nx="tl",Nw="hd",NB="String.blit / Bytes.blit_string",NA="Bytes.blit",Nz="String.sub / Bytes.sub",NC="String.concat",NF="Array.blit",NE="Array.sub",NK="Map.remove_min_elt",NL=[0,0,0,0],NM=[0,"map.ml",400,10],NN=[0,0,0],NG=qs,NH=qs,NI=qs,NJ=qs,NO="Stdlib.Queue.Empty",NU="Buffer.add_substring/add_subbytes",NT="Buffer.add: cannot grow buffer",NS=[0,KG,93,2],NR=[0,KG,94,2],NQ="Buffer.sub",N3="%c",N4="%s",N5=KL,N6=L0,N7=Kr,N8=KU,N9="%f",N_="%B",N$="%{",Oa="%}",Ob="%(",Oc="%)",Od=Ko,Oe="%t",Of="%?",Og="%r",Oh="%_r",Oi=[0,aW,850,23],Ot=[0,aW,814,21],Ol=[0,aW,815,21],Ou=[0,aW,818,21],Om=[0,aW,819,21],Ov=[0,aW,822,19],On=[0,aW,823,19],Ow=[0,aW,826,22],Oo=[0,aW,827,22],Ox=[0,aW,831,30],Op=[0,aW,832,30],Or=[0,aW,836,26],Oj=[0,aW,837,26],Os=[0,aW,846,28],Ok=[0,aW,847,28],Oq=[0,aW,851,23],Py=[0,aW,1558,4],Pz="Printf: bad conversion %[",PA=[0,aW,1626,39],PB=[0,aW,1649,31],PC=[0,aW,1650,31],PD="Printf: bad conversion %_",PE=J8,PF=Mn,PG=J8,PH=Mn,PJ=[0,[11,"invalid box description ",[3,0,0]],"invalid box description %S"],PI=[0,0,4],Pw=Bo,Pu="neg_infinity",Pv=Ls,Pt=c0,Po=[0,cD],Pc="%+nd",Pd="% nd",Pf="%+ni",Pg="% ni",Ph="%nx",Pi="%#nx",Pj="%nX",Pk="%#nX",Pl="%no",Pm="%#no",Pb="%nd",Pe=Kr,Pn="%nu",O1="%+ld",O2="% ld",O4="%+li",O5="% li",O6="%lx",O7="%#lx",O8="%lX",O9="%#lX",O_="%lo",O$="%#lo",O0="%ld",O3=L0,Pa="%lu",OO="%+Ld",OP="% Ld",OR="%+Li",OS="% Li",OT="%Lx",OU="%#Lx",OV="%LX",OW="%#LX",OX="%Lo",OY="%#Lo",ON="%Ld",OQ=KU,OZ="%Lu",OB="%+d",OC="% d",OE="%+i",OF="% i",OG="%x",OH="%#x",OI="%X",OJ="%#X",OK="%o",OL="%#o",OA=lc,OD=KL,OM=Md,NV=jA,NW="@}",NX="@?",NY="@\n",NZ="@.",N0="@@",N1="@%",N2=Kq,Oy="CamlinternalFormat.Type_mismatch",PN=y,PO=[0,[11,Jw,[2,0,[2,0,0]]],", %s%s"],Qa=[0,[11,v2,[2,0,[12,10,0]]],Kd],Qb=[0,[11,"Fatal error in uncaught exception handler: exception ",[2,0,[12,10,0]]],"Fatal error in uncaught exception handler: exception %s\n"],P$="Fatal error: out of memory in uncaught exception handler",P9=[0,[11,v2,[2,0,[12,10,0]]],Kd],P6=[0,[2,0,[12,10,0]],"%s\n"],PY="Raised at",PZ="Re-raised at",P0="Raised by primitive operation at",P1="Called from",P2=" (inlined)",P4=y,P3=[0,[2,0,[12,32,[2,0,[11,' in file "',[2,0,[12,34,[2,0,[11,", line ",[4,0,0,0,[11,Mb,avb]]]]]]]]]],'%s %s in file "%s"%s, line %d, characters %d-%d'],P5=[0,[2,0,[11," unknown location",0]],"%s unknown location"],PT="Out of memory",PU="Stack overflow",PV="Pattern matching failed",PW="Assertion failed",PX="Undefined recursive module",PP=[0,[12,40,[2,0,[2,0,[12,41,0]]]],"(%s%s)"],PQ=y,PR=y,PS=[0,[12,40,[2,0,[12,41,0]]],"(%s)"],PM=[0,[4,0,0,0,0],lc],PK=[0,[3,0,0],lq],PL=jE,P7=[0,y,"(Cannot print locations:\n bytecode executable program file not found)","(Cannot print locations:\n bytecode executable program file appears to be corrupt)","(Cannot print locations:\n bytecode executable program file has wrong magic number)","(Cannot print locations:\n bytecode executable program file cannot be opened;\n -- too many open files. Try running with OCAMLRUNPARAM=b=2)"],Qz=[3,0,3],QA=c0,Qu=k_,Qv="<\/",Qw=y,Qq=k_,Qr=xB,Qs=y,Qo=xJ,Qk=y,Ql=y,Qm=y,Qn=y,Qj=[0,y],Qf=y,Qg=y,Qh=y,Qi=y,Qd=[0,y,0,y],Qc="Stdlib.Format.String_tag",QK=[0,"camlinternalOO.ml",ME,50],QL=[0,JT,72,5],QM=[0,JT,81,2],QN=[0,"src/wtf8.ml",65,9],QP=[0,"src/third-party/sedlex/flow_sedlexing.ml",Bu,4],QO="Flow_sedlexing.MalFormed",QV="Set.remove_min_elt",QZ=[0,[12,59,[17,[0,bB,1,0],0]],ps],QX=[0,[18,[1,[0,[11,bO,0],bO]],[12,ce,0]],"@[<2>{"],QY=[0,[12,32,0],cg],Q0=[0,[12,32,0],cg],Q1=[0,[17,[0,"@,",0,0],[12,gD,[17,0,0]]],"@,}@]"],QW=[0,"src/hack_forked/utils/collections/third-party/flow_set.ml",379,14],Q2=kX,Q3=jI,Q4=jB,Q5=k2,Q6=iX,Q7=[0,[12,40,[18,[1,[0,[11,bO,0],bO]],[11,"File_key.LibFile",[17,[0,bB,1,0],0]]]],"(@[<2>File_key.LibFile@ "],Q8=[0,[3,0,0],lq],Q9=[0,[17,0,[12,41,0]],oI],Q_=[0,[12,40,[18,[1,[0,[11,bO,0],bO]],[11,"File_key.SourceFile",[17,[0,bB,1,0],0]]]],"(@[<2>File_key.SourceFile@ "],Q$=[0,[3,0,0],lq],Ra=[0,[17,0,[12,41,0]],oI],Rb=[0,[12,40,[18,[1,[0,[11,bO,0],bO]],[11,"File_key.JsonFile",[17,[0,bB,1,0],0]]]],"(@[<2>File_key.JsonFile@ "],Rc=[0,[3,0,0],lq],Rd=[0,[17,0,[12,41,0]],oI],Re=[0,[12,40,[18,[1,[0,[11,bO,0],bO]],[11,"File_key.ResourceFile",[17,[0,bB,1,0],0]]]],"(@[<2>File_key.ResourceFile@ "],Rf=[0,[3,0,0],lq],Rg=[0,[17,0,[12,41,0]],oI],Rv=[0,1],Ru=[0,0],Rt=[0,1],Rs=[0,2],Rr=[0,0],Rq=[0,1],Rp=[0,1],Ro=[0,1],Rn=[0,1],Rm=[0,1],Rl=[0,1],Rk=[0,0,0],Rj=[0,0,0],Rh=[0,bf,eu,ec,c4,bi,dd,f4,ew,g4,eY,e2,ez,gJ,fR,g_,dw,d5,d3,gF,eL,e0,dg,f7,eR,cV,ft,e8,eq,hd,hf,cY,gV,el,ee,dS,bM,c6,fq,f$,gu,e9,dx,eD,bP,eh,fT,ek,gA,ga,dC,ey,gf,bS,fW,g7,dc,gZ,gT,fJ,ge,bQ,eG,e3,c3,gW,f5,d8,g1,d2,e4,eC,fn,dH,hb,dn,eK,dD,gb,gg,eM,fC,dV,cs,fc,dl,eX,gn,fN,fu,d1,fw,d$,gM,eW,cU,gv,dT,gz,fL,d6,e_,gC,g8,c7,g6,e1,eA,f_,f8,dJ,ex,gd,eB,gK,eT,f3,fg,fK,f0,eP,fp,fZ,dp,eN,gm,fi,gp,go,dO,fM,eU,dB,dh,f6,di,fG,ea,dL,e6,dW,fz,en,f2,fI,g2,dQ,eI,em,d9,dN,gN,bs,eQ,c1,eH,c9,fX,dm,dt,er,bg,dE,eV,eS,cb,fD,dr,fr,eF,fj,dU,gI,f1,ff,dj,gs,dk,fx,dA,hg,dF,gk,dP,dv,d0,fy,eJ,eE,gS,eo,g0,fO,eb,e$,ha,dy,eZ,gO,df,aM,fP,d7,g$,fd,fY,dG,gx,fB,gU,cX,cW,eg,fm,dq,dK,fF,ei,c_,dM,fo,bC,de,dX,c5,gl,ed,cZ,gQ,gr,fU,fl,gc,c8,gR,bN,bL,db,gh,gj,he,gq,gw,es,dZ,da,gP,fQ,cT,dI,ds,ej,e7,fv,gH,gy,fs,fE,g5,dR,fh,fk,gX,dz,c$,hc,dY,cS,et,g9,d4,ef,du,fS,bT,gi,fA,cx,gt,gB,eO,e5,gY,ep,g3,fb,fV,gL,fa,fe],Ri=[0,ga,f2,dk,fD,f1,fS,f_,d6,dh,dN,fA,cV,d1,bP,fN,d7,c$,gv,e6,dJ,eQ,fz,ei,fm,eu,dD,eF,eE,hb,gm,dZ,fr,fF,eB,cb,c4,e$,e4,gr,ef,fx,d4,ea,fB,eG,dU,gS,eD,gC,eV,ek,c9,c_,eN,gd,fk,gy,fc,fe,f5,dI,dg,fL,c3,fM,g5,fw,bQ,cU,ff,dl,gK,f6,dL,dr,eP,gh,e8,cW,eU,fp,gs,d2,fV,cZ,dG,fg,gZ,dV,gL,fo,du,gf,bi,e3,gc,dw,g7,dE,eO,eJ,dS,dQ,dz,g6,dx,bC,fO,ft,bf,fZ,ee,fl,d8,ez,eM,c8,gT,e5,e2,gH,fU,eA,ew,dW,g3,hf,d9,dq,eZ,fu,g$,dp,gg,ha,d3,hd,ds,dd,cY,dC,d5,fT,eY,dR,c1,eo,fs,f0,dj,ej,g4,fv,e1,gp,da,gY,fK,cS,gX,fQ,gb,go,cT,f3,bg,bS,g_,gF,eh,eK,bM,bN,f8,eS,gn,df,en,cs,gi,gk,dK,eH,fE,fP,dA,fI,gI,fR,eg,ge,d0,dt,cX,fY,gq,c7,ey,e_,fX,gM,fn,eq,gz,gW,eW,eL,ed,et,gQ,gt,eI,e9,dM,gV,fj,fJ,er,dT,dY,g8,fG,fh,gN,de,eR,fa,f4,dX,g9,f7,c5,di,g2,gj,fi,dH,ex,em,dy,dO,e0,f$,ep,gw,dn,gB,aM,fC,e7,gO,el,dP,dv,gA,bL,hg,gP,g1,gx,gl,fq,gu,fy,fd,gJ,g0,eX,cx,dm,hc,dB,d$,dF,gR,fW,gU,bT,fb,bs,db,ec,es,dc,eb,he,eC,c6,eT],RN=KE,RO=Ky,RP=MD,RQ=Mw,RR=xB,RS=JC,RT=k_,RU=Kc,RV=JK,RW=JE,RX=LM,RY=hA,RZ=cd,R0=L1,R1=Jx,R2=bt,R3=LA,R4=KO,R5=on,R6=nY,R7=h$,R8=kY,Ry=MB,Rz=JO,RA=Mq,RB=KC,RC=KQ,RD=LO,RE=L9,RF=JD,RG=JZ,RH=Lq,RI=IQ,RJ=KD,RK=Ll,RL=IO,RM=K9,R9=[0,[18,[1,[0,[11,bO,0],bO]],[11,Jr,0]],LV],R_="Loc.line",R$=[0,[18,[1,[0,0,y]],[2,0,[11,li,[17,[0,bB,1,0],0]]]],k0],Sa=[0,[4,0,0,0,0],lc],Sb=[0,[17,0,0],jA],Sc=[0,[12,59,[17,[0,bB,1,0],0]],ps],Sd=kR,Se=[0,[18,[1,[0,0,y]],[2,0,[11,li,[17,[0,bB,1,0],0]]]],k0],Sf=[0,[4,0,0,0,0],lc],Sg=[0,[17,0,0],jA],Sh=[0,[17,[0,bB,1,0],[12,gD,[17,0,0]]],Kt],Sz=[0,[15,0],Ko],Sm="(Some ",Sn=uD,So="None",Sj=[0,[18,[1,[0,[11,bO,0],bO]],[11,Jr,0]],LV],Sk="Loc.source",Sl=[0,[18,[1,[0,0,y]],[2,0,[11,li,[17,[0,bB,1,0],0]]]],k0],Sp=[0,[17,0,0],jA],Sq=[0,[12,59,[17,[0,bB,1,0],0]],ps],Sr=vP,Ss=[0,[18,[1,[0,0,y]],[2,0,[11,li,[17,[0,bB,1,0],0]]]],k0],St=[0,[17,0,0],jA],Su=[0,[12,59,[17,[0,bB,1,0],0]],ps],Sv="_end",Sw=[0,[18,[1,[0,0,y]],[2,0,[11,li,[17,[0,bB,1,0],0]]]],k0],Sx=[0,[17,0,0],jA],Sy=[0,[17,[0,bB,1,0],[12,gD,[17,0,0]]],Kt],SD="Object literal may not have data and accessor property with the same name",SE="Object literal may not have multiple get/set accessors with the same name",SF="Unexpected token <. Remember, adjacent JSX elements must be wrapped in an enclosing parent tag",SG="Modules can only have 1 since they are either an ES module xor they are a CommonJS module.",SH="Found both `declare module.exports` and `declare export` in the same module. ",SI="`let [` is ambiguous in this position because it is either a `let` binding pattern, or a member expression.",SJ="Async functions can only be declared at top level or immediately within another function.",SK="`await` is an invalid identifier in async functions",SL="`await` is not allowed in async function parameters.",SM="Computed properties must have a value.",SN="Constructor can't be an accessor.",SO="Constructor can't be an async function.",SP="Constructor can't be a generator.",SQ="It is sufficient for your declare function to just have a Promise return type.",SR="async is an implementation detail and isn't necessary for your declare function statement. ",SS="`declare` modifier can only appear on class fields.",ST="Unexpected token `=`. Initializers are not allowed in a `declare`.",SU="`declare export interface` is not supported. Use `export interface` instead.",SV="`declare export type` is not supported. Use `export type` instead.",SW="Unexpected token `=`. Initializers are not allowed in a `declare opaque type`.",SX="Classes may only have one constructor",SY="Duplicate `declare module.exports` statement!",SZ="Rest element must be final element of an array pattern",S0="Cannot export an enum with `export type`, try `export enum E {}` or `module.exports = E;` instead.",S1="Enum members are separated with `,`. Replace `;` with `,`.",S2="`const` enums are not supported. Flow Enums are designed to allow for inlining, however the inlining itself needs to be part of the build system (whatever you use) rather than Flow itself.",S3="Expected an object pattern, array pattern, or an identifier but found an expression instead",S4="Missing comma between export specifiers",S5="Generators can only be declared at top level or immediately within another function.",S6="Getter should have zero parameters",S7="A getter cannot have a `this` parameter.",S8="Illegal break statement",S9="Illegal continue statement",S_="Illegal return statement",S$="Illegal Unicode escape",Ta="Missing comma between import specifiers",Tb="It cannot be used with `import type` or `import typeof` statements",Tc="The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. ",Td="Explicit inexact syntax cannot appear inside an explicit exact object type",Te="Explicit inexact syntax can only appear inside an object type",Tf="Component params must be an identifier. If you'd like to destructure, you should use `name as {destructure}`",Tg="Components use `renders` instead of `:` to annotate the render type of a component.",Th="A bigint literal must be an integer",Ti="JSX value should be either an expression or a quoted JSX text",Tj="Invalid left-hand side in assignment",Tk="Invalid left-hand side in exponentiation expression",Tl="Invalid left-hand side in for-in",Tm="Invalid left-hand side in for-of",Tn="Imports within a `declare module` body must always be `import type` or `import typeof`!",To="Invalid optional indexed access. Indexed access uses bracket notation. Use the format `T?.[K]`.",Tp="Invalid regular expression",Tq="A bigint literal cannot use exponential notation",Tr="Tuple spread elements cannot be optional.",Ts="Tuple variance annotations can only be used with labeled tuple elements, e.g. `[+foo: number]`",Tt="`typeof` can only be used to get the type of variables.",Tu="JSX attributes must only be assigned a non-empty expression",Tv="Literals cannot be used as shorthand properties.",Tw="Malformed unicode",Tx="Object pattern can't contain methods",Ty="Expected at least one type parameter.",Tz="Type parameter declaration needs a default, since a preceding type parameter declaration has a default.",TA="More than one default clause in switch statement",TB="Illegal newline after throw",TC="Illegal newline before arrow",TD="Missing catch or finally after try",TE="Const must be initialized",TF="Destructuring assignment must be initialized",TG="An optional chain may not be used in a `new` expression.",TH="Template literals may not be used in an optional chain.",TI="Rest parameter must be final parameter of an argument list",TJ="Private fields may not be deleted.",TK="Private fields can only be referenced from within a class.",TL="Rest property must be final property of an object pattern",TM="Setter should have exactly one parameter",TN="A setter cannot have a `this` parameter.",TO="Catch variable may not be eval or arguments in strict mode",TP="Delete of an unqualified identifier in strict mode.",TQ="Duplicate data property in object literal not allowed in strict mode",TR="Function name may not be eval or arguments in strict mode",TS="Assignment to eval or arguments is not allowed in strict mode",TT="Postfix increment/decrement may not have eval or arguments operand in strict mode",TU="Prefix increment/decrement may not have eval or arguments operand in strict mode",TV="Strict mode code may not include a with statement",TW="Number literals with leading zeros are not allowed in strict mode.",TX="Octal literals are not allowed in strict mode.",TY="Strict mode function may not have duplicate parameter names",TZ="Parameter name eval or arguments is not allowed in strict mode",T0='Illegal "use strict" directive in function with non-simple parameter list',T1="Use of reserved word in strict mode",T2="Variable name may not be eval or arguments in strict mode",T3="You may not access a private field through the `super` keyword.",T4="Flow does not support abstract classes.",T5="Flow does not support template literal types.",T6="A type annotation is required for the `this` parameter.",T7="Arrow functions cannot have a `this` parameter; arrow functions automatically bind `this` when declared.",T8="Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.",T9="The `this` parameter cannot be optional.",T_="The `this` parameter must be the first function parameter.",T$="A trailing comma is not permitted after the rest element",Ua="Unexpected end of input",Ub="Explicit inexact syntax must come at the end of an object type",Uc="Opaque type aliases are not allowed in untyped mode",Ud="Unexpected proto modifier",Ue="Unexpected reserved word",Uf="Unexpected reserved type",Ug="Spreading a type is only allowed inside an object type",Uh="Unexpected static modifier",Ui="Unexpected `super` outside of a class method",Uj="`super()` is only valid in a class constructor",Uk="Type aliases are not allowed in untyped mode",Ul="Type annotations are not allowed in untyped mode",Um="Type declarations are not allowed in untyped mode",Un="Type exports are not allowed in untyped mode",Uo="Type imports are not allowed in untyped mode",Up="Interfaces are not allowed in untyped mode",Uq="Unexpected variance sigil",Ur="Found a decorator in an unsupported position.",Us="Invalid regular expression: missing /",Ut="Unexpected whitespace between `#` and identifier",Uu="`yield` is an invalid identifier in generators",Uv="Yield expression not allowed in formal parameter",Uw=[0,[11,"Duplicate export for `",[2,0,[12,96,0]]],"Duplicate export for `%s`"],Ux=[0,[11,"Private fields may only be declared once. `#",[2,0,[11,"` is declared more than once.",0]]],"Private fields may only be declared once. `#%s` is declared more than once."],Uy=[0,[11,"bigint enum members need to be initialized, e.g. `",[2,0,[11," = 1n,` in enum `",[2,0,[11,hC,0]]]]],"bigint enum members need to be initialized, e.g. `%s = 1n,` in enum `%s`."],Uz=[0,[11,"Boolean enum members need to be initialized. Use either `",[2,0,[11," = true,` or `",[2,0,[11," = false,` in enum `",[2,0,[11,hC,0]]]]]]],"Boolean enum members need to be initialized. Use either `%s = true,` or `%s = false,` in enum `%s`."],UA=[0,[11,"Enum member names need to be unique, but the name `",[2,0,[11,"` has already been used before in enum `",[2,0,[11,hC,0]]]]],"Enum member names need to be unique, but the name `%s` has already been used before in enum `%s`."],UB=[0,[11,KB,[2,0,[11,"` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.",0]]],"Enum `%s` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers."],UC="The `...` must come at the end of the enum body. Remove the trailing comma.",UD="The `...` must come after all enum members. Move it to the end of the enum body.",UE=[0,[11,"Use one of `boolean`, `number`, `string`, `symbol`, or `bigint` in enum `",[2,0,[11,hC,0]]],"Use one of `boolean`, `number`, `string`, `symbol`, or `bigint` in enum `%s`."],UF=[0,[11,"Enum type `",[2,0,[11,"` is not valid. ",[2,0,0]]]],"Enum type `%s` is not valid. %s"],UG=[0,[11,"Supplied enum type is not valid. ",[2,0,0]],"Supplied enum type is not valid. %s"],UH=[0,[11,"Enum member names and initializers are separated with `=`. Replace `",[2,0,[11,":` with `",[2,0,[11," =`.",0]]]]],"Enum member names and initializers are separated with `=`. Replace `%s:` with `%s =`."],UJ=[0,[11,KB,[2,0,[11,"` has type `",[2,0,[11,"`, so the initializer of `",[2,0,[11,"` needs to be a ",[2,0,[11," literal.",0]]]]]]]]],"Enum `%s` has type `%s`, so the initializer of `%s` needs to be a %s literal."],UI=[0,[11,"Symbol enum members cannot be initialized. Use `",[2,0,[11,",` in enum `",[2,0,[11,hC,0]]]]],"Symbol enum members cannot be initialized. Use `%s,` in enum `%s`."],UK=[0,[11,"The enum member initializer for `",[2,0,[11,"` needs to be a literal (either a boolean, number, or string) in enum `",[2,0,[11,hC,0]]]]],"The enum member initializer for `%s` needs to be a literal (either a boolean, number, or string) in enum `%s`."],UL=[0,[11,"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `",[2,0,[11,"`, consider using `",[2,0,[11,"`, in enum `",[2,0,[11,hC,0]]]]]]],"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%s`, consider using `%s`, in enum `%s`."],UM=[0,[11,"Number enum members need to be initialized, e.g. `",[2,0,[11," = 1,` in enum `",[2,0,[11,hC,0]]]]],"Number enum members need to be initialized, e.g. `%s = 1,` in enum `%s`."],UN=[0,[11,"String enum members need to consistently either all use initializers, or use no initializers, in enum ",[2,0,[12,46,0]]],"String enum members need to consistently either all use initializers, or use no initializers, in enum %s."],UO=[0,[11,"Expected corresponding JSX closing tag for ",[2,0,0]],"Expected corresponding JSX closing tag for %s"],UP="immediately within another function.",UQ="In strict mode code, functions can only be declared at top level or ",UR="inside a block, or as the body of an if statement.",US="In non-strict mode code, functions can only be declared at top level, ",UT="static ",UY=y,UU="methods",UX="fields",UV=LL,UW=[0,[11,"Classes may not have ",[2,0,[2,0,[11," named `",[2,0,[11,hC,0]]]]]],"Classes may not have %s%s named `%s`."],UZ=L6,U1=y,U0=[0,[11,"String params require local bindings using `as` renaming. You can use `'",[2,0,[11,"' as ",[2,0,[2,0,[11,": <TYPE>` ",0]]]]]],"String params require local bindings using `as` renaming. You can use `'%s' as %s%s: <TYPE>` "],U2="Remove the period.",U4="Indexed access uses bracket notation.",U3=[0,[11,"Invalid indexed access. ",[2,0,[11," Use the format `T[K]`.",0]]],"Invalid indexed access. %s Use the format `T[K]`."],U5=[0,[11,"Invalid flags supplied to RegExp constructor '",[2,0,[12,39,0]]],"Invalid flags supplied to RegExp constructor '%s'"],U6=[0,[11,"JSX element ",[2,0,[11," has no corresponding closing tag.",0]]],"JSX element %s has no corresponding closing tag."],U7=[0,[11,JB,[2,0,[11,"`. Parentheses are required to combine `??` with `&&` or `||` expressions.",0]]],"Unexpected token `%s`. Parentheses are required to combine `??` with `&&` or `||` expressions."],U8=[0,[2,0,[11," '",[2,0,[11,"' has already been declared",0]]]],"%s '%s' has already been declared"],Va=y,Vb=lp,Vc=" You can try using JavaScript private fields by prepending `#` to the field name.",Vd=ld,U9=" Fields and methods are public by default. You can simply omit the `public` keyword.",U_=k1,U$=[0,[11,"Flow does not support using `",[2,0,[11,"` in classes.",[2,0,0]]]],"Flow does not support using `%s` in classes.%s"],Ve=[0,[11,"Private fields must be declared before they can be referenced. `#",[2,0,[11,"` has not been declared.",0]]],"Private fields must be declared before they can be referenced. `#%s` has not been declared."],Vf=[0,[11,Mc,[2,0,0]],"Unexpected %s"],Vg=[0,[11,JB,[2,0,[11,"`. Did you mean `",[2,0,[11,"`?",0]]]]],"Unexpected token `%s`. Did you mean `%s`?"],Vh=[0,[11,Mc,[2,0,[11,", expected ",[2,0,0]]]],"Unexpected %s, expected %s"],Vi=[0,[11,"Undefined label '",[2,0,[12,39,0]]],"Undefined label '%s'"],SA="Parse_error.Error",Vj=[0,[0,36,37],[0,48,58],[0,65,91],[0,95,96],[0,97,ce],[0,oO,vz],[0,yN,yk],[0,y0,oT],[0,oB,w7],[0,jy,Dc],[0,y4,ok],[0,c,706],[0,Mu,722],[0,736,741],[0,748,749],[0,750,751],[0,768,885],[0,886,888],[0,890,894],[0,895,896],[0,902,907],[0,908,909],[0,910,930],[0,IT,1014],[0,1015,1154],[0,1155,1160],[0,1162,1328],[0,1329,1367],[0,1369,1370],[0,1376,1417],[0,1425,1470],[0,1471,1472],[0,1473,1475],[0,1476,1478],[0,1479,1480],[0,1488,1515],[0,1519,1523],[0,1552,1563],[0,1568,1642],[0,1646,1748],[0,1749,1757],[0,1759,1769],[0,1770,1789],[0,1791,1792],[0,1808,1867],[0,1869,1970],[0,1984,2038],[0,2042,2043],[0,2045,2046],[0,B1,2094],[0,2112,2140],[0,2144,2155],[0,2208,2229],[0,2230,2238],[0,2259,2274],[0,2275,2404],[0,2406,2416],[0,2417,2436],[0,2437,2445],[0,2447,2449],[0,2451,2473],[0,2474,2481],[0,2482,2483],[0,2486,2490],[0,2492,2501],[0,2503,2505],[0,2507,2511],[0,2519,2520],[0,2524,2526],[0,2527,2532],[0,2534,2546],[0,2556,2557],[0,2558,2559],[0,2561,2564],[0,2565,2571],[0,2575,2577],[0,2579,2601],[0,2602,2609],[0,2610,2612],[0,2613,2615],[0,2616,2618],[0,2620,2621],[0,2622,2627],[0,2631,2633],[0,2635,2638],[0,2641,2642],[0,2649,2653],[0,2654,2655],[0,2662,2678],[0,2689,2692],[0,2693,2702],[0,2703,2706],[0,2707,2729],[0,2730,2737],[0,2738,2740],[0,2741,2746],[0,2748,2758],[0,2759,2762],[0,2763,2766],[0,2768,2769],[0,2784,2788],[0,2790,2800],[0,2809,2816],[0,2817,2820],[0,2821,2829],[0,2831,2833],[0,2835,2857],[0,2858,2865],[0,2866,2868],[0,2869,2874],[0,2876,2885],[0,2887,2889],[0,2891,2894],[0,2902,2904],[0,2908,2910],[0,2911,2916],[0,2918,2928],[0,2929,2930],[0,2946,2948],[0,2949,2955],[0,2958,2961],[0,2962,2966],[0,2969,2971],[0,2972,2973],[0,2974,2976],[0,2979,2981],[0,2984,2987],[0,2990,3002],[0,3006,3011],[0,3014,3017],[0,3018,3022],[0,3024,3025],[0,3031,3032],[0,3046,3056],[0,3072,3085],[0,3086,3089],[0,3090,3113],[0,3114,3130],[0,3133,3141],[0,3142,3145],[0,3146,3150],[0,3157,3159],[0,3160,3163],[0,3168,3172],[0,3174,3184],[0,3200,3204],[0,3205,3213],[0,3214,3217],[0,3218,3241],[0,3242,3252],[0,3253,3258],[0,3260,3269],[0,3270,3273],[0,3274,3278],[0,3285,3287],[0,3294,3295],[0,3296,3300],[0,3302,3312],[0,3313,3315],[0,3328,3332],[0,3333,3341],[0,3342,3345],[0,3346,3397],[0,3398,3401],[0,3402,3407],[0,3412,3416],[0,3423,3428],[0,3430,3440],[0,3450,3456],[0,3458,3460],[0,3461,3479],[0,3482,3506],[0,3507,3516],[0,3517,3518],[0,3520,3527],[0,3530,3531],[0,3535,3541],[0,3542,3543],[0,3544,3552],[0,3558,3568],[0,3570,3572],[0,3585,3643],[0,3648,3663],[0,3664,3674],[0,3713,3715],[0,3716,3717],[0,3718,3723],[0,3724,3748],[0,3749,3750],[0,3751,3774],[0,3776,3781],[0,3782,3783],[0,3784,3790],[0,3792,3802],[0,3804,3808],[0,3840,3841],[0,3864,3866],[0,3872,3882],[0,3893,3894],[0,3895,3896],[0,3897,3898],[0,3902,3912],[0,3913,3949],[0,3953,3973],[0,3974,3992],[0,3993,4029],[0,4038,4039],[0,Lf,4170],[0,4176,4254],[0,4256,4294],[0,4295,4296],[0,4301,4302],[0,4304,4347],[0,4348,4681],[0,4682,4686],[0,4688,4695],[0,4696,4697],[0,4698,4702],[0,4704,4745],[0,4746,4750],[0,4752,4785],[0,4786,4790],[0,4792,4799],[0,4800,4801],[0,4802,4806],[0,4808,4823],[0,4824,4881],[0,4882,4886],[0,4888,4955],[0,4957,4960],[0,4969,4978],[0,4992,5008],[0,5024,5110],[0,5112,5118],[0,5121,5741],[0,5743,Ah],[0,5761,5787],[0,5792,5867],[0,5870,5881],[0,5888,5901],[0,5902,5909],[0,5920,5941],[0,5952,5972],[0,5984,5997],[0,5998,6001],[0,6002,6004],[0,6016,6100],[0,6103,6104],[0,6108,6110],[0,6112,6122],[0,6155,6158],[0,6160,6170],[0,6176,6265],[0,6272,6315],[0,6320,6390],[0,6400,6431],[0,6432,6444],[0,6448,6460],[0,6470,6510],[0,6512,6517],[0,6528,6572],[0,6576,6602],[0,6608,6619],[0,6656,6684],[0,6688,6751],[0,6752,6781],[0,6783,6794],[0,6800,6810],[0,6823,6824],[0,6832,6846],[0,6912,6988],[0,6992,7002],[0,7019,7028],[0,7040,7156],[0,7168,7224],[0,7232,7242],[0,7245,7294],[0,7296,7305],[0,7312,7355],[0,7357,7360],[0,7376,7379],[0,7380,7419],[0,7424,7674],[0,7675,7958],[0,7960,7966],[0,7968,8006],[0,8008,8014],[0,8016,8024],[0,8025,8026],[0,8027,8028],[0,8029,8030],[0,8031,8062],[0,8064,8117],[0,8118,8125],[0,8126,8127],[0,8130,8133],[0,8134,8141],[0,8144,8148],[0,8150,8156],[0,8160,8173],[0,8178,8181],[0,8182,8189],[0,I8,Lj],[0,8255,8257],[0,8276,8277],[0,o8,8306],[0,ni,8320],[0,8336,8349],[0,8400,8413],[0,8417,8418],[0,8421,8433],[0,oR,8451],[0,pM,8456],[0,8458,o$],[0,nK,8470],[0,IS,8478],[0,pA,nT],[0,nI,nH],[0,qf,nN],[0,8490,8506],[0,8508,8512],[0,8517,8522],[0,os,8527],[0,8544,8585],[0,11264,11311],[0,11312,11359],[0,11360,11493],[0,11499,11508],[0,11520,pv],[0,p0,11560],[0,nX,11566],[0,11568,11624],[0,pN,11632],[0,ny,11671],[0,11680,nQ],[0,11688,nF],[0,11696,qr],[0,11704,p4],[0,11712,nm],[0,11720,nq],[0,11728,qh],[0,11736,11743],[0,11744,11776],[0,12293,12296],[0,12321,pw],[0,12337,12342],[0,12344,12349],[0,12353,12439],[0,12441,pK],[0,12449,pE],[0,12540,12544],[0,12549,pP],[0,12593,12687],[0,12704,12731],[0,12784,12800],[0,13312,19894],[0,19968,40944],[0,40960,42125],[0,42192,42238],[0,42240,42509],[0,42512,42540],[0,42560,42608],[0,42612,pJ],[0,42623,42738],[0,42775,42784],[0,42786,42889],[0,42891,42944],[0,42946,42951],[0,nB,43048],[0,43072,43124],[0,43136,43206],[0,43216,43226],[0,43232,43256],[0,nr,n7],[0,43261,43310],[0,43312,43348],[0,43360,43389],[0,43392,43457],[0,oA,43482],[0,43488,ne],[0,43520,43575],[0,43584,43598],[0,43600,43610],[0,43616,43639],[0,pb,43715],[0,43739,43742],[0,43744,43760],[0,43762,43767],[0,43777,43783],[0,43785,43791],[0,43793,43799],[0,43808,pX],[0,43816,p9],[0,43824,nw],[0,43868,oq],[0,43888,44011],[0,44012,44014],[0,44016,44026],[0,44032,55204],[0,55216,55239],[0,55243,55292],[0,63744,64110],[0,64112,64218],[0,64256,64263],[0,64275,64280],[0,pk,oi],[0,64298,n2],[0,64312,pH],[0,of,qm],[0,64320,qi],[0,64323,o2],[0,64326,64434],[0,64467,64830],[0,64848,64912],[0,64914,64968],[0,65008,65020],[0,65024,65040],[0,65056,65072],[0,65075,65077],[0,65101,65104],[0,65136,qj],[0,65142,65277],[0,65296,65306],[0,65313,65339],[0,65343,oW],[0,65345,65371],[0,65382,65471],[0,65474,65480],[0,65482,65488],[0,65490,65496],[0,65498,65501],[0,kU,p7],[0,65549,oo],[0,65576,ql],[0,65596,ob],[0,65599,65614],[0,65616,65630],[0,65664,65787],[0,65856,65909],[0,66045,66046],[0,66176,66205],[0,66208,66257],[0,66272,66273],[0,66304,66336],[0,66349,66379],[0,66384,66427],[0,66432,66462],[0,66464,66500],[0,66504,nv],[0,66513,66518],[0,66560,66718],[0,66720,66730],[0,66736,66772],[0,66776,66812],[0,66816,66856],[0,66864,66916],[0,67072,67383],[0,67392,67414],[0,67424,67432],[0,67584,67590],[0,oS,nu],[0,67594,nn],[0,67639,67641],[0,pI,67645],[0,67647,67670],[0,67680,67703],[0,67712,67743],[0,67808,nb],[0,67828,67830],[0,67840,67862],[0,67872,67898],[0,67968,68024],[0,68030,68032],[0,m7,68100],[0,68101,68103],[0,68108,oG],[0,68117,m$],[0,68121,68150],[0,68152,68155],[0,68159,68160],[0,68192,68221],[0,68224,68253],[0,68288,oN],[0,68297,68327],[0,68352,68406],[0,68416,68438],[0,68448,68467],[0,68480,68498],[0,68608,68681],[0,68736,68787],[0,68800,68851],[0,68864,68904],[0,68912,68922],[0,69376,69405],[0,pd,69416],[0,69424,69457],[0,69600,69623],[0,69632,69703],[0,69734,po],[0,69759,69819],[0,69840,69865],[0,69872,69882],[0,69888,69941],[0,69942,69952],[0,o7,nG],[0,69968,70004],[0,nW,70007],[0,70016,70085],[0,70089,70093],[0,70096,oM],[0,m_,70109],[0,70144,pF],[0,70163,70200],[0,70206,70207],[0,70272,p5],[0,o3,oF],[0,70282,nx],[0,70287,oJ],[0,70303,70313],[0,70320,70379],[0,70384,70394],[0,70400,o9],[0,70405,70413],[0,70415,70417],[0,70419,p2],[0,70442,pp],[0,70450,na],[0,70453,70458],[0,70459,70469],[0,70471,70473],[0,70475,70478],[0,m9,70481],[0,70487,70488],[0,70493,70500],[0,70502,70509],[0,70512,70517],[0,70656,70731],[0,70736,70746],[0,oU,70752],[0,70784,o0],[0,oa,70856],[0,70864,70874],[0,71040,71094],[0,71096,71105],[0,71128,71134],[0,71168,71233],[0,ou,71237],[0,71248,71258],[0,71296,71353],[0,71360,71370],[0,71424,71451],[0,71453,71468],[0,71472,71482],[0,71680,71739],[0,71840,71914],[0,71935,71936],[0,72096,72104],[0,72106,72152],[0,72154,pa],[0,qv,72165],[0,ng,72255],[0,72263,72264],[0,pU,72346],[0,p8,72350],[0,72384,72441],[0,72704,pW],[0,72714,72759],[0,72760,72769],[0,72784,72794],[0,72818,72848],[0,72850,72872],[0,72873,72887],[0,72960,qq],[0,72968,oZ],[0,72971,73015],[0,73018,73019],[0,73020,73022],[0,73023,73032],[0,73040,73050],[0,73056,n3],[0,73063,nD],[0,73066,73103],[0,73104,73106],[0,73107,73113],[0,73120,73130],[0,73440,73463],[0,73728,74650],[0,74752,74863],[0,74880,75076],[0,77824,78895],[0,82944,83527],[0,92160,92729],[0,92736,92767],[0,92768,92778],[0,92880,92910],[0,92912,92917],[0,92928,92983],[0,92992,92996],[0,93008,93018],[0,93027,93048],[0,93053,93072],[0,93760,93824],[0,93952,94027],[0,ol,94088],[0,94095,94112],[0,94176,pf],[0,pj,94180],[0,94208,100344],[0,100352,101107],[0,110592,110879],[0,110928,110931],[0,110948,110952],[0,110960,111356],[0,113664,113771],[0,113776,113789],[0,113792,113801],[0,113808,113818],[0,113821,113823],[0,119141,119146],[0,119149,119155],[0,119163,119171],[0,119173,119180],[0,119210,119214],[0,119362,119365],[0,119808,qt],[0,119894,nC],[0,119966,119968],[0,py,119971],[0,119973,119975],[0,119977,nL],[0,119982,nO],[0,pL,pQ],[0,119997,od],[0,120005,pl],[0,120071,120075],[0,120077,qb],[0,120086,pT],[0,120094,nJ],[0,120123,qd],[0,120128,n6],[0,qg,120135],[0,120138,ph],[0,120146,120486],[0,120488,n1],[0,120514,pc],[0,120540,o5],[0,120572,oP],[0,120598,oK],[0,120630,n5],[0,120656,np],[0,120688,n0],[0,120714,oe],[0,120746,nc],[0,120772,120780],[0,120782,120832],[0,121344,121399],[0,121403,121453],[0,121461,121462],[0,121476,121477],[0,121499,121504],[0,121505,121520],[0,122880,122887],[0,122888,122905],[0,122907,122914],[0,122915,122917],[0,122918,122923],[0,123136,123181],[0,123184,123198],[0,123200,123210],[0,pn,123215],[0,123584,123642],[0,124928,125125],[0,125136,125143],[0,125184,125260],[0,125264,125274],[0,126464,n$],[0,126469,pC],[0,126497,no],[0,qe,126501],[0,qp,pR],[0,126505,qo],[0,126516,nM],[0,px,o6],[0,oh,126524],[0,n9,126531],[0,oV,pm],[0,o1,pS],[0,pD,oX],[0,126541,p3],[0,126545,oD],[0,nZ,126549],[0,nt,nd],[0,nR,or],[0,ot,pz],[0,pu,pG],[0,nV,pB],[0,126561,ov],[0,pt,126565],[0,126567,nk],[0,126572,oL],[0,126580,op],[0,126585,oz],[0,oH,m8],[0,126592,pZ],[0,126603,126620],[0,126625,p1],[0,126629,oj],[0,126635,126652],[0,131072,173783],[0,173824,177973],[0,177984,178206],[0,178208,183970],[0,183984,191457],[0,194560,195102],[0,917760,918000]],Vl=[0,1,0],Vk=[0,0,[0,1,0],[0,1,0]],ZX=Kg,ZY="end of input",Z5=lm,Z6="template literal part",Z9=lm,Z_=Lg,ZV=Kg,ZZ=lm,Z0=jI,Z1=lm,Z2=iX,Z3=lm,Z4=jB,Z7="an",Z8=cb,ZW=cg,ZU=[0,[11,"token `",[2,0,[12,96,0]]],"token `%s`"],XE="{",XF=nz,XG="{|",XH="|}",XI=LN,XJ=uD,XK="[",XL="]",XM=xG,XN=JM,XO=c0,XP="=>",XQ="...",XR=Kq,XS=LL,XT=jS,XU=qa,XV=h$,XW=kY,XX=bS,XY=bP,XZ=iP,X0=bM,X1=nf,X2=k4,X3=ox,X4=nS,X5=lo,X6=jF,X7=iY,X8=hD,X9=hI,X_=bT,X$=ow,Ya=og,Yb=bL,Yc=iI,Yd=nl,Ye=oy,Yf=p6,Yg=lb,Yh=f9,Yi=bR,Yj=pi,Yk=i0,Yl=k7,Ym=hJ,Yn=hH,Yo=lf,Yp=pe,Yq=bg,Yr=jH,Ys=iN,Yt=bs,Yu=qc,Yv=ld,Yw=lp,Yx=k1,Yy=bf,Yz=bN,YA=kV,YB=ev,YC=yb,YD=vj,YE=h_,YF=iE,YG="%checks",YH=JZ,YI=JD,YJ=L9,YK=IQ,YL=Lq,YM=KD,YN=LO,YO=KQ,YP=Mq,YQ=KC,YR=JO,YS=MB,YT=Ll,YU=IO,YV=K9,YW=AW,YX="?.",YY=Ef,YZ=L6,Y0=iL,Y1=Mo,Y2=JQ,Y3=KO,Y4=on,Y5=nY,Y6=KE,Y7=Ky,Y8=MD,Y9=Mw,Y_=JC,Y$=Kc,Za=xB,Zb=k_,Zc=JK,Zd=JE,Ze=LM,Zf=hA,Zg=cd,Zh=bt,Zi=L1,Zj=Jx,Zk=LA,Zl=Kz,Zm=K6,Zn=JW,Zo=Kp,Zp=y,Zq=pV,Zr=pq,Zs=bC,Zt=jI,Zu=iX,Zv=jB,Zw=hH,Zx=k2,Zy=pO,Zz=om,ZA=nh,ZB=o_,ZC=jO,ZD=Jl,ZE=kS,ZF=jR,ZG=J_,ZH=Jq,ZI=lk,ZJ=lk,ZK=LQ,ZL=lk,ZM=lk,ZN=nz,ZO=nz,ZP=LQ,ZQ=bt,ZR=bt,ZS=kX,ZT=oY,Vm="T_LCURLY",Vn="T_RCURLY",Vo="T_LCURLYBAR",Vp="T_RCURLYBAR",Vq="T_LPAREN",Vr="T_RPAREN",Vs="T_LBRACKET",Vt="T_RBRACKET",Vu="T_SEMICOLON",Vv="T_COMMA",Vw="T_PERIOD",Vx="T_ARROW",Vy="T_ELLIPSIS",Vz="T_AT",VA="T_POUND",VB="T_FUNCTION",VC="T_IF",VD="T_IN",VE="T_INSTANCEOF",VF="T_RETURN",VG="T_SWITCH",VH="T_THIS",VI="T_THROW",VJ="T_TRY",VK="T_VAR",VL="T_WHILE",VM="T_WITH",VN="T_CONST",VO="T_LET",VP="T_NULL",VQ="T_FALSE",VR="T_TRUE",VS="T_BREAK",VT="T_CASE",VU="T_CATCH",VV="T_CONTINUE",VW="T_DEFAULT",VX="T_DO",VY="T_FINALLY",VZ="T_FOR",V0="T_CLASS",V1="T_EXTENDS",V2="T_STATIC",V3="T_ELSE",V4="T_NEW",V5="T_DELETE",V6="T_TYPEOF",V7="T_VOID",V8="T_ENUM",V9="T_EXPORT",V_="T_IMPORT",V$="T_SUPER",Wa="T_IMPLEMENTS",Wb="T_INTERFACE",Wc="T_PACKAGE",Wd="T_PRIVATE",We="T_PROTECTED",Wf="T_PUBLIC",Wg="T_YIELD",Wh="T_DEBUGGER",Wi="T_DECLARE",Wj="T_TYPE",Wk="T_OPAQUE",Wl="T_OF",Wm="T_ASYNC",Wn="T_AWAIT",Wo="T_CHECKS",Wp="T_RSHIFT3_ASSIGN",Wq="T_RSHIFT_ASSIGN",Wr="T_LSHIFT_ASSIGN",Ws="T_BIT_XOR_ASSIGN",Wt="T_BIT_OR_ASSIGN",Wu="T_BIT_AND_ASSIGN",Wv="T_MOD_ASSIGN",Ww="T_DIV_ASSIGN",Wx="T_MULT_ASSIGN",Wy="T_EXP_ASSIGN",Wz="T_MINUS_ASSIGN",WA="T_PLUS_ASSIGN",WB="T_NULLISH_ASSIGN",WC="T_AND_ASSIGN",WD="T_OR_ASSIGN",WE="T_ASSIGN",WF="T_PLING_PERIOD",WG="T_PLING_PLING",WH="T_PLING",WI="T_COLON",WJ="T_OR",WK="T_AND",WL="T_BIT_OR",WM="T_BIT_XOR",WN="T_BIT_AND",WO="T_EQUAL",WP="T_NOT_EQUAL",WQ="T_STRICT_EQUAL",WR="T_STRICT_NOT_EQUAL",WS="T_LESS_THAN_EQUAL",WT="T_GREATER_THAN_EQUAL",WU="T_LESS_THAN",WV="T_GREATER_THAN",WW="T_LSHIFT",WX="T_RSHIFT",WY="T_RSHIFT3",WZ="T_PLUS",W0="T_MINUS",W1="T_DIV",W2="T_MULT",W3="T_EXP",W4="T_MOD",W5="T_NOT",W6="T_BIT_NOT",W7="T_INCR",W8="T_DECR",W9="T_EOF",W_="T_ANY_TYPE",W$="T_MIXED_TYPE",Xa="T_EMPTY_TYPE",Xb="T_NUMBER_TYPE",Xc="T_BIGINT_TYPE",Xd="T_STRING_TYPE",Xe="T_VOID_TYPE",Xf="T_SYMBOL_TYPE",Xg="T_UNKNOWN_TYPE",Xh="T_NEVER_TYPE",Xi="T_UNDEFINED_TYPE",Xj="T_KEYOF",Xk="T_READONLY",Xl="T_INFER",Xm="T_IS",Xn="T_ASSERTS",Xo=Kx,Xp=Kx,Xq="T_NUMBER",Xr="T_BIGINT",Xs="T_STRING",Xt="T_TEMPLATE_PART",Xu="T_IDENTIFIER",Xv="T_REGEXP",Xw="T_INTERPRETER",Xx="T_ERROR",Xy="T_JSX_IDENTIFIER",Xz=LR,XA=LR,XB="T_BOOLEAN_TYPE",XC="T_NUMBER_SINGLETON_TYPE",XD="T_BIGINT_SINGLETON_TYPE",_c=[0,Jf,xp,9],_d=[0,Jf,C$,9],_m=Jn,_n="*/",_o=Jn,_p="unreachable line_comment",_E="unreachable string_quote",_F="\\",_G="unreachable template_part",_H="\r\n",_I=xJ,_1="unreachable regexp_class",_2=JX,_4="unreachable regexp_body",_5=y,_6=y,_7=y,_8=y,ac8=K4,ac9="{'>'}",ac_=k_,ac$="{'}'}",ada=nz,adb=ie,adc=xG,add=nY,ade=K4,adf=ie,adg=xG,adh=nY,adD="unreachable type_token wholenumber",adC="unreachable type_token wholebigint",adB="unreachable type_token floatbigint",adA="unreachable type_token scinumber",adz="unreachable type_token scibigint",ady="unreachable type_token hexnumber",adx="unreachable type_token hexbigint",adw="unreachable type_token legacyoctnumber",adv="unreachable type_token octnumber",adu="unreachable type_token octbigint",adt="unreachable type_token binnumber",ads="unreachable type_token bigbigint",adq="unreachable type_token",adr=K0,adE=[11,1],adF=[11,0],adm="unreachable template_tail",adn=y,ado=y,adk="unreachable jsx_child",adj="unreachable jsx_tag",ac1=[0,JH],ac2=[0,913],ac3=[0,jy],ac4=[0,vo],ac5=[0,Ju],ac6=[0,IP],ac7=[0,8747],acT=[0,IZ],acU=[0,916],acV=[0,8225],acW=[0,935],acX=[0,Jc],acY=[0,914],acZ=[0,Ja],ac0=[0,Jv],acL=[0,IR],acM=[0,915],acN=[0,KT],acO=[0,919],acP=[0,917],acQ=[0,vU],acR=[0,L3],acD=[0,Mz],acE=[0,924],acF=[0,923],acG=[0,922],acH=[0,LP],acI=[0,921],acJ=[0,Lz],acK=[0,C$],acS=[0,MH],acv=[0,y4],acw=[0,927],acx=[0,937],acy=[0,LS],acz=[0,z0],acA=[0,Mv],acB=[0,338],acn=[0,352],aco=[0,929],acp=[0,936],acq=[0,8243],acr=[0,928],acs=[0,934],act=[0,I1],acu=[0,JN],acf=[0,933],acg=[0,I$],ach=[0,J5],aci=[0,KW],acj=[0,920],ack=[0,932],acl=[0,JL],ab9=[0,Lk],ab_=[0,Jj],ab$=[0,L_],aca=[0,918],acb=[0,376],acc=[0,Li],acd=[0,926],ace=[0,J$],acm=[0,IT],acC=[0,925],ab1=[0,39],ab2=[0,8736],ab3=[0,8743],ab4=[0,38],ab5=[0,945],ab6=[0,8501],ab7=[0,jN],abT=[0,8226],abU=[0,Ln],abV=[0,946],abW=[0,8222],abX=[0,Ka],abY=[0,JR],abZ=[0,8776],ab0=[0,K3],abL=[0,8773],abM=[0,9827],abN=[0,Mu],abO=[0,967],abP=[0,Lm],abQ=[0,oT],abR=[0,Kj],abD=[0,Dd],abE=[0,8595],abF=[0,8224],abG=[0,8659],abH=[0,Ml],abI=[0,8746],abJ=[0,8629],abK=[0,o4],abS=[0,8745],abv=[0,8195],abw=[0,8709],abx=[0,IN],aby=[0,IM],abz=[0,Mj],abA=[0,ok],abB=[0,9830],abn=[0,8707],abo=[0,8364],abp=[0,LY],abq=[0,jQ],abr=[0,951],abs=[0,8801],abt=[0,949],abu=[0,8194],abf=[0,8805],abg=[0,947],abh=[0,8260],abi=[0,MA],abj=[0,Ma],abk=[0,xp],abl=[0,8704],aa_=[0,Ar],aa$=[0,L8],aba=[0,8230],abb=[0,9829],abc=[0,8596],abd=[0,8660],abe=[0,62],abm=[0,402],abC=[0,948],ab8=[0,Jm],aa2=[0,nA],aa3=[0,8712],aa4=[0,Kk],aa5=[0,953],aa6=[0,8734],aa7=[0,8465],aa8=[0,JU],aaU=[0,8220],aaV=[0,8968],aaW=[0,8592],aaX=[0,vz],aaY=[0,10216],aaZ=[0,955],aa0=[0,8656],aa1=[0,954],aaM=[0,60],aaN=[0,8216],aaO=[0,8249],aaP=[0,Lj],aaQ=[0,9674],aaR=[0,8727],aaS=[0,8970],aaE=[0,Jh],aaF=[0,8711],aaG=[0,956],aaH=[0,8722],aaI=[0,y0],aaJ=[0,yN],aaK=[0,8212],aaL=[0,KF],aaT=[0,8804],aaw=[0,957],aax=[0,MI],aay=[0,8836],aaz=[0,8713],aaA=[0,Jk],aaB=[0,8715],aaC=[0,8800],aao=[0,8853],aap=[0,959],aaq=[0,969],aar=[0,8254],aas=[0,JY],aat=[0,339],aau=[0,y_],aav=[0,I7],aag=[0,yk],aah=[0,kW],aai=[0,8855],aaj=[0,z_],aak=[0,c],aal=[0,oB],aam=[0,oO],$_=[0,KX],$$=[0,LE],aaa=[0,982],aab=[0,960],aac=[0,966],aad=[0,8869],aae=[0,8240],aaf=[0,8706],aan=[0,8744],aaD=[0,8211],$2=[0,10217],$3=[0,8730],$4=[0,8658],$5=[0,34],$6=[0,968],$7=[0,8733],$8=[0,8719],$U=[0,961],$V=[0,8971],$W=[0,KR],$X=[0,8476],$Y=[0,8221],$Z=[0,8969],$0=[0,8594],$1=[0,w7],$M=[0,K$],$N=[0,I2],$O=[0,8901],$P=[0,353],$Q=[0,8218],$R=[0,8217],$S=[0,8250],$E=[0,8835],$F=[0,8721],$G=[0,8838],$H=[0,8834],$I=[0,9824],$J=[0,8764],$K=[0,962],$L=[0,963],$T=[0,8207],$w=[0,952],$x=[0,8756],$y=[0,964],$z=[0,p_],$A=[0,8839],$B=[0,KM],$C=[0,K5],$o=[0,js],$p=[0,8657],$q=[0,8482],$r=[0,Dc],$s=[0,732],$t=[0,jC],$u=[0,8201],$v=[0,977],$g=[0,IS],$h=[0,iW],$i=[0,965],$j=[0,978],$k=[0,Al],$l=[0,Bu],$m=[0,wZ],_$=[0,I8],$a=[0,8205],$b=[0,950],$c=[0,la],$d=[0,yZ],$e=[0,zR],$f=[0,958],$n=[0,8593],$D=[0,Jp],$9=[0,8242],aa9=[0,ux],__="unreachable regexp",_Z="unreachable token wholenumber",_Y="unreachable token wholebigint",_X="unreachable token floatbigint",_W="unreachable token scinumber",_V="unreachable token scibigint",_U="unreachable token hexnumber",_T="unreachable token hexbigint",_S="unreachable token legacyoctnumber",_R="unreachable token legacynonoctnumber",_Q="unreachable token octnumber",_P="unreachable token octbigint",_O="unreachable token bignumber",_N="unreachable token bigint",_K="unreachable token",_L=K0,_M=[7,"#!"],_0="expected ?",_q="unreachable string_escape",_r=bq,_s=lj,_t=lj,_u=bq,_v=CM,_w=L5,_x="n",_y="r",_z="t",_A=Mx,_B=lj,_C=ie,_D=ie,_j="unreachable id_char",_k=ie,_l=ie,_h=lj,_g=JA,_f=Lp,_i=Af,_e=[24,"token ILLEGAL"],adY=[0,[11,"the identifier `",[2,0,[12,96,0]]],"the identifier `%s`"],adX=[0,1],adW=[0,1],adV=Lv,adU=Lv,adS=[0,[11,"an identifier. When exporting a ",[2,0,[11," as a named export, you must specify a ",[2,0,[11," name. Did you mean `export default ",[2,0,[11," ...`?",0]]]]]]],"an identifier. When exporting a %s as a named export, you must specify a %s name. Did you mean `export default %s ...`?"],adT=pr,adR="Peeking current location when not available",adQ=[0,"src/parser/parser_env.ml",351,9],adP="Internal Error: Tried to add_declared_private with outside of class scope.",adO="Internal Error: `exit_class` called before a matching `enter_class`",adL=y,adM=[0,0,0],adN=[0,0,0],adZ="Parser_env.Try.Rollback",ad6=y,ad4=y,ad0=[0,bf,eu,ec,Mp,Mi,c4,bi,dd,f4,ew,g4,eY,e2,ez,gJ,fR,g_,dw,d5,d3,gF,eL,e0,dg,f7,eR,cV,ft,e8,eq,hd,hf,cY,gV,el,ee,dS,bM,c6,fq,f$,gu,e9,dx,eD,bP,eh,fT,ek,gA,ga,dC,ey,gf,bS,fW,g7,dc,gZ,gT,fJ,ge,bQ,eG,e3,c3,gW,f5,d8,g1,d2,e4,eC,fn,dH,hb,dn,eK,dD,gb,gg,eM,fC,dV,cs,fc,dl,eX,gn,fN,fu,d1,fw,d$,gM,eW,cU,gv,dT,gz,fL,d6,e_,gC,g8,c7,g6,e1,eA,f_,f8,dJ,ex,gd,eB,gK,eT,f3,fg,fK,f0,eP,fp,fZ,dp,eN,gm,fi,gp,go,dO,fM,eU,dB,dh,f6,di,fG,ea,dL,e6,dW,fz,en,f2,fI,g2,dQ,eI,em,d9,dN,gN,bs,eQ,c1,eH,c9,fX,dm,dt,er,bg,dE,eV,eS,cb,fD,dr,fr,eF,fj,dU,gI,f1,ff,dj,gs,dk,fx,dA,hg,dF,gk,dP,dv,d0,fy,eJ,eE,gS,eo,g0,fO,eb,e$,ha,dy,eZ,gO,df,aM,fP,d7,g$,fd,fY,dG,gx,fB,gU,cX,cW,eg,fm,dq,dK,fF,ei,c_,dM,fo,bC,de,dX,c5,gl,ed,cZ,gQ,gr,fU,fl,gc,c8,gR,bN,bL,db,gh,gj,he,gq,gw,es,dZ,da,gP,fQ,cT,dI,ds,ej,e7,Ki,fv,K7,Lx,gH,gy,fs,fE,g5,dR,fh,fk,gX,dz,c$,hc,dY,cS,et,g9,d4,ef,du,fS,bT,gi,fA,cx,gt,gB,eO,e5,gY,ep,g3,fb,fV,gL,fa,fe],ad1=[0,bf,eu,ec,c4,bi,dd,f4,ew,g4,eY,e2,ez,gJ,fR,g_,dw,d5,d3,gF,eL,e0,dg,f7,eR,cV,ft,e8,eq,hd,hf,cY,gV,el,ee,dS,bM,c6,fq,f$,gu,e9,dx,eD,bP,eh,fT,ek,gA,ga,dC,ey,gf,bS,fW,g7,dc,gZ,gT,fJ,ge,bQ,eG,e3,c3,gW,f5,d8,g1,d2,e4,eC,fn,dH,hb,dn,eK,dD,gb,gg,eM,fC,dV,cs,fc,dl,eX,gn,fN,fu,d1,fw,d$,gM,eW,cU,gv,dT,gz,fL,d6,e_,gC,g8,c7,g6,e1,eA,f_,f8,dJ,ex,gd,eB,gK,eT,f3,fg,fK,f0,eP,fp,fZ,dp,eN,gm,fi,gp,go,dO,fM,eU,dB,dh,f6,di,fG,ea,dL,e6,dW,fz,en,f2,fI,g2,dQ,eI,em,d9,dN,gN,bs,eQ,c1,eH,c9,fX,dm,dt,er,bg,dE,eV,eS,cb,fD,dr,fr,eF,fj,dU,gI,f1,ff,dj,gs,dk,fx,dA,hg,dF,gk,dP,dv,d0,fy,eJ,eE,gS,eo,g0,fO,eb,e$,ha,dy,eZ,gO,df,aM,fP,d7,g$,fd,fY,dG,gx,fB,gU,cX,cW,eg,fm,dq,dK,fF,ei,c_,dM,fo,bC,de,dX,c5,gl,ed,cZ,gQ,gr,fU,fl,gc,c8,gR,bN,bL,db,gh,gj,he,gq,gw,es,dZ,da,gP,fQ,cT,dI,ds,ej,e7,fv,gH,gy,fs,fE,g5,dR,fh,fk,gX,dz,c$,hc,dY,cS,et,g9,d4,ef,du,fS,bT,gi,fA,cx,gt,gB,eO,e5,gY,ep,g3,fb,fV,gL,fa,fe],ad2=[0,ga,f2,dk,fD,f1,fS,f_,d6,dh,dN,fA,cV,d1,bP,fN,d7,c$,gv,e6,dJ,eQ,fz,ei,fm,eu,dD,eF,eE,hb,gm,dZ,fr,fF,eB,cb,c4,e$,e4,gr,ef,fx,d4,ea,fB,eG,dU,gS,eD,gC,eV,ek,c9,c_,eN,gd,fk,gy,fc,fe,f5,dI,dg,fL,c3,fM,g5,fw,bQ,cU,ff,dl,gK,f6,dL,dr,eP,gh,e8,cW,eU,fp,gs,d2,fV,cZ,dG,fg,gZ,dV,gL,fo,du,gf,bi,e3,gc,dw,g7,dE,eO,eJ,dS,dQ,dz,g6,dx,bC,fO,ft,bf,fZ,ee,fl,d8,ez,eM,c8,gT,e5,e2,gH,fU,eA,ew,dW,g3,hf,d9,dq,eZ,fu,g$,dp,gg,ha,d3,hd,ds,dd,cY,dC,d5,fT,eY,dR,c1,eo,fs,f0,dj,ej,g4,fv,e1,gp,da,gY,fK,cS,gX,fQ,gb,go,cT,f3,bg,bS,g_,gF,eh,eK,bM,bN,f8,eS,gn,df,en,cs,gi,gk,dK,eH,fE,fP,dA,fI,gI,fR,eg,ge,d0,dt,cX,fY,gq,c7,ey,e_,fX,gM,fn,eq,gz,gW,eW,eL,ed,et,gQ,gt,eI,e9,dM,gV,fj,fJ,er,dT,dY,g8,fG,fh,gN,de,eR,fa,f4,dX,g9,f7,c5,di,g2,gj,fi,dH,ex,em,dy,dO,e0,f$,ep,gw,dn,gB,aM,fC,e7,gO,el,dP,dv,gA,bL,hg,gP,g1,gx,gl,fq,gu,fy,fd,gJ,g0,eX,cx,dm,hc,dB,d$,dF,gR,fW,gU,bT,fb,bs,db,ec,es,dc,eb,he,eC,c6,eT],ad3=[0,ga,f2,dk,fD,f1,fS,f_,d6,dh,dN,fA,cV,d1,bP,fN,d7,c$,gv,e6,dJ,eQ,fz,ei,fm,eu,dD,eF,eE,hb,gm,dZ,fr,fF,eB,cb,c4,Mi,e$,e4,gr,ef,fx,d4,ea,fB,eG,dU,gS,eD,gC,eV,ek,c9,c_,eN,gd,fk,gy,fc,fe,f5,dI,K7,dg,fL,c3,fM,g5,fw,bQ,cU,ff,dl,gK,f6,dL,dr,eP,gh,e8,cW,eU,fp,gs,d2,fV,cZ,dG,fg,gZ,dV,gL,fo,du,gf,bi,e3,gc,dw,g7,dE,eO,eJ,dS,dQ,dz,g6,dx,bC,fO,ft,bf,fZ,ee,fl,d8,ez,eM,c8,gT,e5,e2,gH,fU,eA,ew,dW,g3,hf,d9,dq,eZ,fu,g$,dp,gg,ha,d3,hd,ds,dd,cY,dC,d5,fT,eY,dR,c1,eo,fs,f0,dj,ej,g4,fv,e1,gp,da,gY,fK,cS,gX,fQ,gb,go,cT,f3,bg,bS,g_,gF,eh,eK,bM,bN,f8,eS,gn,df,en,cs,gi,gk,dK,eH,fE,fP,dA,fI,gI,fR,eg,ge,d0,dt,cX,fY,gq,c7,ey,e_,fX,gM,fn,eq,gz,gW,eW,eL,ed,et,gQ,gt,eI,Lx,e9,dM,gV,fj,fJ,er,dT,dY,g8,fG,fh,gN,de,eR,Ki,fa,f4,dX,g9,f7,Mp,c5,di,g2,gj,fi,dH,ex,em,dy,dO,e0,f$,ep,gw,dn,gB,aM,fC,e7,gO,el,dP,dv,gA,bL,hg,gP,g1,gx,gl,fq,gu,fy,fd,gJ,g0,eX,cx,dm,hc,dB,d$,dF,gR,fW,gU,bT,fb,bs,db,ec,es,dc,eb,he,eC,c6,eT],ad9=jS,ad_=qa,ad$=h$,aea=kY,aeb=bS,aec=bP,aed=iP,aee=bM,aef=nf,aeg=k4,aeh=ox,aei=nS,aej=lo,aek=jF,ael=iY,aem=hD,aen=hI,aeo=bT,aep=ow,aeq=og,aer=bL,aes=iI,aet=nl,aeu=oy,aev=p6,aew=lb,aex=f9,aey=bR,aez=pi,aeA=i0,aeB=k7,aeC=hJ,aeD=hH,aeE=lf,aeF=pe,aeG=bg,aeH=jH,aeI=iN,aeJ=bs,aeK=qc,aeL=ld,aeM=lp,aeN=k1,aeO=bf,aeP=bN,aeQ=kV,aeR=ev,aeS=yb,aeT=vj,aeU=h_,aeV=iE,aeW=pV,aeX=pq,aeY=bC,aeZ=jI,ae0=iX,ae1=jB,ae2=hH,ae3=k2,ae4=pO,ae5=om,ae6=nh,ae7=o_,ae8=jO,ae9=kS,ae_=jR,ae$=kX,afa=oY,ad7=[0,pr],ad8=y,afD=[0,1],afu=[0,jx,1416,6],afv=[0,jx,1419,6],afz=[0,jx,1522,8],afA=[0,1],afB=[0,jx,1539,8],afw="Can not have both `static` and `proto`",afx=bR,afy=v8,afC=[0,0,0,0],afs=[0,0],afr=[0,[0,0,0,0,0]],afq="You should only call render_type after making sure the next token is a renders variant",afo=kS,afp=jR,afm=[0,"a number literal type"],afn=[0,0],afk=ih,afl=[0,0],afi=[0,"a type"],afj=[0,0],afh=[0,0],aff=[17,1],afg=[17,0],afe=[0,jx,z_,15],afd=[0,jx,z0,15],afc=cd,afb=cd,afL=n_,afM=kR,afK=[0,[11,"Failure while looking up ",[2,0,[11,". Index: ",[4,0,0,0,[11,". Length: ",[4,0,0,0,[12,46,0]]]]]]],"Failure while looking up %s. Index: %d. Length: %d."],afH=[0,0,0,0],afI="Offset_utils.Offset_lookup_failed",afN=am,afO=Lo,afP=kR,afQ=n_,afR=Kb,afS=kR,afT=n_,afU=vP,afV=w1,afW="normal",afZ=ev,af0="jsxTag",af1="jsxChild",af2="template",af3=Lg,afX="context",afY=ev,af5=[6,0],af$=[0,0],af6=[0,1],af7=[0,4],af8=[0,2],af9=[0,3],af_=[0,0],af4=[0,0,0,0,0,0],agv=ih,agw=[0,75],agq=[0,y,0],agp=cw,agi=[0,75],agj=[0,75],agk=jS,agl=[0,y,0],agg=[0,0,0],agf=[0,0,0],ahX=[0,83],ahT=bt,ahU=bt,ahP=[0,"a regular expression"],ahQ=y,ahR=y,ahS=y,ahM=[0,"src/parser/expression_parser.ml",1388,17],ahN=[0,"a template literal part"],ahO=[0,[0,y,y],1],ahL=[0,0],ahI=lj,ahH=JA,ahJ=Af,ahK=Af,ahG=Lp,ahF=[0,75],ahC=[0,1],ahD=[0,1],ahA=[0,1],ahB=[0,1],ahE=[0,1],ahx=jE,ahu=i0,ahv=[0,"the identifier `target`"],ahw=[0,0],ahr=bg,ahs=kQ,aht=kQ,ahp=jH,aho=[0,"either a call or access of `super`"],ahq=jH,ahn=[0,1],ahm=[0,0],ahl=[0,1],ahk=[0,0],ahc=[0,1],ahd=[0,0],ahe=[0,2],ahf=[0,3],ahg=[0,7],ahh=[0,6],ahi=[0,4],ahj=[0,5],ahb=[0,6],agR=[0,[0,17,[0,2]]],agS=[0,[0,18,[0,3]]],agT=[0,[0,19,[0,4]]],agU=[0,[0,0,[0,5]]],agV=[0,[0,1,[0,5]]],agW=[0,[0,2,[0,5]]],agX=[0,[0,3,[0,5]]],agY=[0,[0,5,[0,6]]],agZ=[0,[0,7,[0,6]]],ag0=[0,[0,4,[0,6]]],ag1=[0,[0,6,[0,6]]],ag2=[0,[0,8,[0,7]]],ag3=[0,[0,9,[0,7]]],ag4=[0,[0,10,[0,7]]],ag5=[0,[0,11,[0,8]]],ag6=[0,[0,12,[0,8]]],ag7=[0,[0,15,[0,9]]],ag8=[0,[0,13,[0,9]]],ag9=[0,[0,14,[1,10]]],ag_=[0,[0,16,[0,9]]],ag$=[0,[0,21,[0,6]]],aha=[0,[0,20,[0,6]]],agQ=[20,Ef],agA=[0,[0,8]],agB=[0,[0,7]],agC=[0,[0,6]],agD=[0,[0,10]],agE=[0,[0,9]],agF=[0,[0,11]],agG=[0,[0,5]],agH=[0,[0,4]],agI=[0,[0,2]],agJ=[0,[0,3]],agK=[0,[0,1]],agL=[0,[0,0]],agM=[0,[0,12]],agN=[0,[0,13]],agO=[0,[0,14]],agP=[0,0],aic=lb,aid=[0,y,0],aia="unexpected PrivateName in Property, expected a PrivateField",aib=[0,0,0],ah5=ic,ah$="Must be one of the above",ah9=[0,1],ah_=[0,1],ah8=[0,1],ah4=ic,ah3=ic,ah0=AW,ahZ="Internal Error: private name found in object props",ajl=[0,1],ajk=[0,vv,1854,21],ajj=[0,"a declaration, statement or export specifiers"],aji=[0,86],ajf=k5,ajg=[0,y,y,0],ajh=[0,KJ],aje="exports",aja=[0,1],ajb=[0,1],ajc=[0,0],ajd=J3,ai$=[0,86],ai9=ih,ai_=[0,75],ai8=[0,0],ai7=[0,1],ai4=[0,"the keyword `as`"],ai3=[0,34],ai2=[0,34],ai1=[0,0],ai0=[0,1],aiY=[0,KJ],aiX=[0,"the keyword `from`"],aiW=[0,y,y,0],aiU=[0,I3],aiR="Label",aiQ=[0,I3],aiB=[0,0,0],ais=[0,44],ait=[0,vv,429,22],aiq=[0,43],air=[0,vv,448,22],ain=[0,0],aij="the token `;`",aii=[0,0],aih=[0,0],ajo=LC,ajp=[0,pr],ajm=LC,ajn=[24,cb],ajv=iL,ajw=c0,ajx=[13,"JSX fragment"],aju=[0,cz],ajt=[1,cz],ajs=[0,y,y,0],ajq=[0,pr],ajr=y,ajI=[0,Mg],ajJ=[18,[0,0]],ajH=[0,Mg],ajG=[0,0,0,0],ajD=xJ,ajE="Nooo: ",ajz=iI,ajy="Parser error: No such thing as an expression pattern!",ajA=[0,[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],ajB=[0,"src/parser/parser_flow.ml",o4,28],ajK=[0,[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],ajS=Lo,ajT=w1,ajU=Lu,ajV=I9,ajX=I9,ajY=Lu,ajW=ev,ajZ=LK,aj0=aE,aj1=am,aj2="InterpreterDirective",aj3="interpreter",aj4="Program",aj5=ll,aj6="BreakStatement",aj7=ll,aj8="ContinueStatement",aj9="DebuggerStatement",akd=iQ,ake="DeclareExportAllDeclaration",aj_=iQ,aj$=xV,aka=y6,akb=iI,akc="DeclareExportDeclaration",akf=ia,akg=aE,akh=b,aki="DeclareModule",akj=aN,akk="DeclareModuleExports",akl=jP,akm=aE,akn="DoWhileStatement",ako="EmptyStatement",akp=DP,akq=y6,akr="ExportDefaultDeclaration",akx=DP,aky=Ao,akz=iQ,akA="ExportAllDeclaration",aks=DP,akt=iQ,aku=xV,akv=y6,akw="ExportNamedDeclaration",akB="directive",akC=aM,akD="ExpressionStatement",akE=aE,akF="update",akG=jP,akH=fH,akI="ForStatement",akJ="each",akK=aE,akL=cA,akM=hE,akN="ForInStatement",akO=iE,akP=aE,akQ=cA,akR=hE,akS="ForOfStatement",akT=I0,akU=ze,akV=jP,akW="IfStatement",akX=ev,ak2=hJ,ak3=am,akY=KA,akZ=iQ,ak0=xV,ak1="ImportDeclaration",ak4=aE,ak5=ll,ak6="LabeledStatement",ak7=br,ak8="ReturnStatement",ak9="cases",ak_="discriminant",ak$="SwitchStatement",ala=br,alb="ThrowStatement",alc="finalizer",ald="handler",ale=cx,alf="TryStatement",alg=aE,alh=jP,ali="WhileStatement",alj=aE,alk=Ay,all="WithStatement",alm=Lr,aln="ArrayExpression",alo=bj,alp=ns,alq=aM,alr=bQ,als=CN,alt=h_,alu=aE,alv=cB,alw=b,alx="ArrowFunctionExpression",aly=aN,alz=aM,alA="AsExpression",alF=AW,alB=cA,alC=hE,alD=jD,alE="AssignmentExpression",alG=cA,alH=hE,alI=jD,alJ="BinaryExpression",alK="CallExpression",alL=I0,alM=ze,alN=jP,alO="ConditionalExpression",alP=iQ,alQ="ImportExpression",alR=Mo,alW=JQ,alX=Ef,alS=cA,alT=hE,alU=jD,alV="LogicalExpression",alY="MemberExpression",alZ=tD,al0=kQ,al1="MetaProperty",al2=zp,al3=qk,al4=KV,al5="NewExpression",al6=BF,al7="ObjectExpression",al8=bZ,al9="OptionalCallExpression",al_=bZ,al$="OptionalMemberExpression",ama=LZ,amb="SequenceExpression",amc="Super",amd="ThisExpression",ame=aN,amf=aM,amg="TypeCastExpression",amh=aN,ami=aM,amj="SatisfiesExpression",amk=aM,aml="AsConstExpression",amm=br,amn="AwaitExpression",amo=cd,amt=hA,amu=Kz,amv=K6,amw=hJ,amx=hH,amy=k7,amz="matched above",amp=br,amq=KI,amr=jD,ams="UnaryExpression",amA=Kp,amF=JW,amB=KI,amC=br,amD=jD,amE="UpdateExpression",amG="delegate",amH=br,amI="YieldExpression",amT="Unexpected FunctionDeclaration with BodyExpression",amJ=bj,amK=ns,amL=aM,amM=bQ,amN=CN,amO=h_,amP=aE,amQ=cB,amR=b,amS="FunctionDeclaration",am4="Unexpected FunctionExpression with BodyExpression",amU=bj,amV=ns,amW=aM,amX=bQ,amY=CN,amZ=h_,am0=aE,am1=cB,am2=b,am3="FunctionExpression",am5=bZ,am6=aN,am7=bK,am8=zJ,am9=bZ,am_=aN,am$=bK,ana="PrivateIdentifier",anb=bZ,anc=aN,and=bK,ane=zJ,anf=ze,ang=jP,anh="SwitchCase",ani=aE,anj="param",ank="CatchClause",anl=aE,anm="BlockStatement",ann=ia,ano=b,anp="DeclareVariable",anq=bQ,anr=b,ans="DeclareFunction",ant=Ks,anu=iN,anv=f9,anw=aE,anx=bj,any=b,anz="DeclareClass",anA=bj,anB=vb,anC=cB,anD=Dp,anE=cB,anF=b,anG="DeclareComponent",anH=bj,anI=vb,anJ=Dp,anK=cB,anL="ComponentTypeAnnotation",anM=bZ,anN=aN,anO=bK,anP="ComponentTypeParameter",anQ=aE,anR=b,anS="DeclareEnum",anT=f9,anU=aE,anV=bj,anW=b,anX="DeclareInterface",anY=am,anZ=ev,an0=Ao,an1="ExportNamespaceSpecifier",an2=cA,an3=bj,an4=b,an5="DeclareTypeAlias",an6=cA,an7=bj,an8=b,an9="TypeAlias",an_="DeclareOpaqueType",aod="OpaqueType",an$="supertype",aoa="impltype",aob=bj,aoc=b,aoe="ClassDeclaration",aof="ClassExpression",aog=n4,aoh=iN,aoi="superTypeParameters",aoj="superClass",aok=bj,aol=aE,aom=b,aon=aM,aoo="Decorator",aop=bj,aoq=b,aor="ClassImplements",aos=aE,aot="ClassBody",aou=iM,aoC=k9,aoD=iV,aoE=jt,aov=n4,aow=jM,aox=bR,aoy=ia,aoz=am,aoA=iO,aoB="MethodDefinition",aoF=kV,aoN=n4,aoG=bi,aoH=bR,aoI=jM,aoJ=aN,aoK=am,aoL=iO,aoM=Lw,aoX="Internal Error: Private name found in class prop",aoO=kV,aoW=n4,aoP=bi,aoQ=bR,aoR=jM,aoS=aN,aoT=am,aoU=iO,aoV=Lw,aoY=bj,aoZ=vb,ao0=cB,ao1=b,ao2=aE,ao3="ComponentDeclaration",ao4=br,ao5=vQ,ao6=cA,ao7=hE,ao8=nP,ao9=z8,ao_=kT,ao$=bK,apa="ComponentParameter",apF=fH,apG=b,apH="EnumBigIntMember",apz=b,apA=JJ,apv=fH,apw=b,apx="EnumStringMember",app=b,apq=JJ,apk=fH,apl=b,apm="EnumNumberMember",apd=fH,ape=b,apf="EnumBooleanMember",apb=kZ,apc=oQ,apg=lh,aph="EnumBooleanBody",api=kZ,apj=oQ,apn=lh,apo="EnumNumberBody",apr=kZ,aps=oQ,apt=lh,apu="EnumStringBody",apy=kZ,apB=lh,apC="EnumSymbolBody",apD=kZ,apE=oQ,apI=lh,apJ="EnumBigIntBody",apK=aE,apL=b,apM="EnumDeclaration",apN=f9,apO=aE,apP=bj,apQ=b,apR="InterfaceDeclaration",apS=bj,apT=b,apU="InterfaceExtends",apV=aN,apW=BF,apX="ObjectPattern",apY=aN,apZ=Lr,ap0="ArrayPattern",ap1=cA,ap2=hE,ap3=nP,ap4=aN,ap5=bK,ap6=zJ,ap7=br,ap8=vQ,ap9=br,ap_=vQ,ap$=cA,aqa=hE,aqb=nP,aqc=fH,aql=fH,aqm=iV,aqn=jt,aqk=L4,aqd=jM,aqe=z8,aqf=k9,aqg=ia,aqh=am,aqi=iO,aqj=Kf,aqo=br,aqp=J4,aqq=cA,aqr=hE,aqs=nP,aqt=jM,aqu=z8,aqv=k9,aqw=ia,aqx=am,aqy=iO,aqz=Kf,aqA=br,aqB=J4,aqC=cc,aqD=am,aqE=jz,aqF=cc,aqG=iX,aqH=am,aqI=jz,aqJ=cc,aqK=am,aqL=jz,aqM=hI,aqQ=hD,aqN=cc,aqO=am,aqP=jz,aqR="flags",aqS=cs,aqT="regex",aqU=cc,aqV=am,aqW=jz,aqX=cc,aqY=am,aqZ=jz,aq0=LZ,aq1="quasis",aq2="TemplateLiteral",aq3="cooked",aq4=cc,aq5="tail",aq6=am,aq7="TemplateElement",aq8="quasi",aq9="tag",aq_="TaggedTemplateExpression",aq$=k4,ara=jF,arb=lo,arc=ia,ard="declarations",are="VariableDeclaration",arf=fH,arg=b,arh="VariableDeclarator",ari="plus",arl=Jz,arm=jO,arn=h$,aro=DB,arp="in-out",arj=ia,ark="Variance",arq="AnyTypeAnnotation",arr="MixedTypeAnnotation",ars="EmptyTypeAnnotation",art="VoidTypeAnnotation",aru="NullLiteralTypeAnnotation",arv="SymbolTypeAnnotation",arw="NumberTypeAnnotation",arx="BigIntTypeAnnotation",ary="StringTypeAnnotation",arz="BooleanTypeAnnotation",arA=aN,arB="NullableTypeAnnotation",arC="UnknownTypeAnnotation",arD="NeverTypeAnnotation",arE="UndefinedTypeAnnotation",arF=jR,arG=aN,arH="parameterName",arI="TypePredicate",arJ=bj,arK=Dp,arL=ns,arM=iP,arN=cB,arO="FunctionTypeAnnotation",arP=bZ,arQ=aN,arR=bK,arS=Jy,arT=bZ,arU=aN,arV=bK,arW=Jy,arX=[0,0,0,0,0],arY="internalSlots",arZ="callProperties",ar0="indexers",ar1=BF,ar2="exact",ar3="inexact",ar4="ObjectTypeAnnotation",asf=L4,asg="There should not be computed object type property keys",ar5=fH,asd=iV,ase=jt,ar6=ia,ar7=bi,ar8=v8,ar9=bR,ar_=bZ,ar$=k9,asa=am,asb=iO,asc="ObjectTypeProperty",ash=br,asi="ObjectTypeSpreadProperty",asj=bi,ask=bR,asl=am,asm=iO,asn=b,aso="ObjectTypeIndexer",asp=bR,asq=am,asr="ObjectTypeCallProperty",ass=bZ,ast=bi,asu="sourceType",asv="propType",asw="keyTparam",asx="ObjectTypeMappedTypeProperty",asy=am,asz=k9,asA=bR,asB=bZ,asC=b,asD="ObjectTypeInternalSlot",asE=aE,asF=f9,asG="InterfaceTypeAnnotation",asH=Km,asI="ArrayTypeAnnotation",asJ="falseType",asK="trueType",asL="extendsType",asM="checkType",asN="ConditionalTypeAnnotation",asO="typeParameter",asP="InferTypeAnnotation",asQ=b,asR=JV,asS="QualifiedTypeIdentifier",asT=bj,asU=b,asV="GenericTypeAnnotation",asW="indexType",asX="objectType",asY="IndexedAccessType",asZ=bZ,as0="OptionalIndexedAccessType",as1=uf,as2="UnionTypeAnnotation",as3=uf,as4="IntersectionTypeAnnotation",as5=qk,as6=br,as7="TypeofTypeAnnotation",as8=b,as9=JV,as_="QualifiedTypeofIdentifier",as$=br,ata="KeyofTypeAnnotation",atb=jG,atc=J_,atd=Jq,ate=aN,atf=jD,atg="TypeOperator",ath=br,ati="ReadOnlyTypeAnnotation",atj="elementTypes",atk="TupleTypeAnnotation",atl=bZ,atm=bi,atn=Km,ato=ll,atp="TupleTypeLabeledElement",atq=aN,atr=ll,ats="TupleTypeSpreadElement",att=cc,atu=am,atv="StringLiteralTypeAnnotation",atw=cc,atx=am,aty="NumberLiteralTypeAnnotation",atz=cc,atA=am,atB="BigIntLiteralTypeAnnotation",atC=hI,atG=hD,atD=cc,atE=am,atF="BooleanLiteralTypeAnnotation",atH="ExistsTypeAnnotation",atI=aN,atJ=JG,atK=aN,atL=JG,atM=cB,atN="TypeParameterDeclaration",atO="usesExtendsBound",atP=iI,atQ=bi,atR="bound",atS=bK,atT="TypeParameter",atU=cB,atV=JI,atW=cB,atX=JI,atY=jE,atZ=J6,at0="closingElement",at1="openingElement",at2="JSXElement",at3="closingFragment",at4=J6,at5="openingFragment",at6="JSXFragment",at7=qk,at8="selfClosing",at9="attributes",at_=bK,at$="JSXOpeningElement",aua="JSXOpeningFragment",aub=bK,auc="JSXClosingElement",aud="JSXClosingFragment",aue=am,auf=bK,aug="JSXAttribute",auh=br,aui="JSXSpreadAttribute",aul="JSXEmptyExpression",auj=aM,auk="JSXExpressionContainer",aum=aM,aun="JSXSpreadChild",auo=cc,aup=am,auq="JSXText",aur=tD,aus=Ay,aut="JSXMemberExpression",auu=bK,auv="namespace",auw="JSXNamespacedName",aux=bK,auy="JSXIdentifier",auz=Ao,auA=kT,auB="ExportSpecifier",auC=kT,auD="ImportDefaultSpecifier",auE=kT,auF="ImportNamespaceSpecifier",auG=KA,auH=kT,auI="imported",auJ="ImportSpecifier",auK="Line",auM="Block",auL=am,auN=am,auO="DeclaredPredicate",auP="InferredPredicate",auQ=zp,auR=qk,auS=KV,auT=jM,auU=tD,auV=Ay,ajQ="message",ajR=w1,ajN=Kb,ajO=vP,ajP=iQ,ajL=kR,ajM=n_,auW=[0,fe,fa,gL,fV,fb,g3,ep,gY,e5,eO,gB,gt,cx,fA,gi,bT,fS,du,ef,d4,g9,et,cS,dY,hc,c$,dz,gX,fk,fh,dR,g5,fE,fs,gy,gH,fv,e7,ej,ds,dI,cT,fQ,gP,da,dZ,es,gw,gq,he,gj,gh,db,bL,bN,gR,c8,gc,fl,fU,gr,gQ,cZ,ed,gl,c5,dX,de,bC,fo,dM,c_,ei,fF,dK,dq,fm,eg,cW,cX,gU,fB,gx,dG,fY,fd,g$,d7,fP,aM,df,gO,eZ,dy,ha,e$,eb,fO,g0,eo,gS,eE,eJ,fy,d0,dv,dP,gk,dF,hg,dA,fx,dk,gs,dj,ff,f1,gI,dU,fj,eF,fr,dr,fD,cb,eS,eV,dE,bg,er,dt,dm,fX,c9,eH,c1,eQ,bs,gN,dN,d9,em,eI,dQ,g2,fI,f2,en,fz,dW,e6,dL,ea,fG,di,f6,dh,dB,eU,fM,dO,go,gp,fi,gm,eN,dp,fZ,fp,eP,f0,fK,fg,f3,eT,gK,eB,gd,ex,dJ,f8,f_,eA,e1,g6,c7,g8,gC,e_,d6,fL,gz,dT,gv,cU,eW,gM,d$,fw,d1,fu,fN,gn,eX,dl,fc,cs,dV,fC,eM,gg,gb,dD,eK,dn,hb,dH,fn,eC,e4,d2,g1,d8,f5,gW,c3,e3,eG,bQ,ge,fJ,gT,gZ,dc,g7,fW,bS,gf,ey,dC,ga,gA,ek,fT,eh,bP,eD,dx,e9,gu,f$,fq,c6,bM,dS,ee,el,gV,cY,hf,hd,eq,e8,ft,cV,eR,f7,dg,e0,eL,gF,d3,d5,dw,g_,fR,gJ,ez,e2,eY,g4,ew,f4,dd,bi,c4,ec,eu,bf],auX=[0,bf,eu,ec,c4,bi,dd,f4,ew,g4,eY,e2,ez,gJ,fR,g_,dw,d5,d3,gF,eL,e0,dg,f7,eR,cV,ft,e8,eq,hd,hf,cY,gV,el,ee,dS,bM,c6,fq,f$,gu,e9,dx,eD,bP,eh,fT,ek,gA,ga,dC,ey,gf,bS,fW,g7,dc,gZ,gT,fJ,ge,bQ,eG,e3,c3,gW,f5,d8,g1,d2,e4,eC,fn,dH,hb,dn,eK,dD,gb,gg,eM,fC,dV,cs,fc,dl,eX,gn,fN,fu,d1,fw,d$,gM,eW,cU,gv,dT,gz,fL,d6,e_,gC,g8,c7,g6,e1,eA,f_,f8,dJ,ex,gd,eB,gK,eT,f3,fg,fK,f0,eP,fp,fZ,dp,eN,gm,fi,gp,go,dO,fM,eU,dB,dh,f6,di,fG,ea,dL,e6,dW,fz,en,f2,fI,g2,dQ,eI,em,d9,dN,gN,bs,eQ,c1,eH,c9,fX,dm,dt,er,bg,dE,eV,eS,cb,fD,dr,fr,eF,fj,dU,gI,f1,ff,dj,gs,dk,fx,dA,hg,dF,gk,dP,dv,d0,fy,eJ,eE,gS,eo,g0,fO,eb,e$,ha,dy,eZ,gO,df,aM,fP,d7,g$,fd,fY,dG,gx,fB,gU,cX,cW,eg,fm,dq,dK,fF,ei,c_,dM,fo,bC,de,dX,c5,gl,ed,cZ,gQ,gr,fU,fl,gc,c8,gR,bN,bL,db,gh,gj,he,gq,gw,es,dZ,da,gP,fQ,cT,dI,ds,ej,e7,fv,gH,gy,fs,fE,g5,dR,fh,fk,gX,dz,c$,hc,dY,cS,et,g9,d4,ef,du,fS,bT,gi,fA,cx,gt,gB,eO,e5,gY,ep,g3,fb,fV,gL,fa,fe],auY=[0,ga,f2,dk,fD,f1,fS,f_,d6,dh,dN,fA,cV,d1,bP,fN,d7,c$,gv,e6,dJ,eQ,fz,ei,fm,eu,dD,eF,eE,hb,gm,dZ,fr,fF,eB,cb,c4,e$,e4,gr,ef,fx,d4,ea,fB,eG,dU,gS,eD,gC,eV,ek,c9,c_,eN,gd,fk,gy,fc,fe,f5,dI,dg,fL,c3,fM,g5,fw,bQ,cU,ff,dl,gK,f6,dL,dr,eP,gh,e8,cW,eU,fp,gs,d2,fV,cZ,dG,fg,gZ,dV,gL,fo,du,gf,bi,e3,gc,dw,g7,dE,eO,eJ,dS,dQ,dz,g6,dx,bC,fO,ft,bf,fZ,ee,fl,d8,ez,eM,c8,gT,e5,e2,gH,fU,eA,ew,dW,g3,hf,d9,dq,eZ,fu,g$,dp,gg,ha,d3,hd,ds,dd,cY,dC,d5,fT,eY,dR,c1,eo,fs,f0,dj,ej,g4,fv,e1,gp,da,gY,fK,cS,gX,fQ,gb,go,cT,f3,bg,bS,g_,gF,eh,eK,bM,bN,f8,eS,gn,df,en,cs,gi,gk,dK,eH,fE,fP,dA,fI,gI,fR,eg,ge,d0,dt,cX,fY,gq,c7,ey,e_,fX,gM,fn,eq,gz,gW,eW,eL,ed,et,gQ,gt,eI,e9,dM,gV,fj,fJ,er,dT,dY,g8,fG,fh,gN,de,eR,fa,f4,dX,g9,f7,c5,di,g2,gj,fi,dH,ex,em,dy,dO,e0,f$,ep,gw,dn,gB,aM,fC,e7,gO,el,dP,dv,gA,bL,hg,gP,g1,gx,gl,fq,gu,fy,fd,gJ,g0,eX,cx,dm,hc,dB,d$,dF,gR,fW,gU,bT,fb,bs,db,ec,es,dc,eb,he,eC,c6,eT],au0="Jsoo_runtime.Error.Exn",au$=[0,0],au5="use_strict",au6=uf,au7="esproposal_decorators",au8="enums",au9="components",ava="Internal error: ";function
av(a){if(typeof
a==="number")return 0;switch(a[0]){case
0:return[0,av(a[1])];case
1:return[1,av(a[1])];case
2:return[2,av(a[1])];case
3:return[3,av(a[1])];case
4:return[4,av(a[1])];case
5:return[5,av(a[1])];case
6:return[6,av(a[1])];case
7:return[7,av(a[1])];case
8:var
c=a[1];return[8,c,av(a[2])];case
9:var
b=a[1];return[9,b,b,av(a[3])];case
10:return[10,av(a[1])];case
11:return[11,av(a[1])];case
12:return[12,av(a[1])];case
13:return[13,av(a[1])];default:return[14,av(a[1])]}}function
bm(a,b){if(typeof
a==="number")return b;switch(a[0]){case
0:return[0,bm(a[1],b)];case
1:return[1,bm(a[1],b)];case
2:return[2,bm(a[1],b)];case
3:return[3,bm(a[1],b)];case
4:return[4,bm(a[1],b)];case
5:return[5,bm(a[1],b)];case
6:return[6,bm(a[1],b)];case
7:return[7,bm(a[1],b)];case
8:var
c=a[1];return[8,c,bm(a[2],b)];case
9:var
d=a[2],e=a[1];return[9,e,d,bm(a[3],b)];case
10:return[10,bm(a[1],b)];case
11:return[11,bm(a[1],b)];case
12:return[12,bm(a[1],b)];case
13:return[13,bm(a[1],b)];default:return[14,bm(a[1],b)]}}function
ap(a,b){if(typeof
a==="number")return b;switch(a[0]){case
0:return[0,ap(a[1],b)];case
1:return[1,ap(a[1],b)];case
2:var
c=a[1];return[2,c,ap(a[2],b)];case
3:var
d=a[1];return[3,d,ap(a[2],b)];case
4:var
e=a[3],f=a[2],g=a[1];return[4,g,f,e,ap(a[4],b)];case
5:var
h=a[3],i=a[2],j=a[1];return[5,j,i,h,ap(a[4],b)];case
6:var
k=a[3],l=a[2],m=a[1];return[6,m,l,k,ap(a[4],b)];case
7:var
n=a[3],o=a[2],p=a[1];return[7,p,o,n,ap(a[4],b)];case
8:var
q=a[3],r=a[2],s=a[1];return[8,s,r,q,ap(a[4],b)];case
9:var
t=a[1];return[9,t,ap(a[2],b)];case
10:return[10,ap(a[1],b)];case
11:var
u=a[1];return[11,u,ap(a[2],b)];case
12:var
v=a[1];return[12,v,ap(a[2],b)];case
13:var
w=a[2],x=a[1];return[13,x,w,ap(a[3],b)];case
14:var
y=a[2],z=a[1];return[14,z,y,ap(a[3],b)];case
15:return[15,ap(a[1],b)];case
16:return[16,ap(a[1],b)];case
17:var
A=a[1];return[17,A,ap(a[2],b)];case
18:var
B=a[1];return[18,B,ap(a[2],b)];case
19:return[19,ap(a[1],b)];case
20:var
C=a[2],D=a[1];return[20,D,C,ap(a[3],b)];case
21:var
E=a[1];return[21,E,ap(a[2],b)];case
22:return[22,ap(a[1],b)];case
23:var
F=a[1];return[23,F,ap(a[2],b)];default:var
G=a[2],H=a[1];return[24,H,G,ap(a[3],b)]}}function
qL(a,b,c){return a[1]===b?(a[1]=c,1):0}function
C(a){throw t([0,cl,a],1)}function
aX(a){throw t([0,qM,a],1)}function
lA(a){return 0<=a?a:-a|0}var
Ne=LJ;function
I(a,b){var
c=H(a),e=H(b),d=as(c+e|0);hh(a,0,d,0,c);hh(b,0,d,c,e);return ba(d)}function
Nf(a){return a?Ng:Nh}function
J(a,b){if(!a)return b;var
c=a[1];return[0,c,J(a[2],b)]}avN(0);var
Nj=M2(1),cG=M2(2);function
Nk(a){var
b=avO(0);for(;;){if(!b)return 0;var
d=b[2],e=b[1];try{hj(e)}catch(f){var
c=ay(f);if(c[1]!==EI)throw t(c,0)}var
b=d}}function
jZ(a,b){return Ex(a,b,0,H(b))}function
EJ(a){jZ(cG,a);M3(cG,10);return hj(cG)}var
qO=[0,Nk];function
qP(a){return k(qO[1],0)}EC(Ly,qP);var
EL=avY(0)[1],j0=(4*avX(0)|0)-1|0,No=[c,Nn,hN(0)];function
Np(a){throw t(No,1)}function
lB(a,b){return b?[0,k(a,b[1])]:0}function
EM(a){return 25<a+n8>>>0?a:a+MG|0}function
cH(a){var
c=0,b=a;for(;;){if(!b)return c;var
c=c+1|0,b=b[2]}}function
j1(a){return a?a[1]:C(Nw)}function
EN(a){return a?a[2]:C(Nx)}function
cI(a,b){var
c=a,d=b;for(;;){if(!c)return d;var
e=[0,c[1],d],c=c[2],d=e}}function
B(a){return cI(a,0)}function
j2(a){if(!a)return 0;var
b=a[1];return J(b,j2(a[2]))}function
cm(a,b){if(!b)return 0;var
c=b[2],d=k(a,b[1]);return[0,d,cm(a,c)]}function
lC(a,b){var
d=0,c=b;for(;;){if(!c)return d;var
e=c[2],d=[0,k(a,c[1]),d],c=e}}function
a7(a,b){var
c=b;for(;;){if(!c)return 0;var
d=c[2];k(a,c[1]);var
c=d}}function
aI(a,b,c){var
e=b,d=c;for(;;){if(!d)return e;var
f=d[2],e=j(a,e,d[1]),d=f}}function
qQ(a,b,c){if(!b)return c;var
d=b[1];return j(a,d,qQ(a,b[2],c))}function
EO(a,b,c){var
e=b,d=c;for(;;){if(e){if(d){var
f=d[2],g=e[2];j(a,e[1],d[1]);var
e=g,d=f;continue}}else if(!d)return 0;return aX(Ny)}}function
qR(a,b){var
c=b;for(;;){if(!c)return 0;var
e=c[2],d=k(a,c[1]);if(d)return d;var
c=e}}function
qS(a,b){var
c=b;for(;;){if(!c)return 0;var
e=c[2],d=0===MT(c[1],a)?1:0;if(d)return d;var
c=e}}function
j3(f){var
g=0;return function(a){var
c=g,b=a;for(;;){if(!b)return B(c);var
d=b[2],e=b[1];if(k(f,e)){var
c=[0,e,c],b=d;continue}var
b=d}}}function
ik(a,b){var
c=as(a);avo(c,0,a,b);return c}function
EP(a){var
b=b3(a),c=as(b);hL(a,0,c,0,b);return c}function
EQ(a,b,c){if(0<=b&&0<=c&&(b3(a)-c|0)>=b){var
d=as(c);hL(a,b,d,0,c);return d}return aX(Nz)}function
i3(a,b,c){return ba(EQ(a,b,c))}function
ER(a,b,c,d,e){if(0<=e&&0<=b&&(b3(a)-e|0)>=b&&0<=d&&(b3(c)-e|0)>=d)return hL(a,b,c,d,e);return aX(NA)}function
hk(a,b,c,d,e){if(0<=e&&0<=b&&(H(a)-e|0)>=b&&0<=d&&(b3(c)-e|0)>=d)return hh(a,b,c,d,e);return aX(NB)}function
lD(a,b){return ba(ik(a,b))}function
aY(a,b,c){return ba(EQ(hi(a),b,c))}function
ES(a){var
b=hi(a);if(0===b3(b))var
d=b;else{var
c=EP(b);ab(c,0,EM(bD(b,0)));var
d=c}return ba(d)}function
ET(a,b){var
d=H(a),e=d<=H(b)?1:0;if(!e)return e;var
c=0;for(;;){if(c===d)return 1;if(v(b,c)!==v(a,c))return 0;var
c=c+1|0}}var
ND=z;function
EU(a,b){var
d=b.length-1-1|0,e=0;if(d>=0){var
c=e;for(;;){k(a,b[1+c]);var
f=c+1|0;if(d!==c){var
c=f;continue}break}}return 0}function
lE(a,b){var
d=b.length-1;if(0===d)return[0];var
e=jV(d,k(a,b[1])),f=d-1|0,g=1;if(f>=1){var
c=g;for(;;){e[1+c]=k(a,b[1+c]);var
h=c+1|0;if(f!==c){var
c=h;continue}break}}return e}function
j4(a){if(!a)return[0];var
d=0,c=a,g=a[2],h=a[1];for(;;){if(c){var
d=d+1|0,c=c[2];continue}var
f=jV(d,h),e=1,b=g;for(;;){if(!b)return f;var
i=b[2];f[1+e]=b[1];var
e=e+1|0,b=i}}}function
EV(a){try{var
c=[0,lw(a)];return c}catch(f){var
b=ay(f);if(b[1]===cl)return 0;throw t(b,0)}}function
qT(h){function
i(a){return a?a[5]:0}function
g(a,b,c,d){var
e=i(a),f=i(d),g=f<=e?e+1|0:f+1|0;return[0,a,b,c,d,g]}function
r(a,b){return[0,0,a,b,0,1]}function
e(a,b,c,d){var
h=a?a[5]:0,j=d?d[5]:0;if((j+2|0)<h){if(!a)return aX(NH);var
e=a[4],m=a[3],n=a[2],k=a[1],q=i(e);if(q<=i(k))return g(k,n,m,g(e,b,c,d));if(!e)return aX(NG);var
r=e[3],s=e[2],t=e[1],u=g(e[4],b,c,d);return g(g(k,n,m,t),s,r,u)}if((h+2|0)>=j){var
A=j<=h?h+1|0:j+1|0;return[0,a,b,c,d,A]}if(!d)return aX(NJ);var
l=d[4],o=d[3],p=d[2],f=d[1],v=i(f);if(v<=i(l))return g(g(a,b,c,f),p,o,l);if(!f)return aX(NI);var
w=f[3],x=f[2],y=f[1],z=g(f[4],p,o,l);return g(g(a,b,c,y),x,w,z)}var
D=0;function
P(a){return a?0:1}function
p(a,b,c){if(!c)return[0,0,a,b,0,1];var
d=c[4],g=c[3],i=c[2],f=c[1],n=c[5],k=j(h[1],a,i);if(0===k)return g===b?c:[0,f,a,b,d,n];if(0<=k){var
l=p(a,b,d);return d===l?c:e(f,i,g,l)}var
m=p(a,b,f);return f===m?c:e(m,i,g,d)}function
Q(a,b){var
c=b;for(;;){if(!c)throw t(a6,1);var
e=c[4],f=c[3],g=c[1],d=j(h[1],a,c[2]);if(0===d)return f;var
i=0<=d?e:g,c=i}}function
S(a,b){var
d=b;for(;;){if(!d)throw t(a6,1);var
h=d[2],m=d[4],n=d[3],o=d[1];if(!k(a,h)){var
d=m;continue}var
f=h,e=n,c=o;for(;;){if(!c)return[0,f,e];var
g=c[2],i=c[4],j=c[3],l=c[1];if(k(a,g)){var
f=g,e=j,c=l;continue}var
c=i}}}function
T(a,b){var
d=b;for(;;){if(!d)return 0;var
h=d[2],m=d[4],n=d[3],o=d[1];if(!k(a,h)){var
d=m;continue}var
f=h,e=n,c=o;for(;;){if(!c)return[0,[0,f,e]];var
g=c[2],i=c[4],j=c[3],l=c[1];if(k(a,g)){var
f=g,e=j,c=l;continue}var
c=i}}}function
U(a,b){var
d=b;for(;;){if(!d)throw t(a6,1);var
h=d[2],m=d[4],n=d[3],o=d[1];if(!k(a,h)){var
d=o;continue}var
f=h,e=n,c=m;for(;;){if(!c)return[0,f,e];var
g=c[2],i=c[4],j=c[3],l=c[1];if(k(a,g)){var
f=g,e=j,c=i;continue}var
c=l}}}function
V(a,b){var
d=b;for(;;){if(!d)return 0;var
h=d[2],m=d[4],n=d[3],o=d[1];if(!k(a,h)){var
d=o;continue}var
f=h,e=n,c=m;for(;;){if(!c)return[0,[0,f,e]];var
g=c[2],i=c[4],j=c[3],l=c[1];if(k(a,g)){var
f=g,e=j,c=i;continue}var
c=l}}}function
W(a,b){var
c=b;for(;;){if(!c)return 0;var
e=c[4],f=c[3],g=c[1],d=j(h[1],a,c[2]);if(0===d)return[0,f];var
i=0<=d?e:g,c=i}}function
X(a,b){var
c=b;for(;;){if(!c)return 0;var
f=c[4],g=c[1],d=j(h[1],a,c[2]),e=0===d?1:0;if(e)return e;var
i=0<=d?f:g,c=i}}function
c(a){var
b=a;for(;;){if(!b)throw t(a6,1);var
c=b[1];if(!c)return[0,b[2],b[3]];var
b=c}}function
a(a){var
b=a;for(;;){if(!b)return 0;var
c=b[1];if(!c)return[0,[0,b[2],b[3]]];var
b=c}}function
Y(a){var
b=a;for(;;){if(!b)throw t(a6,1);if(!b[4])return[0,b[2],b[3]];var
b=b[4]}}function
Z(a){var
b=a;for(;;){if(!b)return 0;if(!b[4])return[0,[0,b[2],b[3]]];var
b=b[4]}}function
u(a){if(!a)return aX(NK);var
b=a[1];if(!b)return a[4];var
c=a[4],d=a[3],f=a[2];return e(u(b),f,d,c)}function
E(a,b){if(!a)return b;if(!b)return a;var
d=c(b),f=d[2],g=d[1];return e(a,g,f,u(b))}function
v(a,b){if(!b)return 0;var
c=b[4],g=b[3],f=b[2],d=b[1],i=j(h[1],a,f);if(0===i)return E(d,c);if(0<=i){var
k=v(a,c);return c===k?b:e(d,f,g,k)}var
l=v(a,d);return d===l?b:e(l,f,g,c)}function
w(a,b,c){if(!c){var
q=k(b,0);return q?[0,0,a,q[1],0,1]:0}var
d=c[4],g=c[3],i=c[2],f=c[1],r=c[5],l=j(h[1],a,i);if(0===l){var
m=k(b,[0,g]);if(!m)return E(f,d);var
n=m[1];return g===n?c:[0,f,a,n,d,r]}if(0<=l){var
o=w(a,b,d);return d===o?c:e(f,i,g,o)}var
p=w(a,b,f);return f===p?c:e(p,i,g,d)}function
F(a,b){var
c=b;for(;;){if(!c)return 0;var
d=c[4],e=c[3],f=c[2];F(a,c[1]);j(a,f,e);var
c=d}}function
x(a,b){if(!b)return 0;var
c=b[5],d=b[4],e=b[3],f=b[2],g=x(a,b[1]),h=k(a,e);return[0,g,f,h,x(a,d),c]}function
y(a,b){if(!b)return 0;var
c=b[2],d=b[5],e=b[4],f=b[3],g=y(a,b[1]),h=j(a,c,f);return[0,g,c,h,y(a,e),d]}function
G(a,b,c){var
d=b,e=c;for(;;){if(!d)return e;var
f=d[4],g=d[3],h=d[2],i=s(a,h,g,G(a,d[1],e)),d=f,e=i}}function
H(a,b){var
c=b;for(;;){if(!c)return 1;var
g=c[4],h=c[1],d=j(a,c[2],c[3]);if(d){var
e=H(a,h);if(e){var
c=g;continue}var
f=e}else
var
f=d;return f}}function
I(a,b){var
c=b;for(;;){if(!c)return 0;var
g=c[4],h=c[1],d=j(a,c[2],c[3]);if(d)var
e=d;else{var
f=I(a,h);if(!f){var
c=g;continue}var
e=f}return e}}function
J(a,b,c){if(!c)return r(a,b);var
d=c[4],f=c[3],g=c[2];return e(J(a,b,c[1]),g,f,d)}function
K(a,b,c){if(!c)return r(a,b);var
d=c[3],f=c[2],g=c[1];return e(g,f,d,K(a,b,c[4]))}function
f(a,b,c,d){if(!a)return J(b,c,d);if(!d)return K(b,c,a);var
h=d[5],i=a[5],j=d[4],k=d[3],l=d[2],m=d[1],n=a[4],o=a[3],p=a[2],q=a[1];return(h+2|0)<i?e(q,p,o,f(n,b,c,d)):(i+2|0)<h?e(f(a,b,c,m),l,k,j):g(a,b,c,d)}function
m(a,b){if(!a)return b;if(!b)return a;var
d=c(b),e=d[2],g=d[1];return f(a,g,e,u(b))}function
q(a,b,c,d){return c?f(a,b,c[1],d):m(a,d)}function
l(a,b){if(!b)return NL;var
c=b[4],d=b[3],e=b[2],g=b[1],m=j(h[1],a,e);if(0===m)return[0,g,[0,d],c];if(0<=m){var
i=l(a,c),n=i[3],o=i[2];return[0,f(g,e,d,i[1]),o,n]}var
k=l(a,g),p=k[2],q=k[1];return[0,q,p,f(k[3],e,d,c)]}function
n(a,b,c){if(b){var
d=b[2],h=b[5],j=b[4],k=b[3],m=b[1];if(i(c)<=h){var
e=l(d,c),o=e[2],p=e[1],r=n(a,j,e[3]),u=s(a,d,[0,k],o);return q(n(a,m,p),d,u,r)}}else if(!c)return 0;if(!c)throw t([0,R,NM],1);var
f=c[2],v=c[4],w=c[3],x=c[1],g=l(f,b),y=g[2],z=g[1],A=n(a,g[3],v),B=s(a,f,y,[0,w]);return q(n(a,z,x),f,B,A)}function
o(a,b,c){if(b){if(c){var
i=c[3],d=c[2],j=b[3],e=b[2],v=c[4],w=c[1],x=b[4],y=b[1];if(c[5]<=b[5]){var
g=l(e,c),k=g[2],z=g[3],m=o(a,y,g[1]),n=o(a,x,z);return k?q(m,e,s(a,e,j,k[1]),n):f(m,e,j,n)}var
h=l(d,b),p=h[2],A=h[3],r=o(a,h[1],w),t=o(a,A,v);return p?q(r,d,s(a,d,p[1],i),t):f(r,d,i,t)}var
u=b}else
var
u=c;return u}function
z(a,b){if(!b)return 0;var
e=b[4],g=b[3],h=b[2],i=b[1],c=z(a,i),k=j(a,h,g),d=z(a,e);if(!k)return m(c,d);if(i===c&&e===d)return b;return f(c,h,g,d)}function
A(a,b){if(!b)return 0;var
c=b[2],h=b[4],i=b[3],d=A(a,b[1]),e=j(a,c,i),g=A(a,h);return e?f(d,c,e[1],g):m(d,g)}function
B(a,b){if(!b)return NN;var
c=b[3],d=b[2],n=b[4],e=B(a,b[1]),g=e[2],h=e[1],o=j(a,d,c),i=B(a,n),k=i[2],l=i[1];if(o){var
p=m(g,k);return[0,f(h,d,c,l),p]}var
q=f(g,d,c,k);return[0,m(h,l),q]}function
d(a,b){var
c=a,d=b;for(;;){if(!c)return d;var
e=[0,c[2],c[3],c[4],d],c=c[1],d=e}}function
_(a,b,c){var
r=d(c,0),f=d(b,0),e=r;for(;;){if(!f)return e?-1:0;if(!e)return 1;var
k=e[4],l=e[3],m=e[2],n=f[4],o=f[3],p=f[2],g=j(h[1],f[1],e[1]);if(0!==g)return g;var
i=j(a,p,m);if(0!==i)return i;var
q=d(l,k),f=d(o,n),e=q}}function
$(a,b,c){var
s=d(c,0),f=d(b,0),e=s;for(;;){if(!f)return e?0:1;if(!e)return 0;var
l=e[4],m=e[3],n=e[2],o=f[4],p=f[3],q=f[2],g=0===j(h[1],f[1],e[1])?1:0;if(g){var
i=j(a,q,n);if(i){var
r=d(m,l),f=d(p,o),e=r;continue}var
k=i}else
var
k=g;return k}}function
b(a){if(!a)return 0;var
c=a[1],d=b(a[4]);return(b(c)+1|0)+d|0}function
L(a,b){var
d=a,c=b;for(;;){if(!c)return d;var
e=c[3],f=c[2],g=c[1],d=[0,[0,f,e],L(d,c[4])],c=g}}function
aa(a){return L(0,a)}function
M(a,b){var
c=b,e=a;for(;;){var
d=k(e,0);if(!d)return c;var
f=d[1],g=d[2],c=p(f[1],f[2],c),e=g}}function
ab(a){return M(a,D)}function
C(a,b){if(!a)return 0;var
c=a[2],e=a[1],f=d(a[3],a[4]);return[0,[0,e,c],function(a){return C(f,a)}]}function
ac(a){var
b=d(a,0);return function(a){return C(b,a)}}function
N(a,b){var
c=a,d=b;for(;;){if(!c)return d;var
e=[0,c[2],c[3],c[1],d],c=c[4],d=e}}function
O(a,b){if(!a)return 0;var
c=a[2],d=a[1],e=N(a[3],a[4]);return[0,[0,d,c],function(a){return O(e,a)}]}function
ad(a){var
b=N(a,0);return function(a){return O(b,a)}}return[0,D,P,X,p,w,r,v,n,o,_,$,F,G,H,I,z,A,B,b,aa,c,a,Y,Z,c,a,l,Q,W,S,T,U,V,x,y,ac,ad,function(a,b){var
c=b,d=0;for(;;){if(c){var
e=c[4],g=c[3],f=c[2],l=c[1],i=j(h[1],f,a);if(0!==i){if(0<=i){var
c=l,d=[0,f,g,e,d];continue}var
c=e;continue}var
k=[0,f,g,e,d]}else
var
k=d;return function(a){return C(k,a)}}},M,ab]}function
j5(a){return[0,0,0]}function
j6(a){a[1]=0;a[2]=0;return 0}function
il(a,b){b[1]=[0,a,b[1]];b[2]=b[2]+1|0;return 0}function
i4(a){var
b=a[1];if(!b)return 0;var
c=b[1];a[1]=b[2];a[2]=a[2]-1|0;return[0,c]}function
i5(a){var
b=a[1];return b?[0,b[1]]:0}var
NP=[c,NO,hN(0)];function
EW(a){return[0,0,0,0]}function
qU(a){a[1]=0;a[2]=0;a[3]=0;return 0}function
qV(a,b){var
c=[0,a,0],d=b[3];return d?(b[1]=b[1]+1|0,d[2]=c,b[3]=c,0):(b[1]=1,b[2]=c,b[3]=c,0)}function
ad(a){var
b=1<=a?a:1,c=j0<b?j0:b,d=as(c);return[0,d,0,c,d]}function
az(a){return i3(a[1],0,a[2])}function
qW(a,b){var
d=a[2],c=[0,a[3]];for(;;){if(c[1]<(d+b|0)){c[1]=2*c[1]|0;continue}if(j0<c[1])if((d+b|0)<=j0)c[1]=j0;else
C(NT);var
e=as(c[1]);ER(a[1],0,e,0,a[2]);a[1]=e;a[3]=c[1];if((a[2]+b|0)>a[3])throw t([0,R,NS],1);if((d+b|0)<=a[3])return 0;throw t([0,R,NR],1)}}function
bU(a,b){var
c=a[2];if(a[3]<=c)qW(a,1);ab(a[1],c,b);a[2]=c+1|0;return 0}function
EX(a,b,c,d){var
e=c<0?1:0;if(e)var
f=e;else
var
h=d<0?1:0,f=h||((H(b)-d|0)<c?1:0);if(f)aX(NU);var
g=a[2]+d|0;if(a[3]<g)qW(a,d);hh(b,c,a[1],a[2],d);a[2]=g;return 0}function
qX(a,b,c,d){return EX(a,ba(b),c,d)}function
M(a,b){var
c=H(b),d=a[2]+c|0;if(a[3]<d)qW(a,c);hh(b,0,a[1],a[2],c);a[2]=d;return 0}function
qY(a){return 5===a[2]?12:-6}function
EY(a){return[0,0,as(a)]}function
EZ(a,b){var
c=b3(a[2]),d=a[1]+b|0,e=c<d?1:0;if(e){var
f=c*2|0,i=d<=f?f:d,g=as(i);ER(a[2],0,g,0,c);a[2]=g;var
h=0}else
var
h=e;return h}function
i6(a,b){EZ(a,1);jU(a[2],a[1],b);a[1]=a[1]+1|0;return 0}function
a8(a,b){var
c=H(b);EZ(a,c);hk(b,0,a[2],a[1],c);a[1]=a[1]+c|0;return 0}function
E0(a){return i3(a[2],0,a[1])}function
E1(a){if(typeof
a==="number")switch(a){case
0:return NV;case
1:return NW;case
2:return NX;case
3:return NY;case
4:return NZ;case
5:return N0;default:return N1}switch(a[0]){case
0:return a[1];case
1:return a[1];default:return I(N2,lD(1,a[1]))}}function
qZ(a,b){var
c=b;for(;;){if(typeof
c==="number")return 0;switch(c[0]){case
0:var
d=c[1];a8(a,N3);var
c=d;continue;case
1:var
e=c[1];a8(a,N4);var
c=e;continue;case
2:var
f=c[1];a8(a,N5);var
c=f;continue;case
3:var
g=c[1];a8(a,N6);var
c=g;continue;case
4:var
h=c[1];a8(a,N7);var
c=h;continue;case
5:var
i=c[1];a8(a,N8);var
c=i;continue;case
6:var
j=c[1];a8(a,N9);var
c=j;continue;case
7:var
k=c[1];a8(a,N_);var
c=k;continue;case
8:var
l=c[2],m=c[1];a8(a,N$);qZ(a,m);a8(a,Oa);var
c=l;continue;case
9:var
n=c[3],o=c[1];a8(a,Ob);qZ(a,o);a8(a,Oc);var
c=n;continue;case
10:var
p=c[1];a8(a,Od);var
c=p;continue;case
11:var
q=c[1];a8(a,Oe);var
c=q;continue;case
12:var
r=c[1];a8(a,Of);var
c=r;continue;case
13:var
s=c[1];a8(a,Og);var
c=s;continue;default:var
t=c[1];a8(a,Oh);var
c=t;continue}}}function
aJ(a){if(typeof
a==="number")return 0;switch(a[0]){case
0:return[0,aJ(a[1])];case
1:return[1,aJ(a[1])];case
2:return[2,aJ(a[1])];case
3:return[3,aJ(a[1])];case
4:return[4,aJ(a[1])];case
5:return[5,aJ(a[1])];case
6:return[6,aJ(a[1])];case
7:return[7,aJ(a[1])];case
8:var
b=a[1];return[8,b,aJ(a[2])];case
9:var
c=a[2],d=a[1];return[9,c,d,aJ(a[3])];case
10:return[10,aJ(a[1])];case
11:return[11,aJ(a[1])];case
12:return[12,aJ(a[1])];case
13:return[13,aJ(a[1])];default:return[14,aJ(a[1])]}}function
a9(a){if(typeof
a!=="number")switch(a[0]){case
0:var
b=a9(a[1]),v=b[4],w=b[3],x=b[2],y=b[1],z=function(a){k(x,0);return 0};return[0,function(a){k(y,0);return 0},z,w,v];case
1:var
c=a9(a[1]),A=c[4],B=c[3],C=c[2],D=c[1],E=function(a){k(C,0);return 0};return[0,function(a){k(D,0);return 0},E,B,A];case
2:var
d=a9(a[1]),F=d[4],G=d[3],H=d[2],I=d[1],J=function(a){k(H,0);return 0};return[0,function(a){k(I,0);return 0},J,G,F];case
3:var
e=a9(a[1]),K=e[4],L=e[3],M=e[2],N=e[1],O=function(a){k(M,0);return 0};return[0,function(a){k(N,0);return 0},O,L,K];case
4:var
f=a9(a[1]),P=f[4],Q=f[3],R=f[2],S=f[1],T=function(a){k(R,0);return 0};return[0,function(a){k(S,0);return 0},T,Q,P];case
5:var
g=a9(a[1]),U=g[4],V=g[3],W=g[2],X=g[1],Y=function(a){k(W,0);return 0};return[0,function(a){k(X,0);return 0},Y,V,U];case
6:var
h=a9(a[1]),Z=h[4],_=h[3],$=h[2],aa=h[1],ab=function(a){k($,0);return 0};return[0,function(a){k(aa,0);return 0},ab,_,Z];case
7:var
i=a9(a[1]),ac=i[4],ad=i[3],ae=i[2],af=i[1],ag=function(a){k(ae,0);return 0};return[0,function(a){k(af,0);return 0},ag,ad,ac];case
8:var
j=a9(a[2]),ah=j[4],ai=j[3],aj=j[2],ak=j[1],al=function(a){k(aj,0);return 0};return[0,function(a){k(ak,0);return 0},al,ai,ah];case
9:var
am=a[2],an=a[1],l=a9(a[3]),ao=l[4],ap=l[3],aq=l[2],ar=l[1],m=a9(aR(aJ(an),am)),as=m[4],at=m[3],au=m[2],av=m[1],aw=function(a){k(as,0);k(ao,0);return 0},ax=function(a){k(ap,0);k(at,0);return 0},ay=function(a){k(au,0);k(aq,0);return 0};return[0,function(a){k(ar,0);k(av,0);return 0},ay,ax,aw];case
10:var
n=a9(a[1]),az=n[4],aA=n[3],aB=n[2],aC=n[1],aD=function(a){k(aB,0);return 0};return[0,function(a){k(aC,0);return 0},aD,aA,az];case
11:var
o=a9(a[1]),aE=o[4],aF=o[3],aG=o[2],aH=o[1],aI=function(a){k(aG,0);return 0};return[0,function(a){k(aH,0);return 0},aI,aF,aE];case
12:var
p=a9(a[1]),aK=p[4],aL=p[3],aM=p[2],aN=p[1],aO=function(a){k(aM,0);return 0};return[0,function(a){k(aN,0);return 0},aO,aL,aK];case
13:var
q=a9(a[1]),aP=q[4],aQ=q[3],aS=q[2],aT=q[1],aU=function(a){k(aP,0);return 0},aV=function(a){k(aQ,0);return 0},aW=function(a){k(aS,0);return 0};return[0,function(a){k(aT,0);return 0},aW,aV,aU];default:var
r=a9(a[1]),aX=r[4],aY=r[3],aZ=r[2],a0=r[1],a1=function(a){k(aX,0);return 0},a2=function(a){k(aY,0);return 0},a3=function(a){k(aZ,0);return 0};return[0,function(a){k(a0,0);return 0},a3,a2,a1]}function
s(a){return 0}function
t(a){return 0}function
u(a){return 0}return[0,function(a){return 0},u,t,s]}function
aR(a,b){var
c=0;if(typeof
a==="number"){if(typeof
b==="number")return 0;switch(b[0]){case
10:break;case
11:c=1;break;case
12:c=2;break;case
13:c=3;break;case
14:c=4;break;case
8:c=5;break;case
9:c=6;break;default:throw t([0,R,Oi],1)}}else
switch(a[0]){case
0:var
d=0,u=a[1];if(typeof
b==="number")d=1;else
switch(b[0]){case
0:return[0,aR(u,b[1])];case
8:c=5;break;case
9:c=6;break;case
10:break;case
11:c=1;break;case
12:c=2;break;case
13:c=3;break;case
14:c=4;break;default:d=1}if(d)c=7;break;case
1:var
e=0,v=a[1];if(typeof
b==="number")e=1;else
switch(b[0]){case
1:return[1,aR(v,b[1])];case
8:c=5;break;case
9:c=6;break;case
10:break;case
11:c=1;break;case
12:c=2;break;case
13:c=3;break;case
14:c=4;break;default:e=1}if(e)c=7;break;case
2:var
f=0,w=a[1];if(typeof
b==="number")f=1;else
switch(b[0]){case
2:return[2,aR(w,b[1])];case
8:c=5;break;case
9:c=6;break;case
10:break;case
11:c=1;break;case
12:c=2;break;case
13:c=3;break;case
14:c=4;break;default:f=1}if(f)c=7;break;case
3:var
g=0,x=a[1];if(typeof
b==="number")g=1;else
switch(b[0]){case
3:return[3,aR(x,b[1])];case
8:c=5;break;case
9:c=6;break;case
10:break;case
11:c=1;break;case
12:c=2;break;case
13:c=3;break;case
14:c=4;break;default:g=1}if(g)c=7;break;case
4:var
h=0,y=a[1];if(typeof
b==="number")h=1;else
switch(b[0]){case
4:return[4,aR(y,b[1])];case
8:c=5;break;case
9:c=6;break;case
10:break;case
11:c=1;break;case
12:c=2;break;case
13:c=3;break;case
14:c=4;break;default:h=1}if(h)c=7;break;case
5:var
i=0,z=a[1];if(typeof
b==="number")i=1;else
switch(b[0]){case
5:return[5,aR(z,b[1])];case
8:c=5;break;case
9:c=6;break;case
10:break;case
11:c=1;break;case
12:c=2;break;case
13:c=3;break;case
14:c=4;break;default:i=1}if(i)c=7;break;case
6:var
j=0,A=a[1];if(typeof
b==="number")j=1;else
switch(b[0]){case
6:return[6,aR(A,b[1])];case
8:c=5;break;case
9:c=6;break;case
10:break;case
11:c=1;break;case
12:c=2;break;case
13:c=3;break;case
14:c=4;break;default:j=1}if(j)c=7;break;case
7:var
l=0,B=a[1];if(typeof
b==="number")l=1;else
switch(b[0]){case
7:return[7,aR(B,b[1])];case
8:c=5;break;case
9:c=6;break;case
10:break;case
11:c=1;break;case
12:c=2;break;case
13:c=3;break;case
14:c=4;break;default:l=1}if(l)c=7;break;case
8:var
m=0,C=a[2],D=a[1];if(typeof
b==="number")m=1;else
switch(b[0]){case
8:var
E=b[1],F=aR(C,b[2]);return[8,aR(D,E),F];case
10:break;case
11:c=1;break;case
12:c=2;break;case
13:c=3;break;case
14:c=4;break;default:m=1}if(m)throw t([0,R,Or],1);break;case
9:var
n=0,G=a[3],H=a[2],I=a[1];if(typeof
b==="number")n=1;else
switch(b[0]){case
8:c=5;break;case
9:var
J=b[3],K=b[2],L=b[1],s=a9(aR(aJ(H),L)),M=s[4];k(s[2],0);k(M,0);return[9,I,K,aR(G,J)];case
10:break;case
11:c=1;break;case
12:c=2;break;case
13:c=3;break;case
14:c=4;break;default:n=1}if(n)throw t([0,R,Os],1);break;case
10:var
N=a[1];if(typeof
b!=="number"&&10===b[0])return[10,aR(N,b[1])];throw t([0,R,Ot],1);case
11:var
o=0,O=a[1];if(typeof
b==="number")o=1;else
switch(b[0]){case
10:break;case
11:return[11,aR(O,b[1])];default:o=1}if(o)throw t([0,R,Ou],1);break;case
12:var
p=0,P=a[1];if(typeof
b==="number")p=1;else
switch(b[0]){case
10:break;case
11:c=1;break;case
12:return[12,aR(P,b[1])];default:p=1}if(p)throw t([0,R,Ov],1);break;case
13:var
q=0,Q=a[1];if(typeof
b==="number")q=1;else
switch(b[0]){case
10:break;case
11:c=1;break;case
12:c=2;break;case
13:return[13,aR(Q,b[1])];default:q=1}if(q)throw t([0,R,Ow],1);break;default:var
r=0,S=a[1];if(typeof
b==="number")r=1;else
switch(b[0]){case
10:break;case
11:c=1;break;case
12:c=2;break;case
13:c=3;break;case
14:return[14,aR(S,b[1])];default:r=1}if(r)throw t([0,R,Ox],1)}switch(c){case
0:throw t([0,R,Ol],1);case
1:throw t([0,R,Om],1);case
2:throw t([0,R,On],1);case
3:throw t([0,R,Oo],1);case
4:throw t([0,R,Op],1);case
5:throw t([0,R,Oj],1);case
6:throw t([0,R,Ok],1);default:throw t([0,R,Oq],1)}}var
aZ=[c,Oy,hN(0)];function
lF(a,b){if(typeof
a==="number")return[0,0,b];if(0===a[0])return[0,[0,a[1],a[2]],b];if(typeof
b!=="number"&&2===b[0])return[0,[1,a[1]],b[1]];throw t(aZ,1)}function
j7(a,b,c){var
d=lF(a,c);if(typeof
b!=="number")return[0,d[1],[0,b[1]],d[2]];if(!b)return[0,d[1],0,d[2]];var
e=d[2];if(typeof
e!=="number"&&2===e[0])return[0,d[1],1,e[1]];throw t(aZ,1)}function
bE(a,b,c){var
d=aj(b,c);return[0,[23,a,d[1]],d[2]]}function
aj(a,b){if(typeof
a==="number")return[0,0,b];switch(a[0]){case
0:if(typeof
b!=="number"&&0===b[0]){var
s=aj(a[1],b[1]);return[0,[0,s[1]],s[2]]}break;case
1:if(typeof
b!=="number"&&0===b[0]){var
u=aj(a[1],b[1]);return[0,[1,u[1]],u[2]]}break;case
2:var
ab=a[2],v=lF(a[1],b),e=v[2],ac=v[1];if(typeof
e!=="number"&&1===e[0]){var
w=aj(ab,e[1]);return[0,[2,ac,w[1]],w[2]]}throw t(aZ,1);case
3:var
ad=a[2],x=lF(a[1],b),f=x[2],ae=x[1];if(typeof
f!=="number"&&1===f[0]){var
y=aj(ad,f[1]);return[0,[3,ae,y[1]],y[2]]}throw t(aZ,1);case
4:var
af=a[4],ag=a[1],g=j7(a[2],a[3],b),h=g[3],ah=g[1];if(typeof
h!=="number"&&2===h[0]){var
ai=g[2],z=aj(af,h[1]);return[0,[4,ag,ah,ai,z[1]],z[2]]}throw t(aZ,1);case
5:var
ak=a[4],al=a[1],i=j7(a[2],a[3],b),j=i[3],am=i[1];if(typeof
j!=="number"&&3===j[0]){var
an=i[2],A=aj(ak,j[1]);return[0,[5,al,am,an,A[1]],A[2]]}throw t(aZ,1);case
6:var
ao=a[4],ap=a[1],k=j7(a[2],a[3],b),l=k[3],aq=k[1];if(typeof
l!=="number"&&4===l[0]){var
ar=k[2],B=aj(ao,l[1]);return[0,[6,ap,aq,ar,B[1]],B[2]]}throw t(aZ,1);case
7:var
as=a[4],at=a[1],m=j7(a[2],a[3],b),n=m[3],au=m[1];if(typeof
n!=="number"&&5===n[0]){var
aw=m[2],C=aj(as,n[1]);return[0,[7,at,au,aw,C[1]],C[2]]}throw t(aZ,1);case
8:var
ax=a[4],ay=a[1],o=j7(a[2],a[3],b),p=o[3],az=o[1];if(typeof
p!=="number"&&6===p[0]){var
aA=o[2],D=aj(ax,p[1]);return[0,[8,ay,az,aA,D[1]],D[2]]}throw t(aZ,1);case
9:var
aB=a[2],E=lF(a[1],b),q=E[2],aC=E[1];if(typeof
q!=="number"&&7===q[0]){var
F=aj(aB,q[1]);return[0,[9,aC,F[1]],F[2]]}throw t(aZ,1);case
10:var
G=aj(a[1],b);return[0,[10,G[1]],G[2]];case
11:var
aD=a[1],H=aj(a[2],b);return[0,[11,aD,H[1]],H[2]];case
12:var
aE=a[1],I=aj(a[2],b);return[0,[12,aE,I[1]],I[2]];case
13:if(typeof
b!=="number"&&8===b[0]){var
J=b[1],aF=b[2],aG=a[3],aH=a[1];if(ly([0,a[2]],[0,J]))throw t(aZ,1);var
K=aj(aG,aF);return[0,[13,aH,J,K[1]],K[2]]}break;case
14:if(typeof
b!=="number"&&9===b[0]){var
L=b[1],aI=b[3],aJ=a[3],aK=a[2],aL=a[1],aM=[0,av(L)];if(ly([0,av(aK)],aM))throw t(aZ,1);var
M=aj(aJ,av(aI));return[0,[14,aL,L,M[1]],M[2]]}break;case
15:if(typeof
b!=="number"&&10===b[0]){var
N=aj(a[1],b[1]);return[0,[15,N[1]],N[2]]}break;case
16:if(typeof
b!=="number"&&11===b[0]){var
O=aj(a[1],b[1]);return[0,[16,O[1]],O[2]]}break;case
17:var
aN=a[1],P=aj(a[2],b);return[0,[17,aN,P[1]],P[2]];case
18:var
Q=a[2],r=a[1];if(0===r[0]){var
U=r[1],aR=U[2],V=aj(U[1],b),aS=V[1],W=aj(Q,V[2]);return[0,[18,[0,[0,aS,aR]],W[1]],W[2]]}var
X=r[1],aT=X[2],Y=aj(X[1],b),aU=Y[1],Z=aj(Q,Y[2]);return[0,[18,[1,[0,aU,aT]],Z[1]],Z[2]];case
19:if(typeof
b!=="number"&&13===b[0]){var
R=aj(a[1],b[1]);return[0,[19,R[1]],R[2]]}break;case
20:if(typeof
b!=="number"&&1===b[0]){var
aO=a[2],aP=a[1],S=aj(a[3],b[1]);return[0,[20,aP,aO,S[1]],S[2]]}break;case
21:if(typeof
b!=="number"&&2===b[0]){var
aQ=a[1],T=aj(a[2],b[1]);return[0,[21,aQ,T[1]],T[2]]}break;case
23:var
d=a[2],c=a[1];if(typeof
c!=="number")switch(c[0]){case
0:return bE(c,d,b);case
1:return bE(c,d,b);case
2:return bE(c,d,b);case
3:return bE(c,d,b);case
4:return bE(c,d,b);case
5:return bE(c,d,b);case
6:return bE(c,d,b);case
7:return bE(c,d,b);case
8:return bE([8,c[1],c[2]],d,b);case
9:var
aV=c[1],$=bv(c[2],d,b),aa=$[2];return[0,[23,[9,aV,$[1]],aa[1]],aa[2]];case
10:return bE(c,d,b);default:return bE(c,d,b)}switch(c){case
0:return bE(c,d,b);case
1:return bE(c,d,b);case
2:if(typeof
b!=="number"&&14===b[0]){var
_=aj(d,b[1]);return[0,[23,2,_[1]],_[2]]}throw t(aZ,1);default:return bE(c,d,b)}}throw t(aZ,1)}function
bv(a,b,c){if(typeof
a==="number")return[0,0,aj(b,c)];switch(a[0]){case
0:if(typeof
c!=="number"&&0===c[0]){var
f=bv(a[1],b,c[1]);return[0,[0,f[1]],f[2]]}break;case
1:if(typeof
c!=="number"&&1===c[0]){var
g=bv(a[1],b,c[1]);return[0,[1,g[1]],g[2]]}break;case
2:if(typeof
c!=="number"&&2===c[0]){var
h=bv(a[1],b,c[1]);return[0,[2,h[1]],h[2]]}break;case
3:if(typeof
c!=="number"&&3===c[0]){var
i=bv(a[1],b,c[1]);return[0,[3,i[1]],i[2]]}break;case
4:if(typeof
c!=="number"&&4===c[0]){var
j=bv(a[1],b,c[1]);return[0,[4,j[1]],j[2]]}break;case
5:if(typeof
c!=="number"&&5===c[0]){var
l=bv(a[1],b,c[1]);return[0,[5,l[1]],l[2]]}break;case
6:if(typeof
c!=="number"&&6===c[0]){var
m=bv(a[1],b,c[1]);return[0,[6,m[1]],m[2]]}break;case
7:if(typeof
c!=="number"&&7===c[0]){var
n=bv(a[1],b,c[1]);return[0,[7,n[1]],n[2]]}break;case
8:if(typeof
c!=="number"&&8===c[0]){var
o=c[1],x=c[2],y=a[2];if(ly([0,a[1]],[0,o]))throw t(aZ,1);var
p=bv(y,b,x);return[0,[8,o,p[1]],p[2]]}break;case
9:if(typeof
c!=="number"&&9===c[0]){var
d=c[2],e=c[1],z=c[3],A=a[3],B=a[2],C=a[1],D=[0,av(e)];if(ly([0,av(C)],D))throw t(aZ,1);var
E=[0,av(d)];if(ly([0,av(B)],E))throw t(aZ,1);var
q=a9(aR(aJ(e),d)),F=q[4];k(q[2],0);k(F,0);var
r=bv(av(A),b,z),G=r[2];return[0,[9,e,d,aJ(r[1])],G]}break;case
10:if(typeof
c!=="number"&&10===c[0]){var
s=bv(a[1],b,c[1]);return[0,[10,s[1]],s[2]]}break;case
11:if(typeof
c!=="number"&&11===c[0]){var
u=bv(a[1],b,c[1]);return[0,[11,u[1]],u[2]]}break;case
13:if(typeof
c!=="number"&&13===c[0]){var
v=bv(a[1],b,c[1]);return[0,[13,v[1]],v[2]]}break;case
14:if(typeof
c!=="number"&&14===c[0]){var
w=bv(a[1],b,c[1]);return[0,[14,w[1]],w[2]]}break}throw t(aZ,1)}function
bF(a,b,c){var
d=H(c),h=0<=b?a:0,f=lA(b);if(f<=d)return c;var
l=2===h?48:32,e=ik(f,l);switch(h){case
0:hk(c,0,e,0,d);break;case
1:hk(c,0,e,f-d|0,d);break;default:var
g=0;if(0<d){var
i=0;if(43!==ax(c,0)&&45!==ax(c,0)&&32!==ax(c,0)){g=1;i=1}if(!i){jU(e,0,ax(c,0));hk(c,1,e,(f-d|0)+1|0,d-1|0)}}else
g=1;if(g){var
j=0;if(1<d&&48===ax(c,0)){var
k=0;if(d_===ax(c,1)||88===ax(c,1))k=1;if(k){jU(e,1,ax(c,1));hk(c,2,e,(f-d|0)+2|0,d-2|0);j=1}}if(!j)hk(c,0,e,f-d|0,d)}}return ba(e)}function
i7(a,b){var
d=lA(a),c=H(b),e=ax(b,0),f=0;if(58<=e){if(71<=e){if(5>=e+n8>>>0)f=1}else if(65<=e)f=1}else{var
i=0;if(32===e)i=1;else if(43<=e)switch(e+Eb|0){case
5:if(c<(d+2|0)&&1<c){var
k=0;if(d_!==ax(b,1)&&88!==ax(b,1))k=1;if(!k){var
h=ik(d+2|0,48);jU(h,1,ax(b,1));hk(b,2,h,(d-c|0)+4|0,c-2|0);return ba(h)}}f=1;break;case
0:case
2:i=1;break;case
1:case
3:case
4:break;default:f=1}if(i&&c<(d+1|0)){var
g=ik(d+1|0,48);jU(g,0,e);hk(b,1,g,(d-c|0)+2|0,c-1|0);return ba(g)}}if(f&&c<d){var
j=ik(d,48);hk(b,0,j,d-c|0,c);return ba(j)}return b}function
Oz(a){var
k=0,B=H(a);for(;;){if(B<=k)var
o=a;else{var
n=v(a,k)+MG|0,p=0;if(59<n>>>0){if(33<n+DJ>>>0)p=1}else if(2===n)p=1;if(!p){var
k=k+1|0;continue}var
f=hi(a),b=[0,0],r=b3(f)-1|0,x=0;if(r>=0){var
j=x;for(;;){var
g=bD(f,j),h=0;if(32<=g){var
l=g-34|0,q=0;if(58<l>>>0){if(93>l)q=1}else if(56<l-1>>>0)h=1;else
q=1;if(q){var
m=1;h=2}}else
if(11<=g){if(13===g)h=1}else if(8<=g)h=1;switch(h){case
0:var
m=4;break;case
1:var
m=2;break}b[1]=b[1]+m|0;var
A=j+1|0;if(r!==j){var
j=A;continue}break}}if(b[1]===b3(f))var
t=EP(f);else{var
c=as(b[1]);b[1]=0;var
s=b3(f)-1|0,y=0;if(s>=0){var
i=y;for(;;){var
d=bD(f,i),e=0;if(35<=d)if(92===d)e=2;else if(aa<=d)e=1;else
e=3;else if(32<=d)if(34<=d)e=2;else
e=3;else if(14<=d)e=1;else
switch(d){case
8:ab(c,b[1],92);b[1]++;ab(c,b[1],98);break;case
9:ab(c,b[1],92);b[1]++;ab(c,b[1],gE);break;case
10:ab(c,b[1],92);b[1]++;ab(c,b[1],aD);break;case
13:ab(c,b[1],92);b[1]++;ab(c,b[1],b1);break;default:e=1}switch(e){case
1:ab(c,b[1],92);b[1]++;ab(c,b[1],48+(d/b0|0)|0);b[1]++;ab(c,b[1],48+((d/10|0)%10|0)|0);b[1]++;ab(c,b[1],48+(d%10|0)|0);break;case
2:ab(c,b[1],92);b[1]++;ab(c,b[1],d);break;case
3:ab(c,b[1],d);break}b[1]++;var
z=i+1|0;if(s!==i){var
i=z;continue}break}}var
t=c}var
o=ba(t)}var
u=H(o),w=ik(u+2|0,34);hh(o,0,w,1,u);return ba(w)}}function
E2(a,b){var
f=lA(b),e=Po[1];switch(a[2]){case
0:var
c=c2;break;case
1:var
c=ch;break;case
2:var
c=69;break;case
3:var
c=cD;break;case
4:var
c=71;break;case
5:var
c=e;break;case
6:var
c=ca;break;case
7:var
c=72;break;default:var
c=70}var
d=EY(16);i6(d,37);switch(a[1]){case
0:break;case
1:i6(d,43);break;default:i6(d,32)}if(8<=a[2])i6(d,35);i6(d,46);a8(d,y+f);i6(d,c);return E0(d)}function
lG(a,b){if(13>a)return b;var
h=[0,0],i=H(b)-1|0,n=0;if(i>=0){var
d=n;for(;;){if(9>=v(b,d)+aG>>>0)h[1]++;var
q=d+1|0;if(i!==d){var
d=q;continue}break}}var
j=h[1],k=as(H(b)+((j-1|0)/3|0)|0),l=[0,0];function
e(a){jU(k,l[1],a);l[1]++;return 0}var
f=[0,((j-1|0)%3|0)+1|0],m=H(b)-1|0,o=0;if(m>=0){var
c=o;for(;;){var
g=v(b,c);if(9<g+aG>>>0)e(g);else{if(0===f[1]){e(95);f[1]=3}f[1]+=-1;e(g)}var
p=c+1|0;if(m!==c){var
c=p;continue}break}}return ba(k)}function
Pp(a,b){switch(a){case
1:var
c=OB;break;case
2:var
c=OC;break;case
4:var
c=OE;break;case
5:var
c=OF;break;case
6:var
c=OG;break;case
7:var
c=OH;break;case
8:var
c=OI;break;case
9:var
c=OJ;break;case
10:var
c=OK;break;case
11:var
c=OL;break;case
0:case
13:var
c=OA;break;case
3:case
14:var
c=OD;break;default:var
c=OM}return lG(a,qA(c,b))}function
Pq(a,b){switch(a){case
1:var
c=O1;break;case
2:var
c=O2;break;case
4:var
c=O4;break;case
5:var
c=O5;break;case
6:var
c=O6;break;case
7:var
c=O7;break;case
8:var
c=O8;break;case
9:var
c=O9;break;case
10:var
c=O_;break;case
11:var
c=O$;break;case
0:case
13:var
c=O0;break;case
3:case
14:var
c=O3;break;default:var
c=Pa}return lG(a,qA(c,b))}function
Pr(a,b){switch(a){case
1:var
c=Pc;break;case
2:var
c=Pd;break;case
4:var
c=Pf;break;case
5:var
c=Pg;break;case
6:var
c=Ph;break;case
7:var
c=Pi;break;case
8:var
c=Pj;break;case
9:var
c=Pk;break;case
10:var
c=Pl;break;case
11:var
c=Pm;break;case
0:case
13:var
c=Pb;break;case
3:case
14:var
c=Pe;break;default:var
c=Pn}return lG(a,qA(c,b))}function
Ps(a,b){switch(a){case
1:var
c=OO;break;case
2:var
c=OP;break;case
4:var
c=OR;break;case
5:var
c=OS;break;case
6:var
c=OT;break;case
7:var
c=OU;break;case
8:var
c=OV;break;case
9:var
c=OW;break;case
10:var
c=OX;break;case
11:var
c=OY;break;case
0:case
13:var
c=ON;break;case
3:case
14:var
c=OQ;break;default:var
c=OZ}return lG(a,avw(c,b))}function
hl(d,b,c){function
i(a){switch(d[1]){case
0:var
e=45;break;case
1:var
e=43;break;default:var
e=32}return avr(c,b,e)}function
p(a){var
b=avl(c);return 3===b?c<0.?Pu:Pv:4<=b?Pw:a}switch(d[2]){case
5:var
f=En(E2(d,b),c),e=0,s=H(f);for(;;){if(e===s)var
o=0;else{var
j=ax(f,e)+iR|0,k=0;if(23<j>>>0){if(55===j)k=1}else if(21<j-1>>>0)k=1;if(!k){var
e=e+1|0;continue}var
o=1}var
t=o?f:I(f,Pt);return p(t)}case
6:return i(0);case
7:var
h=hi(i(0)),g=b3(h);if(0===g)var
n=h;else{var
l=as(g),m=g-1|0,q=0;if(m>=0){var
a=q;for(;;){ab(l,a,EM(bD(h,a)));var
r=a+1|0;if(m!==a){var
a=r;continue}break}}var
n=l}return ba(n);case
8:return p(i(0));default:return En(E2(d,b),c)}}function
lH(k,i,h,d,e,f,g){if(typeof
d==="number"){if(typeof
e==="number")return e?function(a,b){return Z(k,[4,i,i7(a,j(f,g,b))],h)}:function(a){return Z(k,[4,i,j(f,g,a)],h)};var
b=e[1];return function(a){return Z(k,[4,i,i7(b,j(f,g,a))],h)}}if(0===d[0]){var
c=d[2],l=d[1];if(typeof
e==="number")return e?function(a,b){return Z(k,[4,i,bF(l,c,i7(a,j(f,g,b)))],h)}:function(a){return Z(k,[4,i,bF(l,c,j(f,g,a))],h)};var
n=e[1];return function(a){return Z(k,[4,i,bF(l,c,i7(n,j(f,g,a)))],h)}}var
m=d[1];if(typeof
e==="number")return e?function(a,b,c){return Z(k,[4,i,bF(m,a,i7(b,j(f,g,c)))],h)}:function(a,b){return Z(k,[4,i,bF(m,a,j(f,g,b))],h)};var
o=e[1];return function(a,b){return Z(k,[4,i,bF(m,a,i7(o,j(f,g,b)))],h)}}function
q0(g,f,c,d,e){if(typeof
d==="number")return function(a){return Z(g,[4,f,k(e,a)],c)};if(0===d[0]){var
b=d[2],h=d[1];return function(a){return Z(g,[4,f,bF(h,b,k(e,a))],c)}}var
i=d[1];return function(a,b){return Z(g,[4,f,bF(i,a,k(e,b))],c)}}function
kP(a,b,c,d){var
f=b,e=c,g=d;for(;;){if(typeof
g==="number")return k(f,e);switch(g[0]){case
0:var
A=g[1];return function(a){return Z(f,[5,e,a],A)};case
1:var
B=g[1];return function(a){var
c=0;if(40<=a)if(92===a)var
b=Nq;else if(aa<=a)c=1;else
c=2;else if(32<=a)if(39<=a)var
b=Nr;else
c=2;else if(14<=a)c=1;else
switch(a){case
8:var
b=Ns;break;case
9:var
b=Nt;break;case
10:var
b=Nu;break;case
13:var
b=Nv;break;default:c=1}switch(c){case
1:var
d=as(4);ab(d,0,92);ab(d,1,48+(a/b0|0)|0);ab(d,2,48+((a/10|0)%10|0)|0);ab(d,3,48+(a%10|0)|0);var
b=ba(d);break;case
2:var
g=as(1);ab(g,0,a);var
b=ba(g);break}var
h=H(b),i=ik(h+2|0,39);hh(b,0,i,1,h);return Z(f,[4,e,ba(i)],B)};case
2:var
C=g[2],D=g[1];return q0(f,e,C,D,function(a){return a});case
3:return q0(f,e,g[2],g[1],Oz);case
4:return lH(f,e,g[4],g[2],g[3],Pp,g[1]);case
5:return lH(f,e,g[4],g[2],g[3],Pq,g[1]);case
6:return lH(f,e,g[4],g[2],g[3],Pr,g[1]);case
7:return lH(f,e,g[4],g[2],g[3],Ps,g[1]);case
8:var
l=g[4],m=g[3],n=g[2],i=g[1];if(typeof
n==="number"){if(typeof
m==="number")return m?function(a,b){return Z(f,[4,e,hl(i,a,b)],l)}:function(a){return Z(f,[4,e,hl(i,qY(i),a)],l)};var
W=m[1];return function(a){return Z(f,[4,e,hl(i,W,a)],l)}}if(0===n[0]){var
q=n[2],r=n[1];if(typeof
m==="number")return m?function(a,b){return Z(f,[4,e,bF(r,q,hl(i,a,b))],l)}:function(a){return Z(f,[4,e,bF(r,q,hl(i,qY(i),a))],l)};var
X=m[1];return function(a){return Z(f,[4,e,bF(r,q,hl(i,X,a))],l)}}var
s=n[1];if(typeof
m==="number")return m?function(a,b,c){return Z(f,[4,e,bF(s,a,hl(i,b,c))],l)}:function(a,b){return Z(f,[4,e,bF(s,a,hl(i,qY(i),b))],l)};var
Y=m[1];return function(a,b){return Z(f,[4,e,bF(s,a,hl(i,Y,b))],l)};case
9:return q0(f,e,g[2],g[1],Nf);case
10:var
e=[7,e],g=g[1];continue;case
11:var
e=[2,e,g[1]],g=g[2];continue;case
12:var
e=[3,e,g[1]],g=g[2];continue;case
13:var
E=g[3],F=g[2],u=EY(16);qZ(u,F);var
z=E0(u);return function(a){return Z(f,[4,e,z],E)};case
14:var
G=g[3],I=g[2];return function(a){var
c=a[1],b=aj(c,av(aJ(I)));if(typeof
b[2]==="number")return Z(f,e,ap(b[1],G));throw t(aZ,1)};case
15:var
J=g[1];return function(c,b){return Z(f,[6,e,function(a){return j(c,a,b)}],J)};case
16:var
K=g[1];return function(a){return Z(f,[6,e,a],K)};case
17:var
e=[0,e,g[1]],g=g[2];continue;case
18:var
p=g[1];if(0===p[0]){var
L=g[2],M=p[1][1],N=0,f=function(d,b,c){return function(a){return Z(b,[1,d,[0,a]],c)}}(e,f,L),e=N,g=M;continue}var
O=g[2],P=p[1][1],Q=0,f=function(d,b,c){return function(a){return Z(b,[1,d,[1,a]],c)}}(e,f,O),e=Q,g=P;continue;case
19:throw t([0,R,Py],1);case
20:var
S=g[3],T=[8,e,Pz];return function(a){return Z(f,T,S)};case
21:var
U=g[2];return function(a){return Z(f,[4,e,qA(Md,a)],U)};case
22:var
V=g[1];return function(a){return Z(f,[5,e,a],V)};case
23:var
h=g[2],o=g[1];if(typeof
o==="number")switch(o){case
0:return a<50?ai(a+1|0,f,e,h):a5(ai,[0,f,e,h]);case
1:return a<50?ai(a+1|0,f,e,h):a5(ai,[0,f,e,h]);case
2:throw t([0,R,PA],1);default:return a<50?ai(a+1|0,f,e,h):a5(ai,[0,f,e,h])}switch(o[0]){case
0:return a<50?ai(a+1|0,f,e,h):a5(ai,[0,f,e,h]);case
1:return a<50?ai(a+1|0,f,e,h):a5(ai,[0,f,e,h]);case
2:return a<50?ai(a+1|0,f,e,h):a5(ai,[0,f,e,h]);case
3:return a<50?ai(a+1|0,f,e,h):a5(ai,[0,f,e,h]);case
4:return a<50?ai(a+1|0,f,e,h):a5(ai,[0,f,e,h]);case
5:return a<50?ai(a+1|0,f,e,h):a5(ai,[0,f,e,h]);case
6:return a<50?ai(a+1|0,f,e,h):a5(ai,[0,f,e,h]);case
7:return a<50?ai(a+1|0,f,e,h):a5(ai,[0,f,e,h]);case
8:return a<50?ai(a+1|0,f,e,h):a5(ai,[0,f,e,h]);case
9:var
y=o[2];return a<50?sZ(a+1|0,f,e,y,h):a5(sZ,[0,f,e,y,h]);case
10:return a<50?ai(a+1|0,f,e,h):a5(ai,[0,f,e,h]);default:return a<50?ai(a+1|0,f,e,h):a5(ai,[0,f,e,h])}default:var
v=g[3],w=g[1],x=k(g[2],0);return a<50?sY(a+1|0,f,e,v,w,x):a5(sY,[0,f,e,v,w,x])}}}function
sZ(a,f,c,d,e){if(typeof
d==="number")return a<50?ai(a+1|0,f,c,e):a5(ai,[0,f,c,e]);switch(d[0]){case
0:var
b=d[1];return function(a){return bV(f,c,b,e)};case
1:var
g=d[1];return function(a){return bV(f,c,g,e)};case
2:var
h=d[1];return function(a){return bV(f,c,h,e)};case
3:var
i=d[1];return function(a){return bV(f,c,i,e)};case
4:var
j=d[1];return function(a){return bV(f,c,j,e)};case
5:var
k=d[1];return function(a){return bV(f,c,k,e)};case
6:var
l=d[1];return function(a){return bV(f,c,l,e)};case
7:var
m=d[1];return function(a){return bV(f,c,m,e)};case
8:var
n=d[2];return function(a){return bV(f,c,n,e)};case
9:var
o=d[3],p=d[2],q=aR(aJ(d[1]),p);return function(a){return bV(f,c,bm(q,o),e)};case
10:var
r=d[1];return function(a,b){return bV(f,c,r,e)};case
11:var
s=d[1];return function(a){return bV(f,c,s,e)};case
12:var
u=d[1];return function(a){return bV(f,c,u,e)};case
13:throw t([0,R,PB],1);default:throw t([0,R,PC],1)}}function
ai(a,b,c,d){var
e=[8,c,PD];return a<50?kP(a+1|0,b,e,d):a5(kP,[0,b,e,d])}function
sY(a,b,c,d,e,f){if(e){var
h=e[1];return function(a){return Px(b,c,d,h,k(f,a))}}var
g=[4,c,f];return a<50?kP(a+1|0,b,g,d):a5(kP,[0,b,g,d])}function
Z(a,b,c){return ED(kP(0,a,b,c))}function
bV(a,b,c,d){return ED(sZ(0,a,b,c,d))}function
Px(a,b,c,d,e){return ED(sY(0,a,b,c,d,e))}function
hm(a,b){var
c=b;for(;;){if(typeof
c==="number")return 0;switch(c[0]){case
0:var
f=c[1],g=E1(c[2]);hm(a,f);return jZ(a,g);case
1:var
d=c[2],e=c[1];if(0===d[0]){var
h=d[1];hm(a,e);jZ(a,PE);var
c=h;continue}var
i=d[1];hm(a,e);jZ(a,PF);var
c=i;continue;case
6:var
m=c[2];hm(a,c[1]);return k(m,a);case
7:hm(a,c[1]);return hj(a);case
8:var
n=c[2];hm(a,c[1]);return aX(n);case
2:case
4:var
j=c[2];hm(a,c[1]);return jZ(a,j);default:var
l=c[2];hm(a,c[1]);return M3(a,l)}}}function
hn(a,b){var
c=b;for(;;){if(typeof
c==="number")return 0;switch(c[0]){case
0:var
f=c[1],g=E1(c[2]);hn(a,f);return M(a,g);case
1:var
d=c[2],e=c[1];if(0===d[0]){var
h=d[1];hn(a,e);M(a,PG);var
c=h;continue}var
i=d[1];hn(a,e);M(a,PH);var
c=i;continue;case
6:var
m=c[2];hn(a,c[1]);return M(a,k(m,0));case
7:var
c=c[1];continue;case
8:var
n=c[2];hn(a,c[1]);return aX(n);case
2:case
4:var
j=c[2];hn(a,c[1]);return M(a,j);default:var
l=c[2];hn(a,c[1]);return bU(a,l)}}}function
E3(d,b){var
a=b[1],c=0;return Z(function(a){hm(d,a);return 0},c,a)}function
q1(a){return E3(cG,a)}function
S(a){var
b=a[1];return Z(function(a){var
b=ad(64);hn(b,a);return az(b)},0,b)}var
q2=[0,0];function
q4(a,b){var
c=a[1+b];if(!(1-(typeof
c==="number"?1:0)))return k(S(PM),c);if(i2(c)===iW)return k(S(PK),c);if(i2(c)!==zR)return PL;var
e=En("%.12g",c),d=0,h=H(e);for(;;){if(h<=d)return I(e,Ni);var
f=ax(e,d),g=0;if(48<=f){if(58>f)g=1}else if(45===f)g=1;if(!g)return e;var
d=d+1|0}}function
E4(a,b){if(a.length-1<=b)return PN;var
c=E4(a,b+1|0),d=q4(a,b);return j(S(PO),d,c)}function
lI(a){var
b=q2[1];for(;;){if(b){var
o=0,t=b[2],u=b[1];try{var
i=k(u,a)}catch(f){o=1}var
p=0;if(o||!i)p=1;else
var
g=[0,i[1]];if(p){var
b=t;continue}}else
var
g=0;if(g)return g[1];if(a===qN)return PT;if(a===EH)return PU;if(a[1]===EG){var
d=a[2],l=d[3],v=d[2],w=d[1];return bJ(S(q3),w,v,l,l+5|0,PV)}if(a[1]===R){var
e=a[2],m=e[3],x=e[2],y=e[1];return bJ(S(q3),y,x,m,m+6|0,PW)}if(a[1]===jY){var
f=a[2],n=f[3],z=f[2],A=f[1];return bJ(S(q3),A,z,n,n+6|0,PX)}if(0!==i2(a))return a[1];var
h=a.length-1,B=a[1][1];if(2<h>>>0)var
q=E4(a,2),r=q4(a,1),c=j(S(PP),r,q);else
switch(h){case
0:var
c=PQ;break;case
1:var
c=PR;break;default:var
s=q4(a,1),c=k(S(PS),s)}return I(B,c)}}function
q5(a,b){var
f=avm(b),h=f.length-1-1|0,r=0;if(h>=0){var
d=r;for(;;){var
c=aH(f,d)[1+d],g=function(b){return function(a){return a?0===b?PY:PZ:0===b?P0:P1}}(d);if(0===c[0])var
i=c[5],j=c[4],l=c[3],m=c[6]?P2:P4,n=c[2],o=c[7],p=g(c[1]),e=[0,avc(S(P3),p,o,n,m,l,j,i)];else if(c[1])var
e=0;else
var
q=g(0),e=[0,k(S(P5),q)];if(e){var
s=e[1];k(E3(a,P6),s)}var
t=d+1|0;if(h!==d){var
d=t;continue}break}}return 0}function
E5(a){for(;;){var
b=q2[1],c=1-qL(q2,b,[0,a,b]);if(c)continue;return c}}var
P8=P7.slice(),P_=[0];EC(LG,function(a,b){try{try{var
g=b?P_:MY(0);try{qP(0)}catch(f){}try{var
f=lI(a);k(q1(P9),f);q5(cG,g);var
c=avM(0);if(c<0){var
d=lA(c);EJ(aH(P8,d)[1+d])}var
j=hj(cG),h=j}catch(f){var
l=ay(f),m=lI(a);k(q1(Qa),m);q5(cG,g);var
n=lI(l);k(q1(Qb),n);q5(cG,MY(0));var
h=hj(cG)}var
i=h}catch(f){var
e=ay(f);if(e!==qN)throw t(e,0);var
i=EJ(P$)}return i}catch(f){return 0}});var
q6=[c,Qc,hN(0)],lJ=0,E6=-1;function
j8(a,b){a[13]=a[13]+b[3]|0;return qV(b,a[28])}var
E7=1000000010;function
q7(a,b){return s(a[17],b,0,H(b))}function
lK(a){return k(a[19],0)}function
E8(a,b,c){a[9]=a[9]-b|0;q7(a,c);a[11]=0;return 0}function
lL(a,b){var
c=l(b,y);return c?E8(a,H(b),b):c}function
im(a,b,c){var
f=b[3],g=b[2];lL(a,b[1]);lK(a);a[11]=1;var
d=(a[6]-c|0)+g|0,e=a[8],h=e<=d?e:d;a[10]=h;a[9]=a[6]-a[10]|0;k(a[21],a[10]);return lL(a,f)}function
E9(a,b){return im(a,Qd,b)}function
i8(a,b){var
c=b[2],d=b[3];lL(a,b[1]);a[9]=a[9]-c|0;k(a[20],c);return lL(a,d)}function
Qe(a,b,c){if(typeof
c==="number")switch(c){case
0:var
s=i5(a[3]);if(!s)return 0;var
t=s[1][1],u=function(a,b){if(!b)return[0,a,0];var
c=b[1],d=b[2];return avK(a,c)?[0,a,b]:[0,c,u(a,d)]};t[1]=u(a[6]-a[9]|0,t[1]);return 0;case
1:i4(a[2]);return 0;case
2:i4(a[3]);return 0;case
3:var
v=i5(a[2]);return v?E9(a,v[1][2]):lK(a);case
4:var
w=a[10]!==(a[6]-a[9]|0)?1:0;if(!w)return w;var
f=a[28],h=f[2];if(h){var
n=h[1];if(h[2]){var
K=h[2];f[1]=f[1]-1|0;f[2]=K;var
i=[0,n]}else{qU(f);var
i=[0,n]}}else
var
i=0;if(!i)return 0;var
r=i[1],M=r[1];a[12]=a[12]-r[3]|0;a[9]=a[9]+M|0;return 0;default:var
x=i4(a[5]);return x?q7(a,k(a[25],x[1])):0}switch(c[0]){case
0:return E8(a,b,c[1]);case
1:var
d=c[2],g=c[1],y=d[1],N=d[2],z=i5(a[2]);if(!z)return 0;var
A=z[1],e=A[2];switch(A[1]){case
0:return i8(a,g);case
1:return im(a,d,e);case
2:return im(a,d,e);case
3:return a[9]<(b+H(y)|0)?im(a,d,e):i8(a,g);case
4:return a[11]?i8(a,g):a[9]<(b+H(y)|0)?im(a,d,e):((a[6]-e|0)+N|0)<a[10]?im(a,d,e):i8(a,g);default:return i8(a,g)}case
2:var
l=a[6]-a[9]|0,O=c[2],P=c[1],B=i5(a[3]);if(!B)return 0;var
C=B[1][1],D=C[1];if(D){var
j=C[1],Q=D[1];for(;;){if(j){var
E=j[1],R=j[2];if(l>E){var
j=R;continue}var
F=E}else
var
F=Q;var
m=F;break}}else
var
m=l;var
G=m-l|0;return 0<=G?i8(a,[0,Qg,G+P|0,Qf]):im(a,[0,Qi,m+O|0,Qh],a[6]);case
3:var
I=c[2],S=c[1];if(a[8]<(a[6]-a[9]|0)){var
o=i5(a[2]);if(o){var
p=o[1],q=p[2],L=p[1];if(a[9]<q&&3>=L-1>>>0)E9(a,q)}else
lK(a)}var
T=a[9]-S|0,U=1===I?1:a[9]<b?I:5;return il([0,U,T],a[2]);case
4:return il(c[1],a[3]);default:var
J=c[1];q7(a,k(a[24],J));return il(J,a[5])}}function
E_(a){for(;;){var
f=a[28][2],g=f?[0,f[1]]:0;if(!g)return 0;var
d=g[1],e=d[1],m=0<=e?1:0,j=d[3],k=d[2],l=a[13]-a[12]|0,h=m||(a[9]<=l?1:0);if(!h)return h;var
b=a[28],c=b[2];if(!c)throw t(NP,1);if(c[2]){var
i=c[2];b[1]=b[1]-1|0;b[2]=i}else
qU(b);var
n=0<=e?e:E7;Qe(a,n,k);a[12]=j+a[12]|0}}function
E$(a,b){j8(a,b);return E_(a)}function
Fa(a,b,c){return E$(a,[0,b,[0,c],b])}function
q8(a){j6(a);return il([0,-1,[0,E6,Qj,0]],a)}function
q9(a,b){var
d=i5(a[1]);if(!d)return 0;var
e=d[1],c=e[2],f=c[1];if(e[1]<a[12])return q8(a[1]);var
g=c[2];if(typeof
g!=="number")switch(g[0]){case
3:var
h=1-b,j=h?(c[1]=a[13]+f|0,i4(a[1]),0):h;return j;case
1:case
2:var
i=b?(c[1]=a[13]+f|0,i4(a[1]),0):b;return i}return 0}function
Fb(a,b,c){j8(a,c);if(b)q9(a,1);return il([0,a[13],c],a[1])}function
Fc(a,b,c){a[14]=a[14]+1|0;if(a[14]<a[15])return Fb(a,0,[0,-a[13]|0,[3,b,c],0]);var
d=a[14]===a[15]?1:0;if(!d)return d;var
e=a[16];return Fa(a,H(e),e)}function
Fd(a,b){var
c=1<a[14]?1:0;if(c){if(a[14]<a[15]){j8(a,[0,lJ,1,0]);q9(a,1);q9(a,0)}a[14]=a[14]-1|0;var
d=0}else
var
d=c;return d}function
Fe(a,b){if(a[23])j8(a,[0,lJ,5,0]);var
c=a[22];if(c){var
d=i4(a[4]);if(d)return k(a[27],d[1]);var
e=0}else
var
e=c;return e}function
q_(c,b){var
a=c[4];function
d(a){return Fe(c,0)}a7(d,a[1]);for(;;){if(1<c[14]){Fd(c,0);continue}c[13]=E7;E_(c);if(b)lK(c);c[12]=1;c[13]=1;qU(c[28]);q8(c[1]);j6(c[2]);j6(c[3]);j6(c[4]);j6(c[5]);c[10]=0;c[14]=0;c[9]=c[6];return Fc(c,0,3)}}function
q$(a,b,c){var
d=a[14]<a[15]?1:0;return d?Fa(a,b,c):d}function
Ff(a,b,c){return q$(a,b,c)}function
lM(a,b){return Ff(a,H(b),b)}function
j9(a,b){return Ff(a,1,lD(1,b))}function
j_(a,b){q_(a,0);return k(a[18],0)}var
Fg=lD(80,32);function
Fh(a,b){var
c=b;for(;;){var
d=0<c?1:0;if(!d)return d;if(80>=c)return s(a[17],Fg,0,c);s(a[17],Fg,0,80);var
c=c+Ms|0}}function
Qp(a){return a[1]===q6?I(Qr,I(a[2],Qq)):Qs}function
Qt(a){return a[1]===q6?I(Qv,I(a[2],Qu)):Qw}function
Qx(a){return 0}function
Qy(a){return 0}function
Fi(a,b){function
j(a){return 0}function
k(a){return 0}function
l(a){return 0}var
e=EW(0),f=[0,E6,Qz,0];qV(f,e);var
d=j5(0);q8(d);il([0,1,f],d);var
g=j5(0),h=j5(0),i=j5(0),c=[0,d,j5(0),i,h,g,78,10,68,78,0,1,1,1,1,Ne,QA,a,b,l,k,j,0,0,Qp,Qt,Qx,Qy,e];c[19]=function(a){return s(c[17],Qo,0,1)};c[20]=function(a){return Fh(c,a)};c[21]=function(a){return Fh(c,a)};return c}function
Fj(d){function
a(a){return hj(d)}return Fi(function(a,b,c){if(0<=b&&0<=c&&(H(a)-c|0)>=b)return Ex(d,a,b,c);return aX(Nl)},a)}function
ra(d){function
a(a){return 0}return Fi(function(a,b,c){return EX(d,a,b,c)},a)}var
QB=xY;function
Fk(a){return ad(QB)}var
QC=Fk(0),QD=Fj(Nj),QE=Fj(cG);ra(QC);function
Fl(a,b){var
c=ad(16),e=ra(c);j(a,e,b);j_(e,0);var
f=c[2];if(2>f)return az(c);var
d=f-2|0,g=1;if(0<=d&&(c[2]-d|0)>=1)return i3(c[1],g,d);return aX(NQ)}function
bG(a,b){var
e=0;if(typeof
b==="number")return 0;switch(b[0]){case
0:var
h=b[2];bG(a,b[1]);if(typeof
h==="number")switch(h){case
0:return Fd(a,0);case
1:return Fe(a,0);case
2:return j_(a,0);case
3:var
P=a[14]<a[15]?1:0;return P?E$(a,[0,lJ,3,0]):P;case
4:q_(a,1);return k(a[18],0);case
5:return j9(a,64);default:return j9(a,37)}switch(h[0]){case
0:var
q=[0,Qn,h[2],Qm],Q=a[14]<a[15]?1:0,am=[0,Ql,h[3],Qk],aj=q[3],ak=q[2],al=q[1];return Q?Fb(a,1,[0,-a[13]|0,[1,q,am],(H(al)+ak|0)+H(aj)|0]):Q;case
1:return 0;default:var
an=h[1];j9(a,64);return j9(a,an)}case
1:var
x=b[2],R=b[1];if(0===x[0]){var
ao=x[1];bG(a,R);var
z=[0,q6,Fl(bG,ao)];if(a[22]){il(z,a[4]);k(a[26],z)}var
O=a[23];return O?j8(a,[0,lJ,[5,z],0]):O}var
ap=x[1];bG(a,R);var
c=Fl(bG,ap);if(V(c,y))var
A=PI;else{var
o=H(c),r=function(a){var
d=PJ[1],b=ad(k$);return k(Z(function(a){hn(b,a);return C(az(b))},0,d),c)},s=function(a){var
b=a;for(;;){if(b===o)return b;var
d=ax(c,b);if(9!==d&&32!==d)return b;var
b=b+1|0}},v=s(0),f=v;for(;;){if(f!==o&&25>=ax(c,f)+n8>>>0){var
f=f+1|0;continue}var
g=aY(c,v,f-v|0),p=s(f),d=p;for(;;){if(d!==o){var
u=ax(c,d),G=0;if(48<=u){if(58>u)G=1}else if(45===u)G=1;if(G){var
d=d+1|0;continue}}if(p===d)var
w=0;else
try{var
ai=b2(aY(c,p,d-p|0)),w=ai}catch(f){var
N=ay(f);if(N[1]!==cl)throw t(N,0);var
w=r(0)}if(s(d)!==o)r(0);var
ac=0;if(l(g,y)&&l(g,CM))var
M=l(g,"h")?l(g,"hov")?l(g,"hv")?l(g,Mx)?r(0):1:2:3:0;else
ac=1;if(ac)var
M=4;var
A=[0,w,M];break}break}}return Fc(a,A[1],A[2]);case
2:var
i=b[1],I=0;if(typeof
i==="number"||!(0===i[0]))I=1;else{var
B=i[2],ae=0;if(typeof
B==="number"||!(1===B[0]))ae=1;else
var
X=b[2],W=B[2],U=i[1];if(ae)I=1}if(I){var
T=b[2],S=i;e=2}break;case
3:var
j=b[1],J=0;if(typeof
j==="number"||!(0===j[0]))J=1;else{var
D=j[2],af=0;if(typeof
D==="number"||!(1===D[0]))af=1;else{var
ab=b[2],aa=D[2],$=j[1];e=1}if(af)J=1}if(J){var
_=b[2],Y=j;e=3}break;case
4:var
m=b[1],K=0;if(typeof
m==="number"||!(0===m[0]))K=1;else{var
E=m[2],ag=0;if(typeof
E==="number"||!(1===E[0]))ag=1;else
var
X=b[2],W=E[2],U=m[1];if(ag)K=1}if(K){var
T=b[2],S=m;e=2}break;case
5:var
n=b[1],L=0;if(typeof
n==="number"||!(0===n[0]))L=1;else{var
F=n[2],ah=0;if(typeof
F==="number"||!(1===F[0]))ah=1;else{var
ab=b[2],aa=F[2],$=n[1];e=1}if(ah)L=1}if(L){var
_=b[2],Y=n;e=3}break;case
6:var
aq=b[2];bG(a,b[1]);return k(aq,a);case
7:bG(a,b[1]);return j_(a,0);default:var
ar=b[2];bG(a,b[1]);return aX(ar)}switch(e){case
0:bG(a,U);return q$(a,W,X);case
1:bG(a,$);return q$(a,aa,lD(1,ab));case
2:bG(a,S);return lM(a,T);default:bG(a,Y);return j9(a,_)}}function
_(d){return function(a){var
b=a[1],c=0;return Z(function(a){bG(d,a);return 0},c,b)}}for(;;){var
EK=qO[1],Nm=[0,1];if(1-qL(qO,EK,function(c,b){return function(a){if(qL(c,1,0)){j_(QD,0);j_(QE,0)}return k(b,0)}}(Nm,EK)))continue;var
QG=2,QH=function(a){var
b=[0,0],d=H(a)-1|0,e=0;if(d>=0){var
c=e;for(;;){var
g=ax(a,c);b[1]=(p_*b[1]|0)+g|0;var
h=c+1|0;if(d!==c){var
c=h;continue}break}}b[1]=b[1]&LJ;var
f=1073741823<b[1]?b[1]+2147483648|0:b[1];return f},ho=qT([0,z]),io=qT([0,z]),hT=qT([0,ci]),Fm=Ey(0,0),QI=[0,0],Fn=function(a){return 2<a?Fn((a+1|0)/2|0)*2|0:a},Fo=function(a){QI[1]++;var
c=a.length-1,d=jV((c*2|0)+2|0,Fm);aH(d,0)[1]=c;var
g=((Fn(c)*32|0)/8|0)-1|0;aH(d,1)[2]=g;var
e=c-1|0,h=0;if(e>=0){var
b=h;for(;;){var
f=(b*2|0)+3|0,i=aH(a,b)[1+b];aH(d,f)[1+f]=i;var
j=b+1|0;if(e!==b){var
b=j;continue}break}}return[0,QG,d,io[1],hT[1],0,0,ho[1],0]},rb=function(a,b){var
c=a[2].length-1,e=c<b?1:0;if(e){var
d=jV(b,Fm),f=a[2],h=0;if(0<=c&&(f.length-1-c|0)>=0&&(d.length-1-c|0)>=0){avd(f,0,d,0,c);h=1}if(!h)aX(NF);a[2]=d;var
g=0}else
var
g=e;return g},Fp=[0,0],QJ=[0,0],rc=function(a){var
b=a[2].length-1;rb(a,b+1|0);return b},j$=function(a,b){try{var
e=j(io[28],b,a[3]);return e}catch(f){var
d=ay(f);if(d!==a6)throw t(d,0);var
c=rc(a);a[3]=s(io[4],b,c,a[3]);a[4]=s(hT[4],c,1,a[4]);return c}},rd=function(c,b){return lE(function(a){return j$(c,a)},b)},Fq=function(a,b,c){QJ[1]++;return j(hT[28],b,a[4])?(rb(a,b+1|0),aH(a[2],b)[1+b]=c,0):(a[6]=[0,[0,b,c],a[6]],0)},re=function(a){if(0===a)return 0;var
b=a.length-1-1|0,c=0;for(;;){if(0>b)return c;var
d=[0,a[1+b],c],b=b-1|0,c=d}},rf=function(a,b){try{var
e=j(ho[28],b,a[7]);return e}catch(f){var
d=ay(f);if(d!==a6)throw t(d,0);var
c=a[1];a[1]=c+1|0;if(l(b,y))a[7]=s(ho[4],b,c,a[7]);return c}},rg=function(a){return lu(a,0)?[0]:a},rh=function(g,b,c,d,e,f){var
p=e[2],F=e[4],m=re(b),n=re(c),o=re(d),l=cm(function(a){return j$(g,a)},n),q=cm(function(a){return j$(g,a)},o);g[5]=[0,[0,g[3],g[4],g[6],g[7],l,m],g[5]];var
r=ho[1],u=g[7];function
v(a,b,c){return qS(a,m)?s(ho[4],a,b,c):c}g[7]=s(ho[13],v,u,r);var
h=[0,io[1]],i=[0,hT[1]];EO(function(a,b){h[1]=s(io[4],a,b,h[1]);var
e=i[1];try{var
f=j(hT[28],b,g[4]),d=f}catch(f){var
c=ay(f);if(c!==a6)throw t(c,0);var
d=1}i[1]=s(hT[4],b,d,e);return 0},o,q);EO(function(a,b){h[1]=s(io[4],a,b,h[1]);i[1]=s(hT[4],b,0,i[1]);return 0},n,l);g[3]=h[1];g[4]=i[1];var
w=0,x=g[6];g[6]=qQ(function(a,b){return qS(a[1],l)?b:[0,a,b]},x,w);var
G=f?j(p,g,F):k(p,g),a=j1(g[5]),y=a[6],z=a[5],A=a[4],B=a[3],C=a[2],D=a[1];g[5]=EN(g[5]);g[7]=aI(function(a,b){var
c=j(ho[28],b,g[7]);return s(ho[4],b,c,a)},A,y);g[3]=D;g[4]=C;var
E=g[6];g[6]=qQ(function(a,b){return qS(a[1],z)?b:[0,a,b]},E,B);var
H=0,I=rg(d),J=[0,lE(function(a){var
c=j$(g,a);try{var
b=g[6];for(;;){if(!b)throw t(a6,1);var
d=b[1],f=b[2],h=d[2];if(0===MT(d[1],c))return h;var
b=f}}catch(f){var
e=ay(f);if(e===a6)return aH(g[2],c)[1+c];throw t(e,0)}},I),H],K=rg(b);return ave([0,[0,G],[0,lE(function(a){try{var
c=j(ho[28],a,g[7]);return c}catch(f){var
b=ay(f);if(b===a6)throw t([0,R,QK],1);throw t(b,0)}},K),J]])},lN=function(a,b){if(0===a)var
c=Fo([0]);else{var
e=Fo(lE(QH,a)),f=a.length-1-1|0,i=0;if(f>=0){var
d=i;for(;;){var
g=(d*2|0)+2|0;e[3]=s(io[4],a[1+d],g,e[3]);e[4]=s(hT[4],g,1,e[4]);var
j=d+1|0;if(f!==d){var
d=j;continue}break}}var
c=e}var
h=k(b,c);Fp[1]=(Fp[1]+c[1]|0)-1|0;c[8]=B(c[8]);rb(c,3+((aH(c[2],1)[2]*16|0)/32|0)|0);return[0,k(h,0),b,h,0]},lO=function(a,b){if(a)return a;var
d=Ey(c,b[1]);d[1]=b[2];return avU(d)},ri=function(a,b,c){if(a)return b;var
e=c[8];if(0!==e){var
d=e;for(;;){if(d){var
f=d[2];k(d[1],b);var
d=f;continue}break}}return b},lP=function(a){var
c=rc(a),d=0;if(0!==(c%2|0)&&(2+((aH(a[2],1)[2]*16|0)/32|0)|0)>=c){var
b=rc(a);d=1}if(!d)var
b=c;aH(a[2],b)[1+b]=0;return b},rj=function(a,b){var
e=[0,0],am=b.length-1;for(;;){if(e[1]>=am)return 0;var
g=e[1],an=aH(b,g)[1+g],c=function(a){e[1]++;var
c=e[1];return aH(b,c)[1+c]},f=c(0);if(typeof
f==="number")switch(f){case
0:var
h=c(0),d=function(b){return function(a){return b}}(h);break;case
1:var
i=c(0),d=function(b){return function(a){return a[1+b]}}(i);break;case
2:var
l=c(0),m=c(0),d=function(c,b){return function(a){return a[1+c][1+b]}}(l,m);break;case
3:var
n=c(0),d=function(b){return function(a){return k(a[1][1+b],a)}}(n);break;case
4:var
o=c(0),d=function(c){return function(a,b){a[1+c]=b;return 0}}(o);break;case
5:var
p=c(0),q=c(0),d=function(c,b){return function(a){return k(c,b)}}(p,q);break;case
6:var
r=c(0),s=c(0),d=function(c,b){return function(a){return k(c,a[1+b])}}(r,s);break;case
7:var
t=c(0),u=c(0),v=c(0),d=function(d,b,c){return function(a){return k(d,a[1+b][1+c])}}(t,u,v);break;case
8:var
w=c(0),x=c(0),d=function(c,b){return function(a){return k(c,k(a[1][1+b],a))}}(w,x);break;case
9:var
y=c(0),z=c(0),A=c(0),d=function(d,b,c){return function(a){return j(d,b,c)}}(y,z,A);break;case
10:var
B=c(0),C=c(0),D=c(0),d=function(d,b,c){return function(a){return j(d,b,a[1+c])}}(B,C,D);break;case
11:var
E=c(0),F=c(0),G=c(0),H=c(0),d=function(e,b,c,d){return function(a){return j(e,b,a[1+c][1+d])}}(E,F,G,H);break;case
12:var
I=c(0),J=c(0),L=c(0),d=function(d,b,c){return function(a){return j(d,b,k(a[1][1+c],a))}}(I,J,L);break;case
13:var
M=c(0),N=c(0),O=c(0),d=function(d,b,c){return function(a){return j(d,a[1+b],c)}}(M,N,O);break;case
14:var
P=c(0),Q=c(0),R=c(0),S=c(0),d=function(e,b,c,d){return function(a){return j(e,a[1+b][1+c],d)}}(P,Q,R,S);break;case
15:var
T=c(0),U=c(0),V=c(0),d=function(d,b,c){return function(a){return j(d,k(a[1][1+b],a),c)}}(T,U,V);break;case
16:var
W=c(0),X=c(0),d=function(c,b){return function(a){return j(a[1][1+c],a,b)}}(W,X);break;case
17:var
Y=c(0),Z=c(0),d=function(c,b){return function(a){return j(a[1][1+c],a,a[1+b])}}(Y,Z);break;case
18:var
_=c(0),$=c(0),aa=c(0),d=function(d,b,c){return function(a){return j(a[1][1+d],a,a[1+b][1+c])}}(_,$,aa);break;case
19:var
ab=c(0),ac=c(0),d=function(d,b){return function(a){var
c=k(a[1][1+b],a);return j(a[1][1+d],a,c)}}(ab,ac);break;case
20:var
ad=c(0),ae=c(0);lP(a);var
d=function(c,b){return function(a){return k(K(b,c,0),b)}}(ad,ae);break;case
21:var
af=c(0),ag=c(0);lP(a);var
d=function(d,b){return function(a){var
c=a[1+b];return k(K(c,d,0),c)}}(af,ag);break;case
22:var
ah=c(0),ai=c(0),aj=c(0);lP(a);var
d=function(e,b,c){return function(a){var
d=a[1+b][1+c];return k(K(d,e,0),d)}}(ah,ai,aj);break;default:var
ak=c(0),al=c(0);lP(a);var
d=function(d,b){return function(a){var
c=k(a[1][1+b],a);return k(K(c,d,0),c)}}(ak,al)}else
var
d=f;Fq(a,an,d);e[1]++}},Fr=function(f,b){var
j=b.length-1,g=Ey(0,j),l=j-1|0,m=0;if(l>=0){var
c=m;for(;;){var
d=aH(b,c)[1+c];if(typeof
d==="number")switch(d){case
0:var
e=function(d){function
c(a){var
b=g[1+d];if(c===b)throw t([0,jY,f],1);return k(b,a)}return c}(c);break;case
1:var
i=[];a(i,[kW,function(j,b){return function(a){var
c=g[1+b];if(j===c)throw t([0,jY,f],1);var
h=i2(c);if(js===h)return c[1];if(kW!==h)return c;var
i=c[1];c[1]=Np;try{var
e=k(i,0);avR(c,e);return e}catch(f){var
d=ay(f);c[1]=function(a){throw t(d,0)};throw t(d,0)}}}(i,c)]);var
e=i;break;default:var
h=function(a){throw t([0,jY,f],1)},e=[0,h,h,h,0]}else
var
e=0===d[0]?Fr(f,d[1]):d[1];g[1+c]=e;var
n=c+1|0;if(l!==c){var
c=n;continue}break}}return g},Fs=function(a,b,c){if(0===i2(c)&&a.length-1<=c.length-1){var
h=a.length-1-1|0,l=0;if(h>=0){var
d=l;for(;;){var
f=c[1+d],g=aH(a,d)[1+d];if(typeof
g==="number")if(2===g){var
i=0;if(0===i2(f)&&4===f.length-1){var
e=0,j=b[1+d];for(;;){j[1+e]=f[1+e];var
k=e+1|0;if(3!==e){var
e=k;continue}break}}else
i=1;if(i)throw t([0,R,QL],1)}else
b[1+d]=f;else if(0===g[0])Fs(g[1],b[1+d],f);var
m=d+1|0;if(h!==d){var
d=m;continue}break}}return 0}throw t([0,R,QM],1)};try{M$("TMPDIR")}catch(f){var
Ft=ay(f);if(Ft!==a6)throw t(Ft,0)}try{M$("TEMP")}catch(f){var
Fu=ay(f);if(Fu!==a6)throw t(Fu,0)}if(l(EL,IW))l(EL,"Win32");var
cJ=function(c,b){function
a(a){return bU(c,a)}return kU<=b?(a(jQ|b>>>18|0),a(ao|(b>>>12|0)&63),a(ao|(b>>>6|0)&63),a(ao|b&63)):B1<=b?(a(jN|b>>>12|0),a(ao|(b>>>6|0)&63),a(ao|b&63)):ao<=b?(a(jy|b>>>6|0),a(ao|b&63)):a(b)},hU=[c,QO,hN(0)],Fv=0,Fw=0,Fx=0,Fy=0,Fz=0,FA=0,FB=0,FC=0,FD=0,FE=0,g=function(a){if(a[3]===a[2])return-1;var
b=a[1][1+a[3]];a[3]=a[3]+1|0;if(10===b){if(0!==a[5])a[5]=a[5]+1|0;a[4]=a[3]}return b},i=function(a,b){a[9]=a[3];a[10]=a[4];a[11]=a[5];a[12]=b;return 0},P=function(a){a[6]=a[3];a[7]=a[4];a[8]=a[5];return i(a,-1)},h=function(a){a[3]=a[9];a[4]=a[10];a[5]=a[11];return a[12]},i9=function(a){a[3]=a[6];a[4]=a[7];a[5]=a[8];return 0},rk=function(a,b){a[6]=b;return 0},lQ=function(a){return a[3]-a[6]|0},ag=function(a){var
b=a[3]-a[6]|0,c=a[6],d=a[1];if(0<=c&&0<=b&&(d.length-1-b|0)>=c)return avf(d,c,b);return aX(NE)},FF=function(a){var
b=a[6];return aH(a[1],b)[1+b]},ka=function(a,b,c,d){var
g=[0,b],h=[0,c],e=[0,0];for(;;){if(0>=h[1])return e[1];var
f=a[1+g[1]];if(0>f)throw t(hU,1);if(aa<f)if(Jo<f)if(p$<f){if(oc<f)throw t(hU,1);ab(d,e[1],jQ|f>>>18|0);ab(d,e[1]+1|0,ao|(f>>>12|0)&63);ab(d,e[1]+2|0,ao|(f>>>6|0)&63);ab(d,e[1]+3|0,ao|f&63);e[1]=e[1]+4|0}else{ab(d,e[1],jN|f>>>12|0);ab(d,e[1]+1|0,ao|(f>>>6|0)&63);ab(d,e[1]+2|0,ao|f&63);e[1]=e[1]+3|0}else{ab(d,e[1],jy|f>>>6|0);ab(d,e[1]+1|0,ao|f&63);e[1]=e[1]+2|0}else{ab(d,e[1],f);e[1]++}g[1]++;h[1]+=-1}},FG=function(a){var
w=H(a),f=jV(w,0),b=[0,0],e=[0,0];for(;;){if(b[1]>=w)return[0,f,e[1],FE,FD,FC,FB,FA,Fz,Fy,Fx,Fw,Fv];var
d=v(a,b[1]),h=0;if(jy<=d)if(jQ<=d)if(c<=d)h=1;else{var
i=v(a,b[1]+1|0),j=v(a,b[1]+2|0),k=v(a,b[1]+3|0),l=2!==(i>>>6|0)?1:0;if(l)var
m=l;else
var
x=2!==(j>>>6|0)?1:0,m=x||(2!==(k>>>6|0)?1:0);if(m)throw t(hU,1);var
n=(d&7)<<18|(i&63)<<12|(j&63)<<6|k&63;if(oc<n)throw t(hU,1);f[1+e[1]]=n;b[1]=b[1]+4|0}else if(jN<=d){var
o=v(a,b[1]+1|0),p=v(a,b[1]+2|0),g=(d&15)<<12|(o&63)<<6|p&63,y=2!==(o>>>6|0)?1:0,q=y||(2!==(p>>>6|0)?1:0);if(q)var
r=q;else
var
s=55296<=g?1:0,r=s?g<=57343?1:0:s;if(r)throw t(hU,1);f[1+e[1]]=g;b[1]=b[1]+3|0}else{var
u=v(a,b[1]+1|0);if(2!==(u>>>6|0))throw t(hU,1);f[1+e[1]]=(d&31)<<6|u&63;b[1]=b[1]+2|0}else if(ao<=d)h=1;else{f[1+e[1]]=d;b[1]++}if(h)throw t(hU,1);e[1]++}},kb=function(a,b,c){var
d=a[6]+b|0,e=as(c*4|0),f=a[1];if((d+c|0)<=f.length-1)return i3(e,0,ka(f,d,c,e));throw t([0,R,QP],1)},E=function(a){var
b=a[6],c=a[3]-b|0,d=as(c*4|0);return i3(d,0,ka(a[1],b,c,d))},lR=function(a,b){var
c=a[6],d=a[3]-c|0,e=as(d*4|0);return qX(b,e,0,ka(a[1],c,d,e))},kc=function(a){var
b=a.length-1,c=as(b*4|0);return i3(c,0,ka(a,0,b,c))},FH=function(a,b){a[3]=a[3]-b|0;return 0},cK=function(a){return typeof
a==="number"?0:0===a[0]?1:a[1]},ip=function(a,b,c,d){var
e=cK(a),f=cK(d),g=f<=e?e+1|0:f+1|0;return 1===g?[0,b,c]:[1,g,b,c,a,d]},lS=function(a,b,c,d){var
e=cK(a),f=cK(d),g=f<=e?e+1|0:f+1|0;return[1,g,b,c,a,d]},FI=function(a,b,c,d){var
i=cK(a),j=cK(d);if((j+2|0)<i){var
e=a[5],g=a[4],k=a[3],l=a[2],o=cK(e);if(o<=cK(g))return lS(g,l,k,ip(e,b,c,d));var
p=e[4],q=e[3],r=e[2],s=ip(e[5],b,c,d);return lS(ip(g,l,k,p),r,q,s)}if((i+2|0)>=j)return ip(a,b,c,d);var
h=d[5],f=d[4],m=d[3],n=d[2],t=cK(f);if(t<=cK(h))return lS(ip(a,b,c,f),n,m,h);var
u=f[4],v=f[3],w=f[2],x=ip(f[5],n,m,h);return lS(ip(a,b,c,u),w,v,x)},QQ=0,i_=function(a,b){var
c=a,d=b;for(;;){if(typeof
c==="number")return d;if(0===c[0])return[0,c[1],0,d];var
e=[0,c[2],c[4],d],c=c[3],d=e}},FJ=function(a,b){if(!a)return 0;var
c=a[1],d=i_(a[2],a[3]);return[0,c,function(a){return FJ(d,a)}]},QR=function(a){var
b=i_(a,0);return function(a){return FJ(b,a)}},hp=function(a){return typeof
a==="number"?0:0===a[0]?1:a[1]},QS=function(a){return[0,a]},bH=function(a,b,c){var
d=0;if(typeof
a==="number"){if(typeof
c==="number")return[0,b];if(1===c[0])d=1}else
if(0===a[0]){if(typeof
c!=="number"&&1===c[0])d=1}else{var
e=a[1];if(typeof
c!=="number"&&1===c[0]){var
g=c[1],h=g<=e?e+1|0:g+1|0;return[1,h,b,a,c]}var
f=e;d=2}switch(d){case
1:var
f=c[1];break;case
0:return[1,2,b,a,c]}return[1,f+1|0,b,a,c]},hV=function(a,b,c){var
d=hp(a),e=hp(c),f=e<=d?d+1|0:e+1|0;return[1,f,b,a,c]},lU=function(a,b){if(0===b)return 0;if(1===b)return[0,k(a,0)];var
c=b>>>1|0,d=lU(a,c),e=k(a,0),f=lU(a,(b-c|0)-1|0);return[1,hp(d)+1|0,e,d,f]},QT=function(b){var
c=[0,0],a=b.length-1;return lU(function(a){var
d=c[1],e=aH(b,d)[1+d];c[1]++;return e},a)},b4=function(a,b,c){var
h=hp(a),i=hp(c);if((i+2|0)<h){var
d=a[4],f=a[3],j=a[2],l=hp(d);if(l<=hp(f))return hV(f,j,bH(d,b,c));var
m=d[3],n=d[2],o=bH(d[4],b,c);return hV(bH(f,j,m),n,o)}if((h+2|0)>=i)return bH(a,b,c);var
g=c[4],e=c[3],k=c[2],p=hp(e);if(p<=hp(g))return hV(bH(a,b,e),k,g);var
q=e[3],r=e[2],s=bH(e[4],k,g);return hV(bH(a,b,q),r,s)},FK=function(a,b){if(typeof
b==="number")return[0,a];if(0===b[0])return bH([0,a],b[1],0);var
c=b[4],d=b[2];return b4(FK(a,b[3]),d,c)},FL=function(a,b){if(typeof
b==="number")return[0,a];if(0===b[0])return bH(0,b[1],[0,a]);var
c=b[3],d=b[2];return b4(c,d,FL(a,b[4]))},bb=function(a,b,c){if(typeof
a==="number")return FK(b,c);if(0===a[0]){if(typeof
c!=="number"){if(0===c[0])return bH(a,b,c);var
i=c[4],j=c[3],k=c[2];return 3<c[1]?b4(bb(a,b,j),k,i):hV(a,b,c)}}else{var
e=a[4],f=a[3],g=a[2],d=a[1];if(typeof
c!=="number"){if(0===c[0])return 3<d?b4(f,g,bb(e,b,c)):hV(a,b,c);var
h=c[1],l=c[4],m=c[3],n=c[2];return(h+2|0)<d?b4(f,g,bb(e,b,c)):(d+2|0)<h?b4(bb(a,b,m),n,l):hV(a,b,c)}}return FL(b,a)},kd=function(a){var
b=a;for(;;){if(typeof
b==="number")throw t(a6,1);if(0===b[0])return b[1];if(typeof
b[3]==="number")return b[2];var
b=b[3]}},FM=function(a){var
b=a;for(;;){if(typeof
b==="number")return 0;if(0===b[0])return[0,b[1]];if(typeof
b[3]==="number")return[0,b[2]];var
b=b[3]}},FN=function(a){var
b=a;for(;;){if(typeof
b==="number")throw t(a6,1);if(0===b[0])return b[1];if(typeof
b[4]==="number")return b[2];var
b=b[4]}},QU=function(a){var
b=a;for(;;){if(typeof
b==="number")return 0;if(0===b[0])return[0,b[1]];if(typeof
b[4]==="number")return[0,b[2]];var
b=b[4]}},rl=function(a){if(typeof
a==="number")return aX(QV);if(0===a[0])return 0;if(typeof
a[3]==="number")return a[4];var
b=a[4],c=a[2];return b4(rl(a[3]),c,b)},ke=function(a,b){if(typeof
a==="number")return b;if(typeof
b==="number")return a;var
c=rl(b);return bb(a,kd(b),c)},rm=function(a){if(typeof
a==="number")return 0;if(0===a[0])return 1;var
b=a[3],c=rm(a[4]);return(rm(b)+1|0)+c|0},FO=function(a,b){var
d=a,c=b;for(;;){if(typeof
c==="number")return d;if(0===c[0])return[0,c[1],d];var
e=c[3],f=c[2],d=[0,f,FO(d,c[4])],c=e}},FP=function(a){return FO(0,a)},ah=0,rn=function(a){return typeof
a==="number"?1:0},FQ=function(c){function
d(a,b){if(typeof
b==="number")return[0,a];if(0===b[0]){var
h=b[1],i=j(c[1],a,h);return 0===i?b:0<=i?bH(b,a,ah):bH([0,a],h,ah)}var
e=b[4],f=b[3],g=b[2],k=j(c[1],a,g);if(0===k)return b;if(0<=k){var
l=d(a,e);return e===l?b:b4(f,g,l)}var
m=d(a,f);return f===m?b:b4(m,g,e)}function
e(a,b){if(typeof
b==="number")return[0,ah,0,ah];if(0===b[0]){var
k=j(c[1],a,b[1]);return 0===k?[0,ah,1,ah]:0<=k?[0,b,0,ah]:[0,ah,0,b]}var
d=b[4],f=b[3],g=b[2],l=j(c[1],a,g);if(0===l)return[0,f,1,d];if(0<=l){var
h=e(a,d),m=h[3],n=h[2];return[0,bb(f,g,h[1]),n,m]}var
i=e(a,f),o=i[2],p=i[1];return[0,p,o,bb(i[3],g,d)]}function
i(a,b){var
d=b;for(;;){if(typeof
d==="number")return 0;if(0===d[0])return 0===j(c[1],a,d[1])?1:0;var
g=d[4],h=d[3],e=j(c[1],a,d[2]),f=0===e?1:0;if(f)return f;var
i=0<=e?g:h,d=i}}function
m(a,b){if(typeof
b==="number")return ah;if(0===b[0])return 0===j(c[1],a,b[1])?ah:b;var
d=b[4],e=b[3],f=b[2],g=j(c[1],a,f);if(0===g){if(typeof
e==="number")return d;if(typeof
d==="number")return e;var
k=rl(d);return b4(e,kd(d),k)}if(0<=g){var
h=m(a,d);return d===h?b:b4(e,f,h)}var
i=m(a,e);return e===i?b:b4(i,f,d)}function
f(a,b){if(typeof
a==="number")return b;if(1===a[0]){var
c=a[2],h=a[1],l=a[4],m=a[3];if(typeof
b!=="number"){if(0===b[0])return d(b[1],a);var
g=b[2],i=b[1],n=b[4],o=b[3];if(i<=h){if(1===i)return d(g,a);var
j=e(c,b),p=j[1],q=f(l,j[3]);return bb(f(m,p),c,q)}if(1===h)return d(c,b);var
k=e(g,a),r=k[1],s=f(k[3],n);return bb(f(r,o),g,s)}}return typeof
b==="number"?a:d(a[1],b)}function
g(a,b){if(typeof
a==="number")return ah;if(typeof
b==="number")return ah;if(typeof
a!=="number"&&0!==a[0]){var
d=a[4],f=a[3],h=a[2],c=e(h,b),j=c[1];if(c[2]){var
k=g(d,c[3]);return bb(g(f,j),h,k)}var
l=g(d,c[3]);return ke(g(f,j),l)}return i(a[1],b)?a:ah}function
n(a,b){if(typeof
b==="number")return[0,ah,function(a){return ah}];if(0===b[0])return 0===j(c[1],a,b[1])?0:[0,ah,function(a){return ah}];var
g=b[4],h=b[3],d=b[2],i=j(c[1],a,d);if(0===i)return 0;if(0<=i){var
e=n(a,g);if(!e)return 0;var
l=e[2];return[0,bb(h,d,e[1]),l]}var
f=n(a,h);if(!f)return 0;var
m=f[2],o=f[1];return[0,o,function(a){return bb(k(m,0),d,g)}]}function
r(a,b){var
c=a,d=b;for(;;){if(typeof
c!=="number"&&typeof
d!=="number"){var
j=0;if(typeof
c!=="number"&&0!==c[0]){if(typeof
d!=="number"&&0!==d[0]){var
l=c[4],m=c[3],o=c[2];if(c===d)return 0;var
e=n(o,d);if(!e)return 0;var
p=e[2],h=r(m,e[1]);if(!h)return h;var
c=l,d=k(p,0);continue}var
g=c,f=d[1];j=1}if(!j)var
g=d,f=c[1];return 1-i(f,g)}return 1}}function
h(a,b){if(typeof
a==="number")return ah;if(typeof
b==="number")return a;if(typeof
a!=="number"&&0!==a[0]){var
d=a[4],f=a[3],g=a[2],c=e(g,b),j=c[1];if(c[2]){var
k=h(d,c[3]);return ke(h(f,j),k)}var
l=h(d,c[3]);return bb(h(f,j),g,l)}return i(a[1],b)?ah:a}function
s(a,b){var
m=i_(b,0),e=i_(a,0),d=m;for(;;){if(!e)return d?-1:0;if(!d)return 1;var
g=d[3],h=d[2],i=e[3],k=e[2],f=j(c[1],e[1],d[1]);if(0!==f)return f;var
l=i_(h,g),e=i_(k,i),d=l}}function
a(a,b){return 0===s(a,b)?1:0}function
l(a,b){var
e=a,d=b;for(;;){if(typeof
e==="number")return 1;if(0===e[0]){var
i=e[1];if(typeof
d!=="number"){if(0===d[0])return 0===j(c[1],i,d[1])?1:0;var
t=d[4],u=d[3],k=j(c[1],i,d[2]);if(0===k)return 1;if(0<=k){var
d=t;continue}var
d=u;continue}}else{var
g=e[4],h=e[3],f=e[2],v=e[1];if(typeof
d!=="number"){if(0===d[0]){var
m=1===v?1:0,w=d[1],x=m?0===j(c[1],f,w)?1:0:m;return x}var
n=d[4],o=d[3],p=j(c[1],f,d[2]);if(0===p){var
q=l(h,o);if(!q)return q;var
e=g,d=n;continue}if(0<=p){var
r=l(bH(ah,f,g),n);if(!r)return r;var
e=h;continue}var
s=l(bH(h,f,ah),o);if(!s)return s;var
e=g;continue}}return 0}}function
u(a,b){var
c=b;for(;;){if(typeof
c==="number")return 0;if(0===c[0])return k(a,c[1]);var
d=c[4],e=c[2];u(a,c[3]);k(a,e);var
c=d}}function
v(a,b,c){var
d=b,e=c;for(;;){if(typeof
d==="number")return e;if(0===d[0])return j(a,d[1],e);var
f=d[4],g=d[2],h=j(a,g,v(a,d[3],e)),d=f,e=h}}function
w(a,b){var
c=b;for(;;){if(typeof
c==="number")return 1;if(0===c[0])return k(a,c[1]);var
g=c[4],h=c[3],d=k(a,c[2]);if(d){var
e=w(a,h);if(e){var
c=g;continue}var
f=e}else
var
f=d;return f}}function
x(a,b){var
c=b;for(;;){if(typeof
c==="number")return 0;if(0===c[0])return k(a,c[1]);var
g=c[4],h=c[3],d=k(a,c[2]);if(d)var
e=d;else{var
f=x(a,h);if(!f){var
c=g;continue}var
e=f}return e}}function
o(a,b){if(typeof
b==="number")return ah;if(0===b[0])return k(a,b[1])?b:ah;var
e=b[4],f=b[3],g=b[2],c=o(a,f),h=k(a,g),d=o(a,e);if(!h)return ke(c,d);if(f===c&&e===d)return b;return bb(c,g,d)}function
p(a,b){if(typeof
b==="number")return[0,ah,ah];if(0===b[0])return k(a,b[1])?[0,b,ah]:[0,ah,b];var
c=b[2],j=b[4],d=p(a,b[3]),e=d[2],f=d[1],l=k(a,c),g=p(a,j),h=g[2],i=g[1];if(l){var
m=ke(e,h);return[0,bb(f,c,i),m]}var
n=bb(e,c,h);return[0,ke(f,i),n]}function
b(a,b){var
d=b;for(;;){if(typeof
d==="number")throw t(a6,1);if(0===d[0]){var
e=d[1];if(0===j(c[1],a,e))return e;throw t(a6,1)}var
f=d[2],h=d[4],i=d[3],g=j(c[1],a,f);if(0===g)return f;var
k=0<=g?h:i,d=k}}function
y(a,b){var
d=b;for(;;){if(typeof
d==="number")return 0;if(0===d[0]){var
e=d[1];return 0===j(c[1],a,e)?[0,e]:0}var
f=d[2],h=d[4],i=d[3],g=j(c[1],a,f);if(0===g)return[0,f];var
k=0<=g?h:i,d=k}}function
q(a,b){if(typeof
b==="number")return ah;if(0===b[0]){var
i=b[1],l=k(a,i);return i===l?b:[0,l]}var
m=b[4],n=b[3],o=b[2],e=q(a,n),g=k(a,o),h=q(a,m);if(n===e&&o===g&&m===h)return b;var
p=0;if(!rn(e)){var
t=FN(e);if(0<=j(c[1],t,g))p=1}if(!p){var
r=0;if(!rn(h)){var
s=kd(h);if(0<=j(c[1],g,s))r=1}if(!r)return bb(e,g,h)}return f(e,d(g,h))}function
z(a){if(!a)return ah;var
h=a[2],b=a[1];if(!h)return[0,b];var
i=h[2],f=h[1];if(!i)return d(f,[0,b]);var
k=i[2],l=i[1];if(!k)return d(l,d(f,[0,b]));var
n=k[2],p=k[1];if(!n)return d(p,d(l,d(f,[0,b])));if(n[2]){var
e=c[1],m=function(a,b){if(2===a){if(b){var
m=b[2];if(m){var
n=m[1],k=b[1],J=m[2],y=j(e,k,n),K=0===y?[0,k,0]:0<=y?[0,n,[0,k,0]]:[0,k,[0,n,0]];return[0,K,J]}}}else if(3===a&&b){var
o=b[2];if(o){var
p=o[2];if(p){var
d=p[1],c=o[1],f=b[1],N=p[2],D=j(e,f,c);if(0===D)var
E=j(e,c,d),O=0===E?[0,c,0]:0<=E?[0,d,[0,c,0]]:[0,c,[0,d,0]],q=O;else if(0<=D){var
F=j(e,f,d);if(0===F)var
r=[0,c,[0,f,0]];else if(0<=F)var
G=j(e,c,d),P=0===G?[0,c,[0,f,0]]:0<=G?[0,d,[0,c,[0,f,0]]]:[0,c,[0,d,[0,f,0]]],r=P;else
var
r=[0,c,[0,f,[0,d,0]]];var
q=r}else{var
H=j(e,c,d);if(0===H)var
s=[0,f,[0,c,0]];else if(0<=H)var
I=j(e,f,d),Q=0===I?[0,f,[0,c,0]]:0<=I?[0,d,[0,f,[0,c,0]]]:[0,f,[0,d,[0,c,0]]],s=Q;else
var
s=[0,f,[0,c,[0,d,0]]];var
q=s}return[0,q,N]}}}var
z=a>>1,A=x(z,b),L=A[1],B=x(a-z|0,A[2]),i=L,h=B[1],g=0,M=B[2];for(;;){if(i){if(h){var
t=h[2],u=h[1],v=i[2],l=i[1],w=j(e,l,u);if(0===w){var
i=v,h=t,g=[0,l,g];continue}if(0<w){var
i=v,g=[0,l,g];continue}var
h=t,g=[0,u,g];continue}var
C=cI(i,g)}else
var
C=cI(h,g);return[0,C,M]}},x=function(a,b){if(2===a){if(b){var
n=b[2];if(n){var
o=n[1],k=b[1],J=n[2],y=j(e,k,o),K=0===y?[0,k,0]:0<y?[0,k,[0,o,0]]:[0,o,[0,k,0]];return[0,K,J]}}}else if(3===a&&b){var
p=b[2];if(p){var
q=p[2];if(q){var
d=q[1],c=p[1],f=b[1],N=q[2],D=j(e,f,c);if(0===D)var
E=j(e,c,d),O=0===E?[0,c,0]:0<E?[0,c,[0,d,0]]:[0,d,[0,c,0]],r=O;else if(0<D){var
F=j(e,c,d);if(0===F)var
s=[0,f,[0,c,0]];else if(0<F)var
s=[0,f,[0,c,[0,d,0]]];else
var
G=j(e,f,d),P=0===G?[0,f,[0,c,0]]:0<G?[0,f,[0,d,[0,c,0]]]:[0,d,[0,f,[0,c,0]]],s=P;var
r=s}else{var
H=j(e,f,d);if(0===H)var
t=[0,c,[0,f,0]];else if(0<H)var
t=[0,c,[0,f,[0,d,0]]];else
var
I=j(e,c,d),Q=0===I?[0,c,[0,f,0]]:0<I?[0,c,[0,d,[0,f,0]]]:[0,d,[0,c,[0,f,0]]],t=Q;var
r=t}return[0,r,N]}}}var
z=a>>1,A=m(z,b),L=A[1],B=m(a-z|0,A[2]),i=L,h=B[1],g=0,M=B[2];for(;;){if(i){if(h){var
u=h[2],v=h[1],w=i[2],l=i[1],x=j(e,l,v);if(0===x){var
i=w,h=u,g=[0,l,g];continue}if(0<=x){var
h=u,g=[0,v,g];continue}var
i=w,g=[0,l,g];continue}var
C=cI(i,g)}else
var
C=cI(h,g);return[0,C,M]}},o=cH(a),q=2<=o?m(o,a)[1]:a,g=function(a,b){if(3>=a>>>0)switch(a){case
0:return[0,0,b];case
1:if(b)return[0,[0,b[1]],b[2]];break;case
2:if(b){var
d=b[2];if(d)return[0,[1,2,d[1],[0,b[1]],0],d[2]]}break;default:if(b){var
e=b[2];if(e){var
f=e[2];if(f)return[0,[1,2,e[1],[0,b[1]],[0,f[1]]],f[2]]}}}var
h=a/2|0,i=g(h,b),c=i[2],k=i[1];if(!c)throw t([0,R,QW],1);var
l=c[1],j=g((a-h|0)-1|0,c[2]),m=j[2];return[0,hV(k,l,j[1]),m]};return g(cH(q),q)[1]}var
r=n[1];return d(r,d(p,d(l,d(f,[0,b]))))}function
A(e,d,c){k(_(d),QX);var
a=FP(c);if(a)k(_(d),QY);var
b=0;aI(function(a,b){if(a)k(_(d),QZ);j(e,d,b);return 1},b,a);if(a)k(_(d),Q0);return k(_(d),Q1)}return[0,ah,rn,i,d,QS,m,f,g,r,h,s,a,l,u,q,v,w,x,o,p,rm,FP,kd,FM,FN,QU,kd,FM,b,y,QR,z,A,lU,QT,function(a,b){var
d=b;for(;;){if(typeof
d==="number")return 0;if(0===d[0]){var
h=d[1];return k(a,h)?[0,h]:0}var
i=d[2],m=d[4],n=d[3];if(!k(a,i)){var
d=m;continue}var
e=i,c=n;for(;;){if(typeof
c==="number")return[0,e];if(0===c[0]){var
f=c[1];return k(a,f)?[0,f]:[0,e]}var
g=c[2],j=c[4],l=c[3];if(k(a,g)){var
e=g,c=l;continue}var
c=j}}}]},FR=function(a){switch(a[0]){case
0:return 1;case
1:return 2;case
2:return 2;default:return 3}},F=function(a,b){if(!b)return b;var
c=b[1],d=k(a,c);return c===d?b:[0,d]},f=function(a,b,c,d,e){var
f=j(a,b,c);return c===f?d:k(e,f)},e=function(a,b,c,d){var
e=k(a,b);return b===e?c:k(d,e)},aK=function(a,b){var
c=b[1],d=b[2];return f(a,c,d,b,function(a){return[0,c,a]})},FS=function(c,b){return F(function(a){var
b=a[1],d=a[2];return f(c,b,d,a,function(a){return[0,b,a]})},b)},T=function(d,b){var
a=aI(function(a,b){var
e=a[2],f=a[1],c=k(d,b),g=e||(c!==b?1:0);return[0,[0,c,f],g]},Rj,b),c=a[1];return a[2]?B(c):b},ro=lN(Ri,function(ac){var
a=rd(ac,Rh),aY=a[1],aZ=a[2],a0=a[3],q=a[4],a1=a[5],a2=a[6],a3=a[7],D=a[8],a4=a[9],a5=a[10],a6=a[11],a7=a[12],a8=a[13],a9=a[14],a_=a[15],ad=a[16],n=a[17],N=a[18],ae=a[19],ag=a[20],a$=a[21],ah=a[22],ba=a[23],E=a[24],u=a[25],o=a[26],O=a[27],h=a[28],bb=a[29],bc=a[30],bd=a[31],be=a[32],bf=a[33],bg=a[34],bi=a[35],bj=a[36],bk=a[37],bl=a[38],ai=a[39],bm=a[40],d=a[41],b=a[42],bn=a[43],bo=a[44],bq=a[45],v=a[46],P=a[47],br=a[48],l=a[49],bs=a[50],aj=a[51],bt=a[52],bu=a[53],ak=a[54],bv=a[55],bw=a[56],bx=a[57],Q=a[59],x=a[60],al=a[61],by=a[62],bz=a[63],bA=a[64],bB=a[65],bC=a[66],bD=a[67],bE=a[68],bF=a[69],bG=a[70],bH=a[71],bI=a[72],bJ=a[73],bK=a[74],m=a[75],bL=a[76],bM=a[77],bN=a[78],bO=a[79],bP=a[80],bQ=a[81],bR=a[82],w=a[83],bS=a[84],bT=a[85],bU=a[86],R=a[87],bV=a[88],bW=a[89],bX=a[90],G=a[91],bZ=a[92],b2=a[93],b3=a[94],b4=a[95],b5=a[96],b6=a[97],b7=a[98],b8=a[99],b9=a[b0],b_=a[ch],r=a[c2],b$=a[cD],cb=a[ca],cc=a[bY],cd=a[aV],H=a[bp],cg=a[cu],ci=a[ib],cj=a[aD],ck=a[cf],cl=a[bh],cm=a[X],cn=a[b1],co=a[id],cp=a[gE],cq=a[iH],am=a[jJ],cr=a[jv],cs=a[d_],S=a[k8],ct=a[af],cv=a[ce],cw=a[jL],cx=a[gD],cy=a[qu],an=a[aa],cz=a[ao],cA=a[ln],ap=a[nj],y=a[oE],aq=a[wd],ar=a[LI],cB=a[La],cC=a[JP],as=a[Ji],at=a[LB],au=a[Di],cE=a[Lt],av=a[L2],cF=a[Mf],cG=a[Ku],cH=a[J9],cJ=a[KZ],cK=a[Mt],cL=a[146],cM=a[147],cN=a[148],cO=a[Lc],cP=a[Kl],cQ=a[151],U=a[152],cR=a[153],aw=a[154],cS=a[155],cT=a[156],cU=a[157],cV=a[158],cW=a[159],cX=a[Jh],cY=a[ux],cZ=a[Lm],c0=a[KX],c1=a[Ml],i=a[yZ],z=a[Ln],c3=a[I2],ax=a[Al],c4=a[o4],I=a[oO],c5=a[vz],c6=a[Jk],c7=a[K$],c8=a[KR],c9=a[KF],c_=a[Dd],ay=a[LE],az=a[K5],c$=a[KM],aA=a[Lk],A=a[yN],da=a[yk],db=a[y0],dc=a[oT],dd=a[Jp],W=a[oB],de=a[w7],df=a[Ma],dg=a[xp],dh=a[MA],di=a[Kk],dj=a[jy],dk=a[Ju],dl=a[vo],dm=a[Jv],dn=a[Ja],dp=a[JH],dq=a[IP],dr=a[Jc],g=a[vU],aB=a[MH],aC=a[L3],ds=a[KT],dt=a[Lz],du=a[IR],dv=a[C$],dw=a[LP],dx=a[IZ],dy=a[Mz],dz=a[LS],dA=a[Mv],dB=a[z0],C=a[JN],aE=a[I1],Y=a[Dc],dC=a[y4],dD=a[I$],dE=a[KW],dF=a[J5],dG=a[J$],dH=a[Li],dI=a[JL],J=a[p_],aF=a[jN],dJ=a[L_],dK=a[Jj],dL=a[JR],dM=a[Ka],aG=a[K3],dN=a[Jm],dO=a[Kj],dP=a[IN],aH=a[Mj],aJ=a[IM],dQ=a[LY],dR=a[JU],dS=a[L8],dT=a[Ar],aL=a[nA],dU=a[jQ],aM=a[MI],dV=a[JY],dW=a[I7],dX=a[y_],Z=a[z_],dY=a[kW],aN=a[ok],aO=a[c],dZ=a[Bu],aP=a[js],d0=a[wZ],d1=a[iW],_=a[zR],aQ=a[jC],d2=a[la],d3=a[k$],d4=a[Js],d5=a[zM],aR=a[Jt],aS=a[260],d6=a[KN],d7=a[262],d8=a[263],K=a[264],d9=a[265],d$=a[K8],aT=a[LT],ea=a[268],eb=a[269],ec=a[270],$=a[MK],ed=a[272],aU=a[MJ],ee=a[274],aW=a[275],ef=a[276],t=a[Jd],p=a[278],L=a[279],eg=a[KS],M=a[ME],ab=a[IY],eh=a[Ke],ei=a[284],ej=a[285],ek=a[L$],el=a[287],em=a[LW],aX=a[K1],en=a[58];function
eo(a,b,c){var
e=c[2],f=c[1],l=c[4],m=c[3],h=F(k(a[1][1+g],a),f),i=j(a[1][1+d],a,e);if(e===i&&f===h)return c;return[0,h,i,m,l]}function
ep(a,b,c){var
e=c[4],f=c[3],g=c[2],i=c[1],l=j(a[1][1+p],a,i),m=F(k(a[1][1+n],a),g),o=j(a[1][1+h],a,f),q=j(a[1][1+d],a,e);if(i===l&&f===o&&g===m&&e===q)return c;return[0,l,m,o,q]}function
eq(a,b,c){var
e=c[3],f=c[2],h=c[1],i=j(a[1][1+g],a,h),k=j(a[1][1+l],a,f),m=j(a[1][1+d],a,e);if(h===i&&f===k&&e===m)return c;return[0,i,k,m]}function
er(a,b,c){var
e=c[3],f=c[2],g=c[1],h=j(a[1][1+x],a,g),i=j(a[1][1+l],a,f),k=j(a[1][1+d],a,e);if(g===h&&f===i&&e===k)return c;return[0,h,i,k]}function
es(a,b,c){var
d=c[2],e=d[2],f=d[1],j=c[1],h=s(a[1][1+a2],a,b,f),i=F(k(a[1][1+g],a),e);if(f===h&&e===i)return c;return[0,j,[0,h,i]]}function
et(a,b,c){var
e=c[3],f=c[2],g=c[1],h=T(j(a[1][1+a3],a,f),g),i=j(a[1][1+d],a,e);if(g===h&&e===i)return c;return[0,h,f,i]}function
eu(a,b,c){var
e=c[4],f=c[2],h=j(a[1][1+g],a,f),i=j(a[1][1+d],a,e);if(f===h&&e===i)return c;return[0,c[1],h,c[3],i]}function
ev(a,b,c){var
e=c[3],f=c[2],h=j(a[1][1+g],a,f),i=j(a[1][1+d],a,e);if(f===h&&e===i)return c;return[0,c[1],h,i]}function
ew(a,b,c){var
f=c[3],e=c[2],i=c[1],k=j(a[1][1+g],a,i);if(e)var
l=e[1],m=j(a[1][1+h],a,l),p=l===m?e:[0,m],n=p;else
var
n=e;var
o=j(a[1][1+d],a,f);if(k===i&&o===f)return c;return[0,k,n,o]}function
ex(a,b,c){var
e=c[3],f=c[2],h=c[1],i=j(a[1][1+g],a,h),k=j(a[1][1+o],a,f),l=j(a[1][1+d],a,e);if(i===h&&k===f&&l===e)return c;return[0,i,k,l]}function
ey(a,b,c){var
l=c[4],e=c[3],g=c[2],m=c[1],n=aK(k(a[1][1+t],a),m);if(g)var
o=g[1],p=o[1],u=o[2],v=function(a){return[0,[0,p,a]]},h=f(k(a[1][1+eb],a),p,u,g,v);else
var
h=g;if(e)var
q=e[1],r=q[1],w=q[2],x=function(a){return[0,[0,r,a]]},i=f(k(a[1][1+t],a),r,w,e,x);else
var
i=e;var
s=j(a[1][1+d],a,l);if(m===n&&g===h&&e===i&&l===s)return c;return[0,n,h,i,s]}function
ez(a,b,c){var
e=c[2],f=c[1],h=j(a[1][1+g],a,f),i=j(a[1][1+d],a,e);if(f===h&&e===i)return c;return[0,h,i]}function
eA(a,b,c){var
e=c[1],f=j(a[1][1+d],a,e);return e===f?c:[0,f]}function
eB(a,b){return b}function
eC(a,b,c){var
e=c[3],f=c[2],h=c[1],i=T(k(a[1][1+bl],a),h),l=T(k(a[1][1+g],a),f),m=j(a[1][1+d],a,e);if(h===i&&f===l&&e===m)return c;return[0,i,l,m]}function
eD(a,b,c){var
e=c[3],f=c[2],h=c[1],i=j(a[1][1+g],a,h),l=aK(k(a[1][1+ai],a),f),m=j(a[1][1+d],a,e);if(h===i&&f===l&&e===m)return c;return[0,i,l,m]}function
eE(a,b){var
c=b[2],e=c[3],f=c[2],h=c[1],n=b[1],i=F(k(a[1][1+g],a),h),l=j(a[1][1+P],a,f),m=j(a[1][1+d],a,e);if(h===i&&f===l&&e===m)return b;return[0,n,[0,i,l,m]]}function
eF(a,b,c){var
e=c[3],f=c[2],h=c[1],n=c[4],i=j(a[1][1+g],a,h),l=T(k(a[1][1+bn],a),f),m=j(a[1][1+d],a,e);if(h===i&&f===l&&e===m)return c;return[0,i,l,m,n]}function
eG(a,b,c){var
e=c[1],f=j(a[1][1+d],a,e);return e===f?c:[0,f]}function
eH(a,b){var
c=b[2],e=c[2],f=c[1],k=b[1],h=j(a[1][1+g],a,f),i=j(a[1][1+d],a,e);if(f===h&&e===i)return b;return[0,k,[0,h,i]]}function
eI(a,b){var
c=b[2],e=c[2],f=c[1],k=b[1],h=j(a[1][1+g],a,f),i=j(a[1][1+d],a,e);if(f===h&&e===i)return b;return[0,k,[0,h,i]]}function
eJ(a,b){return[0,j(a[1][1+l],a,b),0]}function
eK(a,b){var
h=k(a[1][1+br],a),c=aI(function(a,b){var
f=a[2],d=a[1],c=k(h,b);if(!c)return[0,d,1];if(c[2])return[0,cI(c,d),1];var
e=c[1],g=f||(b!==e?1:0);return[0,[0,e,d],g]},Rk,b),d=c[1];return c[2]?B(d):b}function
eL(a,b){return j(a[1][1+P],a,b)}function
eM(a,b,c){var
e=c[2],f=c[1],h=T(k(a[1][1+g],a),f),i=j(a[1][1+d],a,e);if(f===h&&e===i)return c;return[0,h,i]}function
eN(a,b,c){var
e=c[2],f=c[1],l=c[3],h=F(k(a[1][1+g],a),f),i=j(a[1][1+d],a,e);if(f===h&&e===i)return c;return[0,h,i,l]}function
eO(a,b){var
c=b[2],e=c[2],f=c[1],i=b[1],g=j(a[1][1+az],a,f),h=j(a[1][1+d],a,e);if(f===g&&e===h)return b;return[0,i,[0,g,h]]}function
eP(a,b){var
c=b[2],e=c[3],f=c[2],g=f[2],l=f[1],p=c[1],q=b[1],m=j(a[1][1+i],a,l),n=F(k(a[1][1+h],a),g),o=j(a[1][1+d],a,e);if(m===l&&n===g&&o===e)return b;return[0,q,[0,p,[0,m,n],o]]}function
eQ(a,b){var
c=b[2],e=b[1],d=j(a[1][1+ah],a,c);return lu(d,c)?b:[0,e,d]}function
eR(a,b){return j(a[1][1+g],a,b)}function
eS(a,b){var
h=b[2],i=h[2],c=h[1],m=b[1];if(c)var
n=c[1],o=function(a){return[0,a]},f=e(k(a[1][1+g],a),n,c,o);else
var
f=c;var
l=j(a[1][1+d],a,i);if(c===f&&i===l)return b;return[0,m,[0,f,l]]}function
eT(a,b){return j(a[1][1+g],a,b)}function
eU(a,b,c){return s(a[1][1+w],a,b,c)}function
eV(a,b,c){var
e=c[2],f=e[2],g=e[1],k=c[1],h=s(a[1][1+bN],a,b,g),i=j(a[1][1+d],a,f);if(h===g&&f===i)return c;return[0,k,[0,h,i]]}function
eW(a,b,c){return s(a[1][1+w],a,b,c)}function
eX(a,b,c){var
d=c[2],e=d[2],f=d[1],i=c[1],g=s(a[1][1+bP],a,b,f),h=j(a[1][1+J],a,e);if(f===g&&e===h)return c;return[0,i,[0,g,h]]}function
eY(a,b,c){switch(c[0]){case
0:var
d=c[1],f=function(a){return[0,a]};return e(j(a[1][1+bQ],a,b),d,c,f);case
1:var
g=c[1],h=function(a){return[1,a]};return e(j(a[1][1+bO],a,b),g,c,h);default:return c}}function
eZ(a,b,c){return s(a[1][1+w],a,b,c)}function
e0(a,b,c){return s(a[1][1+w],a,b,c)}function
e1(a,b,c){var
e=c[2],f=e[2],g=e[1],k=c[1],h=s(a[1][1+bz],a,b,g),i=j(a[1][1+d],a,f);if(h===g&&f===i)return c;return[0,k,[0,h,i]]}function
e2(a,b,c){return j(a[1][1+aL],a,c)}function
e3(a,b,c){return s(a[1][1+m],a,b,c)}function
e4(a,b,c){var
d=c[1],e=c[2];function
g(a){return[0,d,a]}return f(j(a[1][1+bM],a,b),d,e,c,g)}function
e5(a,b,c){var
d=c[1],e=c[2];function
g(a){return[0,d,a]}return f(j(a[1][1+bK],a,b),d,e,c,g)}function
e6(a,b,c){var
d=c[1],e=c[2];function
g(a){return[0,d,a]}return f(j(a[1][1+by],a,b),d,e,c,g)}function
e7(a,b,c){switch(c[0]){case
0:var
d=c[1],f=function(a){return[0,a]};return e(j(a[1][1+bB],a,b),d,c,f);case
1:var
g=c[1],h=function(a){return[1,a]};return e(j(a[1][1+bD],a,b),g,c,h);case
2:var
i=c[1],k=function(a){return[2,a]};return e(j(a[1][1+bH],a,b),i,c,k);case
3:var
l=c[1],m=function(a){return[3,a]};return e(j(a[1][1+bF],a,b),l,c,m);default:var
n=c[1],o=function(a){return[4,a]};return e(j(a[1][1+bG],a,b),n,c,o)}}function
e8(a,b,c){var
e=c[2],h=e[4],m=e[3],i=e[2],k=e[1],q=c[1],d=s(a[1][1+bE],a,b,k),f=s(a[1][1+bC],a,b,i),n=j(a[1][1+J],a,m);if(h){var
l=0;if(3===d[0]){var
p=f[2];if(2===p[0])var
g=V(d[1][2][1],p[1][1][2][1]);else
l=1}else
l=1;if(l)var
o=k===d?1:0,g=o?i===f?1:0:o}else
var
g=h;if(d===k&&f===i&&n===m&&h===g)return c;return[0,q,[0,d,f,n,g]]}function
e9(a,b,c){if(0===c[0]){var
d=c[1],f=function(a){return[0,a]};return e(j(a[1][1+bI],a,b),d,c,f)}var
g=c[1];function
h(a){return[1,a]}return e(j(a[1][1+bA],a,b),g,c,h)}function
e_(a,b,c,d){return s(a[1][1+M],a,c,d)}function
e$(a,b,c,d){return s(a[1][1+H],a,c,d)}function
fa(a,b,c,d){return s(a[1][1+v],a,c,d)}function
fb(a,b,c){return j(a[1][1+i],a,c)}function
fc(a,b,c){var
f=c[2],L=c[1];switch(f[0]){case
0:var
h=f[1],n=h[3],o=h[2],p=h[1],q=T(j(a[1][1+bJ],a,b),p),r=j(a[1][1+u],a,o),t=j(a[1][1+d],a,n),I=0;if(q===p&&r===o&&t===n){var
v=f;I=1}if(!I)var
v=[0,[0,q,r,t]];var
g=v;break;case
1:var
i=f[1],w=i[3],x=i[2],y=i[1],z=T(j(a[1][1+bR],a,b),y),A=j(a[1][1+u],a,x),B=j(a[1][1+d],a,w),J=0;if(w===B&&z===y&&A===x){var
C=f;J=1}if(!J)var
C=[1,[0,z,A,B]];var
g=C;break;case
2:var
l=f[1],D=l[2],E=l[1],M=l[3],F=s(a[1][1+m],a,b,E),G=j(a[1][1+u],a,D),K=0;if(E===F&&D===G){var
H=f;K=1}if(!K)var
H=[2,[0,F,G,M]];var
g=H;break;default:var
N=f[1],O=function(a){return[3,a]},g=e(k(a[1][1+bL],a),N,f,O)}return f===g?c:[0,L,g]}function
fd(a,b){return s(a[1][1+w],a,0,b)}function
fe(a,b,c){var
d=b?b[1]:0;return s(a[1][1+w],a,[0,d],c)}function
ff(a,b){return j(a[1][1+ab],a,b)}function
fg(a,b){return j(a[1][1+ab],a,b)}function
fh(a,b){return s(a[1][1+L],a,Rl,b)}function
fi(a,b,c){return s(a[1][1+L],a,[0,b],c)}function
fj(a,b){return s(a[1][1+L],a,Rm,b)}function
fk(a,b,c){var
g=c[5],i=c[4],e=c[3],l=c[2],m=c[1],o=j(a[1][1+p],a,m),q=F(k(a[1][1+n],a),l),f=F(k(a[1][1+h],a),e),r=F(k(a[1][1+h],a),i),s=j(a[1][1+d],a,g);if(m===o&&e===f&&l===q&&e===f&&i===r&&g===s)return c;return[0,o,q,f,r,s]}function
fl(a,b){return j(a[1][1+aL],a,b)}function
fm(a,b){return j(a[1][1+i],a,b)}function
fn(a,b){var
c=b[1],d=b[2];function
e(a){return[0,c,a]}return f(k(a[1][1+M],a),c,d,b,e)}function
fo(a,b){var
c=b[1],d=b[2];function
e(a){return[0,c,a]}return f(k(a[1][1+H],a),c,d,b,e)}function
fp(a,b){var
c=b[1],d=b[2];function
e(a){return[0,c,a]}return f(k(a[1][1+v],a),c,d,b,e)}function
fq(a,b){switch(b[0]){case
0:var
c=b[1],d=function(a){return[0,a]};return e(k(a[1][1+b6],a),c,b,d);case
1:var
f=b[1],g=function(a){return[1,a]};return e(k(a[1][1+b7],a),f,b,g);case
2:var
h=b[1],i=function(a){return[2,a]};return e(k(a[1][1+b_],a),h,b,i);case
3:var
j=b[1],l=function(a){return[3,a]};return e(k(a[1][1+b8],a),j,b,l);case
4:var
m=b[1],n=function(a){return[4,a]};return e(k(a[1][1+Q],a),m,b,n);default:var
o=b[1],p=function(a){return[5,a]};return e(k(a[1][1+b9],a),o,b,p)}}function
fr(a,b){var
c=b[2],f=b[1];switch(c[0]){case
0:var
l=c[3],m=c[2],n=c[1],e=j(a[1][1+r],a,n),h=j(a[1][1+g],a,m);if(l){var
o=0;if(3===e[0]){var
q=h[2];if(9===q[0])var
i=V(e[1][2][1],q[1][2][1]);else
o=1}else
o=1;if(o)var
p=n===e?1:0,i=p?m===h?1:0:p}else
var
i=l;if(n===e&&m===h&&l===i)return b;return[0,f,[0,e,h,i]];case
1:var
s=c[2],t=c[1],u=j(a[1][1+r],a,t),v=aK(k(a[1][1+A],a),s);if(t===u&&s===v)return b;return[0,f,[1,u,v]];case
2:var
w=c[3],x=c[2],y=c[1],z=j(a[1][1+r],a,y),B=aK(k(a[1][1+A],a),x),C=j(a[1][1+d],a,w);if(y===z&&x===B&&w===C)return b;return[0,f,[2,z,B,C]];default:var
D=c[3],E=c[2],F=c[1],G=j(a[1][1+r],a,F),H=aK(k(a[1][1+A],a),E),I=j(a[1][1+d],a,D);if(F===G&&E===H&&D===I)return b;return[0,f,[3,G,H,I]]}}function
fs(e,b,c){var
a=c[2],f=c[1],g=T(function(a){if(0===a[0]){var
b=a[1],c=j(e[1][1+b4],e,b);return b===c?a:[0,c]}var
d=a[1],f=j(e[1][1+bs],e,d);return d===f?a:[1,f]},f),h=j(e[1][1+d],e,a);if(f===g&&a===h)return c;return[0,g,h]}function
ft(a,b,c){var
e=c[4],f=c[3],h=c[2],i=c[1],l=j(a[1][1+g],a,i),m=F(k(a[1][1+$],a),h),n=F(k(a[1][1+aX],a),f),o=j(a[1][1+d],a,e);if(i===l&&h===m&&f===n&&e===o)return c;return[0,l,m,n,o]}function
fu(a,b,c){var
e=c[3],f=c[2],g=c[1],h=j(a[1][1+i],a,g),k=j(a[1][1+i],a,f),l=j(a[1][1+d],a,e);if(g===h&&f===k&&e===l)return c;return[0,h,k,l]}function
fv(a,b){return j(a[1][1+g],a,b)}function
fw(a,b){return j(a[1][1+Q],a,b)}function
fx(a,b){return j(a[1][1+i],a,b)}function
fy(a,b){switch(b[0]){case
0:var
c=b[1],d=function(a){return[0,a]};return e(k(a[1][1+cn],a),c,b,d);case
1:var
f=b[1],g=function(a){return[1,a]};return e(k(a[1][1+cq],a),f,b,g);default:var
h=b[1],i=function(a){return[2,a]};return e(k(a[1][1+co],a),h,b,i)}}function
fz(a,b,c){var
d=c[1],e=s(a[1][1+am],a,b,d);return d===e?c:[0,e,c[2],c[3]]}function
fA(a,b,c){var
e=c[3],f=c[2],h=c[1],i=j(a[1][1+g],a,h),k=j(a[1][1+cp],a,f),l=j(a[1][1+d],a,e);if(h===i&&f===k&&e===l)return c;return[0,i,k,l]}function
fB(a,b,c){var
e=c[4],f=c[3],h=c[2],i=j(a[1][1+g],a,h),k=j(a[1][1+g],a,f),l=j(a[1][1+d],a,e);if(h===i&&f===k&&e===l)return c;return[0,c[1],i,k,l]}function
fC(a,b,c){var
e=c[3],f=c[2],g=c[1],h=j(a[1][1+S],a,g),i=j(a[1][1+l],a,f),k=j(a[1][1+d],a,e);if(g===h&&f===i&&e===k)return c;return[0,h,i,k]}function
fD(a,b){var
c=b[2],e=c[2],g=c[1],h=b[1],f=j(a[1][1+d],a,e);return e===f?b:[0,h,[0,g,f]]}function
fE(a,b){return j(a[1][1+as],a,b)}function
fF(a,b){if(0===b[0]){var
c=b[1],d=function(a){return[0,a]};return e(k(a[1][1+cA],a),c,b,d)}var
f=b[1];function
g(a){return[1,a]}return e(k(a[1][1+ap],a),f,b,g)}function
fG(a,b){var
c=b[2],d=c[2],e=c[1],h=b[1],f=j(a[1][1+cz],a,e),g=j(a[1][1+y],a,d);if(e===f&&d===g)return b;return[0,h,[0,f,g]]}function
fH(a,b){var
c=b[2],d=c[2],e=c[1],h=b[1],f=j(a[1][1+y],a,e),g=j(a[1][1+y],a,d);if(e===f&&d===g)return b;return[0,h,[0,f,g]]}function
fI(a,b){return j(a[1][1+ap],a,b)}function
fJ(a,b){return j(a[1][1+an],a,b)}function
fK(a,b){return j(a[1][1+y],a,b)}function
fL(a,b){switch(b[0]){case
0:var
c=b[1],d=function(a){return[0,a]};return e(k(a[1][1+as],a),c,b,d);case
1:var
f=b[1],g=function(a){return[1,a]};return e(k(a[1][1+cB],a),f,b,g);default:var
h=b[1],i=function(a){return[2,a]};return e(k(a[1][1+cC],a),h,b,i)}}function
fM(a,b){var
c=b[2],e=b[1],f=j(a[1][1+g],a,e),h=j(a[1][1+d],a,c);if(e===f&&c===h)return b;return[0,f,h]}function
fN(a,b,c){var
f=c[2],h=c[1],e=j(a[1][1+d],a,f);if(!h)return f===e?c:[0,0,e];var
i=h[1],k=j(a[1][1+g],a,i);if(i===k&&f===e)return c;return[0,[0,k],e]}function
fO(a,b){var
d=b[2],c=b[1];switch(d[0]){case
0:var
g=d[1],h=function(a){return[0,c,[0,a]]};return f(k(a[1][1+au],a),c,g,b,h);case
1:var
i=d[1],j=function(a){return[0,c,[1,a]]};return f(k(a[1][1+aq],a),c,i,b,j);case
2:var
l=d[1],m=function(a){return[0,c,[2,a]]};return f(k(a[1][1+ar],a),c,l,b,m);case
3:var
n=d[1],o=function(a){return[0,c,[3,a]]};return e(k(a[1][1+cv],a),n,b,o);default:return b}}function
fP(a,b){var
c=b[2],e=b[1],d=T(k(a[1][1+cF],a),c);return c===d?b:[0,e,d]}function
fQ(a,b,c){return s(a[1][1+v],a,b,c)}function
fR(a,b,c){return s(a[1][1+ar],a,b,c)}function
fS(a,b){if(0===b[0]){var
c=b[1],d=c[1],h=c[2],i=function(a){return[0,[0,d,a]]};return f(k(a[1][1+cG],a),d,h,b,i)}var
e=b[1],g=e[1],j=e[2];function
l(a){return[1,[0,g,a]]}return f(k(a[1][1+cH],a),g,j,b,l)}function
fT(a,b){return j(a[1][1+an],a,b)}function
fU(a,b){return j(a[1][1+y],a,b)}function
fV(a,b){if(0===b[0]){var
c=b[1],d=function(a){return[0,a]};return e(k(a[1][1+cL],a),c,b,d)}var
f=b[1];function
g(a){return[1,a]}return e(k(a[1][1+cK],a),f,b,g)}function
fW(a,b){var
c=b[2],d=c[2],e=c[1],h=b[1],f=j(a[1][1+cM],a,e),g=F(k(a[1][1+cJ],a),d);if(e===f&&d===g)return b;return[0,h,[0,f,g]]}function
fX(a,b,c){var
e=c[2],f=c[1],h=j(a[1][1+g],a,f),i=j(a[1][1+d],a,e);if(f===h&&e===i)return c;return[0,h,i]}function
fY(a,b){if(0===b[0]){var
g=b[1],h=function(a){return[0,a]};return e(k(a[1][1+cN],a),g,b,h)}var
c=b[1],d=c[1],i=c[2];function
j(a){return[1,[0,d,a]]}return f(k(a[1][1+cw],a),d,i,b,j)}function
fZ(a,b){var
c=b[2][1],e=b[1],d=j(a[1][1+at],a,c);return c===d?b:[0,e,[0,d]]}function
f0(a,b){var
c=b[2],d=c[4],e=c[2],f=c[1],l=c[3],m=b[1],g=j(a[1][1+at],a,f),h=F(k(a[1][1+$],a),e),i=T(k(a[1][1+cy],a),d);if(f===g&&e===h&&d===i)return b;return[0,m,[0,g,h,l,i]]}function
f1(a,b,c){var
e=c[4],f=c[3],g=j(a[1][1+av],a,f),h=j(a[1][1+d],a,e);if(f===g&&e===h)return c;return[0,c[1],c[2],g,h]}function
f2(a,b,c){var
e=c[4],f=c[3],g=c[2],h=c[1],i=j(a[1][1+cx],a,h),l=F(k(a[1][1+cE],a),g),m=j(a[1][1+av],a,f),n=j(a[1][1+d],a,e);if(h===i&&g===l&&f===m&&e===n)return c;return[0,i,l,m,n]}function
f3(a,b,c,d){var
e=2<=b?j(a[1][1+m],a,Rn):k(a[1][1+p],a);return k(e,d)}function
f4(a,b,c){var
d=2<=b?j(a[1][1+m],a,Ro):k(a[1][1+p],a);return k(d,c)}function
f5(a,b,c){var
f=c[3],d=c[2],h=c[1],o=0,t=c[4];if(b){var
g=0;if(h)switch(h[1]){case
0:o=1;break;case
1:g=2;break;default:g=1}else
g=1;var
q=0;switch(g){case
0:break;case
1:if(2<=b)var
l=0,i=0;else
q=1;break;default:q=1}if(q)var
l=1,i=0}else
o=1;if(o)var
l=1,i=1;var
r=d?j(a[1][1+bv],a,f):i?j(a[1][1+p],a,f):s(a[1][1+m],a,Rq,f);if(d)var
u=d[1],v=l?k(a[1][1+p],a):j(a[1][1+m],a,Rp),n=e(v,u,d,function(a){return[0,a]});else
var
n=0;if(d===n&&f===r)return c;return[0,h,n,r,t]}function
f6(a,b){return j(a[1][1+i],a,b)}function
f7(a,b,c){if(0===c[0]){var
d=c[1],e=T(j(a[1][1+cV],a,b),d);return d===e?c:[0,e]}var
g=c[1],h=g[1],i=g[2];function
k(a){return[1,[0,h,a]]}return f(j(a[1][1+cU],a,b),h,i,c,k)}function
f8(a,b,c){var
e=c[3],g=c[2],h=c[1],f=j(a[1][1+d],a,e);return e===f?c:[0,h,g,f]}function
f9(e,b,c){var
a=c[5],g=c[4],h=c[3],i=c[2],f=c[1],l=aK(k(e[1][1+cT],e),i),m=F(j(e[1][1+cS],e,f),g),n=F(function(a){var
b=a[1],d=a[2],c=s(e[1][1+cW],e,f,b);return c===b?a:[0,c,d]},h),o=j(e[1][1+d],e,a);if(i===l&&g===m&&h===n&&a===o)return c;return[0,f,l,n,m,o]}function
f_(a,b,c){var
f=c[4],e=c[3],g=c[2],h=c[1],i=j(a[1][1+x],a,h),l=s(a[1][1+c0],a,0!==e?1:0,g),o=k(a[1][1+c1],a),m=F(function(a){return aK(o,a)},e),n=j(a[1][1+d],a,f);if(h===i&&g===l&&e===m&&f===n)return c;return[0,i,l,m,n]}function
f$(a,b,c){var
e=c[2],f=c[1],g=j(a[1][1+l],a,f),h=j(a[1][1+d],a,e);if(f===g&&e===h)return c;return[0,g,h]}function
ga(a,b,c){return j(a[1][1+l],a,c)}function
gb(a,b,c){var
e=c[2],f=c[1],h=j(a[1][1+g],a,f),i=j(a[1][1+d],a,e);if(f===h&&e===i)return c;return[0,h,i]}function
gc(a,b){var
c=b[2],e=c[2],f=c[1],k=b[1],h=j(a[1][1+g],a,f),i=j(a[1][1+d],a,e);if(f===h&&e===i)return b;return[0,k,[0,h,i]]}function
gd(a,b){var
c=b[2],e=c[2],g=c[1],h=b[1],f=j(a[1][1+d],a,e);return e===f?b:[0,h,[0,g,f]]}function
ge(a,b,c){return s(a[1][1+U],a,b,c)}function
gf(a,b,c){var
e=c[5],f=c[4],g=c[3],h=c[2],i=c[1],l=j(a[1][1+p],a,i),m=F(k(a[1][1+n],a),h),s=k(a[1][1+z],a),o=T(function(a){return aK(s,a)},g),q=aK(k(a[1][1+G],a),f),r=j(a[1][1+d],a,e);if(l===i&&m===h&&o===g&&q===f&&r===e)return c;return[0,l,m,o,q,r]}function
gg(a,b){return j(a[1][1+ag],a,b)}function
gh(a,b){return j(a[1][1+ag],a,b)}function
gi(a,b){return j(a[1][1+i],a,b)}function
gj(a,b){var
c=b[2],e=c[2],g=c[1],h=b[1],f=j(a[1][1+d],a,e);return e===f?b:[0,h,[0,g,f]]}function
gk(a,b){return s(a[1][1+m],a,Rr,b)}function
gl(a,b){return j(a[1][1+g],a,b)}function
gm(a,b){var
c=b[1],d=b[2];function
e(a){return[0,c,a]}return f(k(a[1][1+t],a),c,d,b,e)}function
gn(a,b){if(0===b[0]){var
c=b[1],d=function(a){return[0,a]};return e(k(a[1][1+dd],a),c,b,d)}var
f=b[1];function
g(a){return[1,a]}return e(k(a[1][1+ef],a),f,b,g)}function
go(a,b){switch(b[0]){case
0:return b;case
1:var
c=b[1],d=function(a){return[1,a]};return e(k(a[1][1+o],a),c,b,d);default:var
f=b[1],g=function(a){return[2,a]};return e(k(a[1][1+a$],a),f,b,g)}}function
gp(a,b){var
c=b[2],d=c[2],e=c[1],h=b[1],f=j(a[1][1+az],a,e),g=j(a[1][1+J],a,d);if(e===f&&d===g)return b;return[0,h,[0,f,g]]}function
gq(a,b){var
c=b[2],e=c[2],f=c[1],i=b[1],g=j(a[1][1+o],a,f),h=j(a[1][1+d],a,e);if(g===f&&h===e)return b;return[0,i,[0,g,h]]}function
gr(a,b){var
c=b[2],e=c[4],f=c[3],g=c[2],h=c[1],o=b[1],i=T(k(a[1][1+c$],a),g),l=F(k(a[1][1+c9],a),f),m=F(k(a[1][1+c6],a),h),n=j(a[1][1+d],a,e);if(g===i&&f===l&&e===n&&h===m)return b;return[0,o,[0,m,i,l,n]]}function
gs(a,b,c){var
e=c[9],f=c[8],g=c[7],h=c[6],i=c[3],l=c[2],m=c[1],v=c[10],w=c[5],x=c[4],o=F(k(a[1][1+aA],a),m),p=F(k(a[1][1+n],a),f),q=j(a[1][1+c_],a,l),r=j(a[1][1+c7],a,g),s=j(a[1][1+dc],a,i),t=F(k(a[1][1+al],a),h),u=j(a[1][1+d],a,e);if(m===o&&l===q&&i===s&&h===t&&g===r&&f===p&&e===u)return c;return[0,o,q,s,x,w,t,r,p,u,v]}function
gt(a,b,c){return s(a[1][1+W],a,b,c)}function
gu(a,b,c){return s(a[1][1+A],a,b,c)}function
gv(a,b,c){return s(a[1][1+W],a,b,c)}function
gw(a,b){if(0===b[0])return b;var
c=b[2],e=b[1],d=j(a[1][1+ak],a,c);return d===c?b:[1,e,d]}function
gx(a,b){if(0===b[0])return b;var
c=b[1];function
d(a){return[1,a]}return e(k(a[1][1+o],a),c,b,d)}function
gy(a,b){var
c=b[2],d=b[1];function
f(a){return[0,d,a]}return e(k(a[1][1+h],a),c,b,f)}function
gz(a,b){var
g=b[2],c=b[1];switch(g[0]){case
0:var
h=g[1],i=function(a){return[0,c,[0,a]]};return e(k(a[1][1+d],a),h,b,i);case
1:var
j=g[1],l=function(a){return[0,c,[1,a]]};return e(k(a[1][1+d],a),j,b,l);case
2:var
m=g[1],n=function(a){return[0,c,[2,a]]};return e(k(a[1][1+d],a),m,b,n);case
3:var
o=g[1],p=function(a){return[0,c,[3,a]]};return e(k(a[1][1+d],a),o,b,p);case
4:var
q=g[1],r=function(a){return[0,c,[4,a]]};return e(k(a[1][1+d],a),q,b,r);case
5:var
s=g[1],t=function(a){return[0,c,[5,a]]};return e(k(a[1][1+d],a),s,b,t);case
6:var
u=g[1],w=function(a){return[0,c,[6,a]]};return e(k(a[1][1+d],a),u,b,w);case
7:var
x=g[1],y=function(a){return[0,c,[7,a]]};return e(k(a[1][1+d],a),x,b,y);case
8:var
A=g[2],B=g[1],C=function(a){return[0,c,[8,B,a]]};return e(k(a[1][1+d],a),A,b,C);case
9:var
D=g[1],E=function(a){return[0,c,[9,a]]};return e(k(a[1][1+d],a),D,b,E);case
10:var
F=g[1],J=function(a){return[0,c,[10,a]]};return e(k(a[1][1+d],a),F,b,J);case
11:var
K=g[1],L=function(a){return[0,c,[11,a]]};return e(k(a[1][1+cg],a),K,b,L);case
12:var
N=g[1],O=function(a){return[0,c,[12,a]]};return f(k(a[1][1+I],a),c,N,b,O);case
13:var
P=g[1],Q=function(a){return[0,c,[13,a]]};return f(k(a[1][1+dW],a),c,P,b,Q);case
14:var
R=g[1],S=function(a){return[0,c,[14,a]]};return f(k(a[1][1+G],a),c,R,b,S);case
15:var
T=g[1],U=function(a){return[0,c,[15,a]]};return f(k(a[1][1+cP],a),c,T,b,U);case
16:var
V=g[1],W=function(a){return[0,c,[16,a]]};return e(k(a[1][1+ek],a),V,b,W);case
17:var
X=g[1],Y=function(a){return[0,c,[17,a]]};return e(k(a[1][1+dS],a),X,b,Y);case
18:var
Z=g[1],_=function(a){return[0,c,[18,a]]};return e(k(a[1][1+cR],a),Z,b,_);case
19:var
$=g[1],aa=function(a){return[0,c,[19,a]]};return f(k(a[1][1+z],a),c,$,b,aa);case
20:var
ab=g[1],ac=function(a){return[0,c,[20,a]]};return f(k(a[1][1+aw],a),c,ab,b,ac);case
21:var
ad=g[1],ae=function(a){return[0,c,[21,a]]};return f(k(a[1][1+bT],a),c,ad,b,ae);case
22:var
af=g[1],ag=function(a){return[0,c,[22,a]]};return f(k(a[1][1+a5],a),c,af,b,ag);case
23:var
ah=g[1],ai=function(a){return[0,c,[23,a]]};return f(k(a[1][1+cO],a),c,ah,b,ai);case
24:var
aj=g[1],al=function(a){return[0,c,[24,a]]};return e(k(a[1][1+a7],a),aj,b,al);case
25:var
am=g[1],an=function(a){return[0,c,[25,a]]};return e(k(a[1][1+ct],a),am,b,an);case
26:var
ao=g[1],ap=function(a){return[0,c,[26,a]]};return e(k(a[1][1+ak],a),ao,b,ap);case
27:var
aq=g[1],ar=function(a){return[0,c,[27,a]]};return e(k(a[1][1+bx],a),aq,b,ar);case
28:var
as=g[1],at=function(a){return[0,c,[28,a]]};return e(k(a[1][1+bb],a),as,b,at);case
29:var
au=g[1],av=function(a){return[0,c,[29,a]]};return f(k(a[1][1+v],a),c,au,b,av);case
30:var
ax=g[1],ay=function(a){return[0,c,[30,a]]};return f(k(a[1][1+H],a),c,ax,b,ay);case
31:var
az=g[1],aA=function(a){return[0,c,[31,a]]};return f(k(a[1][1+M],a),c,az,b,aA);case
32:var
aB=g[1],aC=function(a){return[0,c,[32,a]]};return f(k(a[1][1+aW],a),c,aB,b,aC);case
33:var
aD=g[1],aE=function(a){return[0,c,[33,a]]};return e(k(a[1][1+d],a),aD,b,aE);case
34:var
aF=g[1],aG=function(a){return[0,c,[34,a]]};return e(k(a[1][1+d],a),aF,b,aG);default:var
aH=g[1],aI=function(a){return[0,c,[35,a]]};return e(k(a[1][1+d],a),aH,b,aI)}}function
gA(a,b,c){var
f=c[2],e=c[1],g=e[3],i=e[2],l=e[1],m=j(a[1][1+h],a,l),n=j(a[1][1+h],a,i),o=T(k(a[1][1+h],a),g),p=j(a[1][1+d],a,f);if(m===l&&n===i&&o===g&&p===f)return c;return[0,[0,m,n,o],p]}function
gB(a,b,c){var
f=c[2],e=c[1],g=e[3],i=e[2],l=e[1],m=j(a[1][1+h],a,l),n=j(a[1][1+h],a,i),o=T(k(a[1][1+h],a),g),p=j(a[1][1+d],a,f);if(m===l&&n===i&&o===g&&p===f)return c;return[0,[0,m,n,o],p]}function
gC(a,b){var
c=b[2],e=b[1],f=j(a[1][1+h],a,e),g=j(a[1][1+d],a,c);if(e===f&&c===g)return b;return[0,f,g]}function
gF(a,b){var
c=b[2],e=b[1],d=j(a[1][1+h],a,c);return d===c?b:[0,e,d]}function
gG(a,b){var
c=b[3],d=b[2],g=b[4],i=b[1],e=j(a[1][1+h],a,d),f=j(a[1][1+q],a,c);if(e===d&&f===c)return b;return[0,i,e,f,g]}function
gH(a,b){var
c=b[2],d=b[1];switch(c[0]){case
0:var
f=c[1],g=function(a){return[0,d,[0,a]]};return e(k(a[1][1+h],a),f,b,g);case
1:var
i=c[1],j=function(a){return[0,d,[1,a]]};return e(k(a[1][1+bd],a),i,b,j);default:var
l=c[1],m=function(a){return[0,d,[2,a]]};return e(k(a[1][1+bc],a),l,b,m)}}function
gI(a,b){var
c=b[2],e=b[1],f=T(k(a[1][1+be],a),e),g=j(a[1][1+d],a,c);if(e===f&&c===g)return b;return[0,f,g]}function
gJ(a,b){var
c=b[2],e=b[1],f=j(a[1][1+h],a,e),g=j(a[1][1+d],a,c);if(e===f&&c===g)return b;return[0,f,g]}function
gK(a,b){var
c=b[3],e=b[2],i=b[4],k=b[1],f=j(a[1][1+h],a,e),g=j(a[1][1+d],a,c);if(e===f&&c===g)return b;return[0,k,f,g,i]}function
gL(a,b){var
c=b[2],e=b[1],f=j(a[1][1+h],a,e),g=j(a[1][1+d],a,c);if(e===f&&c===g)return b;return[0,f,g]}function
gM(a,b){var
c=b[2],d=c[2],e=c[1],h=b[1],f=j(a[1][1+ad],a,e),g=j(a[1][1+a9],a,d);if(f===e&&g===d)return b;return[0,h,[0,f,g]]}function
gN(a,b){return j(a[1][1+i],a,b)}function
gO(a,b){return j(a[1][1+i],a,b)}function
gP(a,b){if(0===b[0]){var
c=b[1],d=function(a){return[0,a]};return e(k(a[1][1+a_],a),c,b,d)}var
f=b[1];function
g(a){return[1,a]}return e(k(a[1][1+a8],a),f,b,g)}function
gQ(a,b){var
c=b[3],e=b[2],f=b[1],g=j(a[1][1+ad],a,f),h=F(k(a[1][1+E],a),e),i=j(a[1][1+d],a,c);if(f===g&&lu(e,h)&&c===i)return b;return[0,g,h,i]}function
gR(a,b){var
c=b[2],e=b[1],f=j(a[1][1+N],a,e),g=j(a[1][1+d],a,c);if(e===f&&c===g)return b;return[0,f,g]}function
gS(a,b){var
c=b[5],e=b[4],f=b[3],g=b[2],i=b[1],k=j(a[1][1+h],a,i),l=j(a[1][1+h],a,g),m=j(a[1][1+h],a,f),n=j(a[1][1+h],a,e),o=j(a[1][1+d],a,c);if(i===k&&g===l&&f===m&&e===n&&c===o)return b;return[0,k,l,m,n,o]}function
gT(a,b){var
c=b[2],e=b[1],f=j(a[1][1+h],a,e),g=j(a[1][1+d],a,c);if(e===f&&c===g)return b;return[0,f,g]}function
gU(a,b,c){var
e=c[6],f=c[5],g=c[4],h=c[3],i=c[2],k=c[1];return e===j(a[1][1+d],a,e)?c:[0,k,i,h,g,f,e]}function
gV(a,b,c){var
e=c[4],g=c[3],h=c[2],i=c[1],f=j(a[1][1+d],a,e);return e===f?c:[0,i,h,g,f]}function
gW(a,b,c){return j(a[1][1+d],a,c)}function
gX(a,b,c){var
e=c[2],g=c[1],f=j(a[1][1+d],a,e);return e===f?c:[0,g,f]}function
gY(a,b,c){var
e=c[3],g=c[2],h=c[1],f=j(a[1][1+d],a,e);return e===f?c:[0,h,g,f]}function
gZ(a,b,c){var
e=c[3],g=c[2],h=c[1],f=j(a[1][1+d],a,e);return e===f?c:[0,h,g,f]}function
g0(a,b,c){var
e=c[3],g=c[2],h=c[1],f=j(a[1][1+d],a,e);return e===f?c:[0,h,g,f]}function
g1(a,b,c){var
d=c[1],f=c[2],e=s(a[1][1+aw],a,b,d);return e===d?c:[0,e,f]}function
g2(a,b,c){var
e=c[3],f=c[2],g=c[1],i=j(a[1][1+h],a,g),k=j(a[1][1+h],a,f),l=j(a[1][1+d],a,e);if(i===g&&k===f&&l===e)return c;return[0,i,k,l]}function
g3(a,b,c){var
e=c[3],f=c[2],g=c[1],h=j(a[1][1+ax],a,g),i=F(k(a[1][1+E],a),f),l=j(a[1][1+d],a,e);if(h===g&&i===f&&l===e)return c;return[0,h,i,l]}function
g4(a,b){var
c=b[2],d=c[5],e=c[4],f=c[2],g=c[1],o=c[3],r=b[1],i=j(a[1][1+u],a,f),l=j(a[1][1+q],a,e),m=F(k(a[1][1+h],a),d),n=j(a[1][1+p],a,g);if(n===g&&i===f&&l===e&&m===d)return b;return[0,r,[0,n,i,o,l,m]]}function
g5(a,b){var
c=b[2],e=c[2],f=c[1],i=b[1],g=T(k(a[1][1+N],a),f),h=j(a[1][1+d],a,e);if(g===f&&h===e)return b;return[0,i,[0,g,h]]}function
g6(a,b){var
c=b[2],e=c[2],f=c[1],l=b[1],g=T(k(a[1][1+h],a),f),i=j(a[1][1+d],a,e);if(f===g&&e===i)return b;return[0,l,[0,g,i]]}function
g7(a,b){return F(k(a[1][1+a1],a),b)}function
g8(a,b){var
c=b[2],e=c[2],g=c[1],h=b[1],f=j(a[1][1+d],a,e);return e===f?b:[0,h,[0,g,f]]}function
g9(a,b){return j(a[1][1+i],a,b)}function
g_(a,b){var
c=b[2],d=c[2],e=c[1],h=b[1],f=j(a[1][1+ax],a,e),g=j(a[1][1+cm],a,d);if(f===e&&g===d)return b;return[0,h,[0,f,g]]}function
g$(a,b){if(0===b[0]){var
c=b[1],d=function(a){return[0,a]};return e(k(a[1][1+ae],a),c,b,d)}var
f=b[1];function
g(a){return[1,a]}return e(k(a[1][1+c3],a),f,b,g)}function
ha(a,b,c){var
e=c[3],f=c[2],g=c[1],m=k(a[1][1+z],a),h=T(function(a){return aK(m,a)},f),i=aK(k(a[1][1+G],a),g),l=j(a[1][1+d],a,e);if(h===f&&i===g&&e===l)return c;return[0,i,h,l]}function
hb(a,b){switch(b[0]){case
0:var
c=b[1],d=function(a){return[0,a]};return e(k(a[1][1+b3],a),c,b,d);case
1:var
f=b[1],g=function(a){return[1,a]};return e(k(a[1][1+bZ],a),f,b,g);case
2:var
h=b[1],i=function(a){return[2,a]};return e(k(a[1][1+cb],a),h,b,i);case
3:var
j=b[1],l=function(a){return[3,a]};return e(k(a[1][1+cc],a),j,b,l);case
4:var
m=b[1],n=function(a){return[4,a]};return e(k(a[1][1+b$],a),m,b,n);default:var
o=b[1],p=function(a){return[5,a]};return e(k(a[1][1+b5],a),o,b,p)}}function
hc(a,b,c){var
e=c[4],f=c[3],i=c[2],l=c[1],g=T(k(a[1][1+bX],a),f),h=j(a[1][1+d],a,e);if(g===f&&e===h)return c;return[0,l,i,g,h]}function
hd(a,b){var
c=b[2],e=c[6],f=c[4],g=c[3],i=c[2],k=c[1],r=c[5],s=b[1],l=j(a[1][1+N],a,k),m=j(a[1][1+h],a,i),n=j(a[1][1+h],a,g),o=j(a[1][1+q],a,f),p=j(a[1][1+d],a,e);if(l===k&&m===i&&n===g&&o===f&&p===e)return b;return[0,s,[0,l,m,n,o,r,p]]}function
he(a,b){var
c=b[2],e=c[3],f=c[1],g=f[2],h=f[1],l=c[2],m=b[1],i=s(a[1][1+I],a,h,g),k=j(a[1][1+d],a,e);if(g===i&&e===k)return b;return[0,m,[0,[0,h,i],l,k]]}function
hf(a,b){var
c=b[2],e=c[6],f=c[2],g=c[1],n=c[5],o=c[4],p=c[3],q=b[1],k=j(a[1][1+i],a,g),l=j(a[1][1+h],a,f),m=j(a[1][1+d],a,e);if(g===k&&f===l&&e===m)return b;return[0,q,[0,k,l,p,o,n,m]]}function
hg(a,b){var
c=b[2],e=c[6],f=c[5],g=c[3],i=c[2],o=c[4],p=c[1],r=b[1],k=j(a[1][1+h],a,i),l=j(a[1][1+h],a,g),m=j(a[1][1+q],a,f),n=j(a[1][1+d],a,e);if(k===i&&l===g&&m===f&&n===e)return b;return[0,r,[0,p,k,l,o,m,n]]}function
hh(a,b){var
c=b[2],e=c[2],f=c[1],k=b[1],g=j(a[1][1+h],a,f),i=j(a[1][1+d],a,e);if(g===f&&e===i)return b;return[0,k,[0,g,i]]}function
hi(a,b){var
c=b[2],e=c[8],f=c[7],g=c[2],h=c[1],n=c[6],o=c[5],p=c[4],s=c[3],t=b[1],i=j(a[1][1+r],a,h),k=j(a[1][1+b2],a,g),l=j(a[1][1+q],a,f),m=j(a[1][1+d],a,e);if(i===h&&k===g&&l===f&&m===e)return b;return[0,t,[0,i,k,s,p,o,n,l,m]]}function
hj(a,b){var
c=b[1],d=b[2];function
e(a){return[0,c,a]}return f(k(a[1][1+I],a),c,d,b,e)}function
hk(a,b){var
c=b[1],d=b[2];function
e(a){return[0,c,a]}return f(k(a[1][1+I],a),c,d,b,e)}function
hl(a,b){switch(b[0]){case
0:var
c=b[1],d=function(a){return[0,a]};return e(k(a[1][1+h],a),c,b,d);case
1:var
f=b[1],g=function(a){return[1,a]};return e(k(a[1][1+bW],a),f,b,g);default:var
i=b[1],j=function(a){return[2,a]};return e(k(a[1][1+bV],a),i,b,j)}}function
hm(a,b){return j(a[1][1+i],a,b)}function
hn(a,b,c){var
f=c[4],g=c[3],h=c[2],e=h[2],i=e[4],l=e[3],m=e[2],o=e[1],p=c[1],x=h[1],q=F(k(a[1][1+n],a),p),r=F(k(a[1][1+c5],a),o),s=T(k(a[1][1+ay],a),m),t=F(k(a[1][1+c8],a),l),u=j(a[1][1+c4],a,g),v=j(a[1][1+d],a,f),w=j(a[1][1+d],a,i);if(s===m&&t===l&&u===g&&q===p&&v===f&&w===i&&r===o)return c;return[0,q,[0,x,[0,r,s,t,w]],u,v]}function
ho(a,b){if(0===b[0]){var
c=b[1],d=function(a){return[0,a]};return e(k(a[1][1+h],a),c,b,d)}var
f=b[1];function
g(a){return[1,a]}return e(k(a[1][1+ah],a),f,b,g)}function
hp(a,b){var
c=b[2],e=c[2],f=c[1],i=b[1],g=j(a[1][1+o],a,f),h=j(a[1][1+d],a,e);if(g===f&&h===e)return b;return[0,i,[0,g,h]]}function
hq(a,b){var
c=b[2],e=c[2],f=c[1],i=b[1],g=j(a[1][1+ay],a,f),h=j(a[1][1+d],a,e);if(g===f&&h===e)return b;return[0,i,[0,g,h]]}function
hr(a,b){var
c=b[2],d=c[2],e=c[1],l=c[3],m=b[1],f=j(a[1][1+h],a,d),g=F(k(a[1][1+i],a),e);if(f===d&&g===e)return b;return[0,m,[0,g,f,l]]}function
hs(a,b){var
c=b[1],d=b[2];function
e(a){return[0,c,a]}return f(k(a[1][1+D],a),c,d,b,e)}function
ht(a,b){if(0===b[0]){var
c=b[1],d=function(a){return[0,a]};return e(k(a[1][1+dk],a),c,b,d)}var
f=b[1];function
h(a){return[1,a]}return e(k(a[1][1+g],a),f,b,h)}function
hu(a,b,c){var
e=c[5],f=c[4],h=c[3],i=c[2],m=c[1],n=F(k(a[1][1+de],a),m),o=F(k(a[1][1+x],a),i),p=F(k(a[1][1+g],a),h),q=j(a[1][1+l],a,f),r=j(a[1][1+d],a,e);if(m===n&&i===o&&h===p&&f===q&&e===r)return c;return[0,n,o,p,q,r]}function
hv(a,b){var
c=b[1],d=b[2];function
e(a){return[0,c,a]}return f(k(a[1][1+D],a),c,d,b,e)}function
hw(a,b){if(0===b[0]){var
c=b[1],d=function(a){return[0,a]};return e(k(a[1][1+di],a),c,b,d)}var
f=b[1];function
g(a){return[1,a]}return e(k(a[1][1+dj],a),f,b,g)}function
hx(a,b,c){var
e=c[5],f=c[3],h=c[2],i=c[1],p=c[4],k=j(a[1][1+dg],a,i),m=j(a[1][1+g],a,h),n=j(a[1][1+l],a,f),o=j(a[1][1+d],a,e);if(i===k&&h===m&&f===n&&e===o)return c;return[0,k,m,n,p,o]}function
hy(a,b){var
c=b[1],d=b[2];function
e(a){return[0,c,a]}return f(k(a[1][1+D],a),c,d,b,e)}function
hz(a,b){if(0===b[0]){var
c=b[1],d=function(a){return[0,a]};return e(k(a[1][1+dn],a),c,b,d)}var
f=b[1];function
g(a){return[1,a]}return e(k(a[1][1+dp],a),f,b,g)}function
hA(a,b,c){var
e=c[5],f=c[3],h=c[2],i=c[1],p=c[4],k=j(a[1][1+dl],a,i),m=j(a[1][1+g],a,h),n=j(a[1][1+l],a,f),o=j(a[1][1+d],a,e);if(i===k&&h===m&&f===n&&e===o)return c;return[0,k,m,n,p,o]}function
hB(a,b){if(0===b[0]){var
c=b[1],d=function(a){return[0,a]};return e(k(a[1][1+g],a),c,b,d)}var
f=b[1];function
h(a){return[1,a]}return e(k(a[1][1+aj],a),f,b,h)}function
hC(a,b,c){var
e=c[3],f=c[1],k=c[2],h=j(a[1][1+g],a,f),i=j(a[1][1+d],a,e);if(f===h&&e===i)return c;return[0,h,k,i]}function
hD(a,b,c){var
e=c[3],g=c[2],h=c[1],f=j(a[1][1+d],a,e);return e===f?c:[0,h,g,f]}function
hE(a,b){if(0===b[0]){var
c=b[1],d=T(k(a[1][1+ds],a),c);return c===d?b:[0,d]}var
e=b[1],f=j(a[1][1+dw],a,e);return e===f?b:[1,f]}function
hF(a,b){var
c=b[2],e=b[1],d=F(k(a[1][1+i],a),c);return c===d?b:[0,e,d]}function
hG(a,b){var
c=b[2],d=c[2],e=c[1],h=b[1],f=j(a[1][1+i],a,e),g=F(k(a[1][1+i],a),d);if(e===f&&d===g)return b;return[0,h,[0,f,g]]}function
hH(a,b,c){var
e=c[5],f=c[3],g=c[2],h=c[1],p=c[4],i=FS(k(a[1][1+aB],a),f),m=F(k(a[1][1+aC],a),g),n=F(k(a[1][1+l],a),h),o=j(a[1][1+d],a,e);if(f===i&&g===m&&h===n&&e===o)return c;return[0,n,m,i,p,o]}function
hI(a,b){if(0===b[0]){var
c=b[1],d=function(a){return[0,a]};return e(k(a[1][1+l],a),c,b,d)}var
f=b[1];function
h(a){return[1,a]}return e(k(a[1][1+g],a),f,b,h)}function
hJ(a,b,c){var
e=c[3],f=c[2],i=c[1],g=j(a[1][1+du],a,f),h=j(a[1][1+d],a,e);if(g===f&&h===e)return c;return[0,i,g,h]}function
hK(a,b){return j(a[1][1+i],a,b)}function
hL(a,b){var
c=b[2],d=c[1],f=c[2],g=b[1],e=j(a[1][1+C],a,d);return d===e?b:[0,g,[0,e,f]]}function
hM(a,b){var
c=b[2],d=c[1],f=c[2],g=b[1],e=j(a[1][1+C],a,d);return d===e?b:[0,g,[0,e,f]]}function
hN(a,b){var
c=b[2],d=c[1],f=c[2],g=b[1],e=j(a[1][1+C],a,d);return d===e?b:[0,g,[0,e,f]]}function
hO(a,b){var
c=b[2],d=c[1],f=c[2],g=b[1],e=j(a[1][1+C],a,d);return d===e?b:[0,g,[0,e,f]]}function
hP(a,b){var
c=b[2][1],e=b[1],d=j(a[1][1+C],a,c);return c===d?b:[0,e,[0,d]]}function
hQ(a,b){var
c=b[4],e=b[1],f=T(k(a[1][1+dF],a),e),g=j(a[1][1+d],a,c);if(e===f&&c===g)return b;return[0,f,b[2],b[3],g]}function
hR(a,b){var
c=b[3],e=b[1],f=T(k(a[1][1+aE],a),e),g=j(a[1][1+d],a,c);if(e===f&&c===g)return b;return[0,f,b[2],g]}function
hS(a,b){var
g=b[4],c=b[1];if(0===c[0])var
i=c[1],l=function(a){return[0,a]},m=k(a[1][1+aE],a),f=e(function(a){return T(m,a)},i,c,l);else
var
n=c[1],o=function(a){return[1,a]},p=k(a[1][1+dy],a),f=e(function(a){return T(p,a)},n,c,o);var
h=j(a[1][1+d],a,g);if(c===f&&g===h)return b;return[0,f,b[2],b[3],h]}function
hT(a,b){var
c=b[4],e=b[1],f=T(k(a[1][1+dA],a),e),g=j(a[1][1+d],a,c);if(e===f&&c===g)return b;return[0,f,b[2],b[3],g]}function
hU(a,b){var
c=b[4],e=b[1],f=T(k(a[1][1+dC],a),e),g=j(a[1][1+d],a,c);if(e===f&&c===g)return b;return[0,f,b[2],b[3],g]}function
hV(a,b){var
c=b[2],d=b[1];switch(c[0]){case
0:var
f=c[1],g=function(a){return[0,d,[0,a]]};return e(k(a[1][1+dD],a),f,b,g);case
1:var
h=c[1],i=function(a){return[0,d,[1,a]]};return e(k(a[1][1+dB],a),h,b,i);case
2:var
j=c[1],l=function(a){return[0,d,[2,a]]};return e(k(a[1][1+dz],a),j,b,l);case
3:var
m=c[1],n=function(a){return[0,d,[3,a]]};return e(k(a[1][1+dx],a),m,b,n);default:var
o=c[1],p=function(a){return[0,d,[4,a]]};return e(k(a[1][1+dG],a),o,b,p)}}function
hW(a,b,c){var
e=c[3],f=c[2],g=c[1],h=s(a[1][1+m],a,Rs,g),i=j(a[1][1+dE],a,f),k=j(a[1][1+d],a,e);if(g===h&&f===i&&e===k)return c;return[0,h,i,k]}function
hX(a,b,c){var
e=c[1],f=j(a[1][1+d],a,e);return e===f?c:[0,f]}function
hY(a,b,c){var
e=c[3],f=c[2],g=c[1],h=j(a[1][1+l],a,g),i=j(a[1][1+x],a,f),k=j(a[1][1+d],a,e);if(g===h&&f===i&&e===k)return c;return[0,h,i,k]}function
hZ(a,b,c){var
e=c[4],f=c[3],g=c[2],h=c[1],i=s(a[1][1+m],a,[0,f],h),k=j(a[1][1+o],a,g),l=j(a[1][1+d],a,e);if(i===h&&k===g&&l===e)return c;return[0,i,k,f,l]}function
h0(a,b,c){return s(a[1][1+O],a,b,c)}function
h1(a,b,c){var
e=c[2],f=c[1],g=j(a[1][1+o],a,f),h=j(a[1][1+d],a,e);if(f===g&&e===h)return c;return[0,g,h]}function
h2(a,b,c){var
e=c[4],f=c[2],i=c[3],l=c[1],g=aK(k(a[1][1+t],a),f),h=j(a[1][1+d],a,e);if(g===f&&e===h)return c;return[0,l,g,i,h]}function
h3(a,b,c){return s(a[1][1+U],a,b,c)}function
h4(a,b,c){var
e=c[4],f=c[3],g=c[2],h=c[1],i=j(a[1][1+aA],a,h),l=j(a[1][1+o],a,g),m=F(k(a[1][1+al],a),f),n=j(a[1][1+d],a,e);if(i===h&&l===g&&m===f&&n===e)return c;return[0,i,l,m,n]}function
h5(a,b){switch(b[0]){case
0:var
c=b[1],d=c[2],e=c[1],f=s(a[1][1+aF],a,e,d);return f===d?b:[0,[0,e,f]];case
1:var
g=b[1],i=g[2],k=g[1],l=s(a[1][1+aG],a,k,i);return l===i?b:[1,[0,k,l]];case
2:var
m=b[1],n=m[2],o=m[1],p=s(a[1][1+aJ],a,o,n);return p===n?b:[2,[0,o,p]];case
3:var
q=b[1],r=q[2],t=q[1],u=s(a[1][1+aH],a,t,r);return u===r?b:[3,[0,t,u]];case
4:var
v=b[1],w=j(a[1][1+h],a,v);return w===v?b:[4,w];case
5:var
x=b[1],y=x[2],z=x[1],A=s(a[1][1+O],a,z,y);return A===y?b:[5,[0,z,A]];case
6:var
B=b[1],C=B[2],D=B[1],E=s(a[1][1+R],a,D,C);return E===C?b:[6,[0,D,E]];case
7:var
F=b[1],G=F[2],H=F[1],I=s(a[1][1+U],a,H,G);return I===G?b:[7,[0,H,I]];default:var
J=b[1],K=J[2],L=J[1],M=s(a[1][1+Y],a,L,K);return M===K?b:[8,[0,L,M]]}}function
h6(a,b,c){var
e=c[5],f=c[4],g=c[3],h=c[2],o=c[1],i=FS(k(a[1][1+aB],a),f),l=F(k(a[1][1+aC],a),g),m=F(k(a[1][1+dN],a),h),n=j(a[1][1+d],a,e);if(f===i&&g===l&&h===m&&e===n)return c;return[0,o,m,l,i,n]}function
h7(a,b,c){return s(a[1][1+Y],a,b,c)}function
h8(a,b){var
c=b[2],e=c[4],f=c[2],g=c[1],o=c[3],p=b[1],l=F(k(a[1][1+i],a),g),m=j(a[1][1+h],a,f),n=j(a[1][1+d],a,e);if(g===l&&f===m&&e===n)return b;return[0,p,[0,l,m,o,n]]}function
h9(a,b){var
c=b[2],d=c[2],e=c[1],h=c[3],i=b[1],f=j(a[1][1+aO],a,e),g=j(a[1][1+o],a,d);if(e===f&&d===g)return b;return[0,i,[0,f,g,h]]}function
h_(a,b){var
c=b[2],e=c[3],f=c[2],g=c[1],m=b[1],h=T(k(a[1][1+dV],a),g),i=F(k(a[1][1+dU],a),f),l=j(a[1][1+d],a,e);if(g===h&&f===i&&e===l)return b;return[0,m,[0,h,i,l]]}function
h$(a,b,c){var
e=c[4],f=c[3],g=c[2],h=c[1],i=F(k(a[1][1+n],a),h),l=j(a[1][1+aM],a,g),m=j(a[1][1+Z],a,f),o=j(a[1][1+d],a,e);if(h===i&&g===l&&f===m&&e===o)return c;return[0,i,l,m,o]}function
ia(a,b,c){var
e=c[5],f=c[4],g=c[3],h=c[2],i=c[1],l=j(a[1][1+aP],a,i),m=F(k(a[1][1+n],a),h),o=j(a[1][1+aM],a,g),p=j(a[1][1+Z],a,f),q=j(a[1][1+d],a,e);if(i===l&&h===m&&g===o&&f===p&&e===q)return c;return[0,l,m,o,p,q]}function
ic(a,b,c){var
e=c[7],f=c[6],g=c[5],h=c[4],i=c[3],l=c[2],m=c[1],o=j(a[1][1+aS],a,m),p=F(k(a[1][1+n],a),l),q=aK(k(a[1][1+G],a),i),v=k(a[1][1+z],a),r=F(function(a){return aK(v,a)},h),w=k(a[1][1+z],a),s=T(function(a){return aK(w,a)},g),t=F(k(a[1][1+aR],a),f),u=j(a[1][1+d],a,e);if(o===m&&p===l&&q===i&&r===h&&s===g&&t===f&&u===e)return c;return[0,o,p,q,r,s,t,u]}function
ie(a,b,c){var
e=c[1],f=j(a[1][1+d],a,e);return e===f?c:[0,f]}function
ig(a,b,c){var
e=c[2],f=c[1],g=F(k(a[1][1+S],a),f),h=j(a[1][1+d],a,e);if(f===g&&e===h)return c;return[0,g,h]}function
ih(a,b,c){var
e=c[4],f=c[3],h=c[2],i=c[1],k=j(a[1][1+x],a,i),l=j(a[1][1+g],a,h),m=j(a[1][1+g],a,f),n=j(a[1][1+d],a,e);if(i===k&&h===l&&f===m&&e===n)return c;return[0,k,l,m,n]}function
ii(a,b){var
c=b[1],d=b[2];function
e(a){return[0,c,a]}return f(k(a[1][1+t],a),c,d,b,e)}function
ij(a,b){var
c=b[2],e=c[2],f=c[1],i=b[1],g=j(a[1][1+aN],a,f),h=j(a[1][1+d],a,e);if(f===g&&e===h)return b;return[0,i,[0,g,h]]}function
ik(a,b){return s(a[1][1+L],a,Rt,b)}function
il(a,b){if(0===b[0])return[0,j(a[1][1+i],a,b[1])];var
c=b[1],d=c[1];return[1,[0,d,s(a[1][1+v],a,d,c[2])]]}function
im(a,b){var
c=b[2],d=c[3],e=c[2],f=c[1],k=c[4],l=b[1],g=j(a[1][1+aO],a,f),h=j(a[1][1+aN],a,e),i=j(a[1][1+J],a,d);if(f===g&&e===h&&d===i)return b;return[0,l,[0,g,h,i,k]]}function
io(a,b){var
c=b[2],e=c[3],f=c[2],g=c[1],m=b[1],h=T(k(a[1][1+dZ],a),g),i=F(k(a[1][1+dX],a),f),l=j(a[1][1+d],a,e);if(g===h&&f===i&&e===l)return b;return[0,m,[0,h,i,l]]}function
ip(a,b){return s(a[1][1+m],a,Ru,b)}function
iq(a,b,c){var
e=c[6],f=c[5],g=c[4],h=c[3],i=c[2],l=c[1],t=c[7],m=j(a[1][1+aP],a,l),o=F(k(a[1][1+n],a),i),p=j(a[1][1+dY],a,h),q=j(a[1][1+d1],a,f),r=j(a[1][1+Z],a,g),s=j(a[1][1+d],a,e);if(l===m&&i===o&&h===p&&f===q&&g===r&&e===s)return c;return[0,m,o,p,r,q,s,t]}function
ir(a,b){return F(k(a[1][1+g],a),b)}function
is(a,b,c){var
e=c[7],f=c[6],g=c[5],h=c[3],i=c[2],l=c[1],m=j(a[1][1+Q],a,l),n=j(a[1][1+aQ],a,i),o=j(a[1][1+u],a,h),p=j(a[1][1+q],a,g),r=T(k(a[1][1+K],a),f),s=j(a[1][1+d],a,e);if(l===m&&i===n&&o===h&&p===g&&r===f&&s===e)return c;return[0,m,n,o,c[4],p,r,s]}function
it(a,b){if(typeof
b==="number")return b?b:b;var
c=b[1],d=j(a[1][1+g],a,c);return c===d?b:[0,d]}function
iu(a,b,c){var
e=c[7],f=c[6],g=c[5],h=c[3],i=c[2],l=c[1],m=j(a[1][1+r],a,l),n=j(a[1][1+aQ],a,i),o=j(a[1][1+u],a,h),p=j(a[1][1+q],a,g),s=T(k(a[1][1+K],a),f),t=j(a[1][1+d],a,e);if(l===m&&i===n&&o===h&&p===g&&s===f&&t===e)return c;return[0,m,n,o,c[4],p,s,t]}function
iv(a,b,c){var
e=c[6],f=c[5],g=c[3],h=c[2],i=j(a[1][1+r],a,h),l=aK(k(a[1][1+A],a),g),m=T(k(a[1][1+K],a),f),n=j(a[1][1+d],a,e);if(h===i&&g===l&&f===m&&e===n)return c;return[0,c[1],i,l,c[4],m,n]}function
iw(a,b){var
c=b[2],d=c[2],e=c[1],h=b[1],f=j(a[1][1+ae],a,e),g=F(k(a[1][1+E],a),d);if(e===f&&d===g)return b;return[0,h,[0,f,g]]}function
ix(a,b){var
c=b[2],e=c[2],f=c[1],i=b[1],g=T(k(a[1][1+d5],a),f),h=j(a[1][1+d],a,e);if(f===g&&e===h)return b;return[0,i,[0,g,h]]}function
iy(a,b){switch(b[0]){case
0:var
c=b[1],d=c[1],j=c[2],l=function(a){return[0,[0,d,a]]};return f(k(a[1][1+d4],a),d,j,b,l);case
1:var
e=b[1],g=e[1],m=e[2],n=function(a){return[1,[0,g,a]]};return f(k(a[1][1+d2],a),g,m,b,n);default:var
h=b[1],i=h[1],o=h[2],p=function(a){return[2,[0,i,a]]};return f(k(a[1][1+d3],a),i,o,b,p)}}function
iz(a,b){var
c=b[2],e=c[2],f=c[1],k=b[1],h=j(a[1][1+g],a,f),i=j(a[1][1+d],a,e);if(f===h&&e===i)return b;return[0,k,[0,h,i]]}function
iA(a,b){var
c=b[2],e=c[2],f=c[1],i=b[1],g=T(k(a[1][1+d8],a),f),h=j(a[1][1+d],a,e);if(f===g&&e===h)return b;return[0,i,[0,g,h]]}function
iB(a,b){return s(a[1][1+m],a,Rv,b)}function
iC(a,b,c){var
e=c[3],f=c[2],h=c[1],i=j(a[1][1+g],a,h),l=F(k(a[1][1+E],a),f),m=j(a[1][1+d],a,e);if(h===i&&f===l&&e===m)return c;return[0,i,l,m]}function
iD(a,b,c){var
e=c[7],f=c[6],g=c[5],h=c[4],i=c[3],l=c[2],m=c[1],o=F(k(a[1][1+aS],a),m),p=F(k(a[1][1+n],a),i),q=j(a[1][1+d$],a,l),v=k(a[1][1+d6],a),r=F(function(a){return aK(v,a)},h),s=F(k(a[1][1+aR],a),g),t=T(k(a[1][1+K],a),f),u=j(a[1][1+d],a,e);if(m===o&&l===q&&h===r&&g===s&&f===t&&e===u&&i===p)return c;return[0,o,q,p,r,s,t,u]}function
iE(a,b,c){return s(a[1][1+aT],a,b,c)}function
iF(a,b,c){return s(a[1][1+aT],a,b,c)}function
iG(a,b,c){var
e=c[3],f=c[2],g=c[1],h=F(k(a[1][1+ea],a),g),i=j(a[1][1+ec],a,f),l=j(a[1][1+d],a,e);if(g===h&&f===i&&e===l)return c;return[0,h,i,l]}function
iI(a,b){return aK(k(a[1][1+t],a),b)}function
iJ(a,b){if(0===b[0]){var
c=b[1],e=j(a[1][1+h],a,c);return e===c?b:[0,e]}var
f=b[1],g=f[2][1],k=f[1],i=j(a[1][1+d],a,g);return g===i?b:[1,[0,k,[0,i]]]}function
iK(a,b){var
c=b[2],e=c[2],f=c[1],i=b[1],g=T(k(a[1][1+ed],a),f),h=j(a[1][1+d],a,e);if(f===g&&e===h)return b;return[0,i,[0,g,h]]}function
iL(a,b,c){var
d=c[1],e=s(a[1][1+aU],a,b,d);return d===e?c:[0,e,c[2],c[3]]}function
iM(a,b){var
c=b[2],e=c[2],f=c[1],i=b[1],g=T(k(a[1][1+dr],a),f),h=j(a[1][1+d],a,e);if(f===g&&e===h)return b;return[0,i,[0,g,h]]}function
iN(a,b,c){var
e=c[4],f=c[3],h=c[2],i=c[1],l=j(a[1][1+g],a,i),m=F(k(a[1][1+$],a),h),n=j(a[1][1+aX],a,f),o=j(a[1][1+d],a,e);if(i===l&&h===m&&f===n&&e===o)return c;return[0,l,m,n,o]}function
iO(a,b,c){var
e=c[2],f=c[1],g=F(k(a[1][1+S],a),f),h=j(a[1][1+d],a,e);if(f===g&&e===h)return c;return[0,g,h]}function
iP(a,b,c){var
e=c[2],f=c[1],g=j(a[1][1+P],a,f),h=j(a[1][1+d],a,e);if(f===g&&e===h)return c;return[0,g,h]}function
iQ(a,b,c){var
e=c[4],f=c[3],h=c[2],i=j(a[1][1+g],a,h),k=j(a[1][1+g],a,f),l=j(a[1][1+d],a,e);if(h===i&&f===k&&e===l)return c;return[0,c[1],i,k,l]}function
iR(a,b,c){var
e=c[4],f=c[3],h=c[2],i=j(a[1][1+ab],a,h),k=j(a[1][1+g],a,f),l=j(a[1][1+d],a,e);if(h===i&&f===k&&e===l)return c;return[0,c[1],i,k,l]}function
iS(a,b,c){var
e=c[3],f=c[2],h=c[1],i=j(a[1][1+g],a,h),k=j(a[1][1+o],a,f),l=j(a[1][1+d],a,e);if(i===h&&k===f&&l===e)return c;return[0,i,k,l]}function
iT(a,b,c){return s(a[1][1+W],a,b,c)}function
iU(a,b){switch(b[0]){case
0:var
c=b[1],d=function(a){return[0,a]};return e(k(a[1][1+g],a),c,b,d);case
1:var
f=b[1],h=function(a){return[1,a]};return e(k(a[1][1+aj],a),f,b,h);default:return b}}function
iV(a,b,c){var
e=c[2],f=c[1],g=T(k(a[1][1+el],a),f),h=j(a[1][1+d],a,e);if(f===g&&e===h)return c;return[0,g,h]}function
iX(a,b){var
d=b[2],c=b[1];switch(d[0]){case
0:var
g=d[1],h=function(a){return[0,c,[0,a]]};return f(k(a[1][1+em],a),c,g,b,h);case
1:var
l=d[1],m=function(a){return[0,c,[1,a]]};return f(k(a[1][1+ej],a),c,l,b,m);case
2:var
n=d[1],o=function(a){return[0,c,[2,a]]};return f(k(a[1][1+ei],a),c,n,b,o);case
3:var
p=d[1],q=function(a){return[0,c,[3,a]]};return f(k(a[1][1+eh],a),c,p,b,q);case
4:var
r=d[1],s=function(a){return[0,c,[4,a]]};return f(k(a[1][1+eg],a),c,r,b,s);case
5:var
t=d[1],u=function(a){return[0,c,[5,a]]};return f(k(a[1][1+aU],a),c,t,b,u);case
6:var
w=d[1],x=function(a){return[0,c,[6,a]]};return f(k(a[1][1+d7],a),c,w,b,x);case
7:var
y=d[1],z=function(a){return[0,c,[7,a]]};return f(k(a[1][1+dT],a),c,y,b,z);case
8:var
A=d[1],B=function(a){return[0,c,[8,a]]};return f(k(a[1][1+da],a),c,A,b,B);case
9:var
C=d[1],D=function(a){return[0,c,[9,a]]};return e(k(a[1][1+i],a),C,b,D);case
10:var
E=d[1],F=function(a){return[0,c,[10,a]]};return e(j(a[1][1+cY],a,c),E,b,F);case
11:var
G=d[1],I=function(a){return[0,c,[11,a]]};return f(k(a[1][1+au],a),c,G,b,I);case
12:var
J=d[1],K=function(a){return[0,c,[12,a]]};return f(k(a[1][1+aq],a),c,J,b,K);case
13:var
L=d[1],N=function(a){return[0,c,[13,a]]};return f(k(a[1][1+v],a),c,L,b,N);case
14:var
O=d[1],P=function(a){return[0,c,[14,a]]};return f(k(a[1][1+aW],a),c,O,b,P);case
15:var
Q=d[1],R=function(a){return[0,c,[15,a]]};return f(k(a[1][1+ci],a),c,Q,b,R);case
16:var
S=d[1],T=function(a){return[0,c,[16,a]]};return f(k(a[1][1+H],a),c,S,b,T);case
17:var
U=d[1],V=function(a){return[0,c,[17,a]]};return f(k(a[1][1+M],a),c,U,b,V);case
18:var
W=d[1],X=function(a){return[0,c,[18,a]]};return f(k(a[1][1+bw],a),c,W,b,X);case
19:var
Y=d[1],Z=function(a){return[0,c,[19,a]]};return f(k(a[1][1+ck],a),c,Y,b,Z);case
20:var
_=d[1],$=function(a){return[0,c,[20,a]]};return f(k(a[1][1+cr],a),c,_,b,$);case
21:var
aa=d[1],ab=function(a){return[0,c,[21,a]]};return f(k(a[1][1+am],a),c,aa,b,ab);case
22:var
ac=d[1],ad=function(a){return[0,c,[22,a]]};return f(k(a[1][1+cl],a),c,ac,b,ad);case
23:var
ae=d[1],af=function(a){return[0,c,[23,a]]};return f(k(a[1][1+cj],a),c,ae,b,af);case
24:var
ag=d[1],ah=function(a){return[0,c,[24,a]]};return f(k(a[1][1+cd],a),c,ag,b,ah);case
25:var
aj=d[1],ak=function(a){return[0,c,[25,a]]};return e(j(a[1][1+bU],a,c),aj,b,ak);case
26:var
al=d[1],an=function(a){return[0,c,[26,a]]};return f(k(a[1][1+bS],a),c,al,b,an);case
27:var
ao=d[1],ap=function(a){return[0,c,[27,a]]};return f(k(a[1][1+bt],a),c,ao,b,ap);case
28:var
ar=d[1],as=function(a){return[0,c,[28,a]]};return f(k(a[1][1+bq],a),c,ar,b,as);case
29:var
at=d[1],av=function(a){return[0,c,[29,a]]};return f(k(a[1][1+bm],a),c,at,b,av);case
30:var
aw=d[1],ax=function(a){return[0,c,[30,a]]};return f(k(a[1][1+ai],a),c,aw,b,ax);case
31:var
ay=d[1],az=function(a){return[0,c,[31,a]]};return f(k(a[1][1+bk],a),c,ay,b,az);case
32:var
aA=d[1],aB=function(a){return[0,c,[32,a]]};return f(k(a[1][1+ba],a),c,aA,b,aB);case
33:var
aC=d[1],aD=function(a){return[0,c,[33,a]]};return f(k(a[1][1+bf],a),c,aC,b,aD);case
34:var
aE=d[1],aF=function(a){return[0,c,[34,a]]};return f(k(a[1][1+a6],a),c,aE,b,aF);case
35:var
aG=d[1],aH=function(a){return[0,c,[35,a]]};return f(k(a[1][1+a4],a),c,aG,b,aH);default:var
aI=d[1],aJ=function(a){return[0,c,[36,a]]};return f(k(a[1][1+aY],a),c,aI,b,aJ)}}function
iY(a,b){var
c=b[2],d=b[1],g=b[3],e=T(k(a[1][1+_],a),d),f=T(k(a[1][1+_],a),c);if(d===e&&c===f)return b;return[0,e,f,g]}function
iZ(a){var
c=k(a[1][1+b],a);return function(a){return F(c,a)}}function
i0(a,b){return b}function
i1(a,b){var
d=b[2],c=b[1];switch(d[0]){case
0:var
e=d[1],g=function(a){return[0,c,[0,a]]};return f(k(a[1][1+t],a),c,e,b,g);case
1:var
h=d[1],i=function(a){return[0,c,[1,a]]};return f(k(a[1][1+ee],a),c,h,b,i);case
2:var
j=d[1],l=function(a){return[0,c,[2,a]]};return f(k(a[1][1+d9],a),c,j,b,l);case
3:var
m=d[1],n=function(a){return[0,c,[3,a]]};return f(k(a[1][1+d0],a),c,m,b,n);case
4:var
o=d[1],p=function(a){return[0,c,[4,a]]};return f(k(a[1][1+dR],a),c,o,b,p);case
5:var
q=d[1],r=function(a){return[0,c,[5,a]]};return f(k(a[1][1+dQ],a),c,q,b,r);case
6:var
s=d[1],u=function(a){return[0,c,[6,a]]};return f(k(a[1][1+aJ],a),c,s,b,u);case
7:var
v=d[1],w=function(a){return[0,c,[7,a]]};return f(k(a[1][1+aH],a),c,v,b,w);case
8:var
x=d[1],y=function(a){return[0,c,[8,a]]};return f(k(a[1][1+dP],a),c,x,b,y);case
9:var
z=d[1],A=function(a){return[0,c,[9,a]]};return f(k(a[1][1+dO],a),c,z,b,A);case
10:var
B=d[1],C=function(a){return[0,c,[10,a]]};return f(k(a[1][1+aG],a),c,B,b,C);case
11:var
E=d[1],F=function(a){return[0,c,[11,a]]};return f(k(a[1][1+dM],a),c,E,b,F);case
12:var
G=d[1],H=function(a){return[0,c,[12,a]]};return f(k(a[1][1+dL],a),c,G,b,H);case
13:var
I=d[1],J=function(a){return[0,c,[13,a]]};return f(k(a[1][1+dK],a),c,I,b,J);case
14:var
K=d[1],L=function(a){return[0,c,[14,a]]};return f(k(a[1][1+dJ],a),c,K,b,L);case
15:var
M=d[1],N=function(a){return[0,c,[15,a]]};return f(k(a[1][1+R],a),c,M,b,N);case
16:var
P=d[1],Q=function(a){return[0,c,[16,a]]};return f(k(a[1][1+aF],a),c,P,b,Q);case
17:var
S=d[1],T=function(a){return[0,c,[17,a]]};return f(k(a[1][1+dI],a),c,S,b,T);case
18:var
U=d[1],V=function(a){return[0,c,[18,a]]};return f(k(a[1][1+dH],a),c,U,b,V);case
19:var
W=d[1],X=function(a){return[0,c,[19,a]]};return f(k(a[1][1+Y],a),c,W,b,X);case
20:var
Z=d[1],_=function(a){return[0,c,[20,a]]};return f(k(a[1][1+dv],a),c,Z,b,_);case
21:var
$=d[1],aa=function(a){return[0,c,[21,a]]};return f(k(a[1][1+dt],a),c,$,b,aa);case
22:var
ab=d[1],ac=function(a){return[0,c,[22,a]]};return f(k(a[1][1+dq],a),c,ab,b,ac);case
23:var
ad=d[1],ae=function(a){return[0,c,[23,a]]};return f(k(a[1][1+df],a),c,ad,b,ae);case
24:var
af=d[1],ag=function(a){return[0,c,[24,a]]};return f(k(a[1][1+dm],a),c,af,b,ag);case
25:var
ah=d[1],ai=function(a){return[0,c,[25,a]]};return f(k(a[1][1+dh],a),c,ah,b,ai);case
26:var
aj=d[1],ak=function(a){return[0,c,[26,a]]};return f(k(a[1][1+db],a),c,aj,b,ak);case
27:var
al=d[1],am=function(a){return[0,c,[27,a]]};return f(k(a[1][1+cZ],a),c,al,b,am);case
28:var
an=d[1],ao=function(a){return[0,c,[28,a]]};return f(k(a[1][1+cX],a),c,an,b,ao);case
29:var
ap=d[1],aq=function(a){return[0,c,[29,a]]};return f(k(a[1][1+cQ],a),c,ap,b,aq);case
30:var
ar=d[1],as=function(a){return[0,c,[30,a]]};return f(k(a[1][1+cs],a),c,ar,b,as);case
31:var
at=d[1],au=function(a){return[0,c,[31,a]]};return f(k(a[1][1+bu],a),c,at,b,au);case
32:var
av=d[1],aw=function(a){return[0,c,[32,a]]};return f(k(a[1][1+bo],a),c,av,b,aw);case
33:var
ax=d[1],ay=function(a){return[0,c,[33,a]]};return f(k(a[1][1+bj],a),c,ax,b,ay);case
34:var
az=d[1],aA=function(a){return[0,c,[34,a]]};return f(k(a[1][1+bg],a),c,az,b,aA);case
35:var
aB=d[1],aC=function(a){return[0,c,[35,a]]};return f(k(a[1][1+O],a),c,aB,b,aC);case
36:var
aD=d[1],aE=function(a){return[0,c,[36,a]]};return f(k(a[1][1+R],a),c,aD,b,aE);case
37:var
aI=d[1],aK=function(a){return[0,c,[37,a]]};return f(k(a[1][1+D],a),c,aI,b,aK);case
38:var
aL=d[1],aM=function(a){return[0,c,[38,a]]};return f(k(a[1][1+a0],a),c,aL,b,aM);default:var
aN=d[1],aO=function(a){return[0,c,[39,a]]};return f(k(a[1][1+aZ],a),c,aN,b,aO)}}rj(ac,[0,en,function(a,b){var
c=b[2],e=c[4],f=c[3],g=c[1],m=c[2],n=b[1],h=j(a[1][1+bi],a,g),i=j(a[1][1+d],a,f),l=T(k(a[1][1+_],a),e);if(g===h&&f===i&&e===l)return b;return[0,n,[0,h,m,i,l]]},l,i1,_,i0,d,iZ,b,iY,g,iX,em,iV,el,iU,ej,iT,ei,iS,eh,iR,eg,iQ,t,iP,ee,iO,aU,iN,aX,iM,bU,iL,$,iK,ed,iJ,ec,iI,eb,iG,d9,iF,d7,iE,aT,iD,d6,iC,aS,iB,d$,iA,K,iz,d8,iy,aR,ix,d5,iw,d4,iv,d2,iu,aQ,it,d3,is,J,ir,d0,iq,aP,ip,dY,io,dZ,im,aO,il,aN,ik,dX,ij,d1,ii,dT,ih,dR,ig,dQ,ie,aJ,ic,aH,ia,dW,h$,aM,h_,dV,h9,dU,h8,dP,h7,dO,h6,dN,h5,aG,h4,dM,h3,dL,h2,dK,h1,dJ,h0,aF,hZ,dI,hY,dH,hX,Y,hW,dE,hV,dD,hU,dB,hT,dz,hS,dx,hR,dG,hQ,aE,hP,dC,hO,dA,hN,dy,hM,dF,hL,C,hK,dv,hJ,du,hI,dt,hH,ds,hG,dw,hF,aC,hE,aB,hD,dq,hC,dr,hB,dm,hA,dl,hz,dn,hy,dh,hx,dg,hw,di,hv,df,hu,de,ht,dk,hs,ay,hr,c8,hq,c5,hp,c4,ho,I,hn,S,hm,b2,hl,bW,hk,bV,hj,b3,hi,bZ,hh,cb,hg,b$,hf,cc,he,b5,hd,G,hc,bX,hb,cP,ha,ax,g$,c3,g_,cm,g9,a1,g8,q,g7,E,g6,n,g5,N,g4,z,g3,aw,g2,bT,g1,v,g0,H,gZ,M,gY,aW,gX,ci,gW,bw,gV,ck,gU,cg,gT,dS,gS,cR,gR,a7,gQ,ad,gP,a_,gO,a9,gN,a8,gM,ct,gL,ak,gK,bx,gJ,bb,gI,be,gH,bd,gG,bc,gF,ek,gC,a5,gB,cO,gA,h,gz,o,gy,u,gx,Z,gw,db,gv,da,gu,A,gt,W,gs,c_,gr,c6,gq,c$,gp,c7,go,dc,gn,dd,gm,ef,gl,aA,gk,i,gj,ag,gi,ae,gh,p,gg,U,gf,cQ,ge,Q,gd,aL,gc,cY,gb,c0,ga,c1,f$,cZ,f_,cX,f9,cT,f8,cS,f7,bv,f6,cV,f5,cW,f4,cU,f3,au,f2,aq,f1,cx,f0,cE,fZ,cy,fY,cw,fX,cN,fW,cM,fV,cL,fU,cK,fT,cJ,fS,cH,fR,cG,fQ,av,fP,cF,fO,ar,fN,cv,fM,at,fL,as,fK,cB,fJ,cC,fI,an,fH,ap,fG,cz,fF,cA,fE,y,fD,cs,fC,cr,fB,am,fA,bS,fz,cp,fy,cn,fx,cq,fw,co,fv,cl,fu,cj,ft,cd,fs,b4,fr,r,fq,b6,fp,b7,fo,b_,fn,b8,fm,b9,fl,R,fk,az,fj,a2,fi,ea,fh,dp,fg,dj,ff,L,fe,ab,fd,w,fc,m,fb,by,fa,bK,e$,bM,e_,bJ,e9,bI,e8,bE,e7,bB,e6,bD,e5,bH,e4,bF,e3,bG,e2,bA,e1,bC,e0,bz,eZ,bR,eY,bQ,eX,bP,eW,bO,eV,bN,eU,bL,eT,al,eS,x,eR,a$,eQ,ah,eP,c9,eO,bu,eN,bt,eM,bi,eL,P,eK,br,eJ,aj,eI,bs,eH,bq,eG,bo,eF,bn,eE,bm,eD,ai,eC,bl,eB,bk,eA,bj,ez,bg,ey,ba,ex,bf,ew,a6,ev,a4,eu,D,et,a3,es,a0,er,aZ,eq,O,ep,aY,eo]);return function(a,b){return lO(b,ac)}}),rp=function
d(a,b,c){return d.fun(a,b,c)};a(rp,function(d,b,c){var
a=c[2];switch(a[0]){case
0:var
e=a[1][1];return aI(function(c){return function(a){var
b=0===a[0]?a[1][2][2]:a[1][2][1];return s(rp,d,c,b)}},b,e);case
1:var
f=a[1][1];return aI(function(b){return function(a){return 2===a[0]?b:s(rp,d,b,a[1][2][1])}},b,f);case
2:return j(d,b,a[1][1]);default:return b}});var
rq=function
b(a){return b.fun(a)},Rw=function(a){var
b=0===a[0]?a[1][2][2]:a[1][2][1];return k(rq,b)},Rx=function(a){return 2===a[0]?0:k(rq,a[1][2][1])};a(rq,function(a){var
b=a[2];switch(b[0]){case
0:return qR(Rw,b[1][1]);case
1:return qR(Rx,b[1][1]);case
2:return 1;default:return 0}});var
cn=function(a,b){return[0,b[1],[0,b[2],a]]},FT=function(a,b,c){var
d=a?a[1]:0,e=b?b[1]:0;return[0,d,e,c]},p=function(a,b,c){var
d=a?a[1]:0,e=b?b[1]:0;if(!d&&!e)return 0;return[0,FT([0,d],[0,e],0)]},aA=function(a,b,c,d){var
e=a?a[1]:0,f=b?b[1]:0;if(!e&&!f&&!c)return 0;return[0,FT([0,e],[0,f],c)]},a_=function(a,b){if(a){if(b){var
c=b[1],d=a[1],f=[0,J(d[2],c[2])];return p([0,J(c[1],d[1])],f,0)}var
e=a}else
var
e=b;return e},rr=function(a,b){if(!b)return a;if(a){var
d=b[1],c=a[1],f=d[1],g=c[3],h=c[1],i=[0,J(c[2],d[2])];return aA([0,J(f,h)],i,g,0)}var
e=b[1];return aA([0,e[1]],[0,e[2]],0,0)},FU=function(a,b){k(_(a),R9);j(_(a),R$,R_);var
c=b[1];k(k(_(a),Sa),c);k(_(a),Sb);k(_(a),Sc);j(_(a),Se,Sd);var
d=b[2];k(k(_(a),Sf),d);k(_(a),Sg);return k(_(a),Sh)},FV=function
c(a,b){return c.fun(a,b)},Si=function
b(a){return b.fun(a)};a(FV,function(a,b){k(_(a),Sj);j(_(a),Sl,Sk);var
d=b[1];if(d){var
c=d[1];lM(a,Sm);switch(c[0]){case
0:var
e=c[1];k(_(a),Q7);k(k(_(a),Q8),e);k(_(a),Q9);break;case
1:var
f=c[1];k(_(a),Q_);k(k(_(a),Q$),f);k(_(a),Ra);break;case
2:var
g=c[1];k(_(a),Rb);k(k(_(a),Rc),g);k(_(a),Rd);break;default:var
h=c[1];k(_(a),Re);k(k(_(a),Rf),h);k(_(a),Rg)}lM(a,Sn)}else
lM(a,So);k(_(a),Sp);k(_(a),Sq);j(_(a),Ss,Sr);FU(a,b[2]);k(_(a),St);k(_(a),Su);j(_(a),Sw,Sv);FU(a,b[3]);k(_(a),Sx);return k(_(a),Sy)});a(Si,function(a){var
d=Sz[1],b=Fk(0),c=ra(b);return j(Z(function(a){bG(c,a);q_(c,0);var
d=az(b);b[2]=0;b[1]=b[4];b[3]=b3(b[1]);return d},0,d),FV,a)});var
ae=function(a,b){return[0,a[1],a[2],b[3]]},hq=function(a,b){var
c=a[1]-b[1]|0;return 0===c?a[2]-b[2]|0:c},FW=function(a,b){var
d=b[1],i=a[1];if(i){var
f=i[1];if(d)var
g=d[1],j=FR(g),e=FR(f)-j|0,c=0===e?z(f[1],g[1]):e;else
var
c=-1}else
var
c=d?1:0;if(0!==c)return c;var
h=hq(a[2],b[2]);return 0===h?hq(a[3],b[3]):h},hW=function(a,b){return 0===FW(a,b)?1:0},FX=function
c(a,b){return c.fun(a,b)};a(FX,function(a,b){if(typeof
a==="number"){var
k=a;if(59<=k)switch(k){case
59:if(typeof
b==="number"&&59===b)return 0;break;case
60:if(typeof
b==="number"&&60===b)return 0;break;case
61:if(typeof
b==="number"&&61===b)return 0;break;case
62:if(typeof
b==="number"&&62===b)return 0;break;case
63:if(typeof
b==="number"&&63===b)return 0;break;case
64:if(typeof
b==="number"&&64===b)return 0;break;case
65:if(typeof
b==="number"&&65===b)return 0;break;case
66:if(typeof
b==="number"&&66===b)return 0;break;case
67:if(typeof
b==="number"&&67===b)return 0;break;case
68:if(typeof
b==="number"&&68===b)return 0;break;case
69:if(typeof
b==="number"&&69===b)return 0;break;case
70:if(typeof
b==="number"&&70===b)return 0;break;case
71:if(typeof
b==="number"&&71===b)return 0;break;case
72:if(typeof
b==="number"&&72===b)return 0;break;case
73:if(typeof
b==="number"&&73===b)return 0;break;case
74:if(typeof
b==="number"&&74===b)return 0;break;case
75:if(typeof
b==="number"&&75===b)return 0;break;case
76:if(typeof
b==="number"&&76===b)return 0;break;case
77:if(typeof
b==="number"&&77===b)return 0;break;case
78:if(typeof
b==="number"&&78===b)return 0;break;case
79:if(typeof
b==="number"&&79===b)return 0;break;case
80:if(typeof
b==="number"&&80===b)return 0;break;case
81:if(typeof
b==="number"&&81===b)return 0;break;case
82:if(typeof
b==="number"&&82===b)return 0;break;case
83:if(typeof
b==="number"&&83===b)return 0;break;case
84:if(typeof
b==="number"&&84===b)return 0;break;case
85:if(typeof
b==="number"&&85===b)return 0;break;case
86:if(typeof
b==="number"&&86===b)return 0;break;case
87:if(typeof
b==="number"&&87===b)return 0;break;case
88:if(typeof
b==="number"&&88===b)return 0;break;case
89:if(typeof
b==="number"&&89===b)return 0;break;case
90:if(typeof
b==="number"&&90===b)return 0;break;case
91:if(typeof
b==="number"&&91===b)return 0;break;case
92:if(typeof
b==="number"&&92===b)return 0;break;case
93:if(typeof
b==="number"&&93===b)return 0;break;case
94:if(typeof
b==="number"&&94===b)return 0;break;case
95:if(typeof
b==="number"&&95===b)return 0;break;case
96:if(typeof
b==="number"&&96===b)return 0;break;case
97:if(typeof
b==="number"&&97===b)return 0;break;case
98:if(typeof
b==="number"&&98===b)return 0;break;case
99:if(typeof
b==="number"&&99===b)return 0;break;case
100:if(typeof
b==="number"&&b0===b)return 0;break;case
101:if(typeof
b==="number"&&ch===b)return 0;break;case
102:if(typeof
b==="number"&&c2===b)return 0;break;case
103:if(typeof
b==="number"&&cD===b)return 0;break;case
104:if(typeof
b==="number"&&ca===b)return 0;break;case
105:if(typeof
b==="number"&&bY===b)return 0;break;case
106:if(typeof
b==="number"&&aV===b)return 0;break;case
107:if(typeof
b==="number"&&bp===b)return 0;break;case
108:if(typeof
b==="number"&&cu===b)return 0;break;case
109:if(typeof
b==="number"&&ib===b)return 0;break;case
110:if(typeof
b==="number"&&aD===b)return 0;break;case
111:if(typeof
b==="number"&&cf===b)return 0;break;case
112:if(typeof
b==="number"&&bh===b)return 0;break;case
113:if(typeof
b==="number"&&X===b)return 0;break;case
114:if(typeof
b==="number"&&b1===b)return 0;break;case
115:if(typeof
b==="number"&&id===b)return 0;break;case
116:if(typeof
b==="number"&&gE===b)return 0;break;default:if(typeof
b==="number"&&iH<=b)return 0}else
switch(k){case
0:if(typeof
b==="number"&&!b)return 0;break;case
1:if(typeof
b==="number"&&1===b)return 0;break;case
2:if(typeof
b==="number"&&2===b)return 0;break;case
3:if(typeof
b==="number"&&3===b)return 0;break;case
4:if(typeof
b==="number"&&4===b)return 0;break;case
5:if(typeof
b==="number"&&5===b)return 0;break;case
6:if(typeof
b==="number"&&6===b)return 0;break;case
7:if(typeof
b==="number"&&7===b)return 0;break;case
8:if(typeof
b==="number"&&8===b)return 0;break;case
9:if(typeof
b==="number"&&9===b)return 0;break;case
10:if(typeof
b==="number"&&10===b)return 0;break;case
11:if(typeof
b==="number"&&11===b)return 0;break;case
12:if(typeof
b==="number"&&12===b)return 0;break;case
13:if(typeof
b==="number"&&13===b)return 0;break;case
14:if(typeof
b==="number"&&14===b)return 0;break;case
15:if(typeof
b==="number"&&15===b)return 0;break;case
16:if(typeof
b==="number"&&16===b)return 0;break;case
17:if(typeof
b==="number"&&17===b)return 0;break;case
18:if(typeof
b==="number"&&18===b)return 0;break;case
19:if(typeof
b==="number"&&19===b)return 0;break;case
20:if(typeof
b==="number"&&20===b)return 0;break;case
21:if(typeof
b==="number"&&21===b)return 0;break;case
22:if(typeof
b==="number"&&22===b)return 0;break;case
23:if(typeof
b==="number"&&23===b)return 0;break;case
24:if(typeof
b==="number"&&24===b)return 0;break;case
25:if(typeof
b==="number"&&25===b)return 0;break;case
26:if(typeof
b==="number"&&26===b)return 0;break;case
27:if(typeof
b==="number"&&27===b)return 0;break;case
28:if(typeof
b==="number"&&28===b)return 0;break;case
29:if(typeof
b==="number"&&29===b)return 0;break;case
30:if(typeof
b==="number"&&30===b)return 0;break;case
31:if(typeof
b==="number"&&31===b)return 0;break;case
32:if(typeof
b==="number"&&32===b)return 0;break;case
33:if(typeof
b==="number"&&33===b)return 0;break;case
34:if(typeof
b==="number"&&34===b)return 0;break;case
35:if(typeof
b==="number"&&35===b)return 0;break;case
36:if(typeof
b==="number"&&36===b)return 0;break;case
37:if(typeof
b==="number"&&37===b)return 0;break;case
38:if(typeof
b==="number"&&38===b)return 0;break;case
39:if(typeof
b==="number"&&39===b)return 0;break;case
40:if(typeof
b==="number"&&40===b)return 0;break;case
41:if(typeof
b==="number"&&41===b)return 0;break;case
42:if(typeof
b==="number"&&42===b)return 0;break;case
43:if(typeof
b==="number"&&43===b)return 0;break;case
44:if(typeof
b==="number"&&44===b)return 0;break;case
45:if(typeof
b==="number"&&45===b)return 0;break;case
46:if(typeof
b==="number"&&46===b)return 0;break;case
47:if(typeof
b==="number"&&47===b)return 0;break;case
48:if(typeof
b==="number"&&48===b)return 0;break;case
49:if(typeof
b==="number"&&49===b)return 0;break;case
50:if(typeof
b==="number"&&50===b)return 0;break;case
51:if(typeof
b==="number"&&51===b)return 0;break;case
52:if(typeof
b==="number"&&52===b)return 0;break;case
53:if(typeof
b==="number"&&53===b)return 0;break;case
54:if(typeof
b==="number"&&54===b)return 0;break;case
55:if(typeof
b==="number"&&55===b)return 0;break;case
56:if(typeof
b==="number"&&56===b)return 0;break;case
57:if(typeof
b==="number"&&57===b)return 0;break;default:if(typeof
b==="number"&&58===b)return 0}}else
switch(a[0]){case
0:if(typeof
b!=="number"&&0===b[0])return z(a[1],b[1]);break;case
1:if(typeof
b!=="number"&&1===b[0])return z(a[1],b[1]);break;case
2:if(typeof
b!=="number"&&2===b[0]){var
n=z(a[1],b[1]),I=b[2],J=a[2];return 0===n?z(J,I):n}break;case
3:if(typeof
b!=="number"&&3===b[0]){var
o=z(a[1],b[1]),K=b[2],L=a[2];return 0===o?z(L,K):o}break;case
4:if(typeof
b!=="number"&&4===b[0]){var
p=z(a[1],b[1]),M=b[2],N=a[2];return 0===p?z(N,M):p}break;case
5:if(typeof
b!=="number"&&5===b[0])return z(a[1],b[1]);break;case
6:if(typeof
b!=="number"&&6===b[0])return ci(a[1],b[1]);break;case
7:if(typeof
b!=="number"&&7===b[0]){var
h=b[2],q=a[2],r=z(a[1],b[1]);if(0!==r)return r;if(!q)return h?-1:0;var
O=q[1];return h?z(O,h[1]):1}break;case
8:if(typeof
b!=="number"&&8===b[0])return z(a[1],b[1]);break;case
9:if(typeof
b!=="number"&&9===b[0]){var
i=b[2],s=a[2],t=z(a[1],b[1]),P=b[3],Q=a[3];if(0!==t)return t;if(s){var
u=s[1];if(i){var
c=i[1],e=0;switch(u){case
0:if(c)e=1;else
var
d=0;break;case
1:if(1===c)var
d=0;else
e=1;break;case
2:if(2===c)var
d=0;else
e=1;break;case
3:if(3===c)var
d=0;else
e=1;break;default:if(4<=c)var
d=0;else
e=1}if(e)var
l=function(a){switch(a){case
0:return 0;case
1:return 1;case
2:return 2;case
3:return 3;default:return 4}},G=l(c),d=ci(l(u),G);var
f=d}else
var
f=1}else
var
f=i?-1:0;return 0===f?z(Q,P):f}break;case
10:if(typeof
b!=="number"&&10===b[0]){var
v=z(a[1],b[1]),R=b[2],S=a[2];return 0===v?z(S,R):v}break;case
11:if(typeof
b!=="number"&&11===b[0]){var
w=z(a[1],b[1]),T=b[2],U=a[2];return 0===w?z(U,T):w}break;case
12:if(typeof
b!=="number"&&12===b[0])return z(a[1],b[1]);break;case
13:if(typeof
b!=="number"&&13===b[0])return z(a[1],b[1]);break;case
14:if(typeof
b!=="number"&&14===b[0])return ci(a[1],b[1]);break;case
15:if(typeof
b!=="number"&&15===b[0]){var
x=z(a[1],b[1]),V=b[4],W=b[3],Y=b[2],Z=a[4],_=a[3],$=a[2];if(0!==x)return x;var
y=ci($,Y);if(0!==y)return y;var
A=ci(_,W);return 0===A?ci(Z,V):A}break;case
16:if(typeof
b!=="number"&&16===b[0]){var
B=ci(a[1],b[1]),ab=b[2],ac=a[2];return 0===B?z(ac,ab):B}break;case
17:if(typeof
b!=="number"&&17===b[0])return ci(a[1],b[1]);break;case
18:if(typeof
b!=="number"&&18===b[0])return z(a[1],b[1]);break;case
19:if(typeof
b!=="number"&&19===b[0])return z(a[1],b[1]);break;case
20:if(typeof
b!=="number"&&20===b[0])return z(a[1],b[1]);break;case
21:if(typeof
b!=="number"&&21===b[0]){var
C=z(a[1],b[1]),ad=b[2],ae=a[2];return 0===C?z(ae,ad):C}break;case
22:if(typeof
b!=="number"&&22===b[0]){var
g=b[1],j=a[1];if(le===j){if(le===g)return 0}else
if(k6<=j){if(k6===g)return 0}else if(JS===g)return 0;var
D=function(a){return le===a?0:k6<=a?2:1},ag=D(g);return ci(D(j),ag)}break;case
23:if(typeof
b!=="number"&&23===b[0])return z(a[1],b[1]);break;case
24:if(typeof
b!=="number"&&24===b[0])return z(a[1],b[1]);break;case
25:if(typeof
b!=="number"&&25===b[0]){var
E=z(a[1],b[1]),ah=b[2],ai=a[2];return 0===E?z(ai,ah):E}break;case
26:if(typeof
b!=="number"&&26===b[0]){var
F=z(a[1],b[1]),aj=b[2],ak=a[2];return 0===F?z(ak,aj):F}break;default:if(typeof
b!=="number"&&27===b[0])return z(a[1],b[1])}function
m(a){if(typeof
a!=="number")switch(a[0]){case
0:return 20;case
1:return 21;case
2:return 23;case
3:return 24;case
4:return 25;case
5:return 26;case
6:return 27;case
7:return 28;case
8:return 30;case
9:return 31;case
10:return 32;case
11:return 34;case
12:return 35;case
13:return 37;case
14:return 40;case
15:return 52;case
16:return 55;case
17:return 57;case
18:return 66;case
19:return 75;case
20:return 84;case
21:return 91;case
22:return cf;case
23:return jv;case
24:return d_;case
25:return oE;case
26:return Lt;default:return L2}var
b=a;if(59<=b)switch(b){case
59:return 79;case
60:return 80;case
61:return 81;case
62:return 82;case
63:return 83;case
64:return 85;case
65:return 86;case
66:return 87;case
67:return 88;case
68:return 89;case
69:return 90;case
70:return 92;case
71:return 93;case
72:return 94;case
73:return 95;case
74:return 96;case
75:return 97;case
76:return 98;case
77:return 99;case
78:return b0;case
79:return ch;case
80:return c2;case
81:return cD;case
82:return ca;case
83:return bY;case
84:return aV;case
85:return bp;case
86:return cu;case
87:return ib;case
88:return aD;case
89:return bh;case
90:return X;case
91:return b1;case
92:return id;case
93:return gE;case
94:return iH;case
95:return jJ;case
96:return k8;case
97:return af;case
98:return ce;case
99:return jL;case
100:return gD;case
101:return qu;case
102:return aa;case
103:return ao;case
104:return ln;case
105:return nj;case
106:return wd;case
107:return LI;case
108:return La;case
109:return JP;case
110:return Ji;case
111:return LB;case
112:return Di;case
113:return Mf;case
114:return Ku;case
115:return J9;case
116:return KZ;default:return Mt}switch(b){case
0:return 0;case
1:return 1;case
2:return 2;case
3:return 3;case
4:return 4;case
5:return 5;case
6:return 6;case
7:return 7;case
8:return 8;case
9:return 9;case
10:return 10;case
11:return 11;case
12:return 12;case
13:return 13;case
14:return 14;case
15:return 15;case
16:return 16;case
17:return 17;case
18:return 18;case
19:return 19;case
20:return 22;case
21:return 29;case
22:return 33;case
23:return 36;case
24:return 38;case
25:return 39;case
26:return 41;case
27:return 42;case
28:return 43;case
29:return 44;case
30:return 45;case
31:return 46;case
32:return 47;case
33:return 48;case
34:return 49;case
35:return 50;case
36:return 51;case
37:return 53;case
38:return 54;case
39:return 56;case
40:return 58;case
41:return 59;case
42:return 60;case
43:return 61;case
44:return 62;case
45:return 63;case
46:return 64;case
47:return 65;case
48:return 67;case
49:return 68;case
50:return 69;case
51:return 70;case
52:return 71;case
53:return 72;case
54:return 73;case
55:return 74;case
56:return 76;case
57:return 77;default:return 78}}var
H=m(b);return ci(m(a),H)});var
SB=[c,SA,hN(0)],SC=function(a){if(typeof
a==="number"){var
t=a;if(59<=t)switch(t){case
59:return TB;case
60:return TC;case
61:return TD;case
62:return TE;case
63:return TF;case
64:return TG;case
65:return TH;case
66:return TI;case
67:return TJ;case
68:return TK;case
69:return TL;case
70:return TM;case
71:return TN;case
72:return TO;case
73:return TP;case
74:return TQ;case
75:return TR;case
76:return TS;case
77:return TT;case
78:return TU;case
79:return TV;case
80:return TW;case
81:return TX;case
82:return TY;case
83:return TZ;case
84:return T0;case
85:return T1;case
86:return T2;case
87:return T3;case
88:return T4;case
89:return T5;case
90:return T6;case
91:return T7;case
92:return T8;case
93:return T9;case
94:return T_;case
95:return T$;case
96:return Ua;case
97:return Ub;case
98:return Uc;case
99:return Ud;case
100:return Ue;case
101:return Uf;case
102:return Ug;case
103:return Uh;case
104:return Ui;case
105:return Uj;case
106:return Uk;case
107:return Ul;case
108:return Um;case
109:return Un;case
110:return Uo;case
111:return Up;case
112:return Uq;case
113:return Ur;case
114:return Us;case
115:return Ut;case
116:return Uu;default:return Uv}switch(t){case
0:return SD;case
1:return SE;case
2:return SF;case
3:return I(SH,SG);case
4:return SI;case
5:return SJ;case
6:return SK;case
7:return SL;case
8:return SM;case
9:return SN;case
10:return SO;case
11:return SP;case
12:return I(SR,SQ);case
13:return SS;case
14:return ST;case
15:return SU;case
16:return SV;case
17:return SW;case
18:return SX;case
19:return SY;case
20:return SZ;case
21:return S0;case
22:return S1;case
23:return S2;case
24:return S3;case
25:return S4;case
26:return S5;case
27:return S6;case
28:return S7;case
29:return S8;case
30:return S9;case
31:return S_;case
32:return S$;case
33:return Ta;case
34:return I(Tc,Tb);case
35:return Td;case
36:return Te;case
37:return Tf;case
38:return Tg;case
39:return Th;case
40:return Ti;case
41:return Tj;case
42:return Tk;case
43:return Tl;case
44:return Tm;case
45:return Tn;case
46:return To;case
47:return Tp;case
48:return Tq;case
49:return Tr;case
50:return Ts;case
51:return Tt;case
52:return Tu;case
53:return Tv;case
54:return Tw;case
55:return Tx;case
56:return Ty;case
57:return Tz;default:return TA}}switch(a[0]){case
0:var
W=a[1];return k(S(Uw),W);case
1:var
X=a[1];return k(S(Ux),X);case
2:var
Y=a[2],Z=a[1];return j(S(Uy),Y,Z);case
3:var
D=a[2],_=a[1];return s(S(Uz),D,D,_);case
4:var
$=a[2],aa=a[1];return j(S(UA),$,aa);case
5:var
ab=a[1];return k(S(UB),ab);case
6:return a[1]?UC:UD;case
7:var
E=a[2],ac=a[1],F=k(S(UE),ac);if(!E)return k(S(UG),F);var
ad=E[1];return j(S(UF),ad,F);case
8:var
G=a[1];return j(S(UH),G,G);case
9:var
o=a[3],J=a[2],p=a[1];if(!J)return j(S(UK),o,p);var
K=J[1];if(3===K)return j(S(UI),o,p);switch(K){case
0:var
d=Q2;break;case
1:var
d=Q3;break;case
2:var
d=Q4;break;case
3:var
d=Q5;break;default:var
d=Q6}return bA(S(UJ),p,d,o,d);case
10:var
L=a[2],ae=a[1],af=ES(L);return s(S(UL),L,af,ae);case
11:var
ag=a[2],ah=a[1];return j(S(UM),ag,ah);case
12:var
ai=a[1];return k(S(UN),ai);case
13:var
aj=a[1];return k(S(UO),aj);case
14:return a[1]?I(UQ,UP):I(US,UR);case
15:var
M=a[1],ak=a[4],al=a[3],am=a[2]?UT:UY,an=al?UU:UX,ao=ak?I(UV,M):M;return s(S(UW),am,an,ao);case
16:var
e=a[2],m=[0,0],n=[0,H(e)],z=H(e)-1|0,ap=a[1];if(z>=0){var
b=z;for(;;){if(v(e,b)===45){var
U=m[1];m[1]=[0,aY(e,b+1|0,(n[1]-b|0)-1|0),U];n[1]=b}var
V=b-1|0;if(0!==b){var
b=V;continue}break}}var
A=m[1],B=aY(e,0,n[1]);if(A){var
C=[0,B,cm(ES,A)],g=0,f=C,T=0;for(;;){if(f){var
u=f[1];if(f[2]){var
w=(H(u)|0)+g|0,P=f[2],Q=g<=w?w:aX(NC),g=Q,f=P;continue}var
x=H(u)+g|0}else
var
x=g;var
l=as(x),i=T,h=C;for(;;){if(h){var
c=h[1];if(h[2]){var
R=h[2];hh(c,0,l,i,H(c));hh(y,0,l,i+H(c)|0,0);var
i=i+H(c)|0|0,h=R;continue}hh(c,0,l,i,H(c))}var
N=ba(l);break}break}}else
var
N=B;var
aq=ap?UZ:U1;return s(S(U0),e,N,aq);case
17:var
ar=a[1]?U2:U4;return k(S(U3),ar);case
18:var
at=a[1];return k(S(U5),at);case
19:var
au=a[1];return k(S(U6),au);case
20:var
av=a[1];return k(S(U7),av);case
21:var
aw=a[2],ax=a[1];return j(S(U8),ax,aw);case
22:var
O=a[1];if(le===O)var
r=U9,q=U_;else if(k6<=O)var
r=Va,q=Vb;else
var
r=Vc,q=Vd;return j(S(U$),q,r);case
23:var
ay=a[1];return k(S(Ve),ay);case
24:var
az=a[1];return k(S(Vf),az);case
25:var
aA=a[2],aB=a[1];return j(S(Vg),aB,aA);case
26:var
aC=a[2],aD=a[1];return j(S(Vh),aD,aC);default:var
aE=a[1];return k(S(Vi),aE)}},FY=Vj.slice(),rs=function(a){var
b=0,c=FY.length-1-1|0;for(;;){if(c<b)return 0;var
d=b+((c-b|0)/2|0)|0,e=FY[1+d],f=e[2];if(a<e[1]){var
c=d-1|0;continue}if(f>a)return 1;var
b=d+1|0}},FZ=0,F0=function(a){var
b=a[2];return[0,a[1],[0,b[1],b[2],b[3],b[4],b[5],b[6],b[7],b[8],b[9],b[10],b[11],b[12]],a[3],a[4],a[5],a[6],a[7]]},F1=function(a){return a[3][1]},lV=function(a,b){return a!==b[4]?[0,b[1],b[2],b[3],a,b[5],b[6],b[7]]:b},rt=function
c(a,b){return c.fun(a,b)},F2=function
c(a,b){return c.fun(a,b)},ru=function
c(a,b){return c.fun(a,b)},rv=function
c(a,b){return c.fun(a,b)};a(rt,function(a,b){if(typeof
a==="number"){var
c=a;if(66<=c)if(99<=c)switch(c){case
99:if(typeof
b==="number"&&99===b)return 1;break;case
100:if(typeof
b==="number"&&b0===b)return 1;break;case
101:if(typeof
b==="number"&&ch===b)return 1;break;case
102:if(typeof
b==="number"&&c2===b)return 1;break;case
103:if(typeof
b==="number"&&cD===b)return 1;break;case
104:if(typeof
b==="number"&&ca===b)return 1;break;case
105:if(typeof
b==="number"&&bY===b)return 1;break;case
106:if(typeof
b==="number"&&aV===b)return 1;break;case
107:if(typeof
b==="number"&&bp===b)return 1;break;case
108:if(typeof
b==="number"&&cu===b)return 1;break;case
109:if(typeof
b==="number"&&ib===b)return 1;break;case
110:if(typeof
b==="number"&&aD===b)return 1;break;case
111:if(typeof
b==="number"&&cf===b)return 1;break;case
112:if(typeof
b==="number"&&bh===b)return 1;break;case
113:if(typeof
b==="number"&&X===b)return 1;break;case
114:if(typeof
b==="number"&&b1===b)return 1;break;case
115:if(typeof
b==="number"&&id===b)return 1;break;case
116:if(typeof
b==="number"&&gE===b)return 1;break;case
117:if(typeof
b==="number"&&iH===b)return 1;break;case
118:if(typeof
b==="number"&&jJ===b)return 1;break;case
119:if(typeof
b==="number"&&jv===b)return 1;break;case
120:if(typeof
b==="number"&&d_===b)return 1;break;case
121:if(typeof
b==="number"&&k8===b)return 1;break;case
122:if(typeof
b==="number"&&af===b)return 1;break;case
123:if(typeof
b==="number"&&ce===b)return 1;break;case
124:if(typeof
b==="number"&&jL===b)return 1;break;case
125:if(typeof
b==="number"&&gD===b)return 1;break;case
126:if(typeof
b==="number"&&qu===b)return 1;break;case
127:if(typeof
b==="number"&&aa===b)return 1;break;case
128:if(typeof
b==="number"&&ao===b)return 1;break;case
129:if(typeof
b==="number"&&ln===b)return 1;break;case
130:if(typeof
b==="number"&&nj===b)return 1;break;default:if(typeof
b==="number"&&oE<=b)return 1}else
switch(c){case
66:if(typeof
b==="number"&&66===b)return 1;break;case
67:if(typeof
b==="number"&&67===b)return 1;break;case
68:if(typeof
b==="number"&&68===b)return 1;break;case
69:if(typeof
b==="number"&&69===b)return 1;break;case
70:if(typeof
b==="number"&&70===b)return 1;break;case
71:if(typeof
b==="number"&&71===b)return 1;break;case
72:if(typeof
b==="number"&&72===b)return 1;break;case
73:if(typeof
b==="number"&&73===b)return 1;break;case
74:if(typeof
b==="number"&&74===b)return 1;break;case
75:if(typeof
b==="number"&&75===b)return 1;break;case
76:if(typeof
b==="number"&&76===b)return 1;break;case
77:if(typeof
b==="number"&&77===b)return 1;break;case
78:if(typeof
b==="number"&&78===b)return 1;break;case
79:if(typeof
b==="number"&&79===b)return 1;break;case
80:if(typeof
b==="number"&&80===b)return 1;break;case
81:if(typeof
b==="number"&&81===b)return 1;break;case
82:if(typeof
b==="number"&&82===b)return 1;break;case
83:if(typeof
b==="number"&&83===b)return 1;break;case
84:if(typeof
b==="number"&&84===b)return 1;break;case
85:if(typeof
b==="number"&&85===b)return 1;break;case
86:if(typeof
b==="number"&&86===b)return 1;break;case
87:if(typeof
b==="number"&&87===b)return 1;break;case
88:if(typeof
b==="number"&&88===b)return 1;break;case
89:if(typeof
b==="number"&&89===b)return 1;break;case
90:if(typeof
b==="number"&&90===b)return 1;break;case
91:if(typeof
b==="number"&&91===b)return 1;break;case
92:if(typeof
b==="number"&&92===b)return 1;break;case
93:if(typeof
b==="number"&&93===b)return 1;break;case
94:if(typeof
b==="number"&&94===b)return 1;break;case
95:if(typeof
b==="number"&&95===b)return 1;break;case
96:if(typeof
b==="number"&&96===b)return 1;break;case
97:if(typeof
b==="number"&&97===b)return 1;break;default:if(typeof
b==="number"&&98===b)return 1}else if(33<=c)switch(c){case
33:if(typeof
b==="number"&&33===b)return 1;break;case
34:if(typeof
b==="number"&&34===b)return 1;break;case
35:if(typeof
b==="number"&&35===b)return 1;break;case
36:if(typeof
b==="number"&&36===b)return 1;break;case
37:if(typeof
b==="number"&&37===b)return 1;break;case
38:if(typeof
b==="number"&&38===b)return 1;break;case
39:if(typeof
b==="number"&&39===b)return 1;break;case
40:if(typeof
b==="number"&&40===b)return 1;break;case
41:if(typeof
b==="number"&&41===b)return 1;break;case
42:if(typeof
b==="number"&&42===b)return 1;break;case
43:if(typeof
b==="number"&&43===b)return 1;break;case
44:if(typeof
b==="number"&&44===b)return 1;break;case
45:if(typeof
b==="number"&&45===b)return 1;break;case
46:if(typeof
b==="number"&&46===b)return 1;break;case
47:if(typeof
b==="number"&&47===b)return 1;break;case
48:if(typeof
b==="number"&&48===b)return 1;break;case
49:if(typeof
b==="number"&&49===b)return 1;break;case
50:if(typeof
b==="number"&&50===b)return 1;break;case
51:if(typeof
b==="number"&&51===b)return 1;break;case
52:if(typeof
b==="number"&&52===b)return 1;break;case
53:if(typeof
b==="number"&&53===b)return 1;break;case
54:if(typeof
b==="number"&&54===b)return 1;break;case
55:if(typeof
b==="number"&&55===b)return 1;break;case
56:if(typeof
b==="number"&&56===b)return 1;break;case
57:if(typeof
b==="number"&&57===b)return 1;break;case
58:if(typeof
b==="number"&&58===b)return 1;break;case
59:if(typeof
b==="number"&&59===b)return 1;break;case
60:if(typeof
b==="number"&&60===b)return 1;break;case
61:if(typeof
b==="number"&&61===b)return 1;break;case
62:if(typeof
b==="number"&&62===b)return 1;break;case
63:if(typeof
b==="number"&&63===b)return 1;break;case
64:if(typeof
b==="number"&&64===b)return 1;break;default:if(typeof
b==="number"&&65===b)return 1}else
switch(c){case
0:if(typeof
b==="number"&&!b)return 1;break;case
1:if(typeof
b==="number"&&1===b)return 1;break;case
2:if(typeof
b==="number"&&2===b)return 1;break;case
3:if(typeof
b==="number"&&3===b)return 1;break;case
4:if(typeof
b==="number"&&4===b)return 1;break;case
5:if(typeof
b==="number"&&5===b)return 1;break;case
6:if(typeof
b==="number"&&6===b)return 1;break;case
7:if(typeof
b==="number"&&7===b)return 1;break;case
8:if(typeof
b==="number"&&8===b)return 1;break;case
9:if(typeof
b==="number"&&9===b)return 1;break;case
10:if(typeof
b==="number"&&10===b)return 1;break;case
11:if(typeof
b==="number"&&11===b)return 1;break;case
12:if(typeof
b==="number"&&12===b)return 1;break;case
13:if(typeof
b==="number"&&13===b)return 1;break;case
14:if(typeof
b==="number"&&14===b)return 1;break;case
15:if(typeof
b==="number"&&15===b)return 1;break;case
16:if(typeof
b==="number"&&16===b)return 1;break;case
17:if(typeof
b==="number"&&17===b)return 1;break;case
18:if(typeof
b==="number"&&18===b)return 1;break;case
19:if(typeof
b==="number"&&19===b)return 1;break;case
20:if(typeof
b==="number"&&20===b)return 1;break;case
21:if(typeof
b==="number"&&21===b)return 1;break;case
22:if(typeof
b==="number"&&22===b)return 1;break;case
23:if(typeof
b==="number"&&23===b)return 1;break;case
24:if(typeof
b==="number"&&24===b)return 1;break;case
25:if(typeof
b==="number"&&25===b)return 1;break;case
26:if(typeof
b==="number"&&26===b)return 1;break;case
27:if(typeof
b==="number"&&27===b)return 1;break;case
28:if(typeof
b==="number"&&28===b)return 1;break;case
29:if(typeof
b==="number"&&29===b)return 1;break;case
30:if(typeof
b==="number"&&30===b)return 1;break;case
31:if(typeof
b==="number"&&31===b)return 1;break;default:if(typeof
b==="number"&&32===b)return 1}}else
switch(a[0]){case
0:if(typeof
b!=="number"&&0===b[0]){var
J=b[2],K=b[1],L=a[2],m=k(k(ru,a[1]),K);return m?V(L,J):m}break;case
1:if(typeof
b!=="number"&&1===b[0]){var
M=b[2],N=b[1],O=a[2],n=k(k(rv,a[1]),N);return n?V(O,M):n}break;case
2:if(typeof
b!=="number"&&2===b[0]){var
f=b[1],g=a[1],P=f[4],Q=f[3],R=f[2],S=g[4],T=g[3],U=g[2],D=hW(g[1],f[1]),o=D?V(U,R):D,p=o?V(T,Q):o;return p?S===P?1:0:p}break;case
3:if(typeof
b!=="number"&&3===b[0]){var
d=b[1],e=a[1],W=d[5],Y=d[4],Z=d[3],_=d[2],$=e[5],ab=e[4],ac=e[3],ad=e[2],C=hW(e[1],d[1]),q=C?V(ad,_):C,r=q?V(ac,Z):q,s=r?ab===Y?1:0:r;return s?$===W?1:0:s}break;case
4:if(typeof
b!=="number"&&4===b[0]){var
ae=b[3],ag=b[2],ah=a[3],ai=a[2],E=hW(a[1],b[1]),t=E?V(ai,ag):E;return t?V(ah,ae):t}break;case
5:if(typeof
b!=="number"&&5===b[0]){var
aj=b[3],ak=b[2],al=a[3],am=a[2],F=hW(a[1],b[1]),u=F?V(am,ak):F;return u?V(al,aj):u}break;case
6:if(typeof
b!=="number"&&6===b[0]){var
an=b[2],ap=a[2],G=hW(a[1],b[1]);return G?V(ap,an):G}break;case
7:if(typeof
b!=="number"&&7===b[0])return V(a[1],b[1]);break;case
8:if(typeof
b!=="number"&&8===b[0]){var
v=V(a[1],b[1]),aq=b[2],ar=a[2];return v?hW(ar,aq):v}break;case
9:if(typeof
b!=="number"&&9===b[0]){var
as=b[3],at=b[2],au=a[3],av=a[2],H=hW(a[1],b[1]),w=H?V(av,at):H;return w?V(au,as):w}break;case
10:if(typeof
b!=="number"&&10===b[0]){var
aw=b[3],ax=b[2],ay=a[3],az=a[2],I=hW(a[1],b[1]),x=I?V(az,ax):I;return x?V(ay,aw):x}break;case
11:if(typeof
b!=="number"&&11===b[0]){var
aA=b[1];return k(k(F2,a[1]),aA)}break;case
12:if(typeof
b!=="number"&&12===b[0]){var
aB=b[3],aC=b[2],aE=b[1],aF=a[3],aG=a[2],y=k(k(ru,a[1]),aE),z=y?aG==aC?1:0:y;return z?V(aF,aB):z}break;default:if(typeof
b!=="number"&&13===b[0]){var
h=b[2],A=a[2],aH=b[3],aI=b[1],aJ=a[3],B=k(k(rv,a[1]),aI);if(B){var
l=0;if(A)if(h)var
i=lu(A[1],h[1]);else
l=1;else if(h)l=1;else
var
i=1;if(l)var
i=0;var
j=i}else
var
j=B;return j?V(aJ,aH):j}}return 0});a(F2,function(a,b){if(a){if(b)return 1}else if(!b)return 1;return 0});a(ru,function(a,b){switch(a){case
0:if(!b)return 1;break;case
1:if(1===b)return 1;break;case
2:if(2===b)return 1;break;case
3:if(3===b)return 1;break;default:if(4<=b)return 1}return 0});a(rv,function(a,b){switch(a){case
0:if(!b)return 1;break;case
1:if(1===b)return 1;break;default:if(2<=b)return 1}return 0});var
F3=function(a){if(typeof
a!=="number")switch(a[0]){case
0:return Xq;case
1:return Xr;case
2:return Xs;case
3:return Xt;case
4:return Xu;case
5:return Xv;case
6:return Xw;case
7:return Xx;case
8:return Xy;case
9:return Xz;case
10:return XA;case
11:return XB;case
12:return XC;default:return XD}var
b=a;if(66<=b){if(99<=b)switch(b){case
99:return WV;case
100:return WW;case
101:return WX;case
102:return WY;case
103:return WZ;case
104:return W0;case
105:return W1;case
106:return W2;case
107:return W3;case
108:return W4;case
109:return W5;case
110:return W6;case
111:return W7;case
112:return W8;case
113:return W9;case
114:return W_;case
115:return W$;case
116:return Xa;case
117:return Xb;case
118:return Xc;case
119:return Xd;case
120:return Xe;case
121:return Xf;case
122:return Xg;case
123:return Xh;case
124:return Xi;case
125:return Xj;case
126:return Xk;case
127:return Xl;case
128:return Xm;case
129:return Xn;case
130:return Xo;default:return Xp}switch(b){case
66:return Wo;case
67:return Wp;case
68:return Wq;case
69:return Wr;case
70:return Ws;case
71:return Wt;case
72:return Wu;case
73:return Wv;case
74:return Ww;case
75:return Wx;case
76:return Wy;case
77:return Wz;case
78:return WA;case
79:return WB;case
80:return WC;case
81:return WD;case
82:return WE;case
83:return WF;case
84:return WG;case
85:return WH;case
86:return WI;case
87:return WJ;case
88:return WK;case
89:return WL;case
90:return WM;case
91:return WN;case
92:return WO;case
93:return WP;case
94:return WQ;case
95:return WR;case
96:return WS;case
97:return WT;default:return WU}}if(33<=b)switch(b){case
33:return VT;case
34:return VU;case
35:return VV;case
36:return VW;case
37:return VX;case
38:return VY;case
39:return VZ;case
40:return V0;case
41:return V1;case
42:return V2;case
43:return V3;case
44:return V4;case
45:return V5;case
46:return V6;case
47:return V7;case
48:return V8;case
49:return V9;case
50:return V_;case
51:return V$;case
52:return Wa;case
53:return Wb;case
54:return Wc;case
55:return Wd;case
56:return We;case
57:return Wf;case
58:return Wg;case
59:return Wh;case
60:return Wi;case
61:return Wj;case
62:return Wk;case
63:return Wl;case
64:return Wm;default:return Wn}switch(b){case
0:return Vm;case
1:return Vn;case
2:return Vo;case
3:return Vp;case
4:return Vq;case
5:return Vr;case
6:return Vs;case
7:return Vt;case
8:return Vu;case
9:return Vv;case
10:return Vw;case
11:return Vx;case
12:return Vy;case
13:return Vz;case
14:return VA;case
15:return VB;case
16:return VC;case
17:return VD;case
18:return VE;case
19:return VF;case
20:return VG;case
21:return VH;case
22:return VI;case
23:return VJ;case
24:return VK;case
25:return VL;case
26:return VM;case
27:return VN;case
28:return VO;case
29:return VP;case
30:return VQ;case
31:return VR;default:return VS}},rw=function(a){if(typeof
a!=="number")switch(a[0]){case
0:return a[2];case
1:return a[2];case
2:return a[1][3];case
3:var
d=a[1],e=d[5],f=d[4],c=d[3];if(f&&e)return I(ZJ,I(c,ZI));return f?I(ZL,I(c,ZK)):e?I(ZN,I(c,ZM)):I(ZP,I(c,ZO));case
4:return a[3];case
5:var
g=a[2];return I(ZR,I(g,I(ZQ,a[3])));case
6:return a[2];case
7:return a[1];case
8:return a[1];case
9:return a[3];case
10:return a[3];case
11:return a[1]?ZS:ZT;case
12:return a[3];default:return a[3]}var
b=a;if(66<=b){if(99<=b)switch(b){case
99:return Zb;case
100:return Zc;case
101:return Zd;case
102:return Ze;case
103:return Zf;case
104:return Zg;case
105:return Zh;case
106:return Zi;case
107:return Zj;case
108:return Zk;case
109:return Zl;case
110:return Zm;case
111:return Zn;case
112:return Zo;case
113:return Zp;case
114:return Zq;case
115:return Zr;case
116:return Zs;case
117:return Zt;case
118:return Zu;case
119:return Zv;case
120:return Zw;case
121:return Zx;case
122:return Zy;case
123:return Zz;case
124:return ZA;case
125:return ZB;case
126:return ZC;case
127:return ZD;case
128:return ZE;case
129:return ZF;case
130:return ZG;default:return ZH}switch(b){case
66:return YG;case
67:return YH;case
68:return YI;case
69:return YJ;case
70:return YK;case
71:return YL;case
72:return YM;case
73:return YN;case
74:return YO;case
75:return YP;case
76:return YQ;case
77:return YR;case
78:return YS;case
79:return YT;case
80:return YU;case
81:return YV;case
82:return YW;case
83:return YX;case
84:return YY;case
85:return YZ;case
86:return Y0;case
87:return Y1;case
88:return Y2;case
89:return Y3;case
90:return Y4;case
91:return Y5;case
92:return Y6;case
93:return Y7;case
94:return Y8;case
95:return Y9;case
96:return Y_;case
97:return Y$;default:return Za}}if(33<=b)switch(b){case
33:return X$;case
34:return Ya;case
35:return Yb;case
36:return Yc;case
37:return Yd;case
38:return Ye;case
39:return Yf;case
40:return Yg;case
41:return Yh;case
42:return Yi;case
43:return Yj;case
44:return Yk;case
45:return Yl;case
46:return Ym;case
47:return Yn;case
48:return Yo;case
49:return Yp;case
50:return Yq;case
51:return Yr;case
52:return Ys;case
53:return Yt;case
54:return Yu;case
55:return Yv;case
56:return Yw;case
57:return Yx;case
58:return Yy;case
59:return Yz;case
60:return YA;case
61:return YB;case
62:return YC;case
63:return YD;case
64:return YE;default:return YF}switch(b){case
0:return XE;case
1:return XF;case
2:return XG;case
3:return XH;case
4:return XI;case
5:return XJ;case
6:return XK;case
7:return XL;case
8:return XM;case
9:return XN;case
10:return XO;case
11:return XP;case
12:return XQ;case
13:return XR;case
14:return XS;case
15:return XT;case
16:return XU;case
17:return XV;case
18:return XW;case
19:return XX;case
20:return XY;case
21:return XZ;case
22:return X0;case
23:return X1;case
24:return X2;case
25:return X3;case
26:return X4;case
27:return X5;case
28:return X6;case
29:return X7;case
30:return X8;case
31:return X9;default:return X_}},lW=function(a){return k(S(ZU),a)},rx=function(a,b){var
f=a?a[1]:0,e=0;if(typeof
b==="number")if(X===b)var
d=ZX,c=ZY;else
e=1;else
switch(b[0]){case
3:var
d=Z5,c=Z6;break;case
5:var
d=Z9,c=Z_;break;case
0:case
12:var
d=ZZ,c=Z0;break;case
1:case
13:var
d=Z1,c=Z2;break;case
4:case
8:var
d=Z7,c=Z8;break;case
6:case
7:case
11:e=1;break;default:var
d=Z3,c=Z4}if(e)var
d=ZV,c=lW(rw(b));return f?I(d,I(ZW,c)):c},Z$=function(a){return iC<a?AN<a?-1:wo<a?nJ<a?wL<a?DG<a?CQ<a?1:8:tM<a?ws<a?Ee<a?1:8:wQ<a?1:8:xo<a?xN<a?1:8:zB<a?1:8:n$<a?nd<a?oL<a?pZ<a?p1<a?oj<a?wF<a?1:8:yu<a?1:8:vG<a?A1<a?1:8:wh<a?1:8:oz<a?m8<a?tB<a?1:8:oH<a?1:8:op<a?BS<a?1:8:wp<a?1:8:pB<a?zb<a?nk<a?yw<a?1:8:y9<a?1:8:ov<a?pt<a?1:8:CX<a?1:8:pz<a?pG<a?nV<a?1:8:pu<a?1:8:or<a?ot<a?1:8:nR<a?1:8:Bq<a?oX<a?oD<a?tL<a?nt<a?1:8:nZ<a?1:8:p3<a?vE<a?1:8:DE<a?1:8:pm<a?pS<a?pD<a?1:8:o1<a?1:8:Bp<a?oV<a?1:8:n9<a?1:8:pR<a?nM<a?o6<a?oh<a?1:8:px<a?1:8:qo<a?Ap<a?1:8:CE<a?1:8:no<a?v4<a?qp<a?1:8:qe<a?1:8:pC<a?CW<a?1:8:uJ<a?1:8:A$<a?z7<a?wc<a?yX<a?tA<a?uF<a?1:8:Cg<a?1:8:Dk<a?B3<a?1:8:DL<a?1:8:Bv<a?DR<a?zj<a?1:8:wn<a?1:8:Ed<a?C5<a?1:8:Cj<a?1:8:A4<a?zL<a?w_<a?DH<a?1:8:x9<a?1:8:wK<a?pn<a?1:8:s5<a?1:8:uI<a?B_<a?z4<a?1:8:1:8:o5<a?np<a?oe<a?nc<a?DV<a?1:8:DQ<a?1:8:n0<a?C8<a?1:8:xE<a?1:8:oK<a?n5<a?uk<a?1:8:CS<a?1:8:oP<a?wy<a?1:8:Du<a?1:8:ph<a?n1<a?pc<a?AH<a?1:8:up<a?1:8:v7<a?y7<a?1:8:zg<a?1:8:n6<a?BM<a?tF<a?1:8:qg<a?1:8:qd<a?wA<a?1:8:DY<a?1:8:xu<a?ol<a?Ax<a?nL<a?pl<a?qb<a?pT<a?De<a?1:8:y3<a?1:8:CI<a?CO<a?1:8:yJ<a?1:8:pQ<a?od<a?wN<a?1:8:xX<a?1:8:nO<a?pL<a?1:8:t4<a?1:8:nC<a?Cv<a?uV<a?Eg<a?1:8:xZ<a?1:8:w9<a?py<a?1:8:t9<a?1:8:Ct<a?qt<a?BK<a?1:8:CV<a?1:8:zO<a?wi<a?1:8:AA<a?1:8:xC<a?yH<a?vI<a?BB<a?Cl<a?1:8:Cw<a?1:8:ul<a?xz<a?1:8:B6<a?1:8:x6<a?xb<a?wJ<a?1:8:wk<a?1:8:zU<a?t8<a?1:8:tb<a?1:8:vB<a?zo<a?BO<a?vJ<a?1:8:xx<a?1:8:yi<a?D3<a?1:8:wt<a?1:8:Cz<a?pf<a?pj<a?1:8:ym<a?1:8:AO<a?tz<a?1:8:Co<a?1:8:CB<a?xD<a?xh<a?wT<a?ue<a?yQ<a?1:8:x$<a?1:8:Aw<a?tK<a?1:8:td<a?1:8:yR<a?C_<a?um<a?1:8:BC<a?1:8:AC<a?BN<a?1:8:BL<a?1:8:wb<a?AQ<a?zZ<a?tZ<a?1:8:A0<a?1:8:AG<a?AM<a?1:8:wE<a?1:8:yp<a?yn<a?tx<a?1:8:tR<a?1:8:D0<a?uK<a?1:8:yv<a?1:8:oZ<a?nD<a?tT<a?uo<a?tg<a?1:8:BT<a?1:8:zK<a?AR<a?1:8:wM<a?1:8:zH<a?n3<a?Ak<a?1:8:Ac<a?1:8:Cx<a?vL<a?1:8:Dt<a?1:8:CG<a?DS<a?qq<a?u9<a?1:8:wa<a?1:8:tV<a?yl<a?1:8:tO<a?1:8:CC<a?pW<a?xs<a?1:8:Cf<a?1:8:At<a?t2<a?1:8:p8<a?1:8:zu<a?tf<a?t7<a?wv<a?Cp<a?Ds<a?uH<a?1:8:pU<a?1:8:DA<a?vf<a?1:8:tI<a?1:8:pa<a?D2<a?ng<a?1:8:qv<a?1:8:yA<a?tH<a?1:8:yq<a?1:8:CK<a?A_<a?DF<a?t3<a?1:8:xU<a?1:8:A2<a?vh<a?1:8:vk<a?1:8:wG<a?wP<a?wq<a?1:8:zE<a?1:8:u8<a?u1<a?1:8:CA<a?1:8:vF<a?xw<a?BD<a?zS<a?DM<a?1:8:yK<a?1:8:zV<a?Av<a?1:8:BA<a?1:8:A6<a?Bd<a?DI<a?1:8:vN<a?1:8:yW<a?ou<a?1:8:AY<a?1:8:Cs<a?Dq<a?yM<a?Dh<a?1:8:Bf<a?1:8:o0<a?oa<a?1:8:AS<a?1:8:oU<a?zx<a?w2<a?1:8:wg<a?1:8:Dg<a?uN<a?1:8:vR<a?1:8:pF<a?uw<a?na<a?yF<a?yT<a?v3<a?1:8:m9<a?1:8:C1<a?C7<a?1:8:vW<a?1:8:p2<a?pp<a?to<a?1:8:Bg<a?1:8:zk<a?Au<a?1:8:Ch<a?1:8:nx<a?tu<a?o9<a?wO<a?1:8:yG<a?1:8:oJ<a?D6<a?1:8:wY<a?1:8:p5<a?oF<a?yP<a?1:8:o3<a?1:8:AL<a?vc<a?1:8:D7<a?1:8:uc<a?vT<a?oM<a?wV<a?Br<a?1:8:m_<a?1:8:xW<a?BE<a?1:8:tt<a?1:8:zI<a?AK<a?vY<a?1:8:nW<a?1:8:wX<a?AD<a?1:8:nG<a?1:8:v5<a?uM<a?DX<a?o7<a?1:8:vu<a?1:8:zC<a?vr<a?1:8:tJ<a?1:8:po<a?zt<a?DK<a?1:8:AX<a?1:8:xk<a?xv<a?1:8:wI<a?1:8:BV<a?uA<a?yB<a?oN<a?za<a?DN<a?z$<a?BH<a?D8<a?1:8:uh<a?1:8:DW<a?wm<a?1:8:pd<a?1:8:CF<a?u6<a?uO<a?1:8:va<a?1:8:zm<a?D_<a?1:8:u0<a?1:8:vd<a?v_<a?x4<a?AJ<a?1:8:A8<a?1:8:DC<a?Ai<a?1:8:Az<a?1:8:t_<a?zQ<a?BG<a?1:8:y5<a?1:8:u_<a?ud<a?1:8:vZ<a?1:8:CY<a?m$<a?vS<a?v6<a?CT<a?1:8:AT<a?1:8:tn<a?w5<a?1:8:uL<a?1:8:uY<a?oG<a?xO<a?1:8:tj<a?1:8:Do<a?m7<a?1:8:yS<a?1:8:nb<a?vC<a?uz<a?D5<a?1:8:yI<a?1:8:zd<a?uX<a?1:8:Bm<a?1:8:AP<a?Ca<a?wx<a?1:8:tc<a?1:8:tq<a?t5<a?1:8:yx<a?1:8:Bt<a?C4<a?yO<a?nn<a?B7<a?pI<a?1:8:Cd<a?1:8:nu<a?z2<a?1:8:oS<a?1:8:tC<a?C9<a?vt<a?1:8:w4<a?1:8:vm<a?v0<a?1:8:wH<a?1:8:wf<a?uZ<a?z5<a?zh<a?1:8:yC<a?1:8:w0<a?xr<a?1:8:ts<a?1:8:tY<a?wU<a?s7<a?1:8:xj<a?1:8:Aj<a?tw<a?1:8:D4<a?1:8:vO<a?CL<a?wW<a?vD<a?ut<a?1:8:Ck<a?1:8:A7<a?AB<a?1:8:ti<a?1:8:tS<a?uR<a?xA<a?1:8:v1<a?1:8:vy<a?vs<a?1:8:1:xL<a?nv<a?xg<a?8:Eh<a?1:8:Bi<a?zD<a?1:8:uP<a?1:8:xI<a?AZ<a?s9<a?1:8:t$<a?1:8:zz<a?1:8:o2<a?CH<a?y2<a?x3<a?wB<a?8:yr<a?tp<a?1:8:yz<a?1:8:we<a?vw<a?s6<a?1:8:uj<a?1:8:C6<a?tv<a?1:8:Be<a?1:8:p7<a?ql<a?ob<a?wr<a?1:8:yc<a?1:8:oo<a?ug<a?1:8:uT<a?1:8:xy<a?p$<a?D$<a?1:8:w6<a?1:8:xM<a?Dj<a?1:8:ve<a?1:8:u4<a?B$<a?vg<a?wR<a?xc<a?1:8:1:8:uq<a?8:oW<a?w3<a?1:8:uC<a?1:8:yL<a?qj<a?iS<a?iT<a?1:2:u3<a?1:8:Bh<a?Cu<a?1:8:uE<a?1:8:zq<a?xR<a?un<a?1:8:Dy<a?1:8:y$<a?BY<a?1:8:vA<a?1:8:ye<a?yt<a?n2<a?qm<a?qi<a?Ab<a?1:8:u2<a?1:8:pH<a?of<a?1:8:x5<a?1:8:yf<a?oi<a?vK<a?1:8:s_<a?1:8:BW<a?pk<a?1:8:Dr<a?1:8:tk<a?AU<a?BU<a?wD<a?1:8:AF<a?1:8:zv<a?B9<a?1:8:vM<a?1:8:x0<a?C0<a?B0<a?1:8:uQ<a?1:8:Dm<a?1:8:x7<a?p9<a?oq<a?ty<a?1:8:nw<a?8:u5<a?1:8:CU<a?pX<a?Df<a?1:8:zA<a?1:8:xP<a?Bn<a?1:8:yV<a?1:8:Ea<a?A3<a?uu<a?tU<a?1:8:1:w$<a?8:BX<a?1:8:Cb<a?BI<a?1:8:s4<a?BR<a?1:8:zf<a?1:8:yd<a?nB<a?yo<a?z9<a?Aq<a?xm<a?xF<a?Bs<a?1:8:Ec<a?1:8:zT<a?wS<a?1:8:Bc<a?1:8:Bj<a?Aa<a?pb<a?1:8:1:8:uG<a?Dz<a?yj<a?C3<a?1:8:z3<a?1:8:ne<a?tG<a?1:8:s0<a?1:8:ui<a?zy<a?1:8:zl<a?ub<a?1:8:oA<a?1:8:B4<a?ur<a?D1<a?x2<a?vH<a?1:8:vp<a?1:8:BZ<a?yg<a?1:8:zX<a?1:8:s$<a?n7<a?t0<a?1:8:nr<a?1:8:tN<a?B8<a?1:8:xK<a?1:8:uy<a?xt<a?AE<a?s2<a?1:8:Am<a?1:8:zi<a?th<a?1:8:AI<a?1:8:Dv<a?wl<a?1:8:8:Cq<a?CP<a?wC<a?yE<a?8:B2<a?Ad<a?1:8:An<a?1:8:ys<a?xf<a?tQ<a?1:8:1:8:vx<a?zY<a?xT<a?1:8:8:tW<a?Bk<a?Cr<a?1:8:1:u$<a?8:1:tm<a?t6<a?pJ<a?8:Dl<a?1:8:DO<a?CJ<a?Dx<a?1:8:xQ<a?1:8:A9<a?1:8:z6<a?u7<a?zw<a?1:8:vn<a?1:8:By<a?ya<a?8:zG<a?1:8:xn<a?xi<a?1:8:tP<a?1:8:y1<a?tl<a?Ba<a?pE<a?uS<a?pP<a?yY<a?1:8:CD<a?1:8:zn<a?1:8:zF<a?pK<a?s3<a?1:8:1:8:Bw<a?Bz<a?wz<a?vX<a?1:8:1:8:t1<a?pw<a?Bx<a?1:8:vl<a?1:8:xa<a?1:8:nF<a?nq<a?iF<a?yD<a?8:iZ<a?1:2:qh<a?DT<a?1:8:vV<a?1:8:p4<a?nm<a?tr<a?1:8:Bb<a?1:8:qr<a?C2<a?1:8:v$<a?1:8:te<a?A5<a?nQ<a?x8<a?1:8:BJ<a?1:8:ny<a?Cn<a?1:8:pN<a?1:8:B5<a?As<a?D9<a?1:8:nX<a?1:8:pv<a?p0<a?1:8:uB<a?1:8:nN<a?Cm<a?ua<a?xe<a?Cc<a?Dn<a?1:8:xS<a?1:8:Cy<a?1:8:vi<a?CR<a?8:1:8:AV<a?Db<a?us<a?os<a?1:8:z1<a?1:8:Dw<a?ww<a?1:8:1:8:DD<a?Ce<a?nT<a?nH<a?qf<a?1:8:nI<a?1:8:s1<a?pA<a?1:8:1:o$<a?w8<a?8:nK<a?1:8:CZ<a?uU<a?1:8:pM<a?1:8:yU<a?zN<a?uv<a?oR<a?1:8:zs<a?1:8:yy<a?ni<a?1:8:o8<a?1:8:iK<a?iU<a?iD<a?1:2:iJ<a?1:2:aT<a?aO<a?1:3:iG<a?1:2:v('\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x04\x03\x03\x05\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x06\x07\b\t\n\x0b\x07\f\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x15\x15\x15\x15\x15\x15\x15\x15\x16\x17\x18\x19\x1a\x1b\x1c\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x1d\x1e\x1f \t!\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"#$%\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\t\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\x02\t\t\x02\x02\t\t\t\t\x02\t\x02\x02\x02\x02\x02\x02\t\x02\t\t\t\x02\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\t\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\x02\x02\x02\x02\x02\x02\x02\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\t\t\t\t\t\t\t\t\x02\x02\t\t\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\t\x02\t\x02\x02\x02\t\t\t\t\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\x02\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\x02\x02\x02\x02\t\t\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\t\x02\t\t\x02\t\t\x02\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\x02\t\t\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\t\x02\t\t\x02\t\t\t\t\t\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\x02\x02\t\t\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\t\x02\t\t\x02\t\t\t\t\t\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\x02\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\t\t\t\t\t\t\x02\x02\x02\t\t\t\x02\t\t\t\t\x02\x02\x02\t\t\x02\t\x02\t\t\x02\x02\x02\t\t\x02\x02\x02\t\t\t\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\x02\t\t\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\x02\x02\t\x02\x02\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\t\t\t\t\t\t\t\t\x02\t\t\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\x02\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\x02\t\t\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\t\t\t\x02\t\x02\x02\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\x02\t\x02\t\t\t\t\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\x02\t\t\t\t\t\t\t\t\t\t\x02\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\t\t\t\t\t\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\x02\x02\x02\x02\t\t\t\t\x02\x02\x02\t\x02\x02\x02\t\t\x02\x02\x02\x02\x02\x02\x02\t\t\t\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\x02\x02\x02\x02\x02\t\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\x02\x02\t\t\t\t\t\t\t\x02\t\x02\t\t\t\t\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\x02\x02\t\t\t\t\t\t\t\x02\t\x02\t\t\t\t\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\t\t\t\t\t\t\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x03\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\x02\t\t\t\t\t\t\x02\t\t\x02\x02\x02\t\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\t\t\t\t\t\t\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\t\t\t\t\t\t\x02\x02\t\t\t\t\t\t\t\t\x02\t\x02\t\x02\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\t\x02\t\x02\x02\x02\t\t\t\x02\t\t\t\t\t\t\t\x02\x02\x02\t\t\t\t\x02\x02\t\t\t\t\t\t\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\t\t\t\x02\t\t\t\t\t\t\t\x02\x02\x02',a+1|0)-1|0},ry=function(a){return 45<a?46<a?-1:0:-1},cL=function(a){return 8<a?Ah<a?iC<a?iT<a?-1:iZ<a?iS<a?0:-1:iJ<a?iU<a?iD<a?iF<a?0:-1:0:-1:iG<a?iK<a?0:-1:0:-1:v("\x01\0\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xx01",a-9|0)-1|0:-1},F4=function(a){return 47<a?d_<a?-1:v("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02",a+aG|0)-1|0:-1},Q=function(a){return 47<a?57<a?-1:0:-1},U=function(a){return 47<a?c2<a?-1:v("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01",a+aG|0)-1|0:-1},b5=function(a){return 47<a?aD<a?-1:v("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03",a+aG|0)-1|0:-1},F5=function(a){return 47<a?59<a?-1:v("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x02",a+aG|0)-1|0:-1},b6=function(a){return 35<a?af<a?-1:v("\x01\0\0\0\0\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x02\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01",a+aU|0)-1|0:-1},lX=function(a){return 87<a?d_<a?-1:v(wj,a-88|0)-1|0:-1},hX=function(a){return 45<a?57<a?-1:v("\x01\0\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03",a+iR|0)-1|0:-1},rz=function(a){return-1<a?af<a?ce<a?aT<a?aO<a?0:-1:0:-1:v("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x01\x01\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01",a)-1|0:-1},F6=function(a){return 35<a?af<a?-1:v("\x01\0\0\0\0\0\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\0\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01",a+aU|0)-1|0:-1},iq=function(a){return 47<a?gD<a?-1:v("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02",a+aG|0)-1|0:-1},ja=function(a){return 35<a?af<a?-1:v("\x01\0\0\0\0\0\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x03\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01",a+aU|0)-1|0:-1},lY=function(a){return 45<a?ch<a?-1:v("\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02",a+iR|0)-1|0:-1},F7=function(a){return 35<a?af<a?-1:v("\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\x01\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01",a+aU|0)-1|0:-1},lZ=function(a){return 47<a?95<a?-1:v("\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02",a+aG|0)-1|0:-1},l0=function(a){return 47<a?aD<a?-1:v("\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03",a+aG|0)-1|0:-1},l1=function(a){return 47<a?aD<a?-1:v("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\x03",a+aG|0)-1|0:-1},l2=function(a){return 35<a?af<a?-1:v("\x01\0\0\0\0\0\0\0\0\0\x02\0\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x04\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01",a+aU|0)-1|0:-1},l3=function(a){return 8<a?Ah<a?iC<a?iT<a?-1:iZ<a?iS<a?0:-1:iJ<a?iU<a?iD<a?iF<a?0:-1:0:-1:iG<a?iK<a?0:-1:0:-1:v("\x01\0\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xx01",a-9|0)-1|0:-1},cM=function(a){return 47<a?49<a?-1:0:-1},l4=function(a){return 47<a?95<a?-1:v("\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02",a+aG|0)-1|0:-1},hY=function(a){return 47<a?57<a?-1:v("\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02",a+aG|0)-1|0:-1},l5=function(a){return 35<a?af<a?-1:v("\x01\0\0\0\0\0\0\0\0\0\x02\0\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\0\0\0\0\0\0\0\x01\x01\x01\x01\x04\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\x05\0\x01\x01\x01\x01\x04\x01\x01\x01\x01\x01\x01\x01\x01\x06\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01",a+aU|0)-1|0:-1},rA=function(a){return b1<a?id<a?-1:0:-1},co=function(a){return 60<a?61<a?-1:0:-1},jb=function(a){return 47<a?aD<a?-1:v("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02",a+aG|0)-1|0:-1},l6=function(a){return 47<a?aD<a?-1:v("\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03",a+aG|0)-1|0:-1},rB=function(a){return 60<a?62<a?-1:v(nE,a+DJ|0)-1|0:-1},l7=function(a){return 65<a?98<a?-1:v(wj,a-66|0)-1|0:-1},aw=function(a){return 35<a?af<a?-1:v("\x01\0\0\0\0\0\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01",a+aU|0)-1|0:-1},l8=function(a){return id<a?gE<a?-1:0:-1},bc=function(a){return 47<a?55<a?-1:0:-1},l9=function(a){return ib<a?aD<a?-1:0:-1},l_=function(a){return aD<a?cf<a?-1:0:-1},kf=function(a){return 98<a?99<a?-1:0:-1},bw=function(a){return 47<a?48<a?-1:0:-1},l$=function(a){return 45<a?ch<a?-1:v("\x01\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\0\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03",a+iR|0)-1|0:-1},ma=function(a){return 78<a?cf<a?-1:v(wj,a-79|0)-1|0:-1},F8=function(a){return 41<a?42<a?-1:0:-1},F9=function(a){return 35<a?af<a?-1:v("\x01\0\0\0\0\0\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\0\0\0\0\0\0\0\x01\x01\x01\x01\x03\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\x01\x01\x01\x01\x03\x01\x01\x01\x01\x01\x01\x01\x01\x04\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01",a+aU|0)-1|0:-1},mb=function(a){return 47<a?ch<a?-1:v("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02",a+aG|0)-1|0:-1},hZ=function(a){return 35<a?af<a?-1:v("\x01\0\0\0\0\0\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\0\0\0\0\0\0\0\x01\x01\x01\x01\x03\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\x04\0\x01\x01\x01\x01\x03\x01\x01\x01\x01\x01\x01\x01\x01\x05\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01",a+aU|0)-1|0:-1},F_=function(a){return 41<a?61<a?-1:v("\x01\0\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\x03",a+DU|0)-1|0:-1},F$=function(a){return 44<a?45<a?-1:0:-1},Ga=function(a){return ca<a?bY<a?-1:0:-1},mc=function(a){return bp<a?cu<a?-1:0:-1},rC=function(a){return 99<a?b0<a?-1:0:-1},md=function(a){return 47<a?c2<a?-1:v("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\x01\x01\x01\x01\x01\x01",a+aG|0)-1|0:-1},kg=function(a){return X<a?b1<a?-1:0:-1},jc=function(a){return 45<a?57<a?-1:v("\x01\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02",a+iR|0)-1|0:-1},Gb=function(a){return 35<a?af<a?-1:v("\x01\0\0\0\0\0\0\0\0\0\0\0\x02\x02\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01",a+aU|0)-1|0:-1},ir=function(a){return 47<a?ce<a?-1:v("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02",a+aG|0)-1|0:-1},Gc=function(a){return 35<a?af<a?-1:v("\x01\0\0\0\0\0\0\0\0\0\x02\0\x03\x03\x03\x03\x03\x03\x03\x03\x04\x04\0\0\0\0\0\0\0\x01\x05\x01\x01\x06\x01\x01\x01\x01\x01\x01\x01\x01\x01\x07\x01\x01\x01\x01\x01\x01\x01\x01\b\x01\x01\0\0\0\0\0\0\x01\x05\x01\x01\x06\x01\x01\x01\x01\x01\x01\x01\x01\t\x07\x01\x01\x01\x01\x01\x01\x01\x01\b\x01\x01",a+aU|0)-1|0:-1},bx=function(a){return 9<a?10<a?-1:0:-1},Gd=function(a){return 35<a?af<a?-1:v("\x01\0\0\0\0\0\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x02\x02\x01\x01\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01",a+aU|0)-1|0:-1},Ge=function(a){return 96<a?97<a?-1:0:-1},cN=function(a){return 35<a?af<a?-1:v("\x01\0\0\0\0\0\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\x03\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x04\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01",a+aU|0)-1|0:-1},me=function(a){return 35<a?af<a?-1:v("\x01\0\0\0\0\0\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x02\x02\x01\x01\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\x03\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x04\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01",a+aU|0)-1|0:-1},h0=function(a){return 47<a?95<a?-1:v("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02",a+aG|0)-1|0:-1},Gf=function(a){return 35<a?af<a?-1:v("\x01\0\0\0\0\0\0\0\0\0\x02\0\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\x04\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x05\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01",a+aU|0)-1|0:-1},is=function(a){return b0<a?ch<a?-1:0:-1},Gg=function(a){return 58<a?59<a?-1:0:-1},Gh=function(a){return 35<a?af<a?-1:v("\x01\0\0\0\0\0\0\x02\0\x02\0\0\x03\x04\x04\x04\x04\x04\x04\x04\x04\x04\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01",a+aU|0)-1|0:-1},mf=function(a){return 41<a?47<a?-1:v("\x01\0\0\0\0\x02",a+DU|0)-1|0:-1},mg=function(a){return 35<a?af<a?-1:v("\x01\0\0\0\0\0\0\0\0\0\0\0\x02\x02\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\x03\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x04\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01",a+aU|0)-1|0:-1},Gi=function(a){return 35<a?af<a?-1:v("\x01\0\0\0\0\0\0\0\0\0\x02\0\x03\x03\x03\x03\x03\x03\x03\x03\x04\x04\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x05\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01",a+aU|0)-1|0:-1},Gj=function(a){return jJ<a?jv<a?-1:0:-1},mh=function(a){return 35<a?af<a?-1:v("\x01\0\0\0\0\0\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\0\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\x03\0\x02\x02\x02\x02\x02\x02\x01\x01\x01\x01\x01\x01\x01\x04\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01",a+aU|0)-1|0:-1},bn=function(a){return 47<a?ch<a?-1:v("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\0\x02",a+aG|0)-1|0:-1},mi=function(a){return 42<a?57<a?-1:v("\x01\0\x01\0\0\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03",a+Eb|0)-1|0:-1},Gk=function(a){return 47<a?c2<a?-1:v("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x02\0\0\0\0\0\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01",a+aG|0)-1|0:-1},h1=function(a){return 45<a?95<a?-1:v("\x01\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03",a+iR|0)-1|0:-1},h2=function(a){return gE<a?iH<a?-1:0:-1},Gl=function(a){return 46<a?47<a?-1:0:-1},Gm=function(a){return 57<a?58<a?-1:0:-1},_a=function(a){return iC<a?AN<a?-1:wo<a?nJ<a?wL<a?DG<a?CQ<a?1:6:tM<a?ws<a?Ee<a?1:6:wQ<a?1:6:xo<a?xN<a?1:6:zB<a?1:6:n$<a?nd<a?oL<a?pZ<a?p1<a?oj<a?wF<a?1:6:yu<a?1:6:vG<a?A1<a?1:6:wh<a?1:6:oz<a?m8<a?tB<a?1:6:oH<a?1:6:op<a?BS<a?1:6:wp<a?1:6:pB<a?zb<a?nk<a?yw<a?1:6:y9<a?1:6:ov<a?pt<a?1:6:CX<a?1:6:pz<a?pG<a?nV<a?1:6:pu<a?1:6:or<a?ot<a?1:6:nR<a?1:6:Bq<a?oX<a?oD<a?tL<a?nt<a?1:6:nZ<a?1:6:p3<a?vE<a?1:6:DE<a?1:6:pm<a?pS<a?pD<a?1:6:o1<a?1:6:Bp<a?oV<a?1:6:n9<a?1:6:pR<a?nM<a?o6<a?oh<a?1:6:px<a?1:6:qo<a?Ap<a?1:6:CE<a?1:6:no<a?v4<a?qp<a?1:6:qe<a?1:6:pC<a?CW<a?1:6:uJ<a?1:6:A$<a?z7<a?wc<a?yX<a?tA<a?uF<a?1:6:Cg<a?1:6:Dk<a?B3<a?1:6:DL<a?1:6:Bv<a?DR<a?zj<a?1:6:wn<a?1:6:Ed<a?C5<a?1:6:Cj<a?1:6:A4<a?zL<a?w_<a?DH<a?1:6:x9<a?1:6:wK<a?pn<a?1:6:s5<a?1:6:uI<a?B_<a?z4<a?1:6:1:6:o5<a?np<a?oe<a?nc<a?DV<a?1:6:DQ<a?1:6:n0<a?C8<a?1:6:xE<a?1:6:oK<a?n5<a?uk<a?1:6:CS<a?1:6:oP<a?wy<a?1:6:Du<a?1:6:ph<a?n1<a?pc<a?AH<a?1:6:up<a?1:6:v7<a?y7<a?1:6:zg<a?1:6:n6<a?BM<a?tF<a?1:6:qg<a?1:6:qd<a?wA<a?1:6:DY<a?1:6:xu<a?ol<a?Ax<a?nL<a?pl<a?qb<a?pT<a?De<a?1:6:y3<a?1:6:CI<a?CO<a?1:6:yJ<a?1:6:pQ<a?od<a?wN<a?1:6:xX<a?1:6:nO<a?pL<a?1:6:t4<a?1:6:nC<a?Cv<a?uV<a?Eg<a?1:6:xZ<a?1:6:w9<a?py<a?1:6:t9<a?1:6:Ct<a?qt<a?BK<a?1:6:CV<a?1:6:zO<a?wi<a?1:6:AA<a?1:6:xC<a?yH<a?vI<a?BB<a?Cl<a?1:6:Cw<a?1:6:ul<a?xz<a?1:6:B6<a?1:6:x6<a?xb<a?wJ<a?1:6:wk<a?1:6:zU<a?t8<a?1:6:tb<a?1:6:vB<a?zo<a?BO<a?vJ<a?1:6:xx<a?1:6:yi<a?D3<a?1:6:wt<a?1:6:Cz<a?pf<a?pj<a?1:6:ym<a?1:6:AO<a?tz<a?1:6:Co<a?1:6:CB<a?xD<a?xh<a?wT<a?ue<a?yQ<a?1:6:x$<a?1:6:Aw<a?tK<a?1:6:td<a?1:6:yR<a?C_<a?um<a?1:6:BC<a?1:6:AC<a?BN<a?1:6:BL<a?1:6:wb<a?AQ<a?zZ<a?tZ<a?1:6:A0<a?1:6:AG<a?AM<a?1:6:wE<a?1:6:yp<a?yn<a?tx<a?1:6:tR<a?1:6:D0<a?uK<a?1:6:yv<a?1:6:oZ<a?nD<a?tT<a?uo<a?tg<a?1:6:BT<a?1:6:zK<a?AR<a?1:6:wM<a?1:6:zH<a?n3<a?Ak<a?1:6:Ac<a?1:6:Cx<a?vL<a?1:6:Dt<a?1:6:CG<a?DS<a?qq<a?u9<a?1:6:wa<a?1:6:tV<a?yl<a?1:6:tO<a?1:6:CC<a?pW<a?xs<a?1:6:Cf<a?1:6:At<a?t2<a?1:6:p8<a?1:6:zu<a?tf<a?t7<a?wv<a?Cp<a?Ds<a?uH<a?1:6:pU<a?1:6:DA<a?vf<a?1:6:tI<a?1:6:pa<a?D2<a?ng<a?1:6:qv<a?1:6:yA<a?tH<a?1:6:yq<a?1:6:CK<a?A_<a?DF<a?t3<a?1:6:xU<a?1:6:A2<a?vh<a?1:6:vk<a?1:6:wG<a?wP<a?wq<a?1:6:zE<a?1:6:u8<a?u1<a?1:6:CA<a?1:6:vF<a?xw<a?BD<a?zS<a?DM<a?1:6:yK<a?1:6:zV<a?Av<a?1:6:BA<a?1:6:A6<a?Bd<a?DI<a?1:6:vN<a?1:6:yW<a?ou<a?1:6:AY<a?1:6:Cs<a?Dq<a?yM<a?Dh<a?1:6:Bf<a?1:6:o0<a?oa<a?1:6:AS<a?1:6:oU<a?zx<a?w2<a?1:6:wg<a?1:6:Dg<a?uN<a?1:6:vR<a?1:6:pF<a?uw<a?na<a?yF<a?yT<a?v3<a?1:6:m9<a?1:6:C1<a?C7<a?1:6:vW<a?1:6:p2<a?pp<a?to<a?1:6:Bg<a?1:6:zk<a?Au<a?1:6:Ch<a?1:6:nx<a?tu<a?o9<a?wO<a?1:6:yG<a?1:6:oJ<a?D6<a?1:6:wY<a?1:6:p5<a?oF<a?yP<a?1:6:o3<a?1:6:AL<a?vc<a?1:6:D7<a?1:6:uc<a?vT<a?oM<a?wV<a?Br<a?1:6:m_<a?1:6:xW<a?BE<a?1:6:tt<a?1:6:zI<a?AK<a?vY<a?1:6:nW<a?1:6:wX<a?AD<a?1:6:nG<a?1:6:v5<a?uM<a?DX<a?o7<a?1:6:vu<a?1:6:zC<a?vr<a?1:6:tJ<a?1:6:po<a?zt<a?DK<a?1:6:AX<a?1:6:xk<a?xv<a?1:6:wI<a?1:6:BV<a?uA<a?yB<a?oN<a?za<a?DN<a?z$<a?BH<a?D8<a?1:6:uh<a?1:6:DW<a?wm<a?1:6:pd<a?1:6:CF<a?u6<a?uO<a?1:6:va<a?1:6:zm<a?D_<a?1:6:u0<a?1:6:vd<a?v_<a?x4<a?AJ<a?1:6:A8<a?1:6:DC<a?Ai<a?1:6:Az<a?1:6:t_<a?zQ<a?BG<a?1:6:y5<a?1:6:u_<a?ud<a?1:6:vZ<a?1:6:CY<a?m$<a?vS<a?v6<a?CT<a?1:6:AT<a?1:6:tn<a?w5<a?1:6:uL<a?1:6:uY<a?oG<a?xO<a?1:6:tj<a?1:6:Do<a?m7<a?1:6:yS<a?1:6:nb<a?vC<a?uz<a?D5<a?1:6:yI<a?1:6:zd<a?uX<a?1:6:Bm<a?1:6:AP<a?Ca<a?wx<a?1:6:tc<a?1:6:tq<a?t5<a?1:6:yx<a?1:6:Bt<a?C4<a?yO<a?nn<a?B7<a?pI<a?1:6:Cd<a?1:6:nu<a?z2<a?1:6:oS<a?1:6:tC<a?C9<a?vt<a?1:6:w4<a?1:6:vm<a?v0<a?1:6:wH<a?1:6:wf<a?uZ<a?z5<a?zh<a?1:6:yC<a?1:6:w0<a?xr<a?1:6:ts<a?1:6:tY<a?wU<a?s7<a?1:6:xj<a?1:6:Aj<a?tw<a?1:6:D4<a?1:6:vO<a?CL<a?wW<a?vD<a?ut<a?1:6:Ck<a?1:6:A7<a?AB<a?1:6:ti<a?1:6:tS<a?uR<a?xA<a?1:6:v1<a?1:6:vy<a?vs<a?1:6:1:xL<a?nv<a?xg<a?6:Eh<a?1:6:Bi<a?zD<a?1:6:uP<a?1:6:xI<a?AZ<a?s9<a?1:6:t$<a?1:6:zz<a?1:6:o2<a?CH<a?y2<a?x3<a?wB<a?6:yr<a?tp<a?1:6:yz<a?1:6:we<a?vw<a?s6<a?1:6:uj<a?1:6:C6<a?tv<a?1:6:Be<a?1:6:p7<a?ql<a?ob<a?wr<a?1:6:yc<a?1:6:oo<a?ug<a?1:6:uT<a?1:6:xy<a?p$<a?D$<a?1:6:w6<a?1:6:xM<a?Dj<a?1:6:ve<a?1:6:u4<a?B$<a?vg<a?wR<a?xc<a?1:6:1:6:uq<a?6:oW<a?w3<a?1:6:uC<a?1:6:yL<a?qj<a?iS<a?iT<a?1:2:u3<a?1:6:Bh<a?Cu<a?1:6:uE<a?1:6:zq<a?xR<a?un<a?1:6:Dy<a?1:6:y$<a?BY<a?1:6:vA<a?1:6:ye<a?yt<a?n2<a?qm<a?qi<a?Ab<a?1:6:u2<a?1:6:pH<a?of<a?1:6:x5<a?1:6:yf<a?oi<a?vK<a?1:6:s_<a?1:6:BW<a?pk<a?1:6:Dr<a?1:6:tk<a?AU<a?BU<a?wD<a?1:6:AF<a?1:6:zv<a?B9<a?1:6:vM<a?1:6:x0<a?C0<a?B0<a?1:6:uQ<a?1:6:Dm<a?1:6:x7<a?p9<a?oq<a?ty<a?1:6:nw<a?6:u5<a?1:6:CU<a?pX<a?Df<a?1:6:zA<a?1:6:xP<a?Bn<a?1:6:yV<a?1:6:Ea<a?A3<a?uu<a?tU<a?1:6:1:w$<a?6:BX<a?1:6:Cb<a?BI<a?1:6:s4<a?BR<a?1:6:zf<a?1:6:yd<a?nB<a?yo<a?z9<a?Aq<a?xm<a?xF<a?Bs<a?1:6:Ec<a?1:6:zT<a?wS<a?1:6:Bc<a?1:6:Bj<a?Aa<a?pb<a?1:6:1:6:uG<a?Dz<a?yj<a?C3<a?1:6:z3<a?1:6:ne<a?tG<a?1:6:s0<a?1:6:ui<a?zy<a?1:6:zl<a?ub<a?1:6:oA<a?1:6:B4<a?ur<a?D1<a?x2<a?vH<a?1:6:vp<a?1:6:BZ<a?yg<a?1:6:zX<a?1:6:s$<a?n7<a?t0<a?1:6:nr<a?1:6:tN<a?B8<a?1:6:xK<a?1:6:uy<a?xt<a?AE<a?s2<a?1:6:Am<a?1:6:zi<a?th<a?1:6:AI<a?1:6:Dv<a?wl<a?1:6:6:Cq<a?CP<a?wC<a?yE<a?6:B2<a?Ad<a?1:6:An<a?1:6:ys<a?xf<a?tQ<a?1:6:1:6:vx<a?zY<a?xT<a?1:6:6:tW<a?Bk<a?Cr<a?1:6:1:u$<a?6:1:tm<a?t6<a?pJ<a?6:Dl<a?1:6:DO<a?CJ<a?Dx<a?1:6:xQ<a?1:6:A9<a?1:6:z6<a?u7<a?zw<a?1:6:vn<a?1:6:By<a?ya<a?6:zG<a?1:6:xn<a?xi<a?1:6:tP<a?1:6:y1<a?tl<a?Ba<a?pE<a?uS<a?pP<a?yY<a?1:6:CD<a?1:6:zn<a?1:6:zF<a?pK<a?s3<a?1:6:1:6:Bw<a?Bz<a?wz<a?vX<a?1:6:1:6:t1<a?pw<a?Bx<a?1:6:vl<a?1:6:xa<a?1:6:nF<a?nq<a?iF<a?yD<a?6:iZ<a?1:2:qh<a?DT<a?1:6:vV<a?1:6:p4<a?nm<a?tr<a?1:6:Bb<a?1:6:qr<a?C2<a?1:6:v$<a?1:6:te<a?A5<a?nQ<a?x8<a?1:6:BJ<a?1:6:ny<a?Cn<a?1:6:pN<a?1:6:B5<a?As<a?D9<a?1:6:nX<a?1:6:pv<a?p0<a?1:6:uB<a?1:6:nN<a?Cm<a?ua<a?xe<a?Cc<a?Dn<a?1:6:xS<a?1:6:Cy<a?1:6:vi<a?CR<a?6:1:6:AV<a?Db<a?us<a?os<a?1:6:z1<a?1:6:Dw<a?ww<a?1:6:1:6:DD<a?Ce<a?nT<a?nH<a?qf<a?1:6:nI<a?1:6:s1<a?pA<a?1:6:1:o$<a?w8<a?6:nK<a?1:6:CZ<a?uU<a?1:6:pM<a?1:6:yU<a?zN<a?uv<a?oR<a?1:6:zs<a?1:6:yy<a?ni<a?1:6:o8<a?1:6:iK<a?iU<a?iD<a?1:2:iJ<a?1:2:aT<a?aO<a?1:3:iG<a?1:2:v("\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x04\x03\x03\x05\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x06\x02\x07\b\t\x06\n\x0b\f\r\x0e\x0f\x10\x11\x12\x13\x13\x13\x13\x13\x13\x13\x13\x13\x14\x15\x16\x17\x18\x19\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x1a\x1b\x1c\x02\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x1d\x07\x07\x07\x07\x07\x07\x07\x07\x1e\x1f \x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x07\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x02\x07\x07\x02\x02\x07\x07\x07\x07\x02\x07\x02\x02\x02\x02\x02\x02\x07\x02\x07\x07\x07\x02\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x02\x02\x07\x07\x07\x07\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x02\x07\x07\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x02\x07\x07\x07\x07\x07\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x02\x07\x07\x07\x07\x07\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x07\x07\x07\x07\x07\x07\x02\x02\x02\x07\x07\x07\x02\x07\x07\x07\x07\x02\x02\x02\x07\x07\x02\x07\x02\x07\x07\x02\x02\x02\x07\x07\x02\x02\x02\x07\x07\x07\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x02\x02\x07\x02\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x07\x02\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x07\x07\x07\x07\x07\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x07\x07\x07\x07\x02\x02\x02\x07\x02\x02\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x02\x02\x02\x02\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x03\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x02\x07\x07\x02\x02\x02\x07\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x07\x02\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x02\x02\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02",a+1|0)-1|0},N=function(a){return 35<a?af<a?-1:v("\x01\0\0\0\0\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01",a+aU|0)-1|0:-1},Gn=function(a){return 34<a?af<a?-1:v("\x01\x02\0\0\0\0\0\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\0\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02",a-35|0)-1|0:-1},_b=function(a){return iC<a?AN<a?-1:wo<a?nJ<a?wL<a?DG<a?CQ<a?1:6:tM<a?ws<a?Ee<a?1:6:wQ<a?1:6:xo<a?xN<a?1:6:zB<a?1:6:n$<a?nd<a?oL<a?pZ<a?p1<a?oj<a?wF<a?1:6:yu<a?1:6:vG<a?A1<a?1:6:wh<a?1:6:oz<a?m8<a?tB<a?1:6:oH<a?1:6:op<a?BS<a?1:6:wp<a?1:6:pB<a?zb<a?nk<a?yw<a?1:6:y9<a?1:6:ov<a?pt<a?1:6:CX<a?1:6:pz<a?pG<a?nV<a?1:6:pu<a?1:6:or<a?ot<a?1:6:nR<a?1:6:Bq<a?oX<a?oD<a?tL<a?nt<a?1:6:nZ<a?1:6:p3<a?vE<a?1:6:DE<a?1:6:pm<a?pS<a?pD<a?1:6:o1<a?1:6:Bp<a?oV<a?1:6:n9<a?1:6:pR<a?nM<a?o6<a?oh<a?1:6:px<a?1:6:qo<a?Ap<a?1:6:CE<a?1:6:no<a?v4<a?qp<a?1:6:qe<a?1:6:pC<a?CW<a?1:6:uJ<a?1:6:A$<a?z7<a?wc<a?yX<a?tA<a?uF<a?1:6:Cg<a?1:6:Dk<a?B3<a?1:6:DL<a?1:6:Bv<a?DR<a?zj<a?1:6:wn<a?1:6:Ed<a?C5<a?1:6:Cj<a?1:6:A4<a?zL<a?w_<a?DH<a?1:6:x9<a?1:6:wK<a?pn<a?1:6:s5<a?1:6:uI<a?B_<a?z4<a?1:6:1:6:o5<a?np<a?oe<a?nc<a?DV<a?1:6:DQ<a?1:6:n0<a?C8<a?1:6:xE<a?1:6:oK<a?n5<a?uk<a?1:6:CS<a?1:6:oP<a?wy<a?1:6:Du<a?1:6:ph<a?n1<a?pc<a?AH<a?1:6:up<a?1:6:v7<a?y7<a?1:6:zg<a?1:6:n6<a?BM<a?tF<a?1:6:qg<a?1:6:qd<a?wA<a?1:6:DY<a?1:6:xu<a?ol<a?Ax<a?nL<a?pl<a?qb<a?pT<a?De<a?1:6:y3<a?1:6:CI<a?CO<a?1:6:yJ<a?1:6:pQ<a?od<a?wN<a?1:6:xX<a?1:6:nO<a?pL<a?1:6:t4<a?1:6:nC<a?Cv<a?uV<a?Eg<a?1:6:xZ<a?1:6:w9<a?py<a?1:6:t9<a?1:6:Ct<a?qt<a?BK<a?1:6:CV<a?1:6:zO<a?wi<a?1:6:AA<a?1:6:xC<a?yH<a?vI<a?BB<a?Cl<a?1:6:Cw<a?1:6:ul<a?xz<a?1:6:B6<a?1:6:x6<a?xb<a?wJ<a?1:6:wk<a?1:6:zU<a?t8<a?1:6:tb<a?1:6:vB<a?zo<a?BO<a?vJ<a?1:6:xx<a?1:6:yi<a?D3<a?1:6:wt<a?1:6:Cz<a?pf<a?pj<a?1:6:ym<a?1:6:AO<a?tz<a?1:6:Co<a?1:6:CB<a?xD<a?xh<a?wT<a?ue<a?yQ<a?1:6:x$<a?1:6:Aw<a?tK<a?1:6:td<a?1:6:yR<a?C_<a?um<a?1:6:BC<a?1:6:AC<a?BN<a?1:6:BL<a?1:6:wb<a?AQ<a?zZ<a?tZ<a?1:6:A0<a?1:6:AG<a?AM<a?1:6:wE<a?1:6:yp<a?yn<a?tx<a?1:6:tR<a?1:6:D0<a?uK<a?1:6:yv<a?1:6:oZ<a?nD<a?tT<a?uo<a?tg<a?1:6:BT<a?1:6:zK<a?AR<a?1:6:wM<a?1:6:zH<a?n3<a?Ak<a?1:6:Ac<a?1:6:Cx<a?vL<a?1:6:Dt<a?1:6:CG<a?DS<a?qq<a?u9<a?1:6:wa<a?1:6:tV<a?yl<a?1:6:tO<a?1:6:CC<a?pW<a?xs<a?1:6:Cf<a?1:6:At<a?t2<a?1:6:p8<a?1:6:zu<a?tf<a?t7<a?wv<a?Cp<a?Ds<a?uH<a?1:6:pU<a?1:6:DA<a?vf<a?1:6:tI<a?1:6:pa<a?D2<a?ng<a?1:6:qv<a?1:6:yA<a?tH<a?1:6:yq<a?1:6:CK<a?A_<a?DF<a?t3<a?1:6:xU<a?1:6:A2<a?vh<a?1:6:vk<a?1:6:wG<a?wP<a?wq<a?1:6:zE<a?1:6:u8<a?u1<a?1:6:CA<a?1:6:vF<a?xw<a?BD<a?zS<a?DM<a?1:6:yK<a?1:6:zV<a?Av<a?1:6:BA<a?1:6:A6<a?Bd<a?DI<a?1:6:vN<a?1:6:yW<a?ou<a?1:6:AY<a?1:6:Cs<a?Dq<a?yM<a?Dh<a?1:6:Bf<a?1:6:o0<a?oa<a?1:6:AS<a?1:6:oU<a?zx<a?w2<a?1:6:wg<a?1:6:Dg<a?uN<a?1:6:vR<a?1:6:pF<a?uw<a?na<a?yF<a?yT<a?v3<a?1:6:m9<a?1:6:C1<a?C7<a?1:6:vW<a?1:6:p2<a?pp<a?to<a?1:6:Bg<a?1:6:zk<a?Au<a?1:6:Ch<a?1:6:nx<a?tu<a?o9<a?wO<a?1:6:yG<a?1:6:oJ<a?D6<a?1:6:wY<a?1:6:p5<a?oF<a?yP<a?1:6:o3<a?1:6:AL<a?vc<a?1:6:D7<a?1:6:uc<a?vT<a?oM<a?wV<a?Br<a?1:6:m_<a?1:6:xW<a?BE<a?1:6:tt<a?1:6:zI<a?AK<a?vY<a?1:6:nW<a?1:6:wX<a?AD<a?1:6:nG<a?1:6:v5<a?uM<a?DX<a?o7<a?1:6:vu<a?1:6:zC<a?vr<a?1:6:tJ<a?1:6:po<a?zt<a?DK<a?1:6:AX<a?1:6:xk<a?xv<a?1:6:wI<a?1:6:BV<a?uA<a?yB<a?oN<a?za<a?DN<a?z$<a?BH<a?D8<a?1:6:uh<a?1:6:DW<a?wm<a?1:6:pd<a?1:6:CF<a?u6<a?uO<a?1:6:va<a?1:6:zm<a?D_<a?1:6:u0<a?1:6:vd<a?v_<a?x4<a?AJ<a?1:6:A8<a?1:6:DC<a?Ai<a?1:6:Az<a?1:6:t_<a?zQ<a?BG<a?1:6:y5<a?1:6:u_<a?ud<a?1:6:vZ<a?1:6:CY<a?m$<a?vS<a?v6<a?CT<a?1:6:AT<a?1:6:tn<a?w5<a?1:6:uL<a?1:6:uY<a?oG<a?xO<a?1:6:tj<a?1:6:Do<a?m7<a?1:6:yS<a?1:6:nb<a?vC<a?uz<a?D5<a?1:6:yI<a?1:6:zd<a?uX<a?1:6:Bm<a?1:6:AP<a?Ca<a?wx<a?1:6:tc<a?1:6:tq<a?t5<a?1:6:yx<a?1:6:Bt<a?C4<a?yO<a?nn<a?B7<a?pI<a?1:6:Cd<a?1:6:nu<a?z2<a?1:6:oS<a?1:6:tC<a?C9<a?vt<a?1:6:w4<a?1:6:vm<a?v0<a?1:6:wH<a?1:6:wf<a?uZ<a?z5<a?zh<a?1:6:yC<a?1:6:w0<a?xr<a?1:6:ts<a?1:6:tY<a?wU<a?s7<a?1:6:xj<a?1:6:Aj<a?tw<a?1:6:D4<a?1:6:vO<a?CL<a?wW<a?vD<a?ut<a?1:6:Ck<a?1:6:A7<a?AB<a?1:6:ti<a?1:6:tS<a?uR<a?xA<a?1:6:v1<a?1:6:vy<a?vs<a?1:6:1:xL<a?nv<a?xg<a?6:Eh<a?1:6:Bi<a?zD<a?1:6:uP<a?1:6:xI<a?AZ<a?s9<a?1:6:t$<a?1:6:zz<a?1:6:o2<a?CH<a?y2<a?x3<a?wB<a?6:yr<a?tp<a?1:6:yz<a?1:6:we<a?vw<a?s6<a?1:6:uj<a?1:6:C6<a?tv<a?1:6:Be<a?1:6:p7<a?ql<a?ob<a?wr<a?1:6:yc<a?1:6:oo<a?ug<a?1:6:uT<a?1:6:xy<a?p$<a?D$<a?1:6:w6<a?1:6:xM<a?Dj<a?1:6:ve<a?1:6:u4<a?B$<a?vg<a?wR<a?xc<a?1:6:1:6:uq<a?6:oW<a?w3<a?1:6:uC<a?1:6:yL<a?qj<a?iS<a?iT<a?1:2:u3<a?1:6:Bh<a?Cu<a?1:6:uE<a?1:6:zq<a?xR<a?un<a?1:6:Dy<a?1:6:y$<a?BY<a?1:6:vA<a?1:6:ye<a?yt<a?n2<a?qm<a?qi<a?Ab<a?1:6:u2<a?1:6:pH<a?of<a?1:6:x5<a?1:6:yf<a?oi<a?vK<a?1:6:s_<a?1:6:BW<a?pk<a?1:6:Dr<a?1:6:tk<a?AU<a?BU<a?wD<a?1:6:AF<a?1:6:zv<a?B9<a?1:6:vM<a?1:6:x0<a?C0<a?B0<a?1:6:uQ<a?1:6:Dm<a?1:6:x7<a?p9<a?oq<a?ty<a?1:6:nw<a?6:u5<a?1:6:CU<a?pX<a?Df<a?1:6:zA<a?1:6:xP<a?Bn<a?1:6:yV<a?1:6:Ea<a?A3<a?uu<a?tU<a?1:6:1:w$<a?6:BX<a?1:6:Cb<a?BI<a?1:6:s4<a?BR<a?1:6:zf<a?1:6:yd<a?nB<a?yo<a?z9<a?Aq<a?xm<a?xF<a?Bs<a?1:6:Ec<a?1:6:zT<a?wS<a?1:6:Bc<a?1:6:Bj<a?Aa<a?pb<a?1:6:1:6:uG<a?Dz<a?yj<a?C3<a?1:6:z3<a?1:6:ne<a?tG<a?1:6:s0<a?1:6:ui<a?zy<a?1:6:zl<a?ub<a?1:6:oA<a?1:6:B4<a?ur<a?D1<a?x2<a?vH<a?1:6:vp<a?1:6:BZ<a?yg<a?1:6:zX<a?1:6:s$<a?n7<a?t0<a?1:6:nr<a?1:6:tN<a?B8<a?1:6:xK<a?1:6:uy<a?xt<a?AE<a?s2<a?1:6:Am<a?1:6:zi<a?th<a?1:6:AI<a?1:6:Dv<a?wl<a?1:6:6:Cq<a?CP<a?wC<a?yE<a?6:B2<a?Ad<a?1:6:An<a?1:6:ys<a?xf<a?tQ<a?1:6:1:6:vx<a?zY<a?xT<a?1:6:6:tW<a?Bk<a?Cr<a?1:6:1:u$<a?6:1:tm<a?t6<a?pJ<a?6:Dl<a?1:6:DO<a?CJ<a?Dx<a?1:6:xQ<a?1:6:A9<a?1:6:z6<a?u7<a?zw<a?1:6:vn<a?1:6:By<a?ya<a?6:zG<a?1:6:xn<a?xi<a?1:6:tP<a?1:6:y1<a?tl<a?Ba<a?pE<a?uS<a?pP<a?yY<a?1:6:CD<a?1:6:zn<a?1:6:zF<a?pK<a?s3<a?1:6:1:6:Bw<a?Bz<a?wz<a?vX<a?1:6:1:6:t1<a?pw<a?Bx<a?1:6:vl<a?1:6:xa<a?1:6:nF<a?nq<a?iF<a?yD<a?6:iZ<a?1:2:qh<a?DT<a?1:6:vV<a?1:6:p4<a?nm<a?tr<a?1:6:Bb<a?1:6:qr<a?C2<a?1:6:v$<a?1:6:te<a?A5<a?nQ<a?x8<a?1:6:BJ<a?1:6:ny<a?Cn<a?1:6:pN<a?1:6:B5<a?As<a?D9<a?1:6:nX<a?1:6:pv<a?p0<a?1:6:uB<a?1:6:nN<a?Cm<a?ua<a?xe<a?Cc<a?Dn<a?1:6:xS<a?1:6:Cy<a?1:6:vi<a?CR<a?6:1:6:AV<a?Db<a?us<a?os<a?1:6:z1<a?1:6:Dw<a?ww<a?1:6:1:6:DD<a?Ce<a?nT<a?nH<a?qf<a?1:6:nI<a?1:6:s1<a?pA<a?1:6:1:o$<a?w8<a?6:nK<a?1:6:CZ<a?uU<a?1:6:pM<a?1:6:yU<a?zN<a?uv<a?oR<a?1:6:zs<a?1:6:yy<a?ni<a?1:6:o8<a?1:6:iK<a?iU<a?iD<a?1:2:iJ<a?1:2:aT<a?aO<a?1:3:iG<a?1:2:v("\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x04\x03\x03\x05\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x06\x02\x07\x02\x02\x06\x02\x02\x02\x02\x02\x02\b\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\n\x02\x0b\f\r\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x0e\x02\x02\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x0f\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x07\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x02\x07\x07\x02\x02\x07\x07\x07\x07\x02\x07\x02\x02\x02\x02\x02\x02\x07\x02\x07\x07\x07\x02\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x02\x02\x07\x07\x07\x07\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x02\x07\x07\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x02\x07\x07\x07\x07\x07\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x02\x07\x07\x07\x07\x07\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x07\x07\x07\x07\x07\x07\x02\x02\x02\x07\x07\x07\x02\x07\x07\x07\x07\x02\x02\x02\x07\x07\x02\x07\x02\x07\x07\x02\x02\x02\x07\x07\x02\x02\x02\x07\x07\x07\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x02\x02\x07\x02\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x07\x02\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x07\x07\x07\x07\x07\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x07\x07\x07\x07\x02\x02\x02\x07\x02\x02\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x02\x02\x02\x02\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x03\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x02\x07\x07\x02\x02\x02\x07\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x07\x02\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x02\x02\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02",a+1|0)-1|0},Go=function(a){for(;;){P(a);var
c=g(a),d=af<c?1:v("\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x02\x02\x02\x02\x02\x02\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x02\x04\x02\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03",c+1|0)-1|0;if(3<d>>>0)var
b=h(a);else
switch(d){case
0:var
b=1;break;case
1:var
b=2;break;case
2:var
b=0;break;default:i(a,2);if(0===h2(g(a))){var
e=ir(g(a));if(0===e)var
b=0===U(g(a))?0===U(g(a))?0===U(g(a))?0:h(a):h(a):h(a);else if(1===e&&0===U(g(a)))for(;;){var
f=iq(g(a));if(0===f)continue;var
b=1===f?0:h(a);break}else
var
b=h(a)}else
var
b=h(a)}if(2<b>>>0)throw t([0,R,_c],1);switch(b){case
0:continue;case
1:return 1;default:if(rs(FF(a)))continue;FH(a,1);return 0}}},mj=function(a,b){var
c=b-a[3][2]|0;return[0,F1(a),c]},kh=function(a,b,c){var
d=mj(a,c),e=mj(a,b);return[0,a[1],e,d]},a0=function(a,b){return mj(a,b[6])},by=function(a,b){return mj(a,b[3])},$=function(a,b){return kh(a,b[6],b[3])},Gp=function(a,b){var
d=0;if(typeof
b==="number")d=1;else
switch(b[0]){case
2:var
c=b[1][1];break;case
3:return b[1][1];case
4:var
c=b[1];break;case
5:return b[1];case
8:var
c=b[2];break;case
9:return b[1];case
10:return b[1];default:d=1}return d?$(a,a[2]):c},a1=function(a,b,c){return[0,a[1],a[2],a[3],a[4],a[5],[0,[0,b,c],a[6]],a[7]]},Gq=function(a,b,c){return a1(a,b,[24,lW(c)])},rD=function(a,b,c,d){return a1(a,b,[25,c,d])},bW=function(a,b){return a1(a,b,_e)},bd=function(a,b){var
c=b[3],d=[0,F1(a)+1|0,c];return[0,a[1],a[2],d,a[4],a[5],a[6],a[7]]},b7=function(a,b,c,d,e){var
f=[0,a[1],b,c],g=az(d),h=e?0:1;return[0,f,[0,h,g,a[7][3][1]<f[2][1]?1:0]]},b8=function(a,b){var
c=kc(b);switch(a){case
1:try{var
i=qE(lw(I(_h,c))),d=i}catch(f){var
g=ay(f);if(g[1]!==cl)throw t(g,0);var
d=C(I(_g,c))}break;case
0:case
3:try{var
f=qE(lw(c)),d=f}catch(f){var
e=ay(f);if(e[1]!==cl)throw t(e,0);var
d=C(I(_f,c))}break;default:try{var
j=Em(c),d=j}catch(f){var
h=ay(f);if(h[1]!==cl)throw t(h,0);var
d=C(I(_i,c))}}return[12,a,d,c]},b9=function(a,b){var
c=kc(b),d=H(c),f=0;if(0!==d&&aD===ax(c,d-1|0)){var
e=aY(c,0,d-1|0);f=1}if(!f)var
e=c;return[13,a,EV(e),c]},Gr=function(a,b,c){return rs(c)?a:a1(a,b,32)},Gs=function(a,b,c,d,e){var
f=kh(a,b+c[6]|0,b+c[3]|0);return[0,f,kb(c,d,(lQ(c)-d|0)-e|0)]},Gt=function(a,b){var
y=a[2][6],c=[0,b,b.length-1,FE,FD,FC,FB,FA,Fz,Fy,Fx,Fw,Fv],j=ad(b.length-1),d=a;for(;;){P(c);var
p=g(c),q=92<p?1:v("\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03",p+1|0)-1|0;if(2<q>>>0)var
e=h(c);else
switch(q){case
0:var
e=2;break;case
1:for(;;){i(c,3);var
k=g(c),z=-1<k?91<k?92<k?0:-1:0:-1;if(0===z)continue;var
e=h(c);break}break;default:i(c,3);if(0===h2(g(c))){var
r=ir(g(c));if(0===r)var
e=0===U(g(c))?0===U(g(c))?0===U(g(c))?0:h(c):h(c):h(c);else if(1===r&&0===U(g(c)))for(;;){var
s=iq(g(c));if(0===s)continue;var
e=1===s?1:h(c);break}else
var
e=h(c)}else
var
e=h(c)}if(3<e>>>0)return C(_j);switch(e){case
0:var
t=Gs(d,y,c,2,0),u=t[1],f=b2(I(_k,t[2])),l=0<=f?1:0,m=l?f<=55295?1:0:l;if(m)var
n=m;else
var
o=57344<=f?1:0,n=o?f<=oc?1:0:o;var
A=n?Gr(d,u,f):a1(d,u,32);cJ(j,f);var
d=A;continue;case
1:var
w=Gs(d,y,c,3,1),B=w[1],x=b2(I(_l,w[2])),D=Gr(d,B,x);cJ(j,x);var
d=D;continue;case
2:return[0,d,az(j)];default:lR(c,j);continue}}},at=function(a,b,c){var
d=bW(a,$(a,b));i9(b);return j(c,d,b)},it=function(a,b,c){var
d=a;for(;;){P(c);var
j=g(c),l=-1<j?42<j?aO<j?0:aT<j?1:0:v("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x02\x01\x01\x03\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x04",j)-1|0:-1;if(3<l>>>0)var
f=h(c);else
switch(l){case
0:for(;;){i(c,3);var
e=g(c),p=-1<e?41<e?42<e?aT<e?aO<e?0:-1:0:-1:v("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x01\x01\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01",e)-1|0:-1;if(0===p)continue;var
f=h(c);break}break;case
1:var
f=0;break;case
2:i(c,0);var
f=0===bx(g(c))?0:h(c);break;default:i(c,3);var
k=g(c),m=44<k?47<k?-1:v("\x01\0\x02",k+xd|0)-1|0:-1,f=0===m?0===Gl(g(c))?2:h(c):1===m?1:h(c)}if(3<f>>>0){var
n=bW(d,$(d,c));return[0,n,by(n,c)]}switch(f){case
0:var
q=bd(d,c);lR(c,b);var
d=q;continue;case
1:var
o=d[4]?rD(d,$(d,c),_n,_m):d;return[0,o,by(o,c)];case
2:if(d[4])return[0,d,by(d,c)];M(b,_o);continue;default:lR(c,b);continue}}},jd=function(a,b,c){for(;;){P(c);var
f=g(c),j=13<f?aO<f?1:aT<f?2:1:v("\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x04",f+1|0)-1|0;if(3<j>>>0)var
e=h(c);else
switch(j){case
0:var
e=0;break;case
1:for(;;){i(c,2);var
d=g(c),l=-1<d?12<d?13<d?aT<d?aO<d?0:-1:0:-1:v("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x01\x01",d)-1|0:-1;if(0===l)continue;var
e=h(c);break}break;case
2:var
e=1;break;default:i(c,1);var
e=0===bx(g(c))?1:h(c)}if(2<e>>>0)return C(_p);switch(e){case
0:return[0,a,by(a,c)];case
1:var
k=by(a,c),m=k[2],n=k[1],o=bd(a,c);return[0,o,[0,n,m-lQ(c)|0]];default:lR(c,b);continue}}},Gu=function(a,b){function
l(a){i(a,3);return 0===bc(g(a))?2:h(a)}P(b);var
d=g(b),m=d_<d?aO<d?1:aT<d?2:1:v("\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x04\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x05\x06\x06\x06\x06\x06\x06\x06\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\b\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\n\x02\x02\x02\x0b\x02\f\r\x0e\x02\x0f",d+1|0)-1|0;if(14<m>>>0)var
c=h(b);else
switch(m){case
0:var
c=0;break;case
1:var
c=16;break;case
2:var
c=15;break;case
3:i(b,15);var
c=0===bx(g(b))?15:h(b);break;case
4:i(b,4);var
c=0===bc(g(b))?l(b):h(b);break;case
5:i(b,11);var
c=0===bc(g(b))?l(b):h(b);break;case
6:var
c=0;break;case
7:var
c=5;break;case
8:var
c=6;break;case
9:var
c=7;break;case
10:var
c=8;break;case
11:var
c=9;break;case
12:i(b,14);var
n=ir(g(b));if(0===n)var
c=0===U(g(b))?0===U(g(b))?0===U(g(b))?12:h(b):h(b):h(b);else if(1===n&&0===U(g(b)))for(;;){var
o=iq(g(b));if(0===o)continue;var
c=1===o?13:h(b);break}else
var
c=h(b);break;case
13:var
c=10;break;default:i(b,14);var
c=0===U(g(b))?0===U(g(b))?1:h(b):h(b)}if(16<c>>>0)return C(_q);switch(c){case
0:var
t=E(b);return[0,a,t,ag(b),0];case
1:var
p=E(b);return[0,a,p,[0,b2(I(_r,p))],0];case
2:var
f=E(b),e=b2(I(_s,f));return k$<=e?[0,a,f,[0,e>>>3|0,48+(e&7)|0],1]:[0,a,f,[0,e],1];case
3:var
q=E(b);return[0,a,q,[0,b2(I(_t,q))],1];case
4:return[0,a,_u,[0,0],0];case
5:return[0,a,_v,[0,8],0];case
6:return[0,a,_w,[0,12],0];case
7:return[0,a,_x,[0,10],0];case
8:return[0,a,_y,[0,13],0];case
9:return[0,a,_z,[0,9],0];case
10:return[0,a,_A,[0,11],0];case
11:var
r=E(b);return[0,a,r,[0,b2(I(_B,r))],1];case
12:var
j=E(b);return[0,a,j,[0,b2(I(_C,aY(j,1,H(j)-1|0)))],0];case
13:var
k=E(b),s=b2(I(_D,aY(k,2,H(k)-3|0))),u=oc<s?bW(a,$(a,b)):a;return[0,u,k,[0,s],0];case
14:var
w=E(b),x=ag(b);return[0,bW(a,$(a,b)),w,x,0];case
15:var
y=E(b);return[0,bd(a,b),y,[0],0];default:var
z=E(b);return[0,a,z,ag(b),0]}},Gv=function(a,b,c,d,e,f){var
j=a,l=e;for(;;){P(f);var
t=g(f),u=92<t?1:v("\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x04\x02\x02\x02\x02\x04\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x05",t+1|0)-1|0;if(4<u>>>0)var
k=h(f);else
switch(u){case
0:var
k=3;break;case
1:for(;;){i(f,4);var
m=g(f),A=-1<m?91<m?92<m?0:-1:v("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x01\x01\x01\x01\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01",m)-1|0:-1;if(0===A)continue;var
k=h(f);break}break;case
2:var
k=2;break;case
3:var
k=0;break;default:var
k=1}if(4<k>>>0)return C(_E);switch(k){case
0:var
p=E(f);M(d,p);if(V(b,p))return[0,j,by(j,f),l];M(c,p);continue;case
1:M(d,_F);var
n=Gu(j,f),B=n[4],D=n[3],F=n[2],G=n[1],H=B||l;M(d,F);EU(function(a){return cJ(c,a)},D);var
j=G,l=H;continue;case
2:var
w=E(f);M(d,w);var
x=bd(bW(j,$(j,f)),f);M(c,w);return[0,x,by(x,f),l];case
3:var
y=E(f);M(d,y);var
z=bW(j,$(j,f));M(c,y);return[0,z,by(z,f),l];default:var
q=f[6],r=f[3]-q|0,o=as(r*4|0),s=ka(f[1],q,r,o);qX(d,o,0,s);qX(c,o,0,s);continue}}},Gw=function(a,b,c,d){var
e=a;for(;;){P(d);var
l=g(d),m=96<l?1:v("\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x04\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x05\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x06\x02\x02\x02\x07",l+1|0)-1|0;if(6<m>>>0)var
f=h(d);else
switch(m){case
0:var
f=0;break;case
1:for(;;){i(d,6);var
j=g(d),p=-1<j?95<j?96<j?0:-1:v("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x01\x01\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x01\x01\x01",j)-1|0:-1;if(0===p)continue;var
f=h(d);break}break;case
2:var
f=5;break;case
3:i(d,5);var
f=0===bx(g(d))?4:h(d);break;case
4:i(d,6);var
n=g(d),q=af<n?ce<n?-1:0:-1,f=0===q?2:h(d);break;case
5:var
f=3;break;default:var
f=1}if(6<f>>>0)return C(_G);switch(f){case
0:return[0,bW(e,$(e,d)),1];case
1:return[0,e,1];case
2:return[0,e,0];case
3:bU(c,92);var
k=Gu(e,d),r=k[3],s=k[1];M(c,k[2]);EU(function(a){return cJ(b,a)},r);var
e=s;continue;case
4:M(c,_H);M(b,_I);var
e=bd(e,d);continue;case
5:M(c,E(d));bU(b,10);var
e=bd(e,d);continue;default:var
o=E(d);M(c,o);M(b,o);continue}}},_J=function(a,b){function
d(a){for(;;){i(a,33);if(0===N(g(a)))continue;return h(a)}}function
m(a){i(a,32);var
b=aw(g(a));if(0!==b)return 1===b?d(a):h(a);for(;;){i(a,30);if(0===N(g(a)))continue;return h(a)}}function
f(a){i(a,31);var
b=aw(g(a));if(0!==b)return 1===b?d(a):h(a);for(;;){i(a,29);if(0===N(g(a)))continue;return h(a)}}function
k(a){i(a,34);var
b=ja(g(a));if(2<b>>>0)return h(a);switch(b){case
0:return d(a);case
1:for(;;){i(a,34);var
c=cN(g(a));if(3<c>>>0)return h(a);switch(c){case
0:return d(a);case
1:continue;case
2:a:for(;;){if(0!==Q(g(a)))return h(a);for(;;){i(a,34);var
e=cN(g(a));if(3<e>>>0)return h(a);switch(e){case
0:return d(a);case
1:continue;case
2:continue a;default:return f(a)}}}default:return f(a)}}default:return f(a)}}function
S(a){b:for(;;){if(0!==Q(g(a)))return h(a);for(;;){i(a,34);var
b=Gf(g(a));if(4<b>>>0)return h(a);switch(b){case
0:return d(a);case
1:return k(a);case
2:continue;case
3:continue b;default:return m(a)}}}}function
R(a){for(;;){i(a,23);if(0===N(g(a)))continue;return h(a)}}function
O(a){for(;;){i(a,23);if(0===N(g(a)))continue;return h(a)}}function
L(a){for(;;){i(a,15);if(0===N(g(a)))continue;return h(a)}}function
K(a){for(;;){i(a,15);if(0===N(g(a)))continue;return h(a)}}function
J(a){for(;;){i(a,11);if(0===N(g(a)))continue;return h(a)}}function
I(a){for(;;){i(a,11);if(0===N(g(a)))continue;return h(a)}}function
G(a){for(;;){i(a,17);if(0===N(g(a)))continue;return h(a)}}function
F(a){for(;;){i(a,17);if(0===N(g(a)))continue;return h(a)}}function
D(a){for(;;){i(a,19);if(0===N(g(a)))continue;return h(a)}}function
o(a){for(;;){i(a,27);if(0===N(g(a)))continue;return h(a)}}function
y(a){i(a,26);var
b=aw(g(a));if(0!==b)return 1===b?o(a):h(a);for(;;){i(a,25);if(0===N(g(a)))continue;return h(a)}}function
j(a){for(;;){i(a,27);if(0===N(g(a)))continue;return h(a)}}function
n(a){i(a,26);var
b=aw(g(a));if(0!==b)return 1===b?j(a):h(a);for(;;){i(a,25);if(0===N(g(a)))continue;return h(a)}}function
x(a){b:for(;;){if(0!==Q(g(a)))return h(a);for(;;){i(a,28);var
b=cN(g(a));if(3<b>>>0)return h(a);switch(b){case
0:return j(a);case
1:continue;case
2:continue b;default:return n(a)}}}}function
e(a){i(a,33);var
b=Gh(g(a));if(3<b>>>0)return h(a);switch(b){case
0:return d(a);case
1:var
c=hY(g(a));if(0===c)for(;;){i(a,28);var
e=ja(g(a));if(2<e>>>0)return h(a);switch(e){case
0:return j(a);case
1:continue;default:return n(a)}}if(1!==c)return h(a);for(;;){i(a,28);var
f=cN(g(a));if(3<f>>>0)return h(a);switch(f){case
0:return j(a);case
1:continue;case
2:return x(a);default:return n(a)}}case
2:for(;;){i(a,28);var
k=ja(g(a));if(2<k>>>0)return h(a);switch(k){case
0:return o(a);case
1:continue;default:return y(a)}}default:for(;;){i(a,28);var
l=cN(g(a));if(3<l>>>0)return h(a);switch(l){case
0:return o(a);case
1:continue;case
2:return x(a);default:return y(a)}}}}function
p(a){i(a,34);var
b=F9(g(a));if(3<b>>>0)return h(a);switch(b){case
0:return d(a);case
1:for(;;){i(a,34);var
c=hZ(g(a));if(4<c>>>0)return h(a);switch(c){case
0:return d(a);case
1:continue;case
2:return e(a);case
3:a:for(;;){if(0!==Q(g(a)))return h(a);for(;;){i(a,34);var
j=hZ(g(a));if(4<j>>>0)return h(a);switch(j){case
0:return d(a);case
1:continue;case
2:return e(a);case
3:continue a;default:return f(a)}}}default:return f(a)}}case
2:return e(a);default:return f(a)}}function
B(a){return 0===mc(g(a))?0===l_(g(a))?0===Gj(g(a))?0===F$(g(a))?0===Ga(g(a))?0===l9(g(a))?0===kf(g(a))?0===mc(g(a))?0===h2(g(a))?0===rC(g(a))?0===is(g(a))?3:h(a):h(a):h(a):h(a):h(a):h(a):h(a):h(a):h(a):h(a):h(a)}function
A(a){i(a,3);return 0===Gm(g(a))?3:h(a)}function
aJ(a){var
r=Z$(g(a));if(36<r>>>0)return h(a);switch(r){case
0:return 98;case
1:return 99;case
2:i(a,1);if(0!==cL(g(a)))return h(a);for(;;){i(a,1);if(0===cL(g(a)))continue;return h(a)}case
3:return 0;case
4:i(a,0);return 0===bx(g(a))?0:h(a);case
5:i(a,88);return 0===co(g(a))?(i(a,58),0===co(g(a))?54:h(a)):h(a);case
6:return 7;case
7:i(a,95);var
s=g(a),aC=32<s?33<s?-1:0:-1;return 0===aC?6:h(a);case
8:return 97;case
9:i(a,84);return 0===co(g(a))?71:h(a);case
10:i(a,86);var
b=g(a),t=37<b?61<b?-1:v("\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02",b-38|0)-1|0:-1;return 0===t?(i(a,51),0===co(g(a))?76:h(a)):1===t?72:h(a);case
11:return 38;case
12:return 39;case
13:i(a,82);var
u=F_(g(a));if(2<u>>>0)return h(a);switch(u){case
0:i(a,83);return 0===co(g(a))?70:h(a);case
1:return 4;default:return 69}case
14:i(a,80);var
c=g(a),w=42<c?61<c?-1:v("\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02",c+Eb|0)-1|0:-1;return 0===w?59:1===w?67:h(a);case
15:return 45;case
16:i(a,81);var
j=g(a),x=44<j?61<j?-1:v("\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02",j+xd|0)-1|0:-1;return 0===x?60:1===x?68:h(a);case
17:i(a,43);var
y=jc(g(a));if(0===y)return 0===ry(g(a))?42:h(a);if(1!==y)return h(a);for(;;){i(a,34);var
z=hZ(g(a));if(4<z>>>0)return h(a);switch(z){case
0:return d(a);case
1:continue;case
2:return e(a);case
3:a:for(;;){if(0!==Q(g(a)))return h(a);for(;;){i(a,34);var
C=hZ(g(a));if(4<C>>>0)return h(a);switch(C){case
0:return d(a);case
1:continue;case
2:return e(a);case
3:continue a;default:return f(a)}}}default:return f(a)}}case
18:i(a,93);var
E=F_(g(a));if(2<E>>>0)return h(a);switch(E){case
0:i(a,2);var
H=l3(g(a));if(2<H>>>0)return h(a);switch(H){case
0:for(;;){var
M=l3(g(a));if(2<M>>>0)return h(a);switch(M){case
0:continue;case
1:return A(a);default:return B(a)}}case
1:return A(a);default:return B(a)}case
1:return 5;default:return 92}case
19:i(a,34);var
P=Gc(g(a));if(8<P>>>0)return h(a);switch(P){case
0:return d(a);case
1:return p(a);case
2:for(;;){i(a,20);var
T=Gi(g(a));if(4<T>>>0)return h(a);switch(T){case
0:return D(a);case
1:return k(a);case
2:continue;case
3:for(;;){i(a,18);var
V=l2(g(a));if(3<V>>>0)return h(a);switch(V){case
0:return F(a);case
1:return k(a);case
2:continue;default:i(a,17);var
W=aw(g(a));if(0!==W)return 1===W?F(a):h(a);for(;;){i(a,17);if(0===N(g(a)))continue;return h(a)}}}default:i(a,19);var
X=aw(g(a));if(0!==X)return 1===X?D(a):h(a);for(;;){i(a,19);if(0===N(g(a)))continue;return h(a)}}}case
3:for(;;){i(a,18);var
Y=l2(g(a));if(3<Y>>>0)return h(a);switch(Y){case
0:return G(a);case
1:return k(a);case
2:continue;default:i(a,17);var
Z=aw(g(a));if(0!==Z)return 1===Z?G(a):h(a);for(;;){i(a,17);if(0===N(g(a)))continue;return h(a)}}}case
4:i(a,33);var
_=Gb(g(a));if(0===_)return d(a);if(1!==_)return h(a);for(;;){i(a,12);var
$=mg(g(a));if(3<$>>>0)return h(a);switch($){case
0:return I(a);case
1:continue;case
2:a:for(;;){if(0!==cM(g(a)))return h(a);for(;;){i(a,12);var
aa=mg(g(a));if(3<aa>>>0)return h(a);switch(aa){case
0:return J(a);case
1:continue;case
2:continue a;default:i(a,10);var
ab=aw(g(a));if(0!==ab)return 1===ab?J(a):h(a);for(;;){i(a,9);if(0===N(g(a)))continue;return h(a)}}}}default:i(a,10);var
ac=aw(g(a));if(0!==ac)return 1===ac?I(a):h(a);for(;;){i(a,9);if(0===N(g(a)))continue;return h(a)}}}case
5:return e(a);case
6:i(a,33);var
ad=Gd(g(a));if(0===ad)return d(a);if(1!==ad)return h(a);for(;;){i(a,16);var
ae=me(g(a));if(3<ae>>>0)return h(a);switch(ae){case
0:return K(a);case
1:continue;case
2:a:for(;;){if(0!==bc(g(a)))return h(a);for(;;){i(a,16);var
af=me(g(a));if(3<af>>>0)return h(a);switch(af){case
0:return L(a);case
1:continue;case
2:continue a;default:i(a,14);var
ag=aw(g(a));if(0!==ag)return 1===ag?L(a):h(a);for(;;){i(a,13);if(0===N(g(a)))continue;return h(a)}}}}default:i(a,14);var
ah=aw(g(a));if(0!==ah)return 1===ah?K(a):h(a);for(;;){i(a,13);if(0===N(g(a)))continue;return h(a)}}}case
7:i(a,33);var
ai=F6(g(a));if(0===ai)return d(a);if(1!==ai)return h(a);for(;;){i(a,24);var
aj=mh(g(a));if(3<aj>>>0)return h(a);switch(aj){case
0:return O(a);case
1:continue;case
2:a:for(;;){if(0!==U(g(a)))return h(a);for(;;){i(a,24);var
ak=mh(g(a));if(3<ak>>>0)return h(a);switch(ak){case
0:return R(a);case
1:continue;case
2:continue a;default:i(a,22);var
al=aw(g(a));if(0!==al)return 1===al?R(a):h(a);for(;;){i(a,21);if(0===N(g(a)))continue;return h(a)}}}}default:i(a,22);var
am=aw(g(a));if(0!==am)return 1===am?O(a):h(a);for(;;){i(a,21);if(0===N(g(a)))continue;return h(a)}}}default:return m(a)}case
20:i(a,34);var
an=l5(g(a));if(5<an>>>0)return h(a);switch(an){case
0:return d(a);case
1:return p(a);case
2:for(;;){i(a,34);var
ao=l5(g(a));if(5<ao>>>0)return h(a);switch(ao){case
0:return d(a);case
1:return p(a);case
2:continue;case
3:return e(a);case
4:return S(a);default:return m(a)}}case
3:return e(a);case
4:return S(a);default:return m(a)}case
21:return 46;case
22:return 44;case
23:i(a,78);var
l=g(a),ap=59<l?61<l?-1:v(nE,l-60|0)-1|0:-1;return 0===ap?(i(a,62),0===co(g(a))?61:h(a)):1===ap?55:h(a);case
24:i(a,90);var
aq=rB(g(a));return 0===aq?(i(a,57),0===co(g(a))?53:h(a)):1===aq?91:h(a);case
25:i(a,79);var
ar=rB(g(a));if(0===ar)return 56;if(1!==ar)return h(a);i(a,66);var
as=rB(g(a));return 0===as?63:1===as?(i(a,65),0===co(g(a))?64:h(a)):h(a);case
26:i(a,50);var
n=g(a),at=45<n?63<n?-1:v("\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02",n+iR|0)-1|0:-1;return 0===at?(i(a,48),0===Q(g(a))?47:h(a)):1===at?(i(a,49),0===co(g(a))?75:h(a)):h(a);case
27:i(a,94);var
au=g(a),aD=63<au?64<au?-1:0:-1;if(0!==aD)return h(a);var
o=g(a),av=96<o?bY<o?-1:v("\x01\0\0\0\0\0\0\0\x02",o+n8|0)-1|0:-1;if(0!==av)return 1===av?0===l8(g(a))?0===is(g(a))?0===kg(g(a))?0===Ge(g(a))?0===l8(g(a))?0===l_(g(a))?0===kg(g(a))?35:h(a):h(a):h(a):h(a):h(a):h(a):h(a):h(a);if(0!==rA(g(a)))return h(a);var
ax=g(a),aE=d_<ax?k8<ax?-1:0:-1;if(0!==aE)return h(a);if(0!==l9(g(a)))return h(a);if(0!==kf(g(a)))return h(a);var
ay=g(a),aF=72<ay?73<ay?-1:0:-1;return 0===aF?0===l8(g(a))?0===is(g(a))?0===kg(g(a))?0===Ge(g(a))?0===l8(g(a))?0===l_(g(a))?0===kg(g(a))?35:h(a):h(a):h(a):h(a):h(a):h(a):h(a):h(a);case
28:return 40;case
29:i(a,96);if(0!==h2(g(a)))return h(a);var
az=ir(g(a));if(0===az)return 0===U(g(a))?0===U(g(a))?0===U(g(a))?97:h(a):h(a):h(a);if(1!==az)return h(a);if(0!==U(g(a)))return h(a);for(;;){var
aA=iq(g(a));if(0===aA)continue;return 1===aA?97:h(a)}case
30:return 41;case
31:i(a,87);return 0===co(g(a))?74:h(a);case
32:return 8;case
33:return 36;case
34:i(a,85);var
q=g(a),aB=60<q?jL<q?-1:v("\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02",q+DJ|0)-1|0:-1;return 0===aB?73:1===aB?(i(a,52),0===co(g(a))?77:h(a)):h(a);case
35:return 37;default:return 89}}P(b);var
T=aJ(b);if(99<T>>>0)return C(_K);var
w=T;if(50>w)switch(w){case
0:return[2,bd(a,b)];case
1:return[2,a];case
2:var
aK=a0(a,b),W=ad(aa),Y=it(a,W,b),Z=Y[1];return[1,Z,b7(Z,aK,Y[2],W,1)];case
3:var
q=E(b);if(!a[5]){var
aM=a0(a,b),r=ad(aa);M(r,aY(q,2,H(q)-2|0));var
ac=it(a,r,b),ae=ac[1];return[1,ae,b7(ae,aM,ac[2],r,1)]}var
aL=a[4]?Gq(a,$(a,b),q):a,_=lV(1,aL),ab=lQ(b);if(V(kb(b,ab-1|0,1),iL)&&l(kb(b,ab-2|0,1),iL))return[0,_,86];return[2,_];case
4:if(a[4])return[2,lV(0,a)];i9(b);P(b);var
aN=0===F8(g(b))?0:h(b);return 0===aN?[0,a,aV]:C(_L);case
5:var
aO=a0(a,b),af=ad(aa),ah=jd(a,af,b),ai=ah[1];return[1,ai,b7(ai,aO,ah[2],af,0)];case
6:if(0!==b[6])return[0,a,_M];var
aP=a0(a,b),aj=ad(aa),ak=jd(a,aj,b),al=ak[1],aQ=[0,al[1],aP,ak[2]];return[0,al,[6,aQ,az(aj)]];case
7:var
am=E(b),aR=a0(a,b),an=ad(aa),s=ad(aa);M(s,am);var
t=Gv(a,am,an,s,0,b),ao=t[1],aS=t[3],aT=[0,ao[1],aR,t[2]],aU=az(s);return[0,ao,[2,[0,aT,az(an),aU,aS]]];case
8:var
ap=ad(aa),aq=ad(aa),aW=a0(a,b),ar=Gw(a,ap,aq,b),u=ar[1],aX=ar[2],aZ=by(u,b),a2=[0,u[1],aW,aZ],a3=az(aq);return[0,u,[3,[0,a2,az(ap),a3,1,aX]]];case
9:return at(a,b,function(a,b){P(b);if(0===bw(g(b))&&0===l7(g(b))&&0===cM(g(b)))for(;;){var
e=l0(g(b));if(2<e>>>0)var
c=h(b);else
switch(e){case
0:continue;case
1:a:for(;;){if(0===cM(g(b)))for(;;){var
f=l0(g(b));if(2<f>>>0)var
d=h(b);else
switch(f){case
0:continue;case
1:continue a;default:var
d=0}break}else
var
d=h(b);var
c=d;break}break;default:var
c=0}break}else
var
c=h(b);return 0===c?[0,a,[1,0,E(b)]]:C(_N)});case
10:return[0,a,[1,0,E(b)]];case
11:return at(a,b,function(a,b){P(b);if(0===bw(g(b))&&0===l7(g(b))&&0===cM(g(b)))for(;;){i(b,0);var
d=lZ(g(b));if(0===d)continue;if(1===d)a:for(;;){if(0===cM(g(b)))for(;;){i(b,0);var
f=lZ(g(b));if(0===f)continue;if(1===f)continue a;var
e=h(b);break}else
var
e=h(b);var
c=e;break}else
var
c=h(b);break}else
var
c=h(b);return 0===c?[0,a,[0,0,E(b)]]:C(_O)});case
12:return[0,a,[0,0,E(b)]];case
13:return at(a,b,function(a,b){P(b);if(0===bw(g(b))&&0===ma(g(b))&&0===bc(g(b)))for(;;){var
e=l6(g(b));if(2<e>>>0)var
c=h(b);else
switch(e){case
0:continue;case
1:a:for(;;){if(0===bc(g(b)))for(;;){var
f=l6(g(b));if(2<f>>>0)var
d=h(b);else
switch(f){case
0:continue;case
1:continue a;default:var
d=0}break}else
var
d=h(b);var
c=d;break}break;default:var
c=0}break}else
var
c=h(b);return 0===c?[0,a,[1,1,E(b)]]:C(_P)});case
14:return[0,a,[1,1,E(b)]];case
15:return at(a,b,function(a,b){P(b);if(0===bw(g(b))&&0===ma(g(b))&&0===bc(g(b)))for(;;){i(b,0);var
d=l4(g(b));if(0===d)continue;if(1===d)a:for(;;){if(0===bc(g(b)))for(;;){i(b,0);var
f=l4(g(b));if(0===f)continue;if(1===f)continue a;var
e=h(b);break}else
var
e=h(b);var
c=e;break}else
var
c=h(b);break}else
var
c=h(b);return 0===c?[0,a,[0,3,E(b)]]:C(_Q)});case
16:return[0,a,[0,3,E(b)]];case
17:return at(a,b,function(a,b){P(b);if(0===bw(g(b)))for(;;){var
c=g(b),e=47<c?57<c?-1:v("\x01\x01\x01\x01\x01\x01\x01\x01\x02\x02",c+aG|0)-1|0:-1;if(0===e)continue;if(1===e)for(;;){i(b,0);if(0===Q(g(b)))continue;var
d=h(b);break}else
var
d=h(b);break}else
var
d=h(b);return 0===d?[0,a,[0,2,E(b)]]:C(_R)});case
18:return[0,a,[0,2,E(b)]];case
19:return at(a,b,function(a,b){P(b);if(0===bw(g(b))&&0===bc(g(b)))for(;;){i(b,0);if(0===bc(g(b)))continue;var
c=h(b);break}else
var
c=h(b);return 0===c?[0,a,[0,1,E(b)]]:C(_S)});case
20:return[0,a,[0,1,E(b)]];case
21:return at(a,b,function(a,b){P(b);if(0===bw(g(b))&&0===lX(g(b))&&0===U(g(b)))for(;;){var
e=l1(g(b));if(2<e>>>0)var
c=h(b);else
switch(e){case
0:continue;case
1:a:for(;;){if(0===U(g(b)))for(;;){var
f=l1(g(b));if(2<f>>>0)var
d=h(b);else
switch(f){case
0:continue;case
1:continue a;default:var
d=0}break}else
var
d=h(b);var
c=d;break}break;default:var
c=0}break}else
var
c=h(b);return 0===c?[0,a,[1,2,E(b)]]:C(_T)});case
22:return[0,a,[1,2,E(b)]];case
23:return at(a,b,function(a,b){P(b);if(0===bw(g(b))&&0===lX(g(b))&&0===U(g(b)))for(;;){i(b,0);var
d=md(g(b));if(0===d)continue;if(1===d)a:for(;;){if(0===U(g(b)))for(;;){i(b,0);var
f=md(g(b));if(0===f)continue;if(1===f)continue a;var
e=h(b);break}else
var
e=h(b);var
c=e;break}else
var
c=h(b);break}else
var
c=h(b);return 0===c?[0,a,[0,4,E(b)]]:C(_U)});case
24:return[0,a,[0,4,E(b)]];case
25:return at(a,b,function(a,b){function
i(a){for(;;){var
b=b5(g(a));if(2<b>>>0)return h(a);switch(b){case
0:continue;case
1:a:for(;;){if(0!==Q(g(a)))return h(a);for(;;){var
c=b5(g(a));if(2<c>>>0)return h(a);switch(c){case
0:continue;case
1:continue a;default:return 0}}}default:return 0}}}function
f(a){for(;;){var
b=jb(g(a));if(0===b)continue;return 1===b?0:h(a)}}function
d(a){var
b=mi(g(a));if(2<b>>>0)return h(a);switch(b){case
0:var
c=hY(g(a));return 0===c?f(a):1===c?i(a):h(a);case
1:return f(a);default:return i(a)}}function
j(a){var
b=mb(g(a));if(0!==b)return 1===b?d(a):h(a);for(;;){var
c=bn(g(a));if(2<c>>>0)return h(a);switch(c){case
0:continue;case
1:return d(a);default:a:for(;;){if(0!==Q(g(a)))return h(a);for(;;){var
e=bn(g(a));if(2<e>>>0)return h(a);switch(e){case
0:continue;case
1:return d(a);default:continue a}}}}}}P(b);var
k=hX(g(b));if(2<k>>>0)var
c=h(b);else
switch(k){case
0:if(0===Q(g(b)))for(;;){var
l=bn(g(b));if(2<l>>>0)var
c=h(b);else
switch(l){case
0:continue;case
1:var
c=d(b);break;default:a:for(;;){if(0===Q(g(b)))for(;;){var
m=bn(g(b));if(2<m>>>0)var
e=h(b);else
switch(m){case
0:continue;case
1:var
e=d(b);break;default:continue a}break}else
var
e=h(b);var
c=e;break}}break}else
var
c=h(b);break;case
1:var
n=lY(g(b)),c=0===n?j(b):1===n?d(b):h(b);break;default:for(;;){var
o=l$(g(b));if(2<o>>>0)var
c=h(b);else
switch(o){case
0:var
c=j(b);break;case
1:continue;default:var
c=d(b)}break}}if(0!==c)return C(_V);var
p=a1(a,$(a,b),48);return[0,p,[1,2,E(b)]]});case
26:var
a4=a1(a,$(a,b),48);return[0,a4,[1,2,E(b)]];case
27:return at(a,b,function(a,b){function
j(a){for(;;){i(a,0);var
b=h0(g(a));if(0===b)continue;if(1!==b)return h(a);a:for(;;){if(0!==Q(g(a)))return h(a);for(;;){i(a,0);var
c=h0(g(a));if(0===c)continue;if(1===c)continue a;return h(a)}}}}function
f(a){for(;;){i(a,0);if(0===Q(g(a)))continue;return h(a)}}function
d(a){var
b=mi(g(a));if(2<b>>>0)return h(a);switch(b){case
0:var
c=hY(g(a));return 0===c?f(a):1===c?j(a):h(a);case
1:return f(a);default:return j(a)}}function
k(a){var
b=mb(g(a));if(0!==b)return 1===b?d(a):h(a);for(;;){var
c=bn(g(a));if(2<c>>>0)return h(a);switch(c){case
0:continue;case
1:return d(a);default:a:for(;;){if(0!==Q(g(a)))return h(a);for(;;){var
e=bn(g(a));if(2<e>>>0)return h(a);switch(e){case
0:continue;case
1:return d(a);default:continue a}}}}}}P(b);var
l=hX(g(b));if(2<l>>>0)var
c=h(b);else
switch(l){case
0:if(0===Q(g(b)))for(;;){var
m=bn(g(b));if(2<m>>>0)var
c=h(b);else
switch(m){case
0:continue;case
1:var
c=d(b);break;default:a:for(;;){if(0===Q(g(b)))for(;;){var
n=bn(g(b));if(2<n>>>0)var
e=h(b);else
switch(n){case
0:continue;case
1:var
e=d(b);break;default:continue a}break}else
var
e=h(b);var
c=e;break}}break}else
var
c=h(b);break;case
1:var
o=lY(g(b)),c=0===o?k(b):1===o?d(b):h(b);break;default:for(;;){var
p=l$(g(b));if(2<p>>>0)var
c=h(b);else
switch(p){case
0:var
c=k(b);break;case
1:continue;default:var
c=d(b)}break}}return 0===c?[0,a,[0,4,E(b)]]:C(_W)});case
28:return[0,a,[0,4,E(b)]];case
29:return at(a,b,function(a,b){function
f(a){for(;;){var
b=b5(g(a));if(2<b>>>0)return h(a);switch(b){case
0:continue;case
1:a:for(;;){if(0!==Q(g(a)))return h(a);for(;;){var
c=b5(g(a));if(2<c>>>0)return h(a);switch(c){case
0:continue;case
1:continue a;default:return 0}}}default:return 0}}}function
d(a){var
b=jb(g(a));return 0===b?f(a):1===b?0:h(a)}P(b);var
i=hX(g(b));if(2<i>>>0)var
c=h(b);else
switch(i){case
0:var
c=0===Q(g(b))?f(b):h(b);break;case
1:for(;;){var
j=jc(g(b));if(0===j)var
c=d(b);else{if(1===j)continue;var
c=h(b)}break}break;default:for(;;){var
k=h1(g(b));if(2<k>>>0)var
c=h(b);else
switch(k){case
0:var
c=d(b);break;case
1:continue;default:a:for(;;){if(0===Q(g(b)))for(;;){var
l=h1(g(b));if(2<l>>>0)var
e=h(b);else
switch(l){case
0:var
e=d(b);break;case
1:continue;default:continue a}break}else
var
e=h(b);var
c=e;break}}break}}if(0!==c)return C(_X);var
m=a1(a,$(a,b),39);return[0,m,[1,2,E(b)]]});case
30:return at(a,b,function(a,b){P(b);var
e=hY(g(b));if(0===e)for(;;){var
f=jb(g(b));if(0===f)continue;var
c=1===f?0:h(b);break}else if(1===e)for(;;){var
i=b5(g(b));if(2<i>>>0)var
c=h(b);else
switch(i){case
0:continue;case
1:a:for(;;){if(0===Q(g(b)))for(;;){var
j=b5(g(b));if(2<j>>>0)var
d=h(b);else
switch(j){case
0:continue;case
1:continue a;default:var
d=0}break}else
var
d=h(b);var
c=d;break}break;default:var
c=0}break}else
var
c=h(b);return 0===c?[0,a,[1,2,E(b)]]:C(_Y)});case
31:var
a5=a1(a,$(a,b),39);return[0,a5,[1,2,E(b)]];case
32:return[0,a,[1,2,E(b)]];case
33:return at(a,b,function(a,b){function
f(a){for(;;){i(a,0);var
b=h0(g(a));if(0===b)continue;if(1!==b)return h(a);a:for(;;){if(0!==Q(g(a)))return h(a);for(;;){i(a,0);var
c=h0(g(a));if(0===c)continue;if(1===c)continue a;return h(a)}}}}function
d(a){i(a,0);return 0===Q(g(a))?f(a):h(a)}P(b);var
j=hX(g(b));if(2<j>>>0)var
c=h(b);else
switch(j){case
0:var
c=0===Q(g(b))?f(b):h(b);break;case
1:for(;;){i(b,0);var
k=jc(g(b));if(0===k)var
c=d(b);else{if(1===k)continue;var
c=h(b)}break}break;default:for(;;){i(b,0);var
l=h1(g(b));if(2<l>>>0)var
c=h(b);else
switch(l){case
0:var
c=d(b);break;case
1:continue;default:a:for(;;){if(0===Q(g(b)))for(;;){i(b,0);var
m=h1(g(b));if(2<m>>>0)var
e=h(b);else
switch(m){case
0:var
e=d(b);break;case
1:continue;default:continue a}break}else
var
e=h(b);var
c=e;break}}break}}return 0===c?[0,a,[0,4,E(b)]]:C(_Z)});case
34:return[0,a,[0,4,E(b)]];case
35:var
a6=$(a,b),as=E(b);return[0,a,[4,a6,as,as]];case
36:return[0,a,0];case
37:return[0,a,1];case
38:return[0,a,4];case
39:return[0,a,5];case
40:return[0,a,6];case
41:return[0,a,7];case
42:return[0,a,12];case
43:return[0,a,10];case
44:return[0,a,8];case
45:return[0,a,9];case
46:return[0,a,86];case
47:i9(b);P(b);var
au=g(b),a7=62<au?63<au?-1:0:-1,a8=0===a7?0:h(b);return 0===a8?[0,a,85]:C(_0);case
48:return[0,a,83];default:return[0,a,84]}switch(w){case
50:return[0,a,85];case
51:return[0,a,88];case
52:return[0,a,87];case
53:return[0,a,94];case
54:return[0,a,95];case
55:return[0,a,96];case
56:return[0,a,97];case
57:return[0,a,92];case
58:return[0,a,93];case
59:return[0,a,cf];case
60:return[0,a,bh];case
61:return[0,a,69];case
62:return[0,a,b0];case
63:return[0,a,68];case
64:return[0,a,67];case
65:return[0,a,c2];case
66:return[0,a,ch];case
67:return[0,a,78];case
68:return[0,a,77];case
69:return[0,a,75];case
70:return[0,a,76];case
71:return[0,a,73];case
72:return[0,a,72];case
73:return[0,a,71];case
74:return[0,a,70];case
75:return[0,a,79];case
76:return[0,a,80];case
77:return[0,a,81];case
78:return[0,a,98];case
79:return[0,a,99];case
80:return[0,a,cD];case
81:return[0,a,ca];case
82:return[0,a,aV];case
83:return[0,a,bp];case
84:return[0,a,cu];case
85:return[0,a,89];case
86:return[0,a,91];case
87:return[0,a,90];case
88:return[0,a,ib];case
89:return[0,a,aD];case
90:return[0,a,82];case
91:return[0,a,11];case
92:return[0,a,74];case
93:return[0,a,bY];case
94:return[0,a,13];case
95:return[0,a,14];case
96:return[2,bW(a,$(a,b))];case
97:var
av=b[6];Go(b);var
a9=kh(a,av,b[3]);rk(b,av);var
c=E(b),ax=z(c,kY);if(0<=ax){if(0>=ax)return[0,a,18];var
ay=z(c,jH);if(0<=ay){if(0>=ay)return[0,a,51];var
aA=z(c,hJ);if(0<=aA){if(0>=aA)return[0,a,46];if(!l(c,k4))return[0,a,24];if(!l(c,hH))return[0,a,47];if(!l(c,ox))return[0,a,25];if(!l(c,nS))return[0,a,26];if(!l(c,bf))return[0,a,58]}else{if(!l(c,bP))return[0,a,20];if(!l(c,iP))return[0,a,21];if(!l(c,bM))return[0,a,22];if(!l(c,hI))return[0,a,31];if(!l(c,nf))return[0,a,23];if(!l(c,ev))return[0,a,61]}}else{var
aE=z(c,qc);if(0<=aE){if(0>=aE)return[0,a,54];if(!l(c,ld))return[0,a,55];if(!l(c,lp))return[0,a,56];if(!l(c,k1))return[0,a,57];if(!l(c,bS))return[0,a,19];if(!l(c,bR))return[0,a,42]}else{if(!l(c,bs))return[0,a,53];if(!l(c,jF))return[0,a,28];if(!l(c,i0))return[0,a,44];if(!l(c,iY))return[0,a,29];if(!l(c,vj))return[0,a,63];if(!l(c,yb))return[0,a,62]}}}else{var
aF=z(c,nl);if(0<=aF){if(0>=aF)return[0,a,37];var
aH=z(c,p6);if(0<=aH){if(0>=aH)return[0,a,39];if(!l(c,jS))return[0,a,15];if(!l(c,qa))return[0,a,16];if(!l(c,iN))return[0,a,52];if(!l(c,bg))return[0,a,50];if(!l(c,h$))return[0,a,17]}else{if(!l(c,pi))return[0,a,43];if(!l(c,lf))return[0,a,48];if(!l(c,pe))return[0,a,49];if(!l(c,f9))return[0,a,41];if(!l(c,hD))return[0,a,30];if(!l(c,oy))return[0,a,38]}}else{var
aI=z(c,lo);if(0<=aI){if(0>=aI)return[0,a,27];if(!l(c,bL))return[0,a,35];if(!l(c,bN))return[0,a,59];if(!l(c,kV))return[0,a,60];if(!l(c,iI))return[0,a,36];if(!l(c,k7))return[0,a,45]}else{if(!l(c,h_))return[0,a,64];if(!l(c,iE))return[0,a,65];if(!l(c,bT))return[0,a,32];if(!l(c,ow))return[0,a,33];if(!l(c,og))return[0,a,34];if(!l(c,lb))return[0,a,40]}}}var
aB=ag(b),aC=Gt(a,aB),a_=aC[2],a$=aC[1];return[0,a$,[4,a9,a_,kc(aB)]];case
98:var
ba=a[4]?a1(a,$(a,b),96):a;return[0,ba,X];default:var
bb=bW(a,$(a,b));return[0,bb,[7,E(b)]]}},_3=function(a,b,c){var
d=a;b:for(;;){P(c);var
n=g(c),s=92<n?aO<n?1:aT<n?2:1:v("\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x04\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x05\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x06\x07",n+1|0)-1|0;if(6<s>>>0)var
e=h(c);else
switch(s){case
0:var
e=0;break;case
1:for(;;){i(c,7);var
k=g(c),x=-1<k?90<k?92<k?aT<k?aO<k?0:-1:0:-1:v("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x01\x01\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01",k)-1|0:-1;if(0===x)continue;var
e=h(c);break}break;case
2:var
e=6;break;case
3:i(c,6);var
e=0===bx(g(c))?6:h(c);break;case
4:i(c,4);if(0===F7(g(c)))for(;;){i(c,3);if(0===F7(g(c)))continue;var
e=h(c);break}else
var
e=h(c);break;case
5:var
e=5;break;default:i(c,7);var
l=g(c),t=-1<l?13<l?aO<l?0:aT<l?1:0:v("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x02\x01\x01\x03",l)-1|0:-1;if(2<t>>>0)var
e=h(c);else
switch(t){case
0:var
e=2;break;case
1:var
e=1;break;default:i(c,1);var
e=0===bx(g(c))?1:h(c)}}if(7<e>>>0)return C(_4);switch(e){case
0:return[0,a1(d,$(d,c),b1),_5];case
1:return[0,bd(a1(d,$(d,c),b1),c),_6];case
2:M(b,E(c));continue;case
3:var
u=E(c);return[0,d,aY(u,1,H(u)-1|0)];case
4:return[0,d,_7];case
5:bU(b,91);for(;;){P(c);var
m=g(c),q=93<m?aO<m?1:aT<m?2:1:v("\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x04\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x05\x06",m+1|0)-1|0;if(5<q>>>0)var
f=h(c);else
switch(q){case
0:var
f=0;break;case
1:for(;;){i(c,5);var
j=g(c),w=-1<j?91<j?93<j?aT<j?aO<j?0:-1:0:-1:v("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x01\x01\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01",j)-1|0:-1;if(0===w)continue;var
f=h(c);break}break;case
2:var
f=4;break;case
3:i(c,4);var
f=0===bx(g(c))?4:h(c);break;case
4:i(c,5);var
p=g(c),r=91<p?93<p?-1:v(nE,p-92|0)-1|0:-1,f=0===r?1:1===r?2:h(c);break;default:var
f=3}if(5<f>>>0)var
o=C(_1);else
switch(f){case
0:var
o=d;break;case
1:M(b,_2);continue;case
2:bU(b,92);bU(b,93);continue;case
3:bU(b,93);var
o=d;break;case
4:var
o=bd(a1(d,$(d,c),b1),c);break;default:M(b,E(c));continue}var
d=o;continue b}case
6:return[0,bd(a1(d,$(d,c),b1),c),_8];default:M(b,E(c));continue}}},_9=function(a,b){P(b);var
c=g(b),f=iC<c?iF<c?iS<c?iT<c?1:2:iZ<c?1:2:iK<c?iU<c?iD<c?1:2:iJ<c?1:2:aT<c?aO<c?1:3:iG<c?1:2:v("\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x04\x03\x03\x05\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x06\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02",c+1|0)-1|0;if(5<f>>>0)var
d=h(b);else
switch(f){case
0:var
d=0;break;case
1:var
d=6;break;case
2:i(b,2);if(0===cL(g(b)))for(;;){i(b,2);if(0===cL(g(b)))continue;var
d=h(b);break}else
var
d=h(b);break;case
3:var
d=1;break;case
4:i(b,1);var
d=0===bx(g(b))?1:h(b);break;default:i(b,5);var
j=mf(g(b)),d=0===j?4:1===j?3:h(b)}if(6<d>>>0)return C(__);switch(d){case
0:return[0,a,X];case
1:return[2,bd(a,b)];case
2:return[2,a];case
3:var
s=a0(a,b),k=ad(aa),l=jd(a,k,b),m=l[1];return[1,m,b7(m,s,l[2],k,0)];case
4:var
t=a0(a,b),n=ad(aa),o=it(a,n,b),p=o[1];return[1,p,b7(p,t,o[2],n,1)];case
5:var
u=a0(a,b),q=ad(aa),r=_3(a,q,b),e=r[1],w=r[2],x=by(e,b),y=[0,e[1],u,x];return[0,e,[5,y,az(q),w]];default:var
z=bW(a,$(a,b));return[0,z,[7,E(b)]]}},Gx=function(a){var
b=z(a,"iexcl");if(0<=b){if(0>=b)return aa9;var
c=z(a,"prime");if(0<=c){if(0>=c)return $9;var
d=z(a,"sup1");if(0<=d){if(0>=d)return $D;var
e=z(a,"uarr");if(0<=e){if(0>=e)return $n;var
f=z(a,"xi");if(0<=f){if(0>=f)return $f;if(!l(a,"yacute"))return $e;if(!l(a,"yen"))return $d;if(!l(a,"yuml"))return $c;if(!l(a,"zeta"))return $b;if(!l(a,"zwj"))return $a;if(!l(a,"zwnj"))return _$}else{if(!l(a,"ucirc"))return $m;if(!l(a,"ugrave"))return $l;if(!l(a,"uml"))return $k;if(!l(a,"upsih"))return $j;if(!l(a,"upsilon"))return $i;if(!l(a,"uuml"))return $h;if(!l(a,"weierp"))return $g}}else{var
g=z(a,"thetasym");if(0<=g){if(0>=g)return $v;if(!l(a,"thinsp"))return $u;if(!l(a,"thorn"))return $t;if(!l(a,"tilde"))return $s;if(!l(a,"times"))return $r;if(!l(a,"trade"))return $q;if(!l(a,"uArr"))return $p;if(!l(a,"uacute"))return $o}else{if(!l(a,"sup2"))return $C;if(!l(a,"sup3"))return $B;if(!l(a,"supe"))return $A;if(!l(a,"szlig"))return $z;if(!l(a,"tau"))return $y;if(!l(a,"there4"))return $x;if(!l(a,"theta"))return $w}}}else{var
h=z(a,"rlm");if(0<=h){if(0>=h)return $T;var
i=z(a,"sigma");if(0<=i){if(0>=i)return $L;if(!l(a,"sigmaf"))return $K;if(!l(a,"sim"))return $J;if(!l(a,"spades"))return $I;if(!l(a,"sub"))return $H;if(!l(a,"sube"))return $G;if(!l(a,"sum"))return $F;if(!l(a,"sup"))return $E}else{if(!l(a,"rsaquo"))return $S;if(!l(a,"rsquo"))return $R;if(!l(a,"sbquo"))return $Q;if(!l(a,"scaron"))return $P;if(!l(a,"sdot"))return $O;if(!l(a,"sect"))return $N;if(!l(a,"shy"))return $M}}else{var
j=z(a,"raquo");if(0<=j){if(0>=j)return $1;if(!l(a,"rarr"))return $0;if(!l(a,"rceil"))return $Z;if(!l(a,"rdquo"))return $Y;if(!l(a,"real"))return $X;if(!l(a,"reg"))return $W;if(!l(a,"rfloor"))return $V;if(!l(a,"rho"))return $U}else{if(!l(a,"prod"))return $8;if(!l(a,"prop"))return $7;if(!l(a,"psi"))return $6;if(!l(a,"quot"))return $5;if(!l(a,"rArr"))return $4;if(!l(a,"radic"))return $3;if(!l(a,"rang"))return $2}}}}else{var
k=z(a,"ndash");if(0<=k){if(0>=k)return aaD;var
m=z(a,"or");if(0<=m){if(0>=m)return aan;var
n=z(a,"part");if(0<=n){if(0>=n)return aaf;if(!l(a,"permil"))return aae;if(!l(a,"perp"))return aad;if(!l(a,"phi"))return aac;if(!l(a,"pi"))return aab;if(!l(a,"piv"))return aaa;if(!l(a,"plusmn"))return $$;if(!l(a,"pound"))return $_}else{if(!l(a,"ordf"))return aam;if(!l(a,"ordm"))return aal;if(!l(a,"oslash"))return aak;if(!l(a,"otilde"))return aaj;if(!l(a,"otimes"))return aai;if(!l(a,"ouml"))return aah;if(!l(a,"para"))return aag}}else{var
o=z(a,"oacute");if(0<=o){if(0>=o)return aav;if(!l(a,"ocirc"))return aau;if(!l(a,"oelig"))return aat;if(!l(a,"ograve"))return aas;if(!l(a,"oline"))return aar;if(!l(a,"omega"))return aaq;if(!l(a,"omicron"))return aap;if(!l(a,"oplus"))return aao}else{if(!l(a,"ne"))return aaC;if(!l(a,"ni"))return aaB;if(!l(a,"not"))return aaA;if(!l(a,"notin"))return aaz;if(!l(a,"nsub"))return aay;if(!l(a,"ntilde"))return aax;if(!l(a,"nu"))return aaw}}}else{var
p=z(a,"le");if(0<=p){if(0>=p)return aaT;var
q=z(a,"macr");if(0<=q){if(0>=q)return aaL;if(!l(a,"mdash"))return aaK;if(!l(a,"micro"))return aaJ;if(!l(a,"middot"))return aaI;if(!l(a,Jz))return aaH;if(!l(a,"mu"))return aaG;if(!l(a,"nabla"))return aaF;if(!l(a,"nbsp"))return aaE}else{if(!l(a,"lfloor"))return aaS;if(!l(a,"lowast"))return aaR;if(!l(a,"loz"))return aaQ;if(!l(a,"lrm"))return aaP;if(!l(a,"lsaquo"))return aaO;if(!l(a,"lsquo"))return aaN;if(!l(a,"lt"))return aaM}}else{var
r=z(a,"kappa");if(0<=r){if(0>=r)return aa1;if(!l(a,"lArr"))return aa0;if(!l(a,"lambda"))return aaZ;if(!l(a,"lang"))return aaY;if(!l(a,"laquo"))return aaX;if(!l(a,"larr"))return aaW;if(!l(a,"lceil"))return aaV;if(!l(a,"ldquo"))return aaU}else{if(!l(a,"igrave"))return aa8;if(!l(a,"image"))return aa7;if(!l(a,"infin"))return aa6;if(!l(a,"iota"))return aa5;if(!l(a,"iquest"))return aa4;if(!l(a,"isin"))return aa3;if(!l(a,"iuml"))return aa2}}}}}else{var
s=z(a,"aelig");if(0<=s){if(0>=s)return ab8;var
t=z(a,"delta");if(0<=t){if(0>=t)return abC;var
u=z(a,"fnof");if(0<=u){if(0>=u)return abm;var
v=z(a,"gt");if(0<=v){if(0>=v)return abe;if(!l(a,"hArr"))return abd;if(!l(a,"harr"))return abc;if(!l(a,"hearts"))return abb;if(!l(a,"hellip"))return aba;if(!l(a,"iacute"))return aa$;if(!l(a,"icirc"))return aa_}else{if(!l(a,"forall"))return abl;if(!l(a,"frac12"))return abk;if(!l(a,"frac14"))return abj;if(!l(a,"frac34"))return abi;if(!l(a,"frasl"))return abh;if(!l(a,"gamma"))return abg;if(!l(a,"ge"))return abf}}else{var
w=z(a,"ensp");if(0<=w){if(0>=w)return abu;if(!l(a,"epsilon"))return abt;if(!l(a,"equiv"))return abs;if(!l(a,"eta"))return abr;if(!l(a,"eth"))return abq;if(!l(a,"euml"))return abp;if(!l(a,"euro"))return abo;if(!l(a,"exist"))return abn}else{if(!l(a,"diams"))return abB;if(!l(a,"divide"))return abA;if(!l(a,"eacute"))return abz;if(!l(a,"ecirc"))return aby;if(!l(a,"egrave"))return abx;if(!l(a,bC))return abw;if(!l(a,"emsp"))return abv}}}else{var
x=z(a,"cap");if(0<=x){if(0>=x)return abS;var
y=z(a,"copy");if(0<=y){if(0>=y)return abK;if(!l(a,"crarr"))return abJ;if(!l(a,"cup"))return abI;if(!l(a,"curren"))return abH;if(!l(a,"dArr"))return abG;if(!l(a,"dagger"))return abF;if(!l(a,"darr"))return abE;if(!l(a,"deg"))return abD}else{if(!l(a,"ccedil"))return abR;if(!l(a,"cedil"))return abQ;if(!l(a,"cent"))return abP;if(!l(a,"chi"))return abO;if(!l(a,"circ"))return abN;if(!l(a,"clubs"))return abM;if(!l(a,"cong"))return abL}}else{var
A=z(a,"aring");if(0<=A){if(0>=A)return ab0;if(!l(a,"asymp"))return abZ;if(!l(a,"atilde"))return abY;if(!l(a,"auml"))return abX;if(!l(a,"bdquo"))return abW;if(!l(a,"beta"))return abV;if(!l(a,"brvbar"))return abU;if(!l(a,"bull"))return abT}else{if(!l(a,"agrave"))return ab7;if(!l(a,"alefsym"))return ab6;if(!l(a,"alpha"))return ab5;if(!l(a,"amp"))return ab4;if(!l(a,"and"))return ab3;if(!l(a,"ang"))return ab2;if(!l(a,"apos"))return ab1}}}}else{var
B=z(a,"Nu");if(0<=B){if(0>=B)return acC;var
C=z(a,"Sigma");if(0<=C){if(0>=C)return acm;var
D=z(a,"Uuml");if(0<=D){if(0>=D)return ace;if(!l(a,"Xi"))return acd;if(!l(a,"Yacute"))return acc;if(!l(a,"Yuml"))return acb;if(!l(a,"Zeta"))return aca;if(!l(a,"aacute"))return ab$;if(!l(a,"acirc"))return ab_;if(!l(a,"acute"))return ab9}else{if(!l(a,"THORN"))return acl;if(!l(a,"Tau"))return ack;if(!l(a,"Theta"))return acj;if(!l(a,"Uacute"))return aci;if(!l(a,"Ucirc"))return ach;if(!l(a,"Ugrave"))return acg;if(!l(a,"Upsilon"))return acf}}else{var
E=z(a,"Otilde");if(0<=E){if(0>=E)return acu;if(!l(a,"Ouml"))return act;if(!l(a,"Phi"))return acs;if(!l(a,"Pi"))return acr;if(!l(a,"Prime"))return acq;if(!l(a,"Psi"))return acp;if(!l(a,"Rho"))return aco;if(!l(a,"Scaron"))return acn}else{if(!l(a,"OElig"))return acB;if(!l(a,"Oacute"))return acA;if(!l(a,"Ocirc"))return acz;if(!l(a,"Ograve"))return acy;if(!l(a,"Omega"))return acx;if(!l(a,"Omicron"))return acw;if(!l(a,"Oslash"))return acv}}}else{var
F=z(a,"Eacute");if(0<=F){if(0>=F)return acS;var
G=z(a,"Icirc");if(0<=G){if(0>=G)return acK;if(!l(a,"Igrave"))return acJ;if(!l(a,"Iota"))return acI;if(!l(a,"Iuml"))return acH;if(!l(a,"Kappa"))return acG;if(!l(a,"Lambda"))return acF;if(!l(a,"Mu"))return acE;if(!l(a,"Ntilde"))return acD}else{if(!l(a,"Ecirc"))return acR;if(!l(a,"Egrave"))return acQ;if(!l(a,"Epsilon"))return acP;if(!l(a,"Eta"))return acO;if(!l(a,"Euml"))return acN;if(!l(a,"Gamma"))return acM;if(!l(a,"Iacute"))return acL}}else{var
H=z(a,"Atilde");if(0<=H){if(0>=H)return ac0;if(!l(a,"Auml"))return acZ;if(!l(a,"Beta"))return acY;if(!l(a,"Ccedil"))return acX;if(!l(a,"Chi"))return acW;if(!l(a,"Dagger"))return acV;if(!l(a,"Delta"))return acU;if(!l(a,"ETH"))return acT}else{if(!l(a,"'int'"))return ac7;if(!l(a,"AElig"))return ac6;if(!l(a,"Aacute"))return ac5;if(!l(a,"Acirc"))return ac4;if(!l(a,"Agrave"))return ac3;if(!l(a,"Alpha"))return ac2;if(!l(a,"Aring"))return ac1}}}}}return 0},Gy=function(a,b,c,d){var
f=a;for(;;){var
k=function(a){for(;;){i(a,8);if(0===rz(g(a)))continue;return h(a)}};P(d);var
j=g(d),o=gD<j?aO<j?1:aT<j?2:1:v("\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x04\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x05\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x06\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x06\x02\b",j+1|0)-1|0;if(7<o>>>0)var
e=h(d);else
switch(o){case
0:var
e=3;break;case
1:var
e=k(d);break;case
2:var
e=4;break;case
3:i(d,4);var
e=0===bx(g(d))?4:h(d);break;case
4:i(d,8);var
p=Gn(g(d));if(0===p){var
q=F4(g(d));if(0===q)for(;;){var
r=F5(g(d));if(0===r)continue;var
e=1===r?6:h(d);break}else if(1===q&&0===U(g(d)))for(;;){var
s=Gk(g(d));if(0===s)continue;var
e=1===s?5:h(d);break}else
var
e=h(d)}else if(1===p&&0===N(g(d))){var
t=b6(g(d));if(0===t){var
u=b6(g(d));if(0===u){var
w=b6(g(d));if(0===w){var
x=b6(g(d));if(0===x){var
y=b6(g(d));if(0===y)var
z=b6(g(d)),e=0===z?0===Gg(g(d))?7:h(d):1===z?7:h(d);else
var
e=1===y?7:h(d)}else
var
e=1===x?7:h(d)}else
var
e=1===w?7:h(d)}else
var
e=1===u?7:h(d)}else
var
e=1===t?7:h(d)}else
var
e=h(d);break;case
5:var
e=0;break;case
6:i(d,1);var
e=0===rz(g(d))?k(d):h(d);break;default:i(d,2);var
e=0===rz(g(d))?k(d):h(d)}if(8<e>>>0)return C(ac8);switch(e){case
0:i9(d);return f;case
1:return rD(f,$(f,d),ac_,ac9);case
2:return rD(f,$(f,d),ada,ac$);case
3:return bW(f,$(f,d));case
4:var
A=E(d);M(c,A);M(b,A);var
f=bd(f,d);continue;case
5:var
l=E(d),G=aY(l,3,H(l)-4|0);M(c,l);cJ(b,b2(I(adb,G)));continue;case
6:var
m=E(d),J=aY(m,2,H(m)-3|0);M(c,m);cJ(b,b2(J));continue;case
7:var
n=E(d),B=aY(n,1,H(n)-2|0);M(c,n);var
D=Gx(B);if(D)cJ(b,D[1]);else
M(b,I(add,I(B,adc)));continue;default:var
F=E(d);M(c,F);M(b,F);continue}}},adi=function(a,b){P(b);var
Y=_b(g(b));if(14<Y>>>0)var
c=h(b);else
switch(Y){case
0:var
c=0;break;case
1:var
c=14;break;case
2:i(b,2);if(0===cL(g(b)))for(;;){i(b,2);if(0===cL(g(b)))continue;var
c=h(b);break}else
var
c=h(b);break;case
3:var
c=1;break;case
4:i(b,1);var
c=0===bx(g(b))?1:h(b);break;case
5:var
c=12;break;case
6:var
c=13;break;case
7:var
c=10;break;case
8:i(b,6);var
Z=mf(g(b)),c=0===Z?4:1===Z?3:h(b);break;case
9:var
c=9;break;case
10:var
c=5;break;case
11:var
c=11;break;case
12:var
c=7;break;case
13:i(b,14);if(0===h2(g(b))){var
_=ir(g(b));if(0===_)var
c=0===U(g(b))?0===U(g(b))?0===U(g(b))?13:h(b):h(b):h(b);else if(1===_&&0===U(g(b)))for(;;){var
ab=iq(g(b));if(0===ab)continue;var
c=1===ab?13:h(b);break}else
var
c=h(b)}else
var
c=h(b);break;default:var
c=8}if(14<c>>>0)return C(adj);switch(c){case
0:return[0,a,X];case
1:return[2,bd(a,b)];case
2:return[2,a];case
3:var
aq=a0(a,b),ac=ad(aa),ae=jd(a,ac,b),ah=ae[1];return[1,ah,b7(ah,aq,ae[2],ac,0)];case
4:var
ar=a0(a,b),ai=ad(aa),aj=it(a,ai,b),ak=aj[1];return[1,ak,b7(ak,ar,aj[2],ai,1)];case
5:return[0,a,98];case
6:return[0,a,bY];case
7:return[0,a,99];case
8:return[0,a,0];case
9:return[0,a,86];case
10:return[0,a,10];case
11:return[0,a,82];case
12:var
r=E(b),as=a0(a,b),j=ad(aa),e=ad(aa);M(e,r);var
al=V(r,"'"),k=a;for(;;){P(b);var
n=g(b),y=39<n?aO<n?1:aT<n?2:1:v("\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x04\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x05\x02\x02\x02\x06\x07",n+1|0)-1|0;if(6<y>>>0)var
d=h(b);else
switch(y){case
0:var
d=2;break;case
1:for(;;){i(b,7);var
l=g(b),an=-1<l?37<l?39<l?aT<l?aO<l?0:-1:0:-1:v("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x01\x01\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x01\x01\x01",l)-1|0:-1;if(0===an)continue;var
d=h(b);break}break;case
2:var
d=3;break;case
3:i(b,3);var
d=0===bx(g(b))?3:h(b);break;case
4:var
d=1;break;case
5:i(b,7);var
z=Gn(g(b));if(0===z){var
A=F4(g(b));if(0===A)for(;;){var
B=F5(g(b));if(0===B)continue;var
d=1===B?5:h(b);break}else if(1===A&&0===U(g(b)))for(;;){var
D=Gk(g(b));if(0===D)continue;var
d=1===D?4:h(b);break}else
var
d=h(b)}else if(1===z&&0===N(g(b))){var
F=b6(g(b));if(0===F){var
G=b6(g(b));if(0===G){var
J=b6(g(b));if(0===J){var
K=b6(g(b));if(0===K){var
L=b6(g(b));if(0===L)var
O=b6(g(b)),d=0===O?0===Gg(g(b))?6:h(b):1===O?6:h(b);else
var
d=1===L?6:h(b)}else
var
d=1===K?6:h(b)}else
var
d=1===J?6:h(b)}else
var
d=1===G?6:h(b)}else
var
d=1===F?6:h(b)}else
var
d=h(b);break;default:var
d=0}if(7<d>>>0)var
m=C(ade);else
switch(d){case
0:if(!al){bU(e,39);bU(j,39);continue}var
m=k;break;case
1:if(al){bU(e,34);bU(j,34);continue}var
m=k;break;case
2:var
m=bW(k,$(k,b));break;case
3:var
Q=E(b);M(e,Q);M(j,Q);var
k=bd(k,b);continue;case
4:var
o=E(b),ao=aY(o,3,H(o)-4|0);M(e,o);cJ(j,b2(I(adf,ao)));continue;case
5:var
p=E(b),ap=aY(p,2,H(p)-3|0);M(e,p);cJ(j,b2(ap));continue;case
6:var
q=E(b),S=aY(q,1,H(q)-2|0);M(e,q);var
T=Gx(S);if(T)cJ(j,T[1]);else
M(j,I(adh,I(S,adg)));continue;default:var
W=E(b);M(e,W);M(j,W);continue}var
at=by(m,b);M(e,r);var
au=az(j),av=az(e);return[0,m,[10,[0,m[1],as,at],au,av]]}case
13:var
am=b[6];for(;;){P(b);var
s=g(b),u=af<s?1:v("\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x02\x02\x02\x02\x02\x02\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x02\x04\x02\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03",s+1|0)-1|0;if(3<u>>>0)var
f=h(b);else
switch(u){case
0:var
f=1;break;case
1:var
f=2;break;case
2:var
f=0;break;default:i(b,2);if(0===h2(g(b))){var
w=ir(g(b));if(0===w)var
f=0===U(g(b))?0===U(g(b))?0===U(g(b))?0:h(b):h(b):h(b);else if(1===w&&0===U(g(b)))for(;;){var
x=iq(g(b));if(0===x)continue;var
f=1===x?0:h(b);break}else
var
f=h(b)}else
var
f=h(b)}if(2<f>>>0)throw t([0,R,_d],1);switch(f){case
0:continue;case
1:break;default:if(rs(FF(b)))continue;FH(b,1)}var
aw=b[3];rk(b,am);var
ax=ag(b),ay=kh(a,am,aw);return[0,a,[8,kc(ax),ay]]}default:return[0,a,[7,E(b)]]}},adl=function(a,b){P(b);var
c=g(b),f=-1<c?iC<c?iF<c?iS<c?iT<c?0:1:iZ<c?0:1:iK<c?iU<c?iD<c?0:1:iJ<c?0:1:aT<c?aO<c?0:2:iG<c?0:1:v("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x02\x03\x02\x02\x04\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x02\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x05\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x06\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x02\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x02\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01",c)-1|0:-1;if(5<f>>>0)var
d=h(b);else
switch(f){case
0:var
d=5;break;case
1:i(b,1);if(0===cL(g(b)))for(;;){i(b,1);if(0===cL(g(b)))continue;var
d=h(b);break}else
var
d=h(b);break;case
2:var
d=0;break;case
3:i(b,0);var
d=0===bx(g(b))?0:h(b);break;case
4:i(b,5);var
j=mf(g(b)),d=0===j?3:1===j?2:h(b);break;default:var
d=4}if(5<d>>>0)return C(adm);switch(d){case
0:return[2,bd(a,b)];case
1:return[2,a];case
2:var
u=a0(a,b),k=ad(aa),l=jd(a,k,b),m=l[1];return[1,m,b7(m,u,l[2],k,0)];case
3:var
w=a0(a,b),n=ad(aa),o=it(a,n,b),p=o[1];return[1,p,b7(p,w,o[2],n,1)];case
4:var
x=a0(a,b),q=ad(aa),r=ad(aa),s=Gw(a,q,r,b),e=s[1],y=s[2],z=by(e,b),A=[0,e[1],x,z],B=az(r);return[0,e,[3,[0,A,az(q),B,0,y]]];default:var
t=bW(a,$(a,b));return[0,t,[3,[0,$(t,b),ado,adn,0,1]]]}},adp=function(a,b){function
e(a){for(;;){i(a,29);if(0===N(g(a)))continue;return h(a)}}function
k(a){i(a,28);var
b=aw(g(a));if(0!==b)return 1===b?e(a):h(a);for(;;){i(a,26);if(0===N(g(a)))continue;return h(a)}}function
j(a){i(a,27);var
b=aw(g(a));if(0!==b)return 1===b?e(a):h(a);for(;;){i(a,25);if(0===N(g(a)))continue;return h(a)}}function
n(a){i(a,30);var
b=ja(g(a));if(2<b>>>0)return h(a);switch(b){case
0:return e(a);case
1:for(;;){i(a,30);var
c=cN(g(a));if(3<c>>>0)return h(a);switch(c){case
0:return e(a);case
1:continue;case
2:a:for(;;){if(0!==Q(g(a)))return h(a);for(;;){i(a,30);var
d=cN(g(a));if(3<d>>>0)return h(a);switch(d){case
0:return e(a);case
1:continue;case
2:continue a;default:return j(a)}}}default:return j(a)}}default:return j(a)}}function
L(a){b:for(;;){if(0!==Q(g(a)))return h(a);for(;;){i(a,30);var
b=Gf(g(a));if(4<b>>>0)return h(a);switch(b){case
0:return e(a);case
1:return n(a);case
2:continue;case
3:continue b;default:return k(a)}}}}function
K(a){for(;;){i(a,19);if(0===N(g(a)))continue;return h(a)}}function
J(a){for(;;){i(a,19);if(0===N(g(a)))continue;return h(a)}}function
I(a){for(;;){i(a,13);if(0===N(g(a)))continue;return h(a)}}function
H(a){for(;;){i(a,13);if(0===N(g(a)))continue;return h(a)}}function
G(a){for(;;){i(a,9);if(0===N(g(a)))continue;return h(a)}}function
F(a){for(;;){i(a,9);if(0===N(g(a)))continue;return h(a)}}function
r(a){for(;;){i(a,15);if(0===N(g(a)))continue;return h(a)}}function
D(a){i(a,15);var
b=aw(g(a));if(0!==b)return 1===b?r(a):h(a);for(;;){i(a,15);if(0===N(g(a)))continue;return h(a)}}function
p(a){for(;;){i(a,23);if(0===N(g(a)))continue;return h(a)}}function
y(a){i(a,22);var
b=aw(g(a));if(0!==b)return 1===b?p(a):h(a);for(;;){i(a,21);if(0===N(g(a)))continue;return h(a)}}function
m(a){for(;;){i(a,23);if(0===N(g(a)))continue;return h(a)}}function
o(a){i(a,22);var
b=aw(g(a));if(0!==b)return 1===b?m(a):h(a);for(;;){i(a,21);if(0===N(g(a)))continue;return h(a)}}function
x(a){b:for(;;){if(0!==Q(g(a)))return h(a);for(;;){i(a,24);var
b=cN(g(a));if(3<b>>>0)return h(a);switch(b){case
0:return m(a);case
1:continue;case
2:continue b;default:return o(a)}}}}function
f(a){i(a,29);var
b=Gh(g(a));if(3<b>>>0)return h(a);switch(b){case
0:return e(a);case
1:var
c=hY(g(a));if(0===c)for(;;){i(a,24);var
d=ja(g(a));if(2<d>>>0)return h(a);switch(d){case
0:return m(a);case
1:continue;default:return o(a)}}if(1!==c)return h(a);for(;;){i(a,24);var
f=cN(g(a));if(3<f>>>0)return h(a);switch(f){case
0:return m(a);case
1:continue;case
2:return x(a);default:return o(a)}}case
2:for(;;){i(a,24);var
j=ja(g(a));if(2<j>>>0)return h(a);switch(j){case
0:return p(a);case
1:continue;default:return y(a)}}default:for(;;){i(a,24);var
k=cN(g(a));if(3<k>>>0)return h(a);switch(k){case
0:return p(a);case
1:continue;case
2:return x(a);default:return y(a)}}}}function
q(a){i(a,30);var
b=F9(g(a));if(3<b>>>0)return h(a);switch(b){case
0:return e(a);case
1:for(;;){i(a,30);var
c=hZ(g(a));if(4<c>>>0)return h(a);switch(c){case
0:return e(a);case
1:continue;case
2:return f(a);case
3:a:for(;;){if(0!==Q(g(a)))return h(a);for(;;){i(a,30);var
d=hZ(g(a));if(4<d>>>0)return h(a);switch(d){case
0:return e(a);case
1:continue;case
2:return f(a);case
3:continue a;default:return j(a)}}}default:return j(a)}}case
2:return f(a);default:return j(a)}}function
B(a){return 0===mc(g(a))?0===l_(g(a))?0===Gj(g(a))?0===F$(g(a))?0===Ga(g(a))?0===l9(g(a))?0===kf(g(a))?0===mc(g(a))?0===h2(g(a))?0===rC(g(a))?0===is(g(a))?3:h(a):h(a):h(a):h(a):h(a):h(a):h(a):h(a):h(a):h(a):h(a)}function
A(a){i(a,3);return 0===Gm(g(a))?3:h(a)}function
as(a){var
d=_a(g(a));if(31<d>>>0)return h(a);switch(d){case
0:return 66;case
1:return 67;case
2:i(a,1);if(0!==cL(g(a)))return h(a);for(;;){i(a,1);if(0===cL(g(a)))continue;return h(a)}case
3:return 0;case
4:i(a,0);return 0===bx(g(a))?0:h(a);case
5:return 6;case
6:return 65;case
7:i(a,67);if(0!==kf(g(a)))return h(a);var
l=g(a),ak=cD<l?ca<l?-1:0:-1;if(0!==ak)return h(a);if(0!==is(g(a)))return h(a);if(0!==kf(g(a)))return h(a);var
m=g(a),al=aV<m?bp<m?-1:0:-1;return 0===al?0===rA(g(a))?31:h(a):h(a);case
8:i(a,58);var
o=g(a),am=37<o?38<o?-1:0:-1;return 0===am?55:h(a);case
9:return 38;case
10:return 39;case
11:i(a,53);return 0===Gl(g(a))?4:h(a);case
12:return 61;case
13:return 43;case
14:return 62;case
15:i(a,41);var
p=jc(g(a));if(0===p)return 0===ry(g(a))?40:h(a);if(1!==p)return h(a);for(;;){i(a,30);var
s=hZ(g(a));if(4<s>>>0)return h(a);switch(s){case
0:return e(a);case
1:continue;case
2:return f(a);case
3:a:for(;;){if(0!==Q(g(a)))return h(a);for(;;){i(a,30);var
t=hZ(g(a));if(4<t>>>0)return h(a);switch(t){case
0:return e(a);case
1:continue;case
2:return f(a);case
3:continue a;default:return j(a)}}}default:return j(a)}}case
16:i(a,67);var
u=mf(g(a));if(0!==u)return 1===u?5:h(a);i(a,2);var
w=l3(g(a));if(2<w>>>0)return h(a);switch(w){case
0:for(;;){var
x=l3(g(a));if(2<x>>>0)return h(a);switch(x){case
0:continue;case
1:return A(a);default:return B(a)}}case
1:return A(a);default:return B(a)}case
17:i(a,30);var
y=Gc(g(a));if(8<y>>>0)return h(a);switch(y){case
0:return e(a);case
1:return q(a);case
2:for(;;){i(a,16);var
z=Gi(g(a));if(4<z>>>0)return h(a);switch(z){case
0:return r(a);case
1:return n(a);case
2:continue;case
3:for(;;){i(a,15);var
C=l2(g(a));if(3<C>>>0)return h(a);switch(C){case
0:return r(a);case
1:return n(a);case
2:continue;default:return D(a)}}default:return D(a)}}case
3:for(;;){i(a,30);var
E=l2(g(a));if(3<E>>>0)return h(a);switch(E){case
0:return e(a);case
1:return n(a);case
2:continue;default:return k(a)}}case
4:i(a,29);var
M=Gb(g(a));if(0===M)return e(a);if(1!==M)return h(a);for(;;){i(a,10);var
O=mg(g(a));if(3<O>>>0)return h(a);switch(O){case
0:return F(a);case
1:continue;case
2:a:for(;;){if(0!==cM(g(a)))return h(a);for(;;){i(a,10);var
P=mg(g(a));if(3<P>>>0)return h(a);switch(P){case
0:return G(a);case
1:continue;case
2:continue a;default:i(a,8);var
R=aw(g(a));if(0!==R)return 1===R?G(a):h(a);for(;;){i(a,7);if(0===N(g(a)))continue;return h(a)}}}}default:i(a,8);var
S=aw(g(a));if(0!==S)return 1===S?F(a):h(a);for(;;){i(a,7);if(0===N(g(a)))continue;return h(a)}}}case
5:return f(a);case
6:i(a,29);var
T=Gd(g(a));if(0===T)return e(a);if(1!==T)return h(a);for(;;){i(a,14);var
V=me(g(a));if(3<V>>>0)return h(a);switch(V){case
0:return H(a);case
1:continue;case
2:a:for(;;){if(0!==bc(g(a)))return h(a);for(;;){i(a,14);var
W=me(g(a));if(3<W>>>0)return h(a);switch(W){case
0:return I(a);case
1:continue;case
2:continue a;default:i(a,12);var
X=aw(g(a));if(0!==X)return 1===X?I(a):h(a);for(;;){i(a,11);if(0===N(g(a)))continue;return h(a)}}}}default:i(a,12);var
Y=aw(g(a));if(0!==Y)return 1===Y?H(a):h(a);for(;;){i(a,11);if(0===N(g(a)))continue;return h(a)}}}case
7:i(a,29);var
Z=F6(g(a));if(0===Z)return e(a);if(1!==Z)return h(a);for(;;){i(a,20);var
_=mh(g(a));if(3<_>>>0)return h(a);switch(_){case
0:return J(a);case
1:continue;case
2:a:for(;;){if(0!==U(g(a)))return h(a);for(;;){i(a,20);var
$=mh(g(a));if(3<$>>>0)return h(a);switch($){case
0:return K(a);case
1:continue;case
2:continue a;default:i(a,18);var
aa=aw(g(a));if(0!==aa)return 1===aa?K(a):h(a);for(;;){i(a,17);if(0===N(g(a)))continue;return h(a)}}}}default:i(a,18);var
ab=aw(g(a));if(0!==ab)return 1===ab?J(a):h(a);for(;;){i(a,17);if(0===N(g(a)))continue;return h(a)}}}default:return k(a)}case
18:i(a,30);var
ac=l5(g(a));if(5<ac>>>0)return h(a);switch(ac){case
0:return e(a);case
1:return q(a);case
2:for(;;){i(a,30);var
ad=l5(g(a));if(5<ad>>>0)return h(a);switch(ad){case
0:return e(a);case
1:return q(a);case
2:continue;case
3:return f(a);case
4:return L(a);default:return k(a)}}case
3:return f(a);case
4:return L(a);default:return k(a)}case
19:return 44;case
20:return 42;case
21:return 49;case
22:i(a,51);var
ae=g(a),an=61<ae?62<ae?-1:0:-1;return 0===an?59:h(a);case
23:return 50;case
24:i(a,46);return 0===ry(g(a))?45:h(a);case
25:return 32;case
26:i(a,67);if(0!==h2(g(a)))return h(a);var
af=ir(g(a));if(0===af)return 0===U(g(a))?0===U(g(a))?0===U(g(a))?65:h(a):h(a):h(a);if(1!==af)return h(a);if(0!==U(g(a)))return h(a);for(;;){var
ag=iq(g(a));if(0===ag)continue;return 1===ag?65:h(a)}case
27:return 33;case
28:i(a,65);if(0!==is(g(a)))return h(a);if(0!==l9(g(a)))return h(a);if(0!==rC(g(a)))return h(a);if(0!==is(g(a)))return h(a);if(0!==kg(g(a)))return h(a);if(0!==rA(g(a)))return h(a);var
b=g(a),ah=41<b?63<b?-1:v("\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02",b+DU|0)-1|0:-1;return 0===ah?64:1===ah?63:h(a);case
29:i(a,34);var
ai=g(a),ao=ce<ai?jL<ai?-1:0:-1;return 0===ao?36:h(a);case
30:i(a,57);var
c=g(a),aj=ce<c?gD<c?-1:v(nE,c-124|0)-1|0:-1;return 0===aj?56:1===aj?37:h(a);default:return 35}}P(b);var
O=as(b);if(67<O>>>0)return C(adq);var
w=O;if(34>w)switch(w){case
0:return[2,bd(a,b)];case
1:return[2,a];case
2:var
au=a0(a,b),R=ad(aa),S=it(a,R,b),T=S[1];return[1,T,b7(T,au,S[2],R,1)];case
3:var
W=E(b);if(!a[5]){var
ax=a0(a,b),s=ad(aa);M(s,W);var
_=it(a,s,b),ab=_[1];return[1,ab,b7(ab,ax,_[2],s,1)]}var
av=a[4]?Gq(a,$(a,b),W):a,Y=lV(1,av),Z=lQ(b);if(V(kb(b,Z-1|0,1),iL)&&l(kb(b,Z-2|0,1),iL))return[0,Y,86];return[2,Y];case
4:if(a[4])return[2,lV(0,a)];i9(b);P(b);var
ay=0===F8(g(b))?0:h(b);return 0===ay?[0,a,aV]:C(adr);case
5:var
aA=a0(a,b),ac=ad(aa),ae=jd(a,ac,b),ah=ae[1];return[1,ah,b7(ah,aA,ae[2],ac,0)];case
6:var
ai=E(b),aB=a0(a,b),aj=ad(aa),t=ad(aa);M(t,ai);var
u=Gv(a,ai,aj,t,0,b),ak=u[1],aC=u[3],aD=[0,ak[1],aB,u[2]],aE=az(t);return[0,ak,[2,[0,aD,az(aj),aE,aC]]];case
7:return at(a,b,function(a,b){P(b);if(0===bw(g(b))&&0===l7(g(b))&&0===cM(g(b)))for(;;){var
e=l0(g(b));if(2<e>>>0)var
c=h(b);else
switch(e){case
0:continue;case
1:a:for(;;){if(0===cM(g(b)))for(;;){var
f=l0(g(b));if(2<f>>>0)var
d=h(b);else
switch(f){case
0:continue;case
1:continue a;default:var
d=0}break}else
var
d=h(b);var
c=d;break}break;default:var
c=0}break}else
var
c=h(b);return 0===c?[0,a,b9(0,ag(b))]:C(ads)});case
8:return[0,a,b9(0,ag(b))];case
9:return at(a,b,function(a,b){P(b);if(0===bw(g(b))&&0===l7(g(b))&&0===cM(g(b)))for(;;){i(b,0);var
d=lZ(g(b));if(0===d)continue;if(1===d)a:for(;;){if(0===cM(g(b)))for(;;){i(b,0);var
f=lZ(g(b));if(0===f)continue;if(1===f)continue a;var
e=h(b);break}else
var
e=h(b);var
c=e;break}else
var
c=h(b);break}else
var
c=h(b);return 0===c?[0,a,b8(0,ag(b))]:C(adt)});case
10:return[0,a,b8(0,ag(b))];case
11:return at(a,b,function(a,b){P(b);if(0===bw(g(b))&&0===ma(g(b))&&0===bc(g(b)))for(;;){var
e=l6(g(b));if(2<e>>>0)var
c=h(b);else
switch(e){case
0:continue;case
1:a:for(;;){if(0===bc(g(b)))for(;;){var
f=l6(g(b));if(2<f>>>0)var
d=h(b);else
switch(f){case
0:continue;case
1:continue a;default:var
d=0}break}else
var
d=h(b);var
c=d;break}break;default:var
c=0}break}else
var
c=h(b);return 0===c?[0,a,b9(1,ag(b))]:C(adu)});case
12:return[0,a,b9(1,ag(b))];case
13:return at(a,b,function(a,b){P(b);if(0===bw(g(b))&&0===ma(g(b))&&0===bc(g(b)))for(;;){i(b,0);var
d=l4(g(b));if(0===d)continue;if(1===d)a:for(;;){if(0===bc(g(b)))for(;;){i(b,0);var
f=l4(g(b));if(0===f)continue;if(1===f)continue a;var
e=h(b);break}else
var
e=h(b);var
c=e;break}else
var
c=h(b);break}else
var
c=h(b);return 0===c?[0,a,b8(3,ag(b))]:C(adv)});case
14:return[0,a,b8(3,ag(b))];case
15:return at(a,b,function(a,b){P(b);if(0===bw(g(b))&&0===bc(g(b)))for(;;){i(b,0);if(0===bc(g(b)))continue;var
c=h(b);break}else
var
c=h(b);return 0===c?[0,a,b8(1,ag(b))]:C(adw)});case
16:return[0,a,b8(1,ag(b))];case
17:return at(a,b,function(a,b){P(b);if(0===bw(g(b))&&0===lX(g(b))&&0===U(g(b)))for(;;){var
e=l1(g(b));if(2<e>>>0)var
c=h(b);else
switch(e){case
0:continue;case
1:a:for(;;){if(0===U(g(b)))for(;;){var
f=l1(g(b));if(2<f>>>0)var
d=h(b);else
switch(f){case
0:continue;case
1:continue a;default:var
d=0}break}else
var
d=h(b);var
c=d;break}break;default:var
c=0}break}else
var
c=h(b);return 0===c?[0,a,b9(2,ag(b))]:C(adx)});case
18:return[0,a,b9(2,ag(b))];case
19:return at(a,b,function(a,b){P(b);if(0===bw(g(b))&&0===lX(g(b))&&0===U(g(b)))for(;;){i(b,0);var
d=md(g(b));if(0===d)continue;if(1===d)a:for(;;){if(0===U(g(b)))for(;;){i(b,0);var
f=md(g(b));if(0===f)continue;if(1===f)continue a;var
e=h(b);break}else
var
e=h(b);var
c=e;break}else
var
c=h(b);break}else
var
c=h(b);return 0===c?[0,a,b8(4,ag(b))]:C(ady)});case
20:return[0,a,b8(4,ag(b))];case
21:return at(a,b,function(a,b){function
i(a){for(;;){var
b=b5(g(a));if(2<b>>>0)return h(a);switch(b){case
0:continue;case
1:a:for(;;){if(0!==Q(g(a)))return h(a);for(;;){var
c=b5(g(a));if(2<c>>>0)return h(a);switch(c){case
0:continue;case
1:continue a;default:return 0}}}default:return 0}}}function
f(a){for(;;){var
b=jb(g(a));if(0===b)continue;return 1===b?0:h(a)}}function
d(a){var
b=mi(g(a));if(2<b>>>0)return h(a);switch(b){case
0:var
c=hY(g(a));return 0===c?f(a):1===c?i(a):h(a);case
1:return f(a);default:return i(a)}}function
j(a){var
b=mb(g(a));if(0!==b)return 1===b?d(a):h(a);for(;;){var
c=bn(g(a));if(2<c>>>0)return h(a);switch(c){case
0:continue;case
1:return d(a);default:a:for(;;){if(0!==Q(g(a)))return h(a);for(;;){var
e=bn(g(a));if(2<e>>>0)return h(a);switch(e){case
0:continue;case
1:return d(a);default:continue a}}}}}}P(b);var
k=hX(g(b));if(2<k>>>0)var
c=h(b);else
switch(k){case
0:if(0===Q(g(b)))for(;;){var
l=bn(g(b));if(2<l>>>0)var
c=h(b);else
switch(l){case
0:continue;case
1:var
c=d(b);break;default:a:for(;;){if(0===Q(g(b)))for(;;){var
m=bn(g(b));if(2<m>>>0)var
e=h(b);else
switch(m){case
0:continue;case
1:var
e=d(b);break;default:continue a}break}else
var
e=h(b);var
c=e;break}}break}else
var
c=h(b);break;case
1:var
n=lY(g(b)),c=0===n?j(b):1===n?d(b):h(b);break;default:for(;;){var
o=l$(g(b));if(2<o>>>0)var
c=h(b);else
switch(o){case
0:var
c=j(b);break;case
1:continue;default:var
c=d(b)}break}}if(0!==c)return C(adz);var
p=ag(b),q=a1(a,$(a,b),48);return[0,q,b9(2,p)]});case
22:var
aF=ag(b),aG=a1(a,$(a,b),48);return[0,aG,b9(2,aF)];case
23:return at(a,b,function(a,b){function
j(a){for(;;){i(a,0);var
b=h0(g(a));if(0===b)continue;if(1!==b)return h(a);a:for(;;){if(0!==Q(g(a)))return h(a);for(;;){i(a,0);var
c=h0(g(a));if(0===c)continue;if(1===c)continue a;return h(a)}}}}function
f(a){for(;;){i(a,0);if(0===Q(g(a)))continue;return h(a)}}function
d(a){var
b=mi(g(a));if(2<b>>>0)return h(a);switch(b){case
0:var
c=hY(g(a));return 0===c?f(a):1===c?j(a):h(a);case
1:return f(a);default:return j(a)}}function
k(a){var
b=mb(g(a));if(0!==b)return 1===b?d(a):h(a);for(;;){var
c=bn(g(a));if(2<c>>>0)return h(a);switch(c){case
0:continue;case
1:return d(a);default:a:for(;;){if(0!==Q(g(a)))return h(a);for(;;){var
e=bn(g(a));if(2<e>>>0)return h(a);switch(e){case
0:continue;case
1:return d(a);default:continue a}}}}}}P(b);var
l=hX(g(b));if(2<l>>>0)var
c=h(b);else
switch(l){case
0:if(0===Q(g(b)))for(;;){var
m=bn(g(b));if(2<m>>>0)var
c=h(b);else
switch(m){case
0:continue;case
1:var
c=d(b);break;default:a:for(;;){if(0===Q(g(b)))for(;;){var
n=bn(g(b));if(2<n>>>0)var
e=h(b);else
switch(n){case
0:continue;case
1:var
e=d(b);break;default:continue a}break}else
var
e=h(b);var
c=e;break}}break}else
var
c=h(b);break;case
1:var
o=lY(g(b)),c=0===o?k(b):1===o?d(b):h(b);break;default:for(;;){var
p=l$(g(b));if(2<p>>>0)var
c=h(b);else
switch(p){case
0:var
c=k(b);break;case
1:continue;default:var
c=d(b)}break}}return 0===c?[0,a,b8(4,ag(b))]:C(adA)});case
24:return[0,a,b8(4,ag(b))];case
25:return at(a,b,function(a,b){function
f(a){for(;;){var
b=b5(g(a));if(2<b>>>0)return h(a);switch(b){case
0:continue;case
1:a:for(;;){if(0!==Q(g(a)))return h(a);for(;;){var
c=b5(g(a));if(2<c>>>0)return h(a);switch(c){case
0:continue;case
1:continue a;default:return 0}}}default:return 0}}}function
d(a){var
b=jb(g(a));return 0===b?f(a):1===b?0:h(a)}P(b);var
i=hX(g(b));if(2<i>>>0)var
c=h(b);else
switch(i){case
0:var
c=0===Q(g(b))?f(b):h(b);break;case
1:for(;;){var
j=jc(g(b));if(0===j)var
c=d(b);else{if(1===j)continue;var
c=h(b)}break}break;default:for(;;){var
k=h1(g(b));if(2<k>>>0)var
c=h(b);else
switch(k){case
0:var
c=d(b);break;case
1:continue;default:a:for(;;){if(0===Q(g(b)))for(;;){var
l=h1(g(b));if(2<l>>>0)var
e=h(b);else
switch(l){case
0:var
e=d(b);break;case
1:continue;default:continue a}break}else
var
e=h(b);var
c=e;break}}break}}if(0!==c)return C(adB);var
m=ag(b),n=a1(a,$(a,b),39);return[0,n,b9(2,m)]});case
26:return at(a,b,function(a,b){P(b);var
e=hY(g(b));if(0===e)for(;;){var
f=jb(g(b));if(0===f)continue;var
c=1===f?0:h(b);break}else if(1===e)for(;;){var
i=b5(g(b));if(2<i>>>0)var
c=h(b);else
switch(i){case
0:continue;case
1:a:for(;;){if(0===Q(g(b)))for(;;){var
j=b5(g(b));if(2<j>>>0)var
d=h(b);else
switch(j){case
0:continue;case
1:continue a;default:var
d=0}break}else
var
d=h(b);var
c=d;break}break;default:var
c=0}break}else
var
c=h(b);return 0===c?[0,a,b9(2,ag(b))]:C(adC)});case
27:var
aH=ag(b),aI=a1(a,$(a,b),39);return[0,aI,b9(2,aH)];case
28:return[0,a,b9(2,ag(b))];case
29:return at(a,b,function(a,b){function
f(a){for(;;){i(a,0);var
b=h0(g(a));if(0===b)continue;if(1!==b)return h(a);a:for(;;){if(0!==Q(g(a)))return h(a);for(;;){i(a,0);var
c=h0(g(a));if(0===c)continue;if(1===c)continue a;return h(a)}}}}function
d(a){i(a,0);return 0===Q(g(a))?f(a):h(a)}P(b);var
j=hX(g(b));if(2<j>>>0)var
c=h(b);else
switch(j){case
0:var
c=0===Q(g(b))?f(b):h(b);break;case
1:for(;;){i(b,0);var
k=jc(g(b));if(0===k)var
c=d(b);else{if(1===k)continue;var
c=h(b)}break}break;default:for(;;){i(b,0);var
l=h1(g(b));if(2<l>>>0)var
c=h(b);else
switch(l){case
0:var
c=d(b);break;case
1:continue;default:a:for(;;){if(0===Q(g(b)))for(;;){i(b,0);var
m=h1(g(b));if(2<m>>>0)var
e=h(b);else
switch(m){case
0:var
e=d(b);break;case
1:continue;default:continue a}break}else
var
e=h(b);var
c=e;break}}break}}return 0===c?[0,a,b8(4,ag(b))]:C(adD)});case
30:return[0,a,b8(4,ag(b))];case
31:return[0,a,66];case
32:return[0,a,6];default:return[0,a,7]}switch(w){case
34:return[0,a,0];case
35:return[0,a,1];case
36:return[0,a,2];case
37:return[0,a,3];case
38:return[0,a,4];case
39:return[0,a,5];case
40:return[0,a,12];case
41:return[0,a,10];case
42:return[0,a,8];case
43:return[0,a,9];case
44:return[0,a,86];case
45:return[0,a,83];case
46:return[0,a,85];case
47:return[0,a,6];case
48:return[0,a,7];case
49:return[0,a,98];case
50:return[0,a,99];case
51:return[0,a,82];case
52:return[0,a,85];case
53:return[0,a,aV];case
54:return[0,a,86];case
55:return[0,a,88];case
56:return[0,a,87];case
57:return[0,a,89];case
58:return[0,a,91];case
59:return[0,a,11];case
60:return[0,a,82];case
61:return[0,a,cD];case
62:return[0,a,ca];case
63:return[0,a,nj];case
64:return[0,a,oE];case
65:var
al=b[6];Go(b);var
aJ=kh(a,al,b[3]);rk(b,al);var
am=ag(b),an=Gt(a,am),c=an[2],d=an[1],ap=z(c,pq);if(0<=ap){if(0>=ap)return[0,d,id];var
aq=z(c,k2);if(0<=aq){if(0>=aq)return[0,d,k8];if(!l(c,hI))return[0,d,31];if(!l(c,hJ))return[0,d,46];if(!l(c,nh))return[0,d,jL];if(!l(c,pO))return[0,d,af];if(!l(c,hH))return[0,d,d_]}else{if(!l(c,om))return[0,d,ce];if(!l(c,iY))return[0,d,29];if(!l(c,jI))return[0,d,iH];if(!l(c,jO))return[0,d,qu];if(!l(c,bR))return[0,d,42];if(!l(c,jB))return[0,d,jv]}}else{var
ar=z(c,f9);if(0<=ar){if(0>=ar)return[0,d,41];if(!l(c,hD))return[0,d,30];if(!l(c,Jl))return[0,d,aa];if(!l(c,bs))return[0,d,53];if(!l(c,kS))return[0,d,ao];if(!l(c,o_))return[0,d,gD]}else{if(!l(c,pV))return[0,d,b1];if(!l(c,jR))return[0,d,ln];if(!l(c,iX))return[0,d,jJ];if(!l(c,oY))return[0,d,adF];if(!l(c,kX))return[0,d,adE];if(!l(c,bC))return[0,d,gE]}}return[0,d,[4,aJ,c,kc(am)]];case
66:var
aK=a[4]?a1(a,$(a,b),96):a;return[0,aK,X];default:return[0,a,[7,E(b)]]}},ki=function(m){return function(a){var
f=0,e=a;for(;;){var
c=j(m,e,e[2]);switch(c[0]){case
0:var
h=c[2],b=c[1],g=Gp(b,h),i=0===f?0:B(f),k=b[6];if(0===k)return[0,[0,b[1],b[2],b[3],b[4],b[5],b[6],g],[0,h,g,0,i]];var
n=[0,h,g,B(k),i];return[0,[0,b[1],b[2],b[3],b[4],b[5],FZ,g],n];case
1:var
l=c[2],d=c[1],f=[0,l,f],e=[0,d[1],d[2],d[3],d[4],d[5],d[6],l[1]];continue;default:var
e=c[1];continue}}}},adG=ki(_9),adH=ki(adi),adI=ki(adl),adJ=ki(adp),adK=ki(_J),a2=FQ([0,ND]),kj=function(a,b){return[0,0,0,b,F0(a)]},mk=function(a){var
c=a[4];switch(a[3]){case
0:var
j=k(adK,c);break;case
1:var
j=k(adJ,c);break;case
2:var
j=k(adH,c);break;case
3:var
u=by(c,c[2]),l=ad(aa),m=ad(aa),b=c[2];P(b);var
n=g(b),s=ce<n?aO<n?1:aT<n?2:1:v("\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x04\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x05\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x06",n+1|0)-1|0;if(5<s>>>0)var
e=h(b);else
switch(s){case
0:var
e=1;break;case
1:var
e=4;break;case
2:var
e=0;break;case
3:i(b,0);var
e=0===bx(g(b))?0:h(b);break;case
4:var
e=2;break;default:var
e=3}if(4<e>>>0)var
f=C(adk);else
switch(e){case
0:var
t=E(b);M(m,t);M(l,t);var
o=Gy(bd(c,b),l,m,b),A=by(o,b),D=az(l),F=az(m),f=[0,o,[9,[0,o[1],u,A],D,F]];break;case
1:var
f=[0,c,X];break;case
2:var
f=[0,c,98];break;case
3:var
f=[0,c,0];break;default:i9(b);var
p=Gy(c,l,m,b),G=by(p,b),H=az(l),I=az(m),f=[0,p,[9,[0,p[1],u,G],H,I]]}var
q=f[2],d=f[1],w=Gp(d,q),x=d[6];if(0===x)var
z=[0,d,[0,q,w,0,0]];else
var
J=[0,q,w,B(x),0],z=[0,[0,d[1],d[2],d[3],d[4],d[5],0,d[7]],J];var
j=z;break;case
4:var
j=k(adI,c);break;default:var
j=k(adG,c)}var
y=j[1],K=j[2],r=[0,F0(y),K];a[4]=y;if(a[1])a[2]=[0,r];else
a[1]=[0,r];return r},Gz=function(a){var
b=a[1];return b?b[1][2]:mk(a)[2]},je=function(a){return j1(a[24][1])},an=function(a){return a[28][4]},u=function(a,b){var
c=b[2];a[1][1]=[0,[0,b[1],c],a[1][1]];var
d=a[23];return d?j(d[1],a,c):0},kl=function(a,b){a[31][1]=b;return 0},h3=function(a,b){if(0===a)return Gz(b[26][1]);if(1!==a)throw t([0,R,adQ],1);var
c=b[26][1];if(!c[1])mk(c);var
d=c[2];return d?d[1][2]:mk(c)[2]},hr=function(a,b){return a===b[5]?b:[0,b[1],b[2],b[3],b[4],a,b[6],b[7],b[8],b[9],b[10],b[11],b[12],b[13],b[14],b[15],b[16],b[17],b[18],b[19],b[20],b[21],b[22],b[23],b[24],b[25],b[26],b[27],b[28],b[29],b[30],b[31]]},GA=function(a,b){return a===b[10]?b:[0,b[1],b[2],b[3],b[4],b[5],b[6],b[7],b[8],b[9],a,b[11],b[12],b[13],b[14],b[15],b[16],b[17],b[18],b[19],b[20],b[21],b[22],b[23],b[24],b[25],b[26],b[27],b[28],b[29],b[30],b[31]]},rE=function(a,b){return a===b[18]?b:[0,b[1],b[2],b[3],b[4],b[5],b[6],b[7],b[8],b[9],b[10],b[11],b[12],b[13],b[14],b[15],b[16],b[17],a,b[19],b[20],b[21],b[22],b[23],b[24],b[25],b[26],b[27],b[28],b[29],b[30],b[31]]},rF=function(a,b){return a===b[19]?b:[0,b[1],b[2],b[3],b[4],b[5],b[6],b[7],b[8],b[9],b[10],b[11],b[12],b[13],b[14],b[15],b[16],b[17],b[18],a,b[20],b[21],b[22],b[23],b[24],b[25],b[26],b[27],b[28],b[29],b[30],b[31]]},GB=function(a,b){return a===b[20]?b:[0,b[1],b[2],b[3],b[4],b[5],b[6],b[7],b[8],b[9],b[10],b[11],b[12],b[13],b[14],b[15],b[16],b[17],b[18],b[19],a,b[21],b[22],b[23],b[24],b[25],b[26],b[27],b[28],b[29],b[30],b[31]]},iu=function(a,b){return a===b[22]?b:[0,b[1],b[2],b[3],b[4],b[5],b[6],b[7],b[8],b[9],b[10],b[11],b[12],b[13],b[14],b[15],b[16],b[17],b[18],b[19],b[20],b[21],a,b[23],b[24],b[25],b[26],b[27],b[28],b[29],b[30],b[31]]},rG=function(a,b){return a===b[14]?b:[0,b[1],b[2],b[3],b[4],b[5],b[6],b[7],b[8],b[9],b[10],b[11],b[12],b[13],a,b[15],b[16],b[17],b[18],b[19],b[20],b[21],b[22],b[23],b[24],b[25],b[26],b[27],b[28],b[29],b[30],b[31]]},km=function(a,b){return a===b[8]?b:[0,b[1],b[2],b[3],b[4],b[5],b[6],b[7],a,b[9],b[10],b[11],b[12],b[13],b[14],b[15],b[16],b[17],b[18],b[19],b[20],b[21],b[22],b[23],b[24],b[25],b[26],b[27],b[28],b[29],b[30],b[31]]},kn=function(a,b){return a===b[12]?b:[0,b[1],b[2],b[3],b[4],b[5],b[6],b[7],b[8],b[9],b[10],b[11],a,b[13],b[14],b[15],b[16],b[17],b[18],b[19],b[20],b[21],b[22],b[23],b[24],b[25],b[26],b[27],b[28],b[29],b[30],b[31]]},iv=function(a,b){return a===b[15]?b:[0,b[1],b[2],b[3],b[4],b[5],b[6],b[7],b[8],b[9],b[10],b[11],b[12],b[13],b[14],a,b[16],b[17],b[18],b[19],b[20],b[21],b[22],b[23],b[24],b[25],b[26],b[27],b[28],b[29],b[30],b[31]]},rH=function(a,b){return a===b[16]?b:[0,b[1],b[2],b[3],b[4],b[5],b[6],b[7],b[8],b[9],b[10],b[11],b[12],b[13],b[14],b[15],a,b[17],b[18],b[19],b[20],b[21],b[22],b[23],b[24],b[25],b[26],b[27],b[28],b[29],b[30],b[31]]},GC=function(a,b){return a===b[6]?b:[0,b[1],b[2],b[3],b[4],b[5],a,b[7],b[8],b[9],b[10],b[11],b[12],b[13],b[14],b[15],b[16],b[17],b[18],b[19],b[20],b[21],b[22],b[23],b[24],b[25],b[26],b[27],b[28],b[29],b[30],b[31]]},GD=function(a,b){return a===b[7]?b:[0,b[1],b[2],b[3],b[4],b[5],b[6],a,b[8],b[9],b[10],b[11],b[12],b[13],b[14],b[15],b[16],b[17],b[18],b[19],b[20],b[21],b[22],b[23],b[24],b[25],b[26],b[27],b[28],b[29],b[30],b[31]]},rI=function(a,b){return a===b[13]?b:[0,b[1],b[2],b[3],b[4],b[5],b[6],b[7],b[8],b[9],b[10],b[11],b[12],a,b[14],b[15],b[16],b[17],b[18],b[19],b[20],b[21],b[22],b[23],b[24],b[25],b[26],b[27],b[28],b[29],b[30],b[31]]},ml=function(a,b){return[0,b[1],b[2],b[3],b[4],b[5],b[6],b[7],b[8],b[9],b[10],b[11],b[12],b[13],b[14],b[15],b[16],b[17],b[18],b[19],b[20],b[21],b[22],[0,a],b[24],b[25],b[26],b[27],b[28],b[29],b[30],b[31]]},rJ=function(b){function
c(a){return u(b,a)}return function(a){return a7(c,a)}},jf=function(a){var
b=a[4][1];return b?[0,b[1][2]]:0},GE=function(a){var
b=a[4][1];return b?[0,b[1][1]]:0},GF=function(a){return[0,a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15],a[16],a[17],a[18],a[19],a[20],a[21],a[22],0,a[24],a[25],a[26],a[27],a[28],a[29],a[30],a[31]]},GG=function(a,b,c,d){return[0,a[1],a[2],a2[1],a[4],a[5],0,0,0,0,0,1,a[12],a[13],a[14],a[15],a[16],a[17],c,b,a[20],d,a[22],a[23],a[24],a[25],a[26],a[27],a[28],a[29],a[30],a[31]]},jg=function(a){if(l(a,iN)&&l(a,bs)&&l(a,jF)&&l(a,qc)&&l(a,ld)&&l(a,lp)&&l(a,k1)&&l(a,bR)&&l(a,bf))return 0;return 1},iw=function(a){if(l(a,zp)&&l(a,"eval"))return 0;return 1},mm=function(a){var
c=z(a,qa),b=0;if(0<=c){if(0<c){var
d=z(a,iP);if(0<=d){if(0<d&&l(a,bM)&&l(a,hI)&&l(a,nf)&&l(a,hJ)&&l(a,k4)&&l(a,hH)&&l(a,ox)&&l(a,nS))b=1}else if(l(a,bg)&&l(a,h$)&&l(a,kY)&&l(a,i0)&&l(a,iY)&&l(a,bS)&&l(a,jH)&&l(a,bP))b=1}}else{var
e=z(a,nl);if(0<=e){if(0<e&&l(a,pi)&&l(a,lf)&&l(a,pe)&&l(a,f9)&&l(a,hD)&&l(a,oy)&&l(a,p6)&&l(a,jS))b=1}else if(l(a,bT)&&l(a,ow)&&l(a,og)&&l(a,lb)&&l(a,lo)&&l(a,bL)&&l(a,bN)&&l(a,iI)&&l(a,k7))b=1}return b?0:1},rK=function(a){var
c=z(a,om),b=0;if(0<=c){if(0<c){var
d=z(a,k2);if(0<=d){if(0<d&&l(a,hI)&&l(a,hJ)&&l(a,nh)&&l(a,pO)&&l(a,hH))b=1}else if(l(a,iY)&&l(a,jI)&&l(a,jO)&&l(a,bR)&&l(a,jB))b=1}}else{var
e=z(a,f9);if(0<=e){if(0<e&&l(a,hD)&&l(a,jS)&&l(a,bs)&&l(a,o_)&&l(a,pq))b=1}else if(l(a,jE)&&l(a,pV)&&l(a,iX)&&l(a,oY)&&l(a,kX)&&l(a,bC))b=1}return b?0:1},GH=function(a,b){var
e=je(a);if(1===e){if(typeof
b!=="number"&&4===b[0])return 1;return 0}if(e)return 0;var
c=0;if(typeof
b==="number"){var
d=b;if(46<=d)switch(d){case
46:case
47:case
125:case
126:case
127:case
128:case
129:case
130:case
131:c=2;break;case
48:case
49:case
50:case
51:case
52:case
53:case
54:case
55:case
56:case
57:case
58:case
59:case
60:case
61:case
62:case
63:case
64:case
65:case
114:case
115:case
116:case
117:case
118:case
119:case
120:case
121:case
122:case
123:case
124:break;default:c=1}else
switch(d){case
15:case
42:c=2;break;case
0:case
1:case
2:case
3:case
4:case
5:case
6:case
7:case
8:case
9:case
10:case
11:case
12:case
13:case
14:c=1;break}}else
switch(b[0]){case
4:if(rK(b[3]))return 0;break;case
6:c=1;break;case
11:case
12:case
13:break;default:return 0}switch(c){case
0:return 1;case
2:return 0;default:return 0}},O=function(a,b){return h3(a,b)[1]},ko=function(a,b){return h3(a,b)[2]},m=function(a){return O(0,a)},A=function(a){return ko(0,a)},hs=function(a){var
c=jf(a),b=c?c[1]:C(adR);return[0,b[1],b[3],b[3]]},rL=function(a){return h3(0,a)[3]},q=function(b){var
a=h3(0,b)[4];return a?k(j3(function(a){return hq(b[31][1],a[1][2])<=0?1:0}),a):0},GI=function(b){var
a=h3(0,b)[4];return qR(function(a){return hq(a[1][2],b[31][1])<0?1:0},a)},kp=function(a,b){var
c=0<a?[0,ko(a-1|0,b)]:jf(b);if(!c)return 0;var
d=c[1][2][1];return d<ko(a,b)[2][1]?1:0},be=function(a){return kp(0,a)},GJ=function(a,b){var
d=O(a,b);if(typeof
d==="number"){var
c=d-2|0;if(aD<c>>>0){if(bh>=c+1>>>0)return 1}else if(6===c)return 0}return kp(a,b)},jh=function(a){return GJ(0,a)},h4=function(a,b){var
c=O(a,b),e=0;if(typeof
c==="number")switch(c){case
28:case
42:case
52:case
53:case
54:case
55:case
56:case
57:case
58:var
d=1;break;default:e=1}else if(4===c[0])var
d=jg(c[2]);else
e=1;if(e)var
d=0;if(d)return 1;var
f=0;if(typeof
c==="number")switch(c){case
14:case
48:case
60:case
61:case
62:case
63:case
64:case
65:case
126:f=1;break}else if(4===c[0])f=1;return f?1:0},mn=function(a,b){return GH(b,O(a,b))},GK=function(a,b){var
c=h4(a,b);return c?c:mn(a,b)},cO=function(a){return h4(0,a)},h5=function(a){var
c=15===m(a)?1:0;if(c)var
b=c;else{var
d=64===m(a)?1:0;if(d){var
e=15===O(1,a)?1:0;if(e)var
f=ko(1,a)[2][1],b=A(a)[3][1]===f?1:0;else
var
b=e}else
var
b=d}return b},kq=function(a){var
b=m(a);if(typeof
b==="number")switch(b){case
13:case
40:return 1}else if(4===b[0]&&!l(b[3],x_)&&40===O(1,a))return 1;return 0},rM=function(a){var
c=a[28][1];if(c){var
b=m(a);if(typeof
b!=="number"&&4===b[0]&&!l(b[3],ih)&&h4(1,a))return 1;var
d=0}else
var
d=c;return d},rN=function(a){var
b=m(a);if(typeof
b!=="number"&&4===b[0]&&!l(b[3],jG))return 1;return 0},G=function(a,b){return u(a,[0,A(a),b])},GL=function(a,b){var
c=rx(0,b);return a?[26,c,a[1]]:[24,c]},aq=function(a,b){var
c=rL(b);k(rJ(b),c);return G(b,GL(a,m(b)))},mo=function(b){function
c(a){return u(b,[0,a[1],X])}return function(a){return a7(c,a)}},GM=function(a,b){var
c=a[6]?s(S(adS),b,b,b):adT;return aq([0,c],a)},b_=function(a,b){var
c=a[5];return c?G(a,b):c},bX=function(a,b){var
c=a[5],d=b[2],e=b[1];return c?u(a,[0,e,d]):c},ix=function(a,b){return u(a,[0,b,[14,a[5]]])},r=function(a){var
e=a[27][1];if(e){var
f=e[1],g=je(a),h=m(a);k(f,[0,A(a),h,g])}var
d=a[26][1],c=d[1],i=c?c[1][1]:mk(d)[1];a[25][1]=i;var
j=rL(a);k(rJ(a),j);var
l=a[2][1],n=cI(h3(0,a)[4],l);a[2][1]=n;var
o=[0,h3(0,a)];a[4][1]=o;var
b=a[26][1];return b[2]?(b[1]=b[2],b[2]=0,0):(Gz(b),b[1]=0,0)},ak=function(a,b){var
c=j(rt,m(a),b);if(c)r(a);return c},aB=function(a,b){a[24][1]=[0,b,a[24][1]];var
c=je(a),d=kj(a[25][1],c);a[26][1]=d;return 0},aF=function(a){var
b=a[24][1],c=b?b[2]:C(adU);a[24][1]=c;var
d=je(a),e=kj(a[25][1],d);a[26][1]=e;return 0},x=function(a){var
b=A(a);if(9===m(a)&&kp(1,a)){var
c=q(a),d=h3(1,a)[4],e=J(c,k(j3(function(a){return a[1][2][1]<=b[3][1]?1:0}),d));kl(a,[0,b[3][1]+1|0,0]);return e}var
f=q(a);kl(a,b[3]);return f},h6=function(a){var
b=a[4][1];if(!b)return 0;var
c=b[1][2],d=q(a),e=k(j3(function(a){return a[1][2][1]<=c[3][1]?1:0}),d);kl(a,[0,c[3][1]+1|0,0]);return e},ht=function(a,b){return aq([0,rx(adX,b)],a)},n=function(a,b){if(1-j(rt,m(a),b))ht(a,b);return r(a)},GN=function(a,b){var
c=ak(a,b);if(1-c)ht(a,b);return c},mp=function(a,b){GN(a,b);return 0},hu=function(a,b){var
c=m(a),d=0;if(typeof
c!=="number"&&4===c[0]&&V(c[3],b))d=1;if(!d)aq([0,k(S(adY),b)],a);return r(a)},cP=[c,adZ,hN(0)],GO=function(a,b,c){if(!c)return 0;var
e=c[1],f=e[1],h=e[2];b[27][1]=[0,f];if(!a)return a;var
d=h[2];for(;;){if(!d)return 0;var
g=d[2];k(f,d[1]);var
d=g}},rO=function(a,b){var
d=a[27][1];if(d){var
f=d[1],e=EW(0),h=[0,function(a){return qV(a,e)}];a[27][1]=h;var
c=[0,[0,f,e]]}else
var
c=0;var
i=a[31][1],j=a[25][1],l=a[24][1],m=a[4][1],n=a[2][1],o=a[1][1];try{var
s=k(b,a);GO(1,a,c);var
r=[0,s];return r}catch(f){var
g=ay(f);if(g!==cP)throw t(g,0);GO(0,a,c);a[1][1]=o;a[2][1]=n;a[4][1]=m;a[24][1]=l;a[25][1]=j;a[31][1]=i;var
p=je(a),q=kj(a[25][1],p);a[26][1]=q;return 0}},mq=function(a,b,c){var
d=rO(a,c);return d?d[1]:b},kr=function(a,b){var
c=B(b);if(!c)return b;var
d=c[1],f=c[2],e=k(a,d);return d===e?b:B([0,e,f])},GR=lN(ad2,function(g){var
l=rf(g,ad4),a=rd(g,ad1),m=a[24],h=a[28],d=a[41],n=a[91],c=a[yZ],f=a[vU],o=a[zM],p=a[K8],q=a[MK],i=a[K1],r=a[6],b=a[7],s=a[10],t=a[17],u=a[23],v=a[29],w=a[39],x=a[42],y=a[52],z=a[61],A=a[aV],B=a[aD],C=a[gE],D=a[jJ],E=a[jv],G=a[wd],H=a[Di],I=a[Lc],J=a[Kl],K=a[ux],L=a[Al],M=a[o4],N=a[oO],O=a[Dd],P=a[oT],Q=a[oB],R=a[Ar],S=a[nA],T=a[kW],U=a[wZ],V=a[iW],W=a[Jt],X=a[KN],Y=a[LT],Z=a[MJ],_=a[Jd],$=a[KS],aa=a[Ke],ab=a[L$],ac=a[LW],ad=rh(g,0,0,GQ,ro,1)[1];function
ae(a,b,c){var
g=c[2],d=g[2],h=g[1],i=c[1];if(d){var
l=d[1],m=function(a){return[0,i,[0,h,[0,a]]]};return e(k(a[1][1+f],a),l,c,m)}function
n(a){return[0,i,[0,a,d]]}return e(j(a[1][1+r],a,b),h,c,n)}function
af(a,b,c){var
m=c[2],e=c[1],f=e[3],g=e[2],o=e[1];if(f)var
l=kr(k(a[1][1+h],a),f),i=g;else
var
l=0,i=j(a[1][1+h],a,g);var
n=j(a[1][1+d],a,m);if(g===i&&f===l&&m===n)return c;return[0,[0,o,i,l],n]}function
ag(a,b){var
c=b[2],f=c[2],g=c[1],h=b[1];function
i(a){return[0,h,[0,g,a]]}return e(k(a[1][1+d],a),f,b,i)}function
ah(a,b,c){var
f=c[3];function
g(a){return[0,c[1],c[2],a]}return e(k(a[1][1+d],a),f,c,g)}function
ai(a,b){var
c=b[2];function
f(a){return[0,b[1],a]}return e(k(a[1][1+d],a),c,b,f)}function
aj(a,b,c){var
f=c[3];function
g(a){return[0,c[1],c[2],a]}return e(k(a[1][1+d],a),f,c,g)}function
ak(a,b,c){var
e=c[2],g=c[1],h=kr(k(a[1][1+f],a),g),i=j(a[1][1+d],a,e);if(g===h&&e===i)return c;return[0,h,i]}function
al(a,b){var
c=b[2],f=c[2],g=c[1],h=b[1];function
i(a){return[0,h,[0,g,a]]}return e(k(a[1][1+d],a),f,b,i)}function
am(a,b,c){var
f=c[4];function
g(a){return[0,c[1],c[2],c[3],a]}return e(k(a[1][1+d],a),f,c,g)}function
an(a,b,c){var
f=c[2];function
g(a){return[0,c[1],a]}return e(k(a[1][1+d],a),f,c,g)}function
ao(a,b,c){var
e=c[3],f=c[2],g=j(a[1][1+C],a,f),h=j(a[1][1+d],a,e);if(f===g&&e===h)return c;return[0,c[1],g,h]}function
ap(a,b,c){var
g=c[4],h=c[3],l=c[2],m=c[1],e=j(a[1][1+d],a,g);if(h){var
n=F(k(a[1][1+i],a),h);if(h===n&&g===e)return c;return[0,c[1],c[2],n,e]}if(l){var
o=F(k(a[1][1+q],a),l);if(l===o&&g===e)return c;return[0,c[1],o,c[3],e]}var
p=j(a[1][1+f],a,m);if(m===p&&g===e)return c;return[0,p,c[2],c[3],e]}function
aq(a,b,c){var
e=c[4],g=c[3],h=j(a[1][1+f],a,g),i=j(a[1][1+d],a,e);if(g===h&&e===i)return c;return[0,c[1],c[2],h,i]}function
ar(a,b,c){var
f=c[4];function
g(a){return[0,c[1],c[2],c[3],a]}return e(k(a[1][1+d],a),f,c,g)}function
as(a,b,c){var
f=c[4];function
g(a){return[0,c[1],c[2],c[3],a]}return e(k(a[1][1+d],a),f,c,g)}function
at(a,b,c){var
m=c[2],e=c[1],f=e[3],g=e[2],o=e[1];if(f)var
l=kr(k(a[1][1+h],a),f),i=g;else
var
l=0,i=j(a[1][1+h],a,g);var
n=j(a[1][1+d],a,m);if(g===i&&f===l&&m===n)return c;return[0,[0,o,i,l],n]}function
au(a,b,c){var
e=c[3],f=c[1],g=aK(k(a[1][1+n],a),f),h=j(a[1][1+d],a,e);if(f===g&&e===h)return c;return[0,g,c[2],h]}function
av(a,b,c){var
f=c[2];function
g(a){return[0,c[1],a]}return e(k(a[1][1+d],a),f,c,g)}function
aw(a,b){if(0===b[0]){var
i=b[1],l=function(a){return[0,a]};return e(k(a[1][1+c],a),i,b,l)}var
d=b[1],f=d[2],g=f[2],m=d[1],h=j(a[1][1+c],a,g);return g===h?b:[1,[0,m,[0,f[1],h]]]}function
ax(a,b,c){var
e=c[4],f=c[3],g=j(a[1][1+M],a,f),h=j(a[1][1+d],a,e);if(f===g&&e===h)return c;return[0,c[1],c[2],g,h]}function
ay(a,b){var
c=b[2],f=b[1],g=c[4];function
h(a){return[0,f,[0,c[1],c[2],c[3],a]]}return e(k(a[1][1+d],a),g,[0,f,c],h)}function
az(a,b,c){var
e=c[9],f=c[3],g=j(a[1][1+P],a,f),h=j(a[1][1+d],a,e);if(f===g&&e===h)return c;return[0,c[1],c[2],g,c[4],c[5],c[6],c[7],c[8],h,c[10]]}function
aA(a,b,c){var
e=c[4],g=c[3],h=j(a[1][1+f],a,g),i=j(a[1][1+d],a,e);if(g===h&&e===i)return c;return[0,c[1],c[2],h,i]}function
aB(a,b){var
c=b[2],f=c[2],g=c[1],h=b[1];function
i(a){return[0,h,[0,g,a]]}return e(k(a[1][1+d],a),f,b,i)}function
aC(a,b){var
c=b[2],f=b[1],g=c[3];function
h(a){return[0,f,[0,c[1],c[2],a]]}return e(k(a[1][1+d],a),g,[0,f,c],h)}function
aE(a,b,c){var
e=c[6],f=c[5],g=j(a[1][1+V],a,f),h=j(a[1][1+d],a,e);if(f===g&&e===h)return c;return[0,c[1],c[2],c[3],c[4],g,h,c[7]]}function
aF(a,b){var
f=b[2],d=f[2],g=f[1],h=b[1];if(0===d){var
i=function(a){return[0,h,[0,a,d]]};return e(k(a[1][1+c],a),g,b,i)}function
j(a){return[0,h,[0,g,a]]}var
l=k(a[1][1+m],a);return e(function(a){return F(l,a)},d,b,j)}function
aG(a,b){var
c=b[2],d=c[2],f=c[1],g=b[1];function
h(a){return[0,g,[0,a,d]]}var
i=k(a[1][1+o],a);return e(function(a){return kr(i,a)},f,b,h)}function
aH(a,b,c){var
d=c[2],g=c[1];if(0===d){var
h=function(a){return[0,a,c[2],c[3]]};return e(k(a[1][1+f],a),g,c,h)}function
i(a){return[0,c[1],a,c[3]]}var
j=k(a[1][1+m],a);return e(function(a){return F(j,a)},d,c,i)}function
aI(a,b){var
c=b[2],f=c[2],g=c[1],h=b[1];function
i(a){return[0,h,[0,g,a]]}return e(k(a[1][1+d],a),f,b,i)}function
aJ(a,b,c){var
e=c[7],f=c[2],g=j(a[1][1+p],a,f),h=j(a[1][1+d],a,e);if(f===g&&e===h)return c;return[0,c[1],g,c[3],c[4],c[5],c[6],h]}function
aL(a,b){var
c=b[2],f=c[2],g=c[1],h=b[1];function
i(a){return[0,h,[0,g,a]]}return e(k(a[1][1+d],a),f,b,i)}function
aM(a,b){var
c=b[2],f=c[2],g=c[1],h=b[1];function
i(a){return[0,h,[0,g,a]]}return e(k(a[1][1+d],a),f,b,i)}function
aN(a,b,c){var
e=c[4],f=c[3],g=j(a[1][1+i],a,f),h=j(a[1][1+d],a,e);if(f===g&&e===h)return c;return[0,c[1],c[2],g,h]}function
aO(a,b,c){var
f=c[2];function
g(a){return[0,c[1],a]}return e(k(a[1][1+d],a),f,c,g)}function
aP(a,b,c){var
e=c[4],g=c[3],h=j(a[1][1+f],a,g),i=j(a[1][1+d],a,e);if(g===h&&e===i)return c;return[0,c[1],c[2],h,i]}function
aQ(a,b,c){var
e=c[4],g=c[3],h=j(a[1][1+f],a,g),i=j(a[1][1+d],a,e);if(g===h&&e===i)return c;return[0,c[1],c[2],h,i]}function
aR(a,b){var
c=b[2];function
f(a){return[0,b[1],a]}return e(k(a[1][1+d],a),c,b,f)}function
aS(a,b,c){var
f=c[2];function
g(a){return[0,c[1],a]}return e(k(a[1][1+d],a),f,c,g)}rj(g,[0,x,function(d,b){var
a=b[2],c=k(j3(function(a){return hq(a[1][2],d[1+l])<0?1:0}),a),e=cH(c);return cH(a)===e?b:[0,b[1],c,b[3]]},ac,aS,ab,aR,aa,aQ,$,aP,_,aO,Z,aN,i,aM,q,aL,Y,aJ,p,aI,X,aH,W,aG,o,aF,U,aE,T,aC,S,aB,R,aA,Q,az,O,ay,N,ax,L,aw,K,av,J,au,I,at,H,as,G,ar,E,aq,B,ap,D,ao,A,an,n,am,z,al,y,ak,w,aj,v,ai,u,ah,t,ag,s,af,b,ae]);return function(a,b,c){var
d=lO(b,g);d[1+l]=c;k(ad,d);return ri(b,d,g)}}),mr=function(a){var
b=jf(a);if(b)var
d=b[1],e=GI(a)?(kl(a,d[3]),[0,j(GR[1],0,d[3])]):0,c=e;else
var
c=0;return[0,0,function(a,b){return c?j(b,c[1],a):a}]},ks=function(a){var
d=jf(a);if(d){var
e=d[1];if(GI(a)){kl(a,e[3]);var
f=h6(a),c=[0,j(GR[1],0,[0,e[3][1]+1|0,0])],b=f}else
var
c=0,b=h6(a)}else
var
c=0,b=0;return[0,b,function(a,b){return c?j(b,c[1],a):a}]},au=function(a){return be(a)?ks(a):mr(a)},cp=function(a,b){var
c=au(a)[2];return j(c,b,function(a,b){return j(K(a,ju,2),a,b)})},bo=function(a,b){if(!b)return 0;var
c=b[1],d=au(a)[2];return[0,j(d,c,function(a,b){return j(K(a,ta,5),a,b)})]},rP=function(a,b){var
c=au(a)[2];return j(c,b,function(a,b){return j(K(a,LD,8),a,b)})},ji=function(a,b){var
c=au(a)[2];return j(c,b,function(a,b){return j(K(a,-1045824777,9),a,b)})},kt=function(a,b){var
c=au(a)[2];return j(c,b,function(a,b){return j(K(a,-455772979,10),a,b)})},GS=function(a,b){if(!b)return 0;var
c=b[1],d=au(a)[2];return[0,j(d,c,function(a,b){return j(K(a,Me,13),a,b)})]},cq=function(a,b){var
c=au(a)[2];return j(c,b,function(a,b){return j(K(a,KH,14),a,b)})},GT=function(a,b){var
c=au(a)[2];return j(c,b,function(a,b){var
c=k(K(a,I5,16),a);return kr(function(a){return aK(c,a)},b)})},GU=function(a,b){var
c=au(a)[2];return j(c,b,function(a,b){return j(K(a,-21476009,17),a,b)})},ad5=function(a,b){var
c=a[2],R=a[1];function
e(a){return a_(a,b)}switch(c[0]){case
0:var
M=c[1],S=rr(M[2],b),d=[0,[0,M[1],S]];break;case
1:var
N=c[1],T=e(N[2]),d=[1,[0,N[1],T]];break;case
2:var
g=c[1],U=e(g[7]),d=[2,[0,g[1],g[2],g[3],g[4],g[5],g[6],U]];break;case
3:var
h=c[1],V=h[7],W=e(h[6]),d=[3,[0,h[1],h[2],h[3],h[4],h[5],W,V]];break;case
4:var
O=c[1],X=e(O[2]),d=[4,[0,O[1],X]];break;case
5:var
d=[5,[0,e(c[1][1])]];break;case
6:var
i=c[1],Y=e(i[7]),d=[6,[0,i[1],i[2],i[3],i[4],i[5],i[6],Y]];break;case
7:var
j=c[1],Z=e(j[5]),d=[7,[0,j[1],j[2],j[3],j[4],Z]];break;case
8:var
C=c[1],_=e(C[3]),d=[8,[0,C[1],C[2],_]];break;case
9:var
k=c[1],$=e(k[5]),d=[9,[0,k[1],k[2],k[3],k[4],$]];break;case
10:var
u=c[1],aa=e(u[4]),d=[10,[0,u[1],u[2],u[3],aa]];break;case
11:var
l=c[1],ab=e(l[5]),d=[11,[0,l[1],l[2],l[3],l[4],ab]];break;case
12:var
v=c[1],ac=e(v[4]),d=[12,[0,v[1],v[2],v[3],ac]];break;case
13:var
P=c[1],ad=e(P[2]),d=[13,[0,P[1],ad]];break;case
14:var
w=c[1],ae=e(w[4]),d=[14,[0,w[1],w[2],w[3],ae]];break;case
15:var
m=c[1],af=e(m[5]),d=[15,[0,m[1],m[2],m[3],m[4],af]];break;case
16:var
x=c[1],ag=e(x[4]),d=[16,[0,x[1],x[2],x[3],ag]];break;case
17:var
D=c[1],ah=e(D[3]),d=[17,[0,D[1],D[2],ah]];break;case
18:var
d=[18,[0,e(c[1][1])]];break;case
19:var
E=c[1],ai=e(E[3]),d=[19,[0,E[1],E[2],ai]];break;case
20:var
F=c[1],aj=e(F[3]),d=[20,[0,F[1],F[2],aj]];break;case
21:var
n=c[1],ak=e(n[5]),d=[21,[0,n[1],n[2],n[3],n[4],ak]];break;case
22:var
G=c[1],al=e(G[3]),d=[22,[0,G[1],G[2],al]];break;case
23:var
o=c[1],am=e(o[5]),d=[23,[0,o[1],o[2],o[3],o[4],am]];break;case
24:var
p=c[1],an=e(p[5]),d=[24,[0,p[1],p[2],p[3],p[4],an]];break;case
25:var
q=c[1],ao=e(q[5]),d=[25,[0,q[1],q[2],q[3],q[4],ao]];break;case
26:var
f=c[1],ap=f[10],aq=e(f[9]),d=[26,[0,f[1],f[2],f[3],f[4],f[5],f[6],f[7],f[8],aq,ap]];break;case
27:var
y=c[1],ar=e(y[4]),d=[27,[0,y[1],y[2],y[3],ar]];break;case
28:var
r=c[1],as=e(r[5]),d=[28,[0,r[1],r[2],r[3],r[4],as]];break;case
29:var
s=c[1],at=e(s[5]),d=[29,[0,s[1],s[2],s[3],s[4],at]];break;case
30:var
H=c[1],au=e(H[3]),d=[30,[0,H[1],H[2],au]];break;case
31:var
I=c[1],av=I[3],aw=e(I[2]),d=[31,[0,I[1],aw,av]];break;case
32:var
z=c[1],ax=z[4],ay=e(z[3]),d=[32,[0,z[1],z[2],ay,ax]];break;case
33:var
Q=c[1],az=e(Q[2]),d=[33,[0,Q[1],az]];break;case
34:var
A=c[1],aA=e(A[4]),d=[34,[0,A[1],A[2],A[3],aA]];break;case
35:var
B=c[1],aB=e(B[4]),d=[35,[0,B[1],B[2],B[3],aB]];break;case
36:var
t=c[1],aC=e(t[5]),d=[36,[0,t[1],t[2],t[3],t[4],aC]];break;case
37:var
J=c[1],aD=e(J[3]),d=[37,[0,J[1],J[2],aD]];break;case
38:var
K=c[1],aE=e(K[3]),d=[38,[0,K[1],K[2],aE]];break;default:var
L=c[1],aF=e(L[3]),d=[39,[0,L[1],L[2],aF]]}return[0,R,d]};lN(ad3,function(d){var
h=rf(d,ad6),l=rg(ad0),g=l.length-1,m=GP.length-1,a=jV(g+m|0,0),n=g-1|0,t=0;if(n>=0){var
b=t;for(;;){var
x=j$(d,aH(l,b)[1+b]);aH(a,b)[1+b]=x;var
y=b+1|0;if(n!==b){var
b=y;continue}break}}var
o=m-1|0,u=0;if(o>=0){var
c=u;for(;;){var
p=c+g|0,v=rf(d,aH(GP,c)[1+c]);aH(a,p)[1+p]=v;var
w=c+1|0;if(o!==c){var
c=w;continue}break}}var
q=a[4],r=a[5],s=a[Js],i=a[zM],e=a[295],f=a[296],z=a[44],A=a[la],B=a[IY],C=rh(d,0,0,GQ,ro,1)[1];function
D(a,b,c){j(a[1][1+s],a,c[2]);return c}function
E(a,b){j(a[1][1+i],a,b);return b}function
F(a,b){var
c=b[1],d=a[1+f];if(d){var
e=hq(d[1][1][2],c[2])<0?1:0,i=e?(a[1+f]=[0,b],0):e;return i}var
g=0<=hq(c[2],a[1+h][3])?1:0,j=g?(a[1+f]=[0,b],0):g;return j}function
G(a,b){var
c=b[1],d=a[1+e];if(d){var
f=hq(c[2],d[1][1][2])<0?1:0,i=f?(a[1+e]=[0,b],0):f;return i}var
g=hq(c[2],a[1+h][2])<0?1:0,j=g?(a[1+e]=[0,b],0):g;return j}function
H(a,b){return b?j(a[1][1+i],a,b[1]):0}function
I(a,b){var
c=b[2],d=b[1];a7(k(a[1][1+r],a),d);return a7(k(a[1][1+q],a),c)}rj(d,[0,A,function(a){return[0,a[1+e],a[1+f]]},i,I,s,H,r,G,q,F,z,E,B,D]);return function(a,b,c){var
g=lO(b,d);g[1+h]=c;k(C,g);g[1+e]=0;g[1+f]=0;return ri(b,g,d)}});var
GV=function(a){var
c=m(a),d=0;if(typeof
c==="number"){var
e=c;if(49<=e)switch(e){case
49:var
b=aeF;break;case
50:var
b=aeG;break;case
51:var
b=aeH;break;case
52:var
b=aeI;break;case
53:var
b=aeJ;break;case
54:var
b=aeK;break;case
55:var
b=aeL;break;case
56:var
b=aeM;break;case
57:var
b=aeN;break;case
58:var
b=aeO;break;case
59:var
b=aeP;break;case
60:var
b=aeQ;break;case
61:var
b=aeR;break;case
62:var
b=aeS;break;case
63:var
b=aeT;break;case
64:var
b=aeU;break;case
65:var
b=aeV;break;case
114:var
b=aeW;break;case
115:var
b=aeX;break;case
116:var
b=aeY;break;case
117:var
b=aeZ;break;case
118:var
b=ae0;break;case
119:var
b=ae1;break;case
120:var
b=ae2;break;case
121:var
b=ae3;break;case
122:var
b=ae4;break;case
123:var
b=ae5;break;case
124:var
b=ae6;break;case
125:var
b=ae7;break;case
126:var
b=ae8;break;case
128:var
b=ae9;break;case
129:var
b=ae_;break;default:d=1}else
switch(e){case
15:var
b=ad9;break;case
16:var
b=ad_;break;case
17:var
b=ad$;break;case
18:var
b=aea;break;case
19:var
b=aeb;break;case
20:var
b=aec;break;case
21:var
b=aed;break;case
22:var
b=aee;break;case
23:var
b=aef;break;case
24:var
b=aeg;break;case
25:var
b=aeh;break;case
26:var
b=aei;break;case
27:var
b=aej;break;case
28:var
b=aek;break;case
29:var
b=ael;break;case
30:var
b=aem;break;case
31:var
b=aen;break;case
32:var
b=aeo;break;case
33:var
b=aep;break;case
34:var
b=aeq;break;case
35:var
b=aer;break;case
36:var
b=aes;break;case
37:var
b=aet;break;case
38:var
b=aeu;break;case
39:var
b=aev;break;case
40:var
b=aew;break;case
41:var
b=aex;break;case
42:var
b=aey;break;case
43:var
b=aez;break;case
44:var
b=aeA;break;case
45:var
b=aeB;break;case
46:var
b=aeC;break;case
47:var
b=aeD;break;case
48:var
b=aeE;break;default:d=1}}else
switch(c[0]){case
4:var
b=c[2];break;case
11:var
f=c[1]?ae$:afa,b=f;break;default:d=1}if(d){aq(ad7,a);var
b=ad8}r(a);return b},a3=function(a){var
b=A(a),c=q(a),d=GV(a);return[0,b,[0,d,p([0,c],[0,x(a)],0)]]},GW=function(a){var
c=A(a),h=q(a);n(a,14);var
d=A(a),i=GV(a),j=p([0,h],[0,x(a)],0),e=ae(c,d),f=d[2],g=c[3],b=g[1]===f[1]?1:0,k=b?g[2]===f[2]?1:0:b;if(1-k)u(a,[0,e,id]);return[0,e,[0,i,j]]},iy=function(a){var
e=a[2],f=0===e[3]?1:0,i=e[2];if(!f)return f;var
b=i;for(;;){if(!b)return 1;var
d=b[1][2],g=0,h=b[2];if(2===d[1][2][0]&&!d[2]){var
c=1;g=1}if(!g)var
c=0;if(!c)return c;var
b=h}},ku=function(a){var
b=a;for(;;){var
c=b[2];if(30!==c[0])return 0;var
d=c[1][2];if(26===d[2][0])return 1;var
b=d}},ms=function(a,b,c){var
d=c[2][1],e=c[1];if(!l(d,iE)){var
f=b[19];return f?u(b,[0,e,6]):f}if(l(d,jF)){if(!l(d,bf))return b[18]?u(b,[0,e,b0]):bX(b,[0,e,85])}else if(b[14])return u(b,[0,e,[24,lW(d)]]);if(jg(d))return bX(b,[0,e,85]);if(mm(d))return u(b,[0,e,b0]);if(a){var
g=a[1];if(iw(d))return bX(b,[0,e,g])}return 0},o=function(a,b,c){var
d=a?a[1]:A(c),f=k(b,c),e=jf(c),g=e?ae(d,e[1]):d;return[0,g,f]},mt=function(a,b,c){var
d=o(a,b,c),e=d[2];return[0,[0,d[1],e[1]],e[2]]},mu=function(a){aB(a,0);var
c=m(a);aF(a);var
b=O(1,a),d=0;if(typeof
c==="number"){if(21===c)d=1}else if(4===c[0])if(l(c[3],jR))d=1;else{var
f=0;if(typeof
b==="number"){if(21===b)f=1}else if(4===b[0])f=1;d=f?2:1}var
e=0;switch(d){case
1:if(typeof
b==="number"){if(ao===b)e=1}else if(4===b[0]&&!l(b[3],kS))e=1;break;case
0:break;default:e=1}return e?1:0},Hq=function(a){switch(a){case
3:return 2;case
4:return 1;case
5:return 1;case
6:return 1;case
7:return 1;default:return 1}},r8=function(a,b,c){if(c){var
d=c[1],g=0;if(8232===d||aO===d)g=1;else
var
e=10===d?6:13===d?5:kU<=d?3:B1<=d?2:ao<=d?1:0;if(g)var
e=7;var
f=e}else
var
f=4;return[0,f,a]},afJ=[c,afI,hN(0)],Hr=function(a,b,c,d){try{var
f=aH(a,b)[1+b];return f}catch(f){var
e=ay(f);if(e[1]===qM)throw t([0,afJ,c,s(S(afK),d,b,a.length-1)],1);throw t(e,0)}},mJ=function(a,b){if(0===b[1]&&0===b[2])return 0;var
c=Hr(a,b[1]-1|0,b,afL);return Hr(c,b[2],b,afM)},Hs=function(g){var
aJ=[0,af4,a2[1],0,0];function
d(a){var
b=m(a);if(typeof
b==="number"){var
c=0;if(8<=b){if(10>b)c=1}else if(1===b)c=1;if(c)return 1}return 0}function
e(a){var
c=A(a),e=q(a),b=m(a);if(typeof
b==="number")switch(b){case
30:case
31:r(a);var
k=x(a);return d(a)?[1,c,[0,31===b?1:0,p([0,e],[0,k],0)]]:[0,c]}else
switch(b[0]){case
0:var
h=b[2],l=s(g[24],a,b[1],h),n=x(a);return d(a)?[2,c,[0,l,h,p([0,e],[0,n],0)]]:[0,c];case
1:var
i=b[2],o=s(g[26],a,b[1],i),t=x(a);return d(a)?[4,c,[0,o,i,p([0,e],[0,t],0)]]:[0,c];case
2:var
f=b[1],j=f[1],u=f[3],v=f[2];if(f[4])b_(a,81);r(a);var
w=x(a);return d(a)?[3,j,[0,v,u,p([0,e],[0,w],0)]]:[0,j]}r(a);return[0,c]}function
aK(a){var
f=a3(a),b=m(a),d=0;if(typeof
b==="number")if(82===b){n(a,82);var
c=e(a)}else if(86===b){G(a,[8,f[2][1]]);n(a,86);var
c=e(a)}else
d=1;else
d=1;if(d)var
c=0;return[0,f,c]}var
aL=0;function
aq(h,b,c,d,e,f,g){var
a=cH(e),i=cH(f);function
j(a){return[2,[0,[0,f],c,d,g]]}function
k(a){return[2,[0,[1,e],c,d,g]]}return 0===a?j(0):0===i?k(0):a<i?(a7(function(a){return u(h,[0,a[1],[12,b]])},e),j(0)):(a7(function(a){return u(h,[0,a[1],[12,b]])},f),k(0))}return[0,function(a,b){var
e=a?a[1]:0,f=J(e,q(b));n(b,48);var
c=j(g[13],0,b),d=c[2][1],aW=c[1],h=o(0,function(c){if(ak(c,63)){aB(c,1);var
C=m(c),I=0;if(typeof
C==="number")switch(C){case
117:var
s=af6;break;case
118:var
s=af7;break;case
119:var
s=af8;break;case
121:var
s=af9;break;default:I=1}else
switch(C[0]){case
4:G(c,[7,d,[0,C[2]]]);var
s=0;break;case
11:if(C[1])var
s=af_;else
I=1;break;default:I=1}if(I){G(c,[7,d,0]);var
s=0}r(c);aF(c);var
h=s}else
var
h=0;var
aU=0===h?0:q(c);n(c,0);var
b=aJ;for(;;){var
al=m(c);if(typeof
al==="number"){var
K=al-2|0;if(aD<K>>>0){if(bh>=K+1>>>0){var
i=b[3],aR=b[4],z=B(b[1][5]),aS=B(b[1][4]),M=B(b[1][3]),N=B(b[1][2]),O=B(b[1][1]),aV=J(aR,q(c));n(c,1);var
R=m(c),Y=0;if(typeof
R==="number"){var
av=0;if(1===R||X===R)av=1;else
Y=1;if(av)var
ar=x(c)}else
Y=1;if(Y)var
ar=be(c)?h6(c):0;var
k=aA([0,aU],[0,ar],aV,0);if(h){switch(h[1]){case
0:var
D=[0,[0,O,1,i,k]];break;case
1:var
D=[1,[0,N,1,i,k]];break;case
2:var
D=aq(c,d,1,i,M,z,k);break;case
3:var
D=[3,[0,z,i,k]];break;default:var
D=[4,[0,aS,1,i,k]]}var
as=D}else{var
S=cH(O),T=cH(N),U=cH(M),W=cH(z),at=function(a){return[2,[0,af$,0,i,k]]},aw=0;if(0===S&&0===T){var
ay=0;if(0===U&&0===W)var
E=at(0);else
ay=1;if(ay)var
E=aq(c,d,0,i,M,z,k)}else
aw=1;if(aw){var
az=0;if(0===T&&0===U&&W<=S){a7(function(a){return u(c,[0,a[1],[3,d,a[2][1][2][1]]])},z);var
E=[0,[0,O,0,i,k]];az=1}if(!az){var
aC=0;if(0===S&&0===U&&W<=T){a7(function(a){return u(c,[0,a[1],[11,d,a[2][1][2][1]]])},z);var
E=[1,[0,N,0,i,k]];aC=1}if(!aC){u(c,[0,aW,[5,d]]);var
E=at(0)}}}var
as=E}return as}}else if(10===K){var
an=A(c),aT=q(c);r(c);var
ao=m(c),aE=0;if(typeof
ao==="number"){var
P=ao-2|0,Z=0;if(aD<P>>>0){if(bh>=P+1>>>0)Z=1}else if(7===P){n(c,9);var
Q=m(c),aG=0;if(typeof
Q==="number"){var
aH=0;if(1===Q||X===Q)aH=1;if(aH){var
ap=1;aG=1}}if(!aG)var
ap=0;u(c,[0,an,[6,ap]]);Z=1}if(Z)aE=1}if(!aE)u(c,[0,an,af5]);var
b=[0,b[1],b[2],1,aT];continue}}var
ab=b[2],a=b[1],au=o(aL,aK,c),ac=au[2],e=ac[2],p=ac[1],l=au[1],f=p[2][1],ad=p[1];if(V(f,y))var
g=b;else{var
ae=ax(f,0),aa=97<=ae?1:0,aM=aa?ae<=af?1:0:aa;if(aM)u(c,[0,ad,[10,d,f]]);if(j(a2[3],f,ab))u(c,[0,ad,[4,d,f]]);var
t=b[4],v=b[3],w=j(a2[4],f,ab),F=[0,b[1],w,v,t],H=function(e){return function(a,b){if(h&&h[1]!==a)return u(c,[0,b,[9,d,h,e]]);return 0}}(f);if(typeof
e==="number"){var
_=0;if(h)switch(h[1]){case
0:u(c,[0,l,[3,d,f]]);var
g=F;break;case
1:u(c,[0,l,[11,d,f]]);var
g=F;break;case
4:u(c,[0,l,[2,d,f]]);var
g=F;break;default:_=1}else
_=1;if(_)var
g=[0,[0,a[1],a[2],a[3],a[4],[0,[0,l,[0,p]],a[5]]],w,v,t]}else
switch(e[0]){case
0:u(c,[0,e[1],[9,d,h,f]]);var
g=F;break;case
1:var
ag=e[1],aN=e[2];H(0,ag);var
g=[0,[0,[0,[0,l,[0,p,[0,ag,aN]]],a[1]],a[2],a[3],a[4],a[5]],w,v,t];break;case
2:var
ah=e[1],aO=e[2];H(1,ah);var
g=[0,[0,a[1],[0,[0,l,[0,p,[0,ah,aO]]],a[2]],a[3],a[4],a[5]],w,v,t];break;case
3:var
ai=e[1],aP=e[2];H(2,ai);var
g=[0,[0,a[1],a[2],[0,[0,l,[0,p,[0,ai,aP]]],a[3]],a[4],a[5]],w,v,t];break;default:var
aj=e[1],aQ=e[2];H(4,aj);var
g=[0,[0,a[1],a[2],a[3],[0,[0,l,[0,p,[0,aj,aQ]]],a[4]],a[5]],w,v,t]}}var
am=m(c),aI=0;if(typeof
am==="number"){var
L=am-2|0,$=0;if(aD<L>>>0){if(bh>=L+1>>>0)$=1}else if(6===L){G(c,22);n(c,8);$=1}if($)aI=1}if(!aI)n(c,9);var
b=g}},b);return[0,c,h,p([0,f],0,0)]}]},lT=function(a,b,c){if(typeof
c==="number")return[0,a,b];if(0===c[0]){var
h=c[1],i=z(a,h),m=c[2];return 0===i?m===b?c:[0,h,b]:0<=i?[1,2,a,b,c,0]:[1,2,a,b,0,c]}var
d=c[5],e=c[4],f=c[3],g=c[2],j=z(a,g),n=c[1];if(0===j)return f===b?c:[1,n,a,b,e,d];if(0<=j){var
k=lT(a,b,d);return d===k?c:FI(e,g,f,k)}var
l=lT(a,b,e);return e===l?c:FI(l,g,f,d)},jp=function(a){return[0,hs(a)]},sQ=FQ([0,function(a,b){var
d=b[2],e=a[2],c=FW(a[1],b[1]);return 0===c?j(FX,e,d):c}]),kM=function(a,b,c){var
d=c[2][1],e=c[1];return V(d,y)?b:j(a2[3],d,b)?(u(a,[0,e,[0,d]]),b):j(a2[4],d,b)},sR=function(c){return function(a){var
b=a[2];switch(b[0]){case
0:var
d=b[1][1];return aI(function(a,b){var
c=0===b[0]?b[1][2][2]:b[1][2][1];return k(sR(a),c)},c,d);case
1:var
e=b[1][1];return aI(function(a,b){if(2===b[0])return a;var
c=b[1][2][1];return k(sR(a),c)},c,e);case
2:return[0,b[1][1],c];default:return C(ajy)}}},w=Fr(ajB,ajA[1]),mv=function(a,b,c){var
n=a?a[1]:0,g=b?b[1]:0,d=A(c),e=m(c);if(typeof
e==="number")switch(e){case
103:var
o=q(c);r(c);return[0,[0,d,[0,0,p([0,o],0,0)]]];case
104:var
s=q(c);r(c);return[0,[0,d,[0,1,p([0,s],0,0)]]];case
126:if(n){var
t=q(c);r(c);return[0,[0,d,[0,2,p([0,t],0,0)]]]}break}else if(4===e[0]){var
h=e[3];if(l(h,h$)){if(!l(h,DB)&&g&&mn(1,c)){var
u=q(c);r(c);return[0,[0,d,[0,4,p([0,u],0,0)]]]}}else if(g&&mn(1,c)){var
v=q(c);r(c);var
f=m(c),k=0;if(typeof
f!=="number"&&4===f[0]&&!l(f[3],DB)){var
w=A(c);r(c);var
j=ae(d,w),i=5;k=1}if(!k)var
j=d,i=3;return[0,[0,j,[0,i,p([0,v],0,0)]]]}}return 0},GX=function(a,b,c,d,e){if(1===b)b_(e,81);var
f=q(e);r(e);var
g=x(e);if(a)var
k=p([0,J(a[1],f)],[0,g],0),j=k,i=I(afb,d),h=-c;else
var
j=p([0,f],[0,g],0),i=d,h=c;return[30,[0,h,i,j]]},GY=function(a,b,c,d){var
e=q(d);r(d);var
f=x(d);if(a)var
j=p([0,J(a[1],e)],[0,f],0),k=I(afc,c),i=j,h=k,g=lB(Et,b);else
var
i=p([0,e],[0,f],0),h=c,g=b;return[31,[0,g,h,i]]},ac=function
b(a){return b.fun(a)},jj=function
b(a){return b.fun(a)},GZ=function
b(a){return b.fun(a)},G0=function
b(a){return b.fun(a)},rQ=function
d(a,b,c){return d.fun(a,b,c)},mw=function
b(a){return b.fun(a)},rR=function
e(a,b,c,d){return e.fun(a,b,c,d)},rS=function
b(a){return b.fun(a)},rT=function
e(a,b,c,d){return e.fun(a,b,c,d)},rU=function
b(a){return b.fun(a)},rV=function
c(a,b){return c.fun(a,b)},mx=function
b(a){return b.fun(a)},G1=function
b(a){return b.fun(a)},my=function
e(a,b,c,d){return e.fun(a,b,c,d)},mz=function
f(a,b,c,d,e){return f.fun(a,b,c,d,e)},G2=function
b(a){return b.fun(a)},G3=function
c(a,b){return c.fun(a,b)},rW=function
b(a){return b.fun(a)},G4=function
b(a){return b.fun(a)},G5=function
b(a){return b.fun(a)},G6=function
b(a){return b.fun(a)},G7=function
b(a){return b.fun(a)},rX=function
c(a,b){return c.fun(a,b)},G8=function
b(a){return b.fun(a)},G9=function
b(a){return b.fun(a)},rY=function
b(a){return b.fun(a)},kv=function
c(a,b){return c.fun(a,b)},G_=function
b(a){return b.fun(a)},hv=function
b(a){return b.fun(a)},mA=function
b(a){return b.fun(a)},G$=function
c(a,b){return c.fun(a,b)},rZ=function
b(a){return b.fun(a)},Ha=function
b(a){return b.fun(a)},Hb=function
b(a){return b.fun(a)},Hc=function
b(a){return b.fun(a)},Hd=function
b(a){return b.fun(a)},mB=function
e(a,b,c,d){return e.fun(a,b,c,d)},r0=function
b(a){return b.fun(a)},mC=function
b(a){return b.fun(a)},r1=function
c(a,b){return c.fun(a,b)},mD=function
e(a,b,c,d){return e.fun(a,b,c,d)},r2=function
b(a){return b.fun(a)},h7=function
b(a){return b.fun(a)},He=function
b(a){return b.fun(a)},iz=function
b(a){return b.fun(a)},mE=function
b(a){return b.fun(a)},mF=function
b(a){return b.fun(a)},r3=function
c(a,b){return c.fun(a,b)},Hf=function
c(a,b){return c.fun(a,b)},Hg=function
b(a){return b.fun(a)},Hh=function
b(a){return b.fun(a)},mG=function
b(a){return b.fun(a)},Hi=function
d(a,b,c){return d.fun(a,b,c)};a(ac,function(a){return k(G0,a)});a(jj,function(a){if(1-an(a))G(a,bp);return o(0,function(a){n(a,86);return k(ac,a)},a)});a(GZ,function(a){if(1-an(a))G(a,bp);var
b=A(a);n(a,86);return mu(a)?[2,j(r1,a,b)]:[1,o([0,b],ac,a)]});a(G0,function(a){var
c=A(a),b=rH(0,a);return s(rQ,b,c,k(mw,b))});a(rQ,function(a,b,c){var
d=m(a);if(typeof
d==="number"&&41===d)return o([0,b],function(a){n(a,41);var
b=k(mw,rH(1,a));mp(a,85);var
d=k(ac,a);mp(a,86);var
e=k(ac,a);return[17,[0,c,b,d,e,p(0,[0,x(a)],0)]]},a);return c});a(mw,function(a){var
c=A(a);if(89===m(a)){var
d=q(a);r(a);var
b=d}else
var
b=0;return bA(rR,a,[0,b],c,k(rS,a))});a(rR,function(a,b,c,d){var
h=b?b[1]:0;if(89!==m(a))return d;var
i=[0,d,0];return o([0,c],function(a){var
b=i;for(;;){if(ak(a,89)){var
b=[0,k(rS,a),b];continue}var
c=B(b);if(c){var
d=c[2];if(d){var
e=d[2],f=d[1],g=c[1];return[22,[0,[0,g,f,e],p([0,h],0,0)]]}}throw t([0,R,afd],1)}},a)});a(rS,function(a){var
c=A(a);if(91===m(a)){var
d=q(a);r(a);var
b=d}else
var
b=0;return bA(rT,a,[0,b],c,k(rU,a))});a(rT,function(a,b,c,d){var
h=b?b[1]:0;if(91!==m(a))return d;var
i=[0,d,0];return o([0,c],function(a){var
b=i;for(;;){if(ak(a,91)){var
b=[0,k(rU,a),b];continue}var
c=B(b);if(c){var
d=c[2];if(d){var
e=d[2],f=d[1],g=c[1];return[23,[0,[0,g,f,e],p([0,h],0,0)]]}}throw t([0,R,afe],1)}},a)});a(rU,function(a){return j(rV,a,k(mx,a))});a(rV,function(a,b){var
d=m(a);if(typeof
d==="number"&&11===d&&!a[15]){var
c=j(kv,a,b);return bA(mB,a,c[1],0,[0,c[1],[0,0,[0,c,0],0,0]])}return b});a(mx,function(a){var
b=m(a);if(typeof
b==="number"&&85===b)return o(0,function(a){var
b=q(a);n(a,85);var
c=p([0,b],0,0);return[11,[0,k(mx,a),c]]},a);return k(G1,a)});a(G1,function(a){var
b=A(a);return bA(my,0,a,b,k(G5,a))});a(my,function(a,b,c,d){var
f=a?a[1]:0;if(be(b))return d;var
e=m(b);if(typeof
e==="number"){if(6===e){r(b);return bJ(mz,f,0,b,c,d)}if(10===e){var
g=O(1,b);if(typeof
g==="number"&&6===g){G(b,aff);n(b,10);n(b,6);return bJ(mz,f,0,b,c,d)}G(b,afg);return d}if(83===e){r(b);if(6!==m(b))G(b,46);n(b,6);return bJ(mz,1,1,b,c,d)}}return d});a(mz,function(f,b,c,d,e){return bA(my,[0,f],c,d,o([0,d],function(a){if(!b&&ak(a,7))return[16,[0,e,p(0,[0,x(a)],0)]];var
d=k(ac,a);n(a,7);var
c=[0,e,d,p(0,[0,x(a)],0)];return f?[21,[0,c,b]]:[20,c]},c))});a(G2,function(a){return j(G3,a,j(w[13],0,a))});a(G3,function(a,b){var
c=[0,b[1],[0,b]];for(;;){var
d=c[2],g=c[1];if(10===m(a)&&GK(1,a)){var
e=o([0,g],function(b){return function(a){n(a,10);return[0,b,a3(a)]}}(d),a),f=e[1],c=[0,f,[1,[0,f,e[2]]]];continue}return d}});a(rW,function(a){aB(a,0);if(4===m(a)){r(a);var
c=k(rW,a);n(a,5);var
b=c}else
var
b=cO(a)?[0,k(G2,a)]:(G(a,51),0);aF(a);return b});a(G4,function(a){return o(0,function(a){var
c=q(a);n(a,46);var
b=k(rW,a);if(!b)return afh;var
d=b[1],e=be(a)?0:k(mE,a);return[24,[0,d,e,p([0,c],0,0)]]},a)});a(G5,function(a){var
d=A(a),b=m(a),c=0;if(typeof
b==="number")switch(b){case
4:return k(Hc,a);case
6:return k(G9,a);case
46:return k(G4,a);case
53:return o(0,function(a){var
c=q(a);r(a);var
b=k(r2,a),d=b[2],e=b[1];return[15,[0,d,e,p([0,c],0,0)]]},a);case
98:return k(Hd,a);case
104:return o(0,G6,a);case
106:var
s=q(a);r(a);return[0,d,[10,p([0,s],[0,x(a)],0)]];case
125:return o(0,function(a){var
b=q(a);r(a);var
c=x(a),d=k(ac,a);return[25,[0,d,p([0,b],[0,c],0)]]},a);case
126:return o(0,function(a){var
b=q(a);r(a);var
c=x(a),d=k(ac,a);return[27,[0,d,p([0,b],[0,c],0)]]},a);case
127:return o(0,function(a){var
b=q(a);r(a);var
c=x(a),d=o(0,function(a){var
b=k(h7,a);function
c(a){if(1-ak(a,41))throw t(cP,1);var
b=k(mw,a);if(!a[16]&&85===m(a))throw t(cP,1);return[1,[0,b[1],b]]}return[0,b,mq(a,[0,A(a)],c),1,0,0]},a);return[18,[0,d,p([0,b],[0,c],0)]]},a);case
0:case
2:var
f=bA(mD,0,1,1,a);return[0,f[1],[14,f[2]]];case
130:case
131:c=2;break;case
41:case
42:c=1;break;case
30:case
31:var
n=q(a);r(a);return[0,d,[32,[0,31===b?1:0,p([0,n],[0,x(a)],0)]]]}else
switch(b[0]){case
2:var
e=b[1],u=e[3],v=e[2],w=e[1];if(e[4])b_(a,81);var
y=q(a);r(a);return[0,w,[29,[0,v,u,p([0,y],[0,x(a)],0)]]];case
4:var
i=b[3];if(l(i,ih))if(l(i,jG))c=1;else
c=2;else{if(a[28][1])return o(0,function(a){var
f=q(a);hu(a,afk);var
g=bo(a,k(iz,a)),b=k(rZ,a);if(rN(a))var
d=rP(a,k(mG,a)),c=b;else
var
h=k(mG,a),e=au(a)[2],d=h,c=j(e,b,function(a,b){return j(K(a,420776873,12),a,b)});return[13,[0,g,c,d,p([0,f],0,0)]]},a);c=1}break;case
7:if(!l(b[1],lk)){G(a,89);return[0,d,afl]}break;case
12:var
z=b[3],B=b[2],C=b[1],D=0;return o(0,function(a){return GX(D,C,B,z,a)},a);case
13:var
E=b[3],F=b[2],H=0;return o(0,function(a){return GY(H,F,E,a)},a)}switch(c){case
0:var
g=k(G8,a);return g?[0,d,g[1]]:(aq(afi,a),[0,d,afj]);case
2:return o(0,function(a){return[26,k(rY,a)]},a);default:var
h=k(mF,a);return[0,h[1],[19,h[2]]]}});a(G6,function(a){var
c=q(a);r(a);var
b=m(a);if(typeof
b!=="number")switch(b[0]){case
12:return GX([0,c],b[1],b[2],b[3],a);case
13:return GY([0,c],b[2],b[3],a)}aq(afm,a);return afn});a(G7,function(a){var
b=0;if(typeof
a==="number")switch(a){case
29:case
114:case
115:case
116:case
117:case
118:case
119:case
120:case
121:case
122:case
123:case
124:b=1;break}else if(11===a[0])b=1;return b?1:0});a(rX,function(a,b){var
c=q(a),d=o(0,r,a)[1],e=p([0,c],[0,x(a)],0);return[0,[19,[0,[0,cn(0,[0,d,b])],0,e]]]});a(G8,function(a){var
b=q(a),c=m(a);if(typeof
c==="number")switch(c){case
29:r(a);return[0,[4,p([0,b],[0,x(a)],0)]];case
114:r(a);return[0,[0,p([0,b],[0,x(a)],0)]];case
115:r(a);return[0,[1,p([0,b],[0,x(a)],0)]];case
116:r(a);return[0,[2,p([0,b],[0,x(a)],0)]];case
117:r(a);return[0,[5,p([0,b],[0,x(a)],0)]];case
118:r(a);return[0,[6,p([0,b],[0,x(a)],0)]];case
119:r(a);return[0,[7,p([0,b],[0,x(a)],0)]];case
120:r(a);return[0,[3,p([0,b],[0,x(a)],0)]];case
121:r(a);return[0,[9,p([0,b],[0,x(a)],0)]];case
122:r(a);return[0,[33,p([0,b],[0,x(a)],0)]];case
123:r(a);return[0,[34,p([0,b],[0,x(a)],0)]];case
124:r(a);return[0,[35,p([0,b],[0,x(a)],0)]];case
128:return j(rX,a,afo);case
129:return j(rX,a,afp)}else if(11===c[0]){var
d=c[1];r(a);var
e=x(a),f=d?-883944824:737456202;return[0,[8,f,p([0,b],[0,e],0)]]}return 0});a(G9,function(a){return o(0,function(a){var
h=q(a);n(a,6);var
b=iv(0,a),c=0;for(;;){var
d=m(b);if(typeof
d==="number"){var
e=0;if(7!==d&&X!==d)e=1;if(!e){var
f=B(c);n(a,7);return[28,[0,f,p([0,h],[0,x(a)],0)]]}}var
g=[0,o(0,function(a){if(!ak(a,12)){var
b=m(a),h=0;if(typeof
b==="number"&&(cD===b||ca===b&&h4(1,a))){var
c=mv(0,0,a);h=1}if(!h)var
c=0;var
l=cO(a),f=O(1,a);if(l&&typeof
f==="number"&&1>=f+hB>>>0){var
p=a3(a),q=ak(a,85);n(a,86);return[1,[0,p,k(ac,a),c,q]]}var
o=c?1:0;if(o)G(a,50);return[0,k(ac,a)]}var
i=cO(a),d=O(1,a),g=0;if(i&&typeof
d==="number"&&1>=d+hB>>>0){var
j=a3(a);if(85===m(a)){G(a,49);r(a)}n(a,86);var
e=[0,j];g=1}if(!g)var
e=0;return[2,[0,e,k(ac,a)]]},b),c];if(7!==m(b))n(b,9);var
c=g}},a)});a(rY,function(a){var
e=q(a),b=m(a),d=0;if(typeof
b==="number")switch(b){case
130:var
c=1;break;case
131:var
c=2;break;default:d=1}else if(4===b[0]&&!l(b[3],jG))var
c=0;else
d=1;if(d)var
c=C(afq);var
f=A(a);r(a);var
g=x(a),h=k(mx,a);return[0,f,h,p([0,e],[0,g],0),c]});a(kv,function(a,b){return[0,b[1],[0,0,b,0]]});a(G_,function(a){return o(0,function(a){aB(a,0);var
b=j(w[13],0,a);aF(a);if(1-an(a))G(a,bp);var
c=ak(a,85);n(a,86);return[0,[0,b],k(ac,a),c]},a)});var
Hj=function(a){var
b=O(1,a);if(typeof
b==="number"&&1>=b+hB>>>0)return k(G_,a);return j(kv,a,k(ac,a))};a(hv,function(b){var
t=0;return function(a){var
e=t,d=a;for(;;){var
c=m(b);if(typeof
c==="number")switch(c){case
5:case
12:case
113:var
h=12===c?[0,o(0,function(a){var
b=q(a);n(a,12);var
c=p([0,b],0,0);return[0,Hj(a),c]},b)]:0;return[0,e,B(d),h,0]}else if(4===c[0]&&!l(c[3],iP)){var
f=0;if(86!==O(1,b)&&85!==O(1,b))f=1;if(!f){var
i=0!==e?1:0,j=i||(0!==d?1:0);if(j)G(b,94);var
s=o(0,function(a){var
b=q(a);r(a);if(85===m(a))G(a,93);var
c=p([0,b],0,0);return[0,k(jj,a),c]},b);if(5!==m(b))n(b,9);var
e=[0,s];continue}}var
g=[0,Hj(b),d];if(5!==m(b))n(b,9);var
d=g}}});a(mA,function(a){return o(0,function(a){var
c=q(a);n(a,4);var
b=j(hv,a,0),d=q(a);n(a,5);var
e=aA([0,c],[0,x(a)],d,0);return[0,b[1],b[2],b[3],e]},a)});a(G$,function(a,b){var
c=b;for(;;){var
d=m(a);if(typeof
d==="number"){var
e=d-5|0,f=0;if(7<e>>>0){if(cu===e)f=1}else if(5<e-1>>>0)f=1;if(f){var
g=12===d?[0,o(0,function(a){var
f=q(a);n(a,12);var
b=O(1,a),e=0;if(typeof
b==="number")if(85===b){aB(a,0);var
g=j(w[13],0,a);aF(a);n(a,85);n(a,86);var
d=1,c=[0,g]}else if(86===b){aB(a,0);var
i=j(w[13],0,a);aF(a);n(a,86);var
d=0,c=[0,i]}else
e=1;else
e=1;if(e)var
d=0,c=0;var
h=k(ac,a);return[0,c,h,d,p([0,f],0,0)]},a)]:0;return[0,B(c),g,0]}}var
h=[0,o(0,function(a){var
c=m(a),i=0;if(typeof
c!=="number"&&2===c[0]){var
b=c[1],d=b[4],e=b[3],f=b[2],g=b[1];if(d)b_(a,81);n(a,[2,[0,g,f,e,d]]);var
h=[1,[0,g,[0,f,e,p(0,[0,x(a)],0)]]];i=1}if(!i){aB(a,0);var
l=j(w[13],0,a);aF(a);var
h=[0,l]}var
o=ak(a,85);return[0,h,k(jj,a),o]},a),c];if(5!==m(a))n(a,9);var
c=h}});a(rZ,function(a){return o(0,function(a){var
c=q(a);n(a,4);var
b=j(G$,a,0),d=q(a);n(a,5);var
e=aA([0,c],[0,x(a)],d,0);return[0,b[1],b[2],e]},a)});a(Ha,function(a){var
r=q(a);n(a,4);var
b=iv(0,a),d=m(b),e=0;if(typeof
d==="number")switch(d){case
5:var
c=afr;break;case
130:var
z=O(1,b),D=0;if(typeof
z==="number"&&86===z){var
A=[0,j(hv,b,0)];D=1}if(!D)var
A=[1,k(ac,b)];var
c=A;break;case
42:e=2;break;case
12:case
113:var
c=[0,j(hv,b,0)];break;default:e=1}else if(4===d[0])if(l(d[3],jG))e=2;else{var
B=O(1,b),E=0;if(typeof
B==="number"&&1>=B+hB>>>0){var
C=[0,j(hv,b,0)];E=1}if(!E)var
C=[1,k(ac,b)];var
c=C}else
e=1;switch(e){case
1:if(k(G7,d)){var
t=O(1,b),F=0;if(typeof
t==="number"&&1>=t+hB>>>0){var
u=[0,j(hv,b,0)];F=1}if(!F)var
u=[1,k(ac,b)];var
c=u}else
var
c=[1,k(ac,b)];break;case
2:var
c=k(Hb,b);break}if(0===c[0])var
f=c;else{var
h=c[1];if(a[15])var
y=c;else{var
i=m(a),p=0;if(typeof
i==="number")if(5===i)var
o=11===O(1,a)?[0,j(hv,a,[0,j(kv,a,h),0])]:[1,h];else if(9===i){n(a,9);var
o=[0,j(hv,a,[0,j(kv,a,h),0])]}else
p=1;else
p=1;if(p)var
o=c;var
y=o}var
f=y}var
G=q(a);n(a,5);var
v=x(a);if(0===f[0])var
g=f[1],H=aA([0,r],[0,v],G,0),w=[0,[0,g[1],g[2],g[3],H]];else
var
w=[1,s(Hi,f[1],r,v)];return w});a(Hb,function(a){var
c=O(1,a);if(typeof
c==="number"&&1>=c+hB>>>0)return[0,j(hv,a,0)];var
b=A(a),d=j(Hf,a,k(h7,a)),e=k(s(my,0,a,b),d),f=k(k(rV,a),e),g=k(j(k(rT,a),0,b),f),h=k(j(k(rR,a),0,b),g);return[1,k(j(rQ,rH(0,a),b),h)]});a(Hc,function(a){var
d=A(a),c=o(0,Ha,a),b=c[2],e=c[1];return 0===b[0]?bA(mB,a,d,0,[0,e,b[1]]):b[1]});a(Hd,function(a){var
b=A(a),c=bo(a,k(iz,a));return bA(mB,a,b,c,k(mA,a))});a(mB,function(a,b,c,d){return o([0,b],function(a){n(a,11);return[12,[0,c,d,k(r0,a),0]]},a)});a(r0,function(a){return mu(a)?[1,k(mC,a)]:[0,k(ac,a)]});a(mC,function(a){return o(0,function(a){var
f=q(a),g=ak(a,ln);aB(a,0);var
h=a3(a);aF(a);var
b=m(a),e=0;if(typeof
b==="number"&&ao===b){var
i=q(a);n(a,ao);var
j=J(i,q(a)),d=j,c=[0,k(ac,a)];e=1}if(!e)var
d=0,c=0;return[0,g,[0,h,c],aA([0,f],0,d,0)]},a)});a(r1,function(a,b){return o([0,b],mC,a)});var
mH=function(a,b,c){return o([0,b],function(a){var
b=k(mA,a);n(a,86);return[0,c,b,k(r0,a),0]},a)},Hk=function(a,b,c,d,e){var
h=cq(a,d),f=mH(a,b,bo(a,k(iz,a))),g=[0,f[1],[12,f[2]]],i=[0,h,[0,g],0,0!==c?1:0,0,1,0,p([0,e],0,0)];return[0,[0,g[1],i]]},mI=function(a,b,c,d,e,f,g){var
h=g[2],i=g[1];if(1-an(a))G(a,bp);return[0,o([0,b],function(a){var
b=ak(a,85),g=GN(a,86)?k(ac,a):[0,i,afs];return[0,h,[0,g],b,0!==d?1:0,0!==e?1:0,0,c,p([0,f],0,0)]},a)]},kw=function(a,b){var
c=m(b);if(typeof
c==="number"&&10>c)switch(c){case
1:if(!a)return 0;break;case
3:if(a)return 0;break;case
8:case
9:return r(b)}return ht(b,9)},kx=function(a,b){return b?u(a,[0,b[1][1],bh]):0},ky=function(a,b){return b?u(a,[0,b[1],99]):0},aft=function(a,b,c,d,e,f,g,h,i){var
E=c,D=d,s=e,y=f,z=g,v=h;for(;;){var
B=m(a);if(typeof
B==="number")switch(B){case
6:ky(a,z);var
$=O(1,a);if(typeof
$==="number"&&6===$){kx(a,s);return[4,o([0,i],function(a){var
l=J(v,q(a));n(a,6);n(a,6);var
o=a3(a);n(a,7);n(a,7);var
b=m(a),h=0;if(typeof
b==="number"){var
j=0;if(4===b||98===b)j=1;if(j){var
c=mH(a,i,bo(a,k(iz,a))),g=0,f=[0,c[1],[12,c[2]]],e=1,d=0;h=1}}if(!h){var
r=ak(a,85),s=x(a);n(a,86);var
g=s,f=k(ac,a),e=0,d=r}return[0,o,f,d,0!==y?1:0,e,p([0,l],[0,g],0)]},a)]}var
P=J(v,q(a));n(a,6);var
H=O(1,a);if(typeof
H!=="number"&&4===H[0]&&!l(H[3],h$)&&0===y)return[5,o([0,i],function(a){var
c=k(h7,a),d=c[1];r(a);var
l=k(ac,a);n(a,7);var
e=m(a),h=0,j=[0,c,[0,d],0,0,0];if(typeof
e==="number"){var
b=e+tE|0,i=0;if(1<b>>>0)if(-18===b){r(a);var
f=2}else
i=1;else
var
f=b?(r(a),n(a,85),1):(r(a),n(a,85),0);if(!i){var
g=f;h=1}}if(!h)var
g=3;n(a,86);var
o=k(ac,a);return[0,[0,d,j],o,l,s,g,p([0,P],[0,x(a)],0)]},a)];return[2,o([0,i],function(a){if(86===O(1,a)){var
c=a3(a);n(a,86);var
b=[0,c]}else
var
b=0;var
d=k(ac,a);n(a,7);var
e=x(a);n(a,86);var
f=k(ac,a);return[0,b,d,f,0!==y?1:0,s,p([0,P],[0,e],0)]},a)];case
42:if(E){if(0!==s)throw t([0,R,afz],1);var
ai=[0,A(a)],aj=J(v,q(a));r(a);var
E=0,D=0,y=ai,v=aj;continue}break;case
126:if(0===s){var
aa=0;if(h4(1,a)||6===O(1,a))aa=1;if(aa){var
E=0,D=0,s=mv(afA,0,a);continue}}break;case
103:case
104:if(0===s){var
E=0,D=0,s=mv(0,0,a);continue}break;case
4:case
98:ky(a,z);kx(a,s);return[3,o([0,i],function(a){var
b=A(a),c=mH(a,b,bo(a,k(iz,a)));return[0,c,0!==y?1:0,p([0,v],0,0)]},a)]}else if(4===B[0]&&!l(B[3],v8)&&D){if(0!==s)throw t([0,R,afB],1);var
al=[0,A(a)],am=J(v,q(a));r(a);var
E=0,D=0,z=al,v=am;continue}if(y){var
T=y[1];if(z)return C(afw);if(typeof
B==="number"&&1>=B+hB>>>0)return mI(a,i,s,0,z,0,[0,T,[3,cn(p([0,v],0,0),[0,T,afx])]])}else if(z){var
_=z[1];if(typeof
B==="number"&&1>=B+hB>>>0)return mI(a,i,s,y,0,0,[0,_,[3,cn(p([0,v],0,0),[0,_,afy])]])}var
U=function(a){aB(a,0);var
b=j(w[20],0,a);aF(a);return b},ag=q(a),K=U(a),W=K[1],F=K[2];if(3===F[0]){var
M=F[1][2][1],ab=0;if(l(M,iV)&&l(M,jt))ab=1;if(!ab){var
X=m(a);if(typeof
X==="number"){var
N=X-5|0;if(92<N>>>0){if(94>=N+1>>>0){ky(a,z);kx(a,s);return Hk(a,i,y,F,v)}}else if(1>=N+Ms>>>0)return mI(a,i,s,y,z,v,[0,W,F])}cq(a,F);var
Y=U(a),Z=V(M,iV),ah=J(v,ag);ky(a,z);kx(a,s);return[0,o([0,i],function(a){var
b=Y[1],m=cq(a,Y[2]),c=mH(a,i,0),f=c[2][2];if(Z){var
d=f[2],h=0;if(d[1]){u(a,[0,b,28]);h=1}else{var
j=0;if(d[2]||d[3])j=1;else
h=1;if(j)u(a,[0,b,27])}}else{var
e=f[2],w=0;if(e[1])u(a,[0,b,71]);else{var
g=e[2],k=0;if(e[3]){u(a,[0,b,70]);k=1}else{var
l=0;if(g&&!g[2])k=1;else
l=1;if(l){u(a,[0,b,70]);w=1}}}}var
n=p([0,ah],0,0),o=0,q=0,r=0,s=0!==y?1:0,t=0,v=Z?[1,c]:[2,c];return[0,m,v,t,s,r,q,o,n]},a)]}}var
G=K[2],L=m(a);if(typeof
L==="number"){var
ad=0;if(4!==L&&98!==L)ad=1;if(!ad){ky(a,z);kx(a,s);return Hk(a,i,y,G,v)}}var
Q=0!==y?1:0,an=0;if(3===G[0]){var
S=G[1],I=S[2][1],ao=0,af=S[1];if(b){var
ae=0;if(V(iM,I)||Q&&V(ic,I))ae=1;if(ae){u(a,[0,af,[15,I,Q,0,0]]);an=1;ao=1}}}return mI(a,i,s,y,z,v,[0,W,G])}};a(mD,function(v,b,c,d){var
e=b?2===m(d)?1:0:b,G=b?1-e:b;return o(0,function(a){var
L=q(a),M=e?2:0;n(a,M);var
b=iv(0,a),l=afC;for(;;){var
g=l[3],h=l[2],d=l[1];if(v&&c)throw t([0,R,afu],1);if(G&&!c)throw t([0,R,afv],1);var
i=A(b),s=m(b);if(typeof
s==="number"){var
j=0;if(13<=s){if(X===s){var
f=[0,B(d),h,g];j=1}}else if(s)switch(s-1|0){case
0:if(!e){var
f=[0,B(d),h,g];j=1}break;case
2:if(e){var
f=[0,B(d),h,g];j=1}break;case
11:if(!c){r(b);var
y=m(b);if(typeof
y==="number"&&10>y)switch(y){case
1:case
3:case
8:case
9:u(b,[0,i,36]);kw(e,b);continue}var
K=rL(b);k(rJ(b),K);u(b,[0,i,c2]);r(b);kw(e,b);continue}var
D=q(b);r(b);var
w=m(b),z=0;if(typeof
w==="number"&&10>w)switch(w){case
1:case
3:case
8:case
9:kw(e,b);var
E=m(b),C=0;if(typeof
E==="number"){var
F=E-1|0;if(2>=F>>>0)switch(F){case
0:if(G){var
f=[0,B(d),1,D];j=1;z=1;C=1}break;case
1:break;default:u(b,[0,i,35]);var
f=[0,B(d),h,g];j=1;z=1;C=1}}if(!C){u(b,[0,i,97]);continue}break}if(!z){var
H=[1,o([0,i],function(c){return function(a){var
b=p([0,c],0,0);return[0,k(ac,a),b]}}(D),b)];kw(e,b);var
l=[0,[0,H,d],h,g];continue}break}if(j){var
N=f[3],O=f[2],P=f[1],Q=J(N,q(a)),S=e?3:1;n(a,S);return[0,e,O,P,aA([0,L],[0,x(a)],Q,0)]}}var
I=aft(b,v,v,v,0,0,0,0,i);kw(e,b);var
l=[0,[0,I,d],h,g]}},d)});a(r2,function(a){if(ak(a,41)){var
b=0;for(;;){var
c=[0,k(mF,a),b],d=m(a);if(typeof
d==="number"&&9===d){n(a,9);var
b=c;continue}var
e=GT(a,B(c));break}}else
var
e=0;return[0,e,bA(mD,0,0,0,a)]});a(h7,function(a){var
b=a3(a),c=b[2],d=c[1],e=b[1],f=c[2];if(rK(d))u(a,[0,e,ch]);return[0,e,[0,d,f]]});a(He,function(a){return o(0,function(a){var
f=k(h7,a),b=m(a),e=0;if(typeof
b==="number")if(41===b)var
g=1,d=g,c=[1,o(0,function(a){r(a);return k(ac,a)},a)];else if(86===b)var
d=0,c=[1,k(jj,a)];else
e=1;else
e=1;if(e)var
d=0,c=[0,hs(a)];return[0,f,c,d]},a)});var
Hl=function(a,b){var
e=GH(a,b);if(e)var
f=e;else{var
g=0;if(typeof
b==="number"&&1>=b+tE>>>0){var
c=1;g=1}if(!g)var
c=0;if(!c){var
d=0;if(typeof
b==="number")switch(b){case
15:case
29:case
30:case
31:case
41:case
42:case
46:case
53:case
114:case
115:case
116:case
117:case
118:case
119:case
120:case
121:case
122:case
123:case
124:case
125:case
126:d=1;break}else
switch(b[0]){case
4:if(rK(b[3]))return 1;break;case
11:d=1;break}return d?1:0}var
f=c}return f};a(iz,function(a){if(98!==m(a))return 0;if(1-an(a))G(a,bp);var
b=o(0,function(a){var
y=q(a);n(a,98);var
f=0,e=0;for(;;){if(Hl(a,m(a)))var
s=mt(0,function(g){return function(a){var
i=mv(0,afD,a),c=k(He,a),b=c[2],j=b[3],l=b[2],n=b[1],o=c[1],d=m(a),h=0;if(typeof
d==="number"&&82===d){r(a);var
f=1,e=[0,k(ac,a)];h=1}if(!h){if(g)u(a,[0,o,57]);var
f=g,e=0}return[0,[0,n,l,j,i,e],f]}}(f),a),h=s[2],d=[0,s[1],e];else
var
h=f,d=e;var
b=m(a),v=0;if(typeof
b==="number"){var
j=b+IX|0;if(14<j>>>0){if(-90===j){r(a);var
f=h,e=d;continue}}else if(12<j-1>>>0){var
t=B(d);v=1}}if(!v){var
g=0;if(typeof
b==="number")switch(b){case
4:case
82:g=2;break}else if(4===b[0]){var
c=b[3],o=0;if(mm(c))o=1;else{var
w=0;if(l(c,iE)&&l(c,bf)){var
p=0;w=1}if(!w)var
p=1;if(p)o=1;else
if(l(c,lf)){if(!l(c,iN)||!l(c,ev))g=2}else if(a[28][2]){var
i=1;g=1}}if(o){var
i=1;g=1}}switch(g){case
0:var
i=0;break;case
2:var
i=1;break}if(!i){if(Hl(a,b)){ht(a,9);var
f=h,e=d;continue}n(a,9);var
f=h,e=d;continue}ht(a,99);var
t=B(d)}var
z=q(a);mp(a,99);return[0,t,aA([0,y],[0,x(a)],z,0)]}},a),c=b[1];if(!b[2][1])u(a,[0,c,56]);return[0,b]});a(mE,function(a){return 98===m(a)?[0,o(0,function(a){var
h=q(a);n(a,98);var
b=iv(0,a),c=0;for(;;){var
d=m(b);if(typeof
d==="number"){var
e=0;if(99!==d&&X!==d)e=1;if(!e){var
f=B(c),i=q(b);n(b,99);return[0,f,aA([0,h],[0,x(b)],i,0)]}}var
g=[0,k(ac,b),c];if(99!==m(b))n(b,9);var
c=g}},a)]:0});a(mF,function(a){return j(r3,a,k(h7,a))});a(r3,function(a,b){function
c(a){var
c=[0,b[1],[0,b]];for(;;){var
d=c[2],h=c[1];if(10===m(a)&&mn(1,a)){var
e=o([0,h],function(b){return function(a){n(a,10);return[0,b,k(h7,a)]}}(d),a),f=e[1],c=[0,f,[1,[0,f,e[2]]]];continue}if(98===m(a))var
i=au(a)[2],g=j(i,d,function(a,b){return j(K(a,-860373976,61),a,b)});else
var
g=d;return[0,g,k(mE,a),0]}}return o([0,b[1]],c,a)});a(Hf,function(a,b){var
c=j(r3,a,b);return[0,c[1],[19,c[2]]]});a(Hg,function(a){var
b=m(a);if(typeof
b==="number"&&86===b)return k(GZ,a);return[0,hs(a)]});a(Hh,function(a){var
b=m(a);if(typeof
b==="number"&&86===b)return[1,k(jj,a)];return[0,hs(a)]});a(mG,function(a){var
b=m(a),c=0;if(typeof
b==="number")switch(b){case
86:var
f=A(a);if(1-an(a))G(a,bp);G(a,38);r(a);var
d=o(0,ac,a);return[1,d[1],[0,f,d[2],0,0]];case
130:case
131:c=1;break}else if(4===b[0]&&!l(b[3],jG))c=1;if(!c)return[0,hs(a)];if(1-an(a))G(a,bp);var
e=o([0,A(a)],rY,a);return[1,e[1],e[2]]});a(Hi,function(a,b,c){var
d=a[2],E=a[1];function
f(a){return a_(a,p([0,b],[0,c],0))}switch(d[0]){case
0:var
e=[0,f(d[1])];break;case
1:var
e=[1,f(d[1])];break;case
2:var
e=[2,f(d[1])];break;case
3:var
e=[3,f(d[1])];break;case
4:var
e=[4,f(d[1])];break;case
5:var
e=[5,f(d[1])];break;case
6:var
e=[6,f(d[1])];break;case
7:var
e=[7,f(d[1])];break;case
8:var
G=f(d[2]),e=[8,d[1],G];break;case
9:var
e=[9,f(d[1])];break;case
10:var
e=[10,f(d[1])];break;case
11:var
u=d[1],H=f(u[2]),e=[11,[0,u[1],H]];break;case
12:var
h=d[1],I=f(h[4]),e=[12,[0,h[1],h[2],h[3],I]];break;case
13:var
i=d[1],J=f(i[4]),e=[13,[0,i[1],i[2],i[3],J]];break;case
14:var
j=d[1],K=j[4],F=rr(K,p([0,b],[0,c],0)),e=[14,[0,j[1],j[2],j[3],F]];break;case
15:var
l=d[1],L=f(l[3]),e=[15,[0,l[1],l[2],L]];break;case
16:var
v=d[1],M=f(v[2]),e=[16,[0,v[1],M]];break;case
17:var
g=d[1],N=f(g[5]),e=[17,[0,g[1],g[2],g[3],g[4],N]];break;case
18:var
w=d[1],O=f(w[2]),e=[18,[0,w[1],O]];break;case
19:var
m=d[1],P=f(m[3]),e=[19,[0,m[1],m[2],P]];break;case
20:var
n=d[1],Q=f(n[3]),e=[20,[0,n[1],n[2],Q]];break;case
21:var
x=d[1],o=x[1],R=x[2],S=f(o[3]),e=[21,[0,[0,o[1],o[2],S],R]];break;case
22:var
y=d[1],T=f(y[2]),e=[22,[0,y[1],T]];break;case
23:var
z=d[1],U=f(z[2]),e=[23,[0,z[1],U]];break;case
24:var
q=d[1],V=f(q[3]),e=[24,[0,q[1],q[2],V]];break;case
25:var
A=d[1],W=f(A[2]),e=[25,[0,A[1],W]];break;case
26:var
k=d[1],X=k[4],Y=f(k[3]),e=[26,[0,k[1],k[2],Y,X]];break;case
27:var
B=d[1],Z=f(B[2]),e=[27,[0,B[1],Z]];break;case
28:var
C=d[1],_=f(C[2]),e=[28,[0,C[1],_]];break;case
29:var
r=d[1],$=f(r[3]),e=[29,[0,r[1],r[2],$]];break;case
30:var
s=d[1],aa=f(s[3]),e=[30,[0,s[1],s[2],aa]];break;case
31:var
t=d[1],ab=f(t[3]),e=[31,[0,t[1],t[2],ab]];break;case
32:var
D=d[1],ac=f(D[2]),e=[32,[0,D[1],ac]];break;case
33:var
e=[33,f(d[1])];break;case
34:var
e=[34,f(d[1])];break;default:var
e=[35,f(d[1])]}return[0,E,e]});var
Hm=function(a,b){if(4!==m(a))return[0,0,p([0,b],[0,x(a)],0)];var
c=J(b,q(a));n(a,4);aB(a,0);var
d=k(w[9],a);aF(a);n(a,5);return[0,[0,d],p([0,c],[0,x(a)],0)]},afE=function(a){var
b=q(a);n(a,66);return Hm(a,b)},afF=0,Hn=function(a){var
b=iv(0,a),c=m(b);if(typeof
c==="number"&&66===c)return[0,o(afF,afE,b)];return 0},afG=function(a){var
e=m(a);if(typeof
e==="number"&&86===e){if(1-an(a))G(a,bp);var
g=hs(a),b=A(a);n(a,86);var
c=m(a);if(typeof
c==="number"&&66===c){var
f=iv(0,a);return[0,[0,g],[0,o([0,b],function(a){var
b=q(a);n(a,66);return Hm(a,b)},f)]]}if(mu(a))return[0,[2,j(r1,a,b)],0];var
d=[1,o([0,b],ac,a)],h=66===m(a)?ji(a,d):d;return[0,h,Hn(a)]}return[0,[0,hs(a)],0]},bz=function(a,b){var
c=hr(1,b);aB(c,1);var
d=k(a,c);aF(c);return d},hw=function(a){return bz(ac,a)},cQ=function(a){return bz(h7,a)},bI=function(a){return bz(iz,a)},Ho=function(a){return bz(mE,a)},iA=function(a){return bz(jj,a)},r4=function(a){return bz(Hh,a)},r5=function(a){return bz(Hg,a)},r6=function(a){return bz(afG,a)},Hp=function(a){return bz(mF,a)},r7=function(a){return bz(mG,a)},aga=Hs(w),h8=function(a,b){var
c=b[2],k=b[1],l=a[1];switch(c[0]){case
0:return aI(agb,a,c[1][1]);case
1:return aI(agc,a,c[1][1]);case
2:var
d=c[1][1],f=d[2][1],g=a[2],e=a[1],m=d[1];if(j(a2[3],f,g))u(e,[0,m,82]);var
h=d[2][1],i=d[1];if(iw(h))bX(e,[0,i,83]);if(jg(h))bX(e,[0,i,85]);return[0,e,j(a2[4],f,g)];default:u(l,[0,k,24]);return a}},agb=function(b){return function(a){return 0===a[0]?h8(b,a[1][2][2]):h8(b,a[1][2][1])}},agc=function(b){return function(a){switch(a[0]){case
0:return h8(b,a[1][2][1]);case
1:return h8(b,a[1][2][1]);default:return b}}},Ht=function(a,b){var
c=b[2],d=c[3],e=c[2],f=[0,a,a2[1]],g=aI(function(a,b){return h8(a,b[2][1])},f,e);return d?(h8(g,d[1][2][1]),0):0},Hu=function(a,b,c,d){var
h=a[5],p=0===d[0]?iy(d[1]):0,e=h?hr(0,a):hr(b,a),i=b||h||1-p;if(!i)return i;if(c){var
j=c[1],k=j[2][1],l=j[1];if(iw(k))bX(e,[0,l,75]);if(jg(k))bX(e,[0,l,85])}if(0===d[0])return Ht(e,d[1]);var
f=d[1][2],g=f[2],m=f[1],n=[0,i$,[0,[0,cm(function(a){var
b=a[2],c=b[1],d=b[4],e=b[3],f=b[2],g=0===c[0]?[3,c[1]]:[0,[0,i$,c[1][2]]];return[0,[0,i$,[0,g,f,e,d]]]},m),[0,i$],0]]],o=h8([0,e,a2[1]],n);return g?(h8(o,g[1][2][1]),0):0},jk=function(a,b,c,d){return Hu(a,b,c,[0,d])},Hv=function(a,b){if(12!==b)return 0;var
d=q(a),c=o(0,function(a){n(a,12);return j(w[18],a,83)},a),e=c[2],f=c[1];return[0,[0,f,e,p([0,d],0,0)]]},r9=function
c(a,b){return c.fun(a,b)},agd=function(a){if(21===m(a))G(a,94);var
b=j(w[18],a,83),c=82===m(a)?(n(a,82),[0,k(w[10],a)]):0;return[0,b,c]},age=0;a(r9,function(a,b){var
c=m(a);if(typeof
c==="number"){var
d=c-5|0,e=0;if(7<d>>>0){if(cu===d)e=1}else if(5<d-1>>>0)e=1;if(e){var
f=Hv(a,c),g=lB(function(a){return[0,a[1],[0,a[2],a[3]]]},f);if(5!==m(a))G(a,66);return[0,B(b),g]}}var
h=o(age,agd,a);if(5!==m(a))n(a,9);return j(r9,a,[0,h,b])});var
jl=function(s,b){function
c(a){var
c=GA(1,rE(b,rF(s,a))),t=q(c);n(c,4);var
h=0;if(an(c)&&21===m(c)){var
i=q(c),e=o(0,function(a){n(a,21);return 86===m(a)?[0,iA(a)]:(G(a,90),0)},c),f=e[2],k=e[1];if(f){var
l=f[1];if(9===m(c))r(c);var
d=[0,[0,k,[0,l,p([0,i],0,0)]]]}else
var
d=0}else
h=1;if(h)var
d=0;var
g=j(r9,c,0),u=g[2],v=g[1],w=q(c);n(c,5);return[0,d,v,u,aA([0,t],[0,x(c)],w,0)]}var
d=0;return function(a){return o(d,c,a)}},Hw=function(a,b,c,d,e){var
f=GG(a,b,c,e);return j(w[16],d,f)},kz=function(a,b,c,d,e){var
f=Hw(a,b,c,d,e);return[0,[0,f[1]],f[2]]},jm=function(a){if(aV!==m(a))return agf;var
b=q(a);r(a);return[0,1,b]},mK=function(a){if(64===m(a)&&!kp(1,a)){var
b=q(a);r(a);return[0,1,b]}return agg},agh=function(a){var
e=mK(a),c=e[1],t=e[2],f=o(0,function(a){var
u=q(a);n(a,15);var
h=jm(a),i=h[1],v=j2([0,t,[0,u,[0,h[2],0]]]),x=a[7],b=m(a),g=0;if(x&&typeof
b==="number")if(4===b){var
e=0,d=0;g=1}else if(98===b){var
z=bo(a,bI(a)),B=4===m(a)?0:[0,cp(a,j(w[13],agi,a))],e=B,d=z;g=1}if(!g)var
C=cO(a)?cp(a,j(w[13],agj,a)):(GM(a,agk),[0,A(a),agl]),e=[0,C],d=bo(a,bI(a));var
l=k(jl(c,i),a),y=86===m(a)?l:kt(a,l),o=r6(a),f=o[2],p=o[1];if(f)var
s=GS(a,f),r=p;else
var
s=f,r=ji(a,p);return[0,i,d,e,y,r,s,v]},a),b=f[2],d=b[4],g=b[3],h=b[1],l=b[7],r=b[6],s=b[5],u=b[2],v=f[1],i=kz(a,c,h,0,iy(d)),x=i[1];jk(a,i[2],g,d);return[26,[0,g,d,x,c,h,r,s,u,p([0,l],0,0),v]]},agm=0,kA=function(a){return o(agm,agh,a)},r_=function(a,b){var
t=q(b);n(b,a);var
l=b[28][2];if(l)var
p=27===a?1:0,r=p?48===m(b)?1:0:p;else
var
r=l;if(r)G(b,23);var
g=0,c=0;for(;;){var
d=o(0,function(a){var
b=j(w[18],a,86);if(ak(a,82))var
d=0,c=[0,k(w[10],a)];else{var
e=b[1];if(2===b[2][0])var
d=0,c=0;else
var
d=[0,[0,e,63]],c=0}return[0,[0,b,c],d]},b),e=d[2],f=e[2],h=[0,[0,d[1],e[1]],g],i=f?[0,f[1],c]:c;if(ak(b,9)){var
g=h,c=i;continue}var
s=B(i);return[0,B(h),t,s]}},agn=24,Hx=function(a){return r_(agn,a)},Hy=function(a){var
b=r_(27,rG(1,a)),c=b[1],d=b[3],e=b[2];return[0,c,e,B(aI(function(a,b){return b[2][2]?a:[0,[0,b[1],62],a]},d,c))]},Hz=function(a){return r_(28,rG(1,a))},HA=function(b){function
c(a){return[19,j(aga[1],b,a)]}var
d=0;return function(a){return o(d,c,a)}},r$=function
c(a,b){return c.fun(a,b)},ago=function(a){var
H=q(a),h=m(a),b=O(1,a),t=0;if(typeof
h!=="number"&&2===h[0]){var
g=h[1],y=g[4],z=g[3],i=g[2],B=g[1],c=0;if(typeof
b==="number")switch(b){case
85:case
86:c=2;break;default:c=1}else
if(4===b[0]){if(!l(b[3],cw))c=2}else
c=1;switch(c){case
0:break;case
1:break;default:if(y)b_(a,81);n(a,[2,[0,B,i,z,y]]);var
C=[1,[0,B,[0,i,z,p([0,H],[0,x(a)],0)]]],E=0;if(typeof
b==="number"&&!(1<b+hB>>>0)){var
o=85===b?1:0;G(a,[16,o,i]);if(o)r(a);var
D=A(a),f=0,e=[0,D,[2,[0,[0,D,agq],r4(a),o]]],d=C;t=1}else
E=1;if(E){r(a);var
f=0,e=j(w[18],a,83),d=C;t=1}}}if(!t){var
F=0;if(typeof
b!=="number"&&4===b[0]&&!l(b[3],cw)){var
J=[0,a3(a)];hu(a,agp);var
f=0,e=j(w[18],a,83),d=J;F=1}if(!F)var
u=s(w[14],a,0,83),v=u[2],f=1,e=[0,u[1],[2,v]],d=[0,v[1]]}var
I=82===m(a)?(n(a,82),[0,k(w[10],a)]):0;return[0,d,e,I,f]},agr=0;a(r$,function(a,b){var
c=m(a);if(typeof
c==="number"){var
d=c-5|0,e=0;if(7<d>>>0){if(cu===d)e=1}else if(5<d-1>>>0)e=1;if(e){var
f=Hv(a,c),g=lB(function(a){return[0,a[1],[0,a[2],a[3]]]},f);if(5!==m(a))G(a,66);return[0,B(b),g]}}var
h=o(agr,ago,a);if(5!==m(a))n(a,9);return j(r$,a,[0,h,b])});var
ags=function(a){var
b=GA(1,a),d=q(b);n(b,4);var
c=j(r$,b,0),e=c[2],f=c[1],g=q(b);n(b,5);return[0,f,e,aA([0,d],[0,x(b)],g,0)]},agt=0,agu=function(a){var
d=o(0,function(a){var
e=q(a);hu(a,agv);var
f=cp(a,j(w[13],agw,a)),g=bo(a,bI(a)),c=o(agt,ags,a);if(rN(a))var
b=c;else
var
d=au(a)[2],b=j(d,c,function(a,b){return j(K(a,842685896,11),a,b)});return[0,g,f,b,rP(a,r7(a)),e]},a),b=d[2],e=b[3],f=b[2],g=b[5],h=b[4],i=b[1],k=d[1],c=Hw(a,0,0,0,0),l=c[1];Hu(a,c[2],[0,f],[1,e]);return[3,[0,f,i,e,h,l,p([0,g],0,0),k]]},agx=0,sa=function(a){return o(agx,agu,a)},aS=function(c,b){if(0===b[0])return b[1];var
a=b[2][1],d=b[1];a7(function(a){return u(c,a)},a);return d},sb=function(a,b,c){var
f=a?a[1]:41;if(0===c[0])var
d=c[1];else{var
h=c[2][2],i=c[1];a7(function(a){return u(b,a)},h);var
d=i}if(1-k(w[23],d))u(b,[0,d[1],f]);var
e=d[2],l=0;if(9===e[0]){var
g=d[1];if(iw(e[1][2][1])){bX(b,[0,g,76]);l=1}}return j(w[19],b,d)},sc=function(a,b){var
c=cI(a[2],b[2]);return[0,cI(a[1],b[1]),c]},HB=function(a){var
b=B(a[2]);return[0,B(a[1]),b]},HC=function(a,b){var
c=0===a[0]?a[1]:a[1]-1|0,d=0===b[0]?b[1]:b[1];return d<=c?1:0},jn=function
b(a){return b.fun(a)},b$=function
b(a){return b.fun(a)},HD=function
b(a){return b.fun(a)},sd=function
b(a){return b.fun(a)},HE=function
b(a){return b.fun(a)},se=function
b(a){return b.fun(a)},HF=function
b(a){return b.fun(a)},HG=function
b(a){return b.fun(a)},kB=function
b(a){return b.fun(a)},sf=function
b(a){return b.fun(a)},sg=function
b(a){return b.fun(a)},sh=function
b(a){return b.fun(a)},HH=function
b(a){return b.fun(a)},si=function
b(a){return b.fun(a)},mL=function
b(a){return b.fun(a)},sj=function
b(a){return b.fun(a)},HI=function
b(a){return b.fun(a)},iB=function
f(a,b,c,d,e){return f.fun(a,b,c,d,e)},sk=function
e(a,b,c,d){return e.fun(a,b,c,d)},sl=function
b(a){return b.fun(a)},mM=function
b(a){return b.fun(a)},sm=function
b(a){return b.fun(a)},sn=function
f(a,b,c,d,e){return f.fun(a,b,c,d,e)},HJ=function
e(a,b,c,d){return e.fun(a,b,c,d)},so=function
b(a){return b.fun(a)},mN=function
d(a,b,c){return d.fun(a,b,c)},HK=function
b(a){return b.fun(a)},mO=function
d(a,b,c){return d.fun(a,b,c)},sp=function
b(a){return b.fun(a)},HL=function
b(a){return b.fun(a)},sq=function
c(a,b){return c.fun(a,b)},sr=function
e(a,b,c,d){return e.fun(a,b,c,d)},HM=function
b(a){return b.fun(a)},ss=function
d(a,b,c){return d.fun(a,b,c)},HN=function
b(a){return b.fun(a)},HO=function
b(a){return b.fun(a)},st=function
b(a){return b.fun(a)},mP=function
d(a,b,c){return d.fun(a,b,c)},agy=function(a){var
c=a[2];switch(c[0]){case
22:var
b=c[1],d=b[1][2][1];if(l(d,bg)){if(!l(d,i0)&&!l(b[2][2][1],xq))return 0}else if(!l(b[2][2][1],kQ))return 0;break;case
0:case
9:case
21:case
24:break;default:return 0}return 1},su=function(a){var
d=A(a),b=k(se,a),c=k(HE,a);if(!c)return b;var
e=c[1];return[0,o([0,d],function(a){var
c=sb(0,a,b);return[3,[0,e,c,k(b$,a),0]]},a)]},agz=function(a,b){if(typeof
b==="number"&&85===b)return 0;throw t(cP,1)},HP=function(a){var
b=ml(agz,a),c=su(b),d=m(b);if(typeof
d==="number"){if(11===d)throw t(cP,1);if(86===d){var
e=GE(b),i=0;if(e){var
f=e[1];if(typeof
f==="number"&&5===f){var
g=1;i=1}}if(!i)var
g=0;if(g)throw t(cP,1)}}if(!cO(b))return c;if(0===c[0]){var
h=c[1][2];if(9===h[0]&&!l(h[1][2][1],h_)&&!be(b))throw t(cP,1)}return c};a(jn,function(a){var
g=cO(a);if(g){var
d=m(a),f=0;if(typeof
d==="number")if(58===d){if(a[18]){var
e=0;f=1}}else if(65===d&&a[19]){var
e=0;f=1}if(!f)var
e=1;var
h=e}else
var
h=g;var
b=m(a),o=0;if(typeof
b==="number"){var
c=0;if(22<=b){if(58===b){if(a[18])return[0,k(HD,a)];c=1}else if(98!==b)c=1}else if(4!==b&&21>b)c=1;if(!c)o=1}if(!o&&!h)return su(a);var
p=0;if(64===b&&an(a)&&98===O(1,a)){var
j=HP,i=st;p=1}if(!p)var
j=st,i=HP;var
l=rO(a,i);if(l)return l[1];var
n=rO(a,j);return n?n[1]:su(a)});a(b$,function(a){return aS(a,k(jn,a))});a(HD,function(a){return o(0,function(a){if(a[10])G(a,iH);var
l=q(a),o=A(a);n(a,58);var
r=A(a);if(jh(a))var
e=0,c=0;else{var
f=ak(a,aV),b=m(a),i=0;if(typeof
b==="number"){var
d=0;if(86===b)d=1;else if(10>b)switch(b){case
0:case
2:case
3:case
4:case
6:break;default:d=1}if(d){var
g=0;i=1}}if(!i)var
g=1;var
j=0;if(!f&&!g){var
h=0;j=1}if(!j)var
h=[0,k(b$,a)];var
e=f,c=h}var
s=c?0:x(a),t=ae(o,r);return[36,[0,c,p([0,l],[0,s],0),e,t]]},a)});a(sd,function(a){var
c=a[2];switch(c[0]){case
22:var
b=c[1],d=b[1][2][1];if(l(d,bg)){if(!l(d,i0)&&!l(b[2][2][1],xq))return 0}else if(!l(b[2][2][1],kQ))return 0;break;case
9:case
21:break;default:return 0}return 1});a(HE,function(a){var
d=m(a),f=0;if(typeof
d==="number"){var
e=d+Kw|0;if(15>=e>>>0){switch(e){case
0:var
b=agA;break;case
1:var
b=agB;break;case
2:var
b=agC;break;case
3:var
b=agD;break;case
4:var
b=agE;break;case
5:var
b=agF;break;case
6:var
b=agG;break;case
7:var
b=agH;break;case
8:var
b=agI;break;case
9:var
b=agJ;break;case
10:var
b=agK;break;case
11:var
b=agL;break;case
12:var
b=agM;break;case
13:var
b=agN;break;case
14:var
b=agO;break;default:var
b=agP}var
c=b;f=1}}if(!f)var
c=0;if(0!==c)r(a);return c});a(se,function(a){var
d=A(a),b=k(HG,a);if(85!==m(a))return b;r(a);var
e=k(b$,kn(0,a));n(a,86);var
c=o([0,d],b$,a),f=c[2],g=c[1];return[0,[0,g,[7,[0,aS(a,b),e,f,0]]]]});a(HF,function(a){return aS(a,k(se,a))});var
sv=function(a,b,c,d,e){var
f=aS(a,b);return[0,[0,e,[20,[0,d,f,aS(a,c),0]]]]},sw=function(a,b,c){var
e=b,d=c;for(;;){var
f=m(a);if(typeof
f==="number"&&88===f){r(a);var
g=o(0,kB,a),j=g[2],h=ae(d,g[1]),i=sx(0,a,sv(a,e,j,1,h),h),e=i[2],d=i[1];continue}return[0,d,e]}},HQ=function(a,b,c){var
e=b,d=c;for(;;){var
f=m(a);if(typeof
f==="number"&&87===f){r(a);var
g=o(0,kB,a),h=sw(a,g[2],g[1]),k=h[2],i=ae(d,h[1]),j=sx(0,a,sv(a,e,k,0,i),i),e=j[2],d=j[1];continue}return[0,d,e]}},sx=function(a,b,c,d){var
h=a,f=c,e=d;for(;;){var
i=m(b);if(typeof
i==="number"&&84===i){if(1-h)G(b,agQ);n(b,84);var
j=o(0,kB,b),k=j[2],l=j[1],g=m(b),u=0;if(typeof
g==="number"&&1>=g-87>>>0){G(b,[20,rw(g)]);var
s=sw(b,k,l),t=HQ(b,s[2],s[1]),q=t[2],p=t[1];u=1}if(!u)var
q=k,p=l;var
r=ae(e,p),h=1,f=sv(b,f,q,2,r),e=r;continue}return[0,e,f]}};a(HG,function(a){var
b=o(0,kB,a),c=b[2],d=b[1],e=m(a),h=0;if(typeof
e==="number"&&84===e){var
f=sx(1,a,c,d);h=1}if(!h)var
g=sw(a,c,d),f=HQ(a,g[2],g[1]);return f[2]});var
sy=function(a,b,c,d){return[0,d,[4,[0,c,a,b,0]]]};a(kB,function(c){var
H=0;b:for(;;){var
I=o(0,function(a){var
b=0!==k(sf,a)?1:0;return[0,b,k(sg,kn(0,a))]},c),J=I[2],t=J[2],K=J[1],g=I[1];if(98===m(c)){var
_=0;if(0===t[0]&&11===t[1][2][0]){G(c,2);_=1}}var
L=function(C){return function(a,b){var
d=a,f=b;for(;;){var
g=m(c);if(typeof
g!=="number"&&4===g[0]){var
h=g[3],u=0;if(l(h,cw)&&l(h,Jg))u=1;if(!u&&an(c)){r(c);var
n=aS(c,f),v=0;if(d){var
i=d[1],o=i[2],w=d[2],x=i[3],y=o[1],z=i[1];if(HC(o[2],ahb)){var
e=sy(z,n,y,ae(x,C)),p=w;v=1}}if(!v)var
e=n,p=d;var
j=e[1];if(V(h,Jg))var
q=hw(c),k=[0,[0,ae(j,q[1]),[33,[0,e,[0,q],0]]]];else if(27===m(c)){var
B=ae(j,A(c));r(c);var
k=[0,[0,B,[33,[0,e,0,0]]]]}else
var
s=hw(c),t=s[1],k=[0,[0,ae(j,t),[2,[0,e,[0,t,s],0]]]];var
d=p,f=k;continue}}return[0,d,f]}}}(g)(H,t),v=L[2],w=L[1],y=m(c),O=0;if(typeof
y==="number"){var
e=y-17|0,x=0;if(1<e>>>0)if(72<=e){var
P=0;switch(e-72|0){case
0:var
a=agR;break;case
1:var
a=agS;break;case
2:var
a=agT;break;case
3:var
a=agU;break;case
4:var
a=agV;break;case
5:var
a=agW;break;case
6:var
a=agX;break;case
7:var
a=agY;break;case
8:var
a=agZ;break;case
9:var
a=ag0;break;case
10:var
a=ag1;break;case
11:var
a=ag2;break;case
12:var
a=ag3;break;case
13:var
a=ag4;break;case
14:var
a=ag5;break;case
15:var
a=ag6;break;case
16:var
a=ag7;break;case
17:var
a=ag8;break;case
18:var
a=ag9;break;case
19:var
a=ag_;break;default:x=1;P=1}if(!P)var
z=a}else
x=1;else
var
z=e?ag$:c[12]?0:aha;if(!x){var
b=z;O=1}}if(!O)var
b=0;if(0!==b)r(c);if(!w&&!b)return v;if(!b){var
q=aS(c,v),E=g,f=w;for(;;){if(!f)return[0,q];var
s=f[1],U=f[2],W=s[2][1],X=s[1],F=ae(s[3],E),q=sy(X,q,W,F),E=F,f=U}}var
M=b[1],N=M[1],Y=M[2],Z=K?14===N?1:0:K;if(Z)u(c,[0,g,42]);var
j=aS(c,v),i=[0,N,Y],h=g,d=w;for(;;){var
n=i[2],B=i[1];if(d){var
p=d[1],C=p[2],Q=d[2],R=p[3],S=C[1],T=p[1];if(HC(C[2],n)){var
D=ae(R,h),j=sy(T,j,S,D),i=[0,B,n],h=D,d=Q;continue}}var
H=[0,[0,j,[0,B,n],h],d];continue b}}});a(sf,function(a){var
b=m(a);if(typeof
b==="number")if(48<=b){if(cD<=b){if(cf>b)switch(b+tE|0){case
0:return ahc;case
1:return ahd;case
6:return ahe;case
7:return ahf}}else if(65===b&&a[19]){if(a[10])G(a,7);return ahg}}else if(45<=b)switch(b+xd|0){case
0:return ahh;case
1:return ahi;default:return ahj}return 0});a(sg,function(a){var
h=A(a),i=q(a),j=k(sf,a);if(j){var
l=j[1];r(a);var
n=o([0,h],sh,a),s=n[2],d=n[1],z=0;if(6===l){var
t=s[2],f=0;switch(t[0]){case
9:bX(a,[0,d,73]);f=1;break;case
21:if(1===t[1][2][0])u(a,[0,d,67]);f=1;break}if(f)z=1}return[0,[0,d,[34,[0,l,s,p([0,i],0,0)]]]]}var
e=m(a),g=0;if(typeof
e==="number")if(cf===e)var
b=ahk;else if(bh===e)var
b=ahl;else
g=1;else
g=1;if(g)var
b=0;if(!b)return k(HH,a);var
x=b[1];r(a);var
v=o([0,h],sh,a),c=v[2],y=v[1];if(1-k(sd,c))u(a,[0,c[1],41]);var
w=c[2],B=0;if(9===w[0]&&iw(w[1][2][1])){b_(a,78);B=1}return[0,[0,y,[35,[0,x,c,1,p([0,i],0,0)]]]]});a(sh,function(a){return aS(a,k(sg,a))});a(HH,function(a){var
d=k(si,a);if(be(a))return d;var
e=m(a),f=0;if(typeof
e==="number")if(cf===e)var
c=ahm;else if(bh===e)var
c=ahn;else
f=1;else
f=1;if(f)var
c=0;if(!c)return d;var
h=c[1],b=aS(a,d);if(1-k(sd,b))u(a,[0,b[1],41]);var
g=b[2],n=0;if(9===g[0]&&iw(g[1][2][1])){b_(a,77);n=1}var
i=A(a);r(a);var
j=x(a),l=ae(b[1],i);return[0,[0,l,[35,[0,h,b,0,p(0,[0,j],0)]]]]});a(si,function(a){var
i=A(a),j=1-a[17],l=0,b=0===a[17]?a:[0,a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15],a[16],l,a[18],a[19],a[20],a[21],a[22],a[23],a[24],a[25],a[26],a[27],a[28],a[29],a[30],a[31]],e=m(b),h=0;if(typeof
e==="number"){var
f=e-44|0;if(7>=f>>>0){var
d=0;switch(f){case
0:if(j)var
c=[0,k(sl,b)];else
d=1;break;case
6:var
c=[0,k(HI,b)];break;case
7:var
c=[0,k(sj,b)];break;default:d=1}if(!d){var
g=c;h=1}}}if(!h)var
g=h5(b)?[0,k(so,b)]:k(sp,b);return bJ(iB,0,0,b,i,g)});a(mL,function(a){return aS(a,k(si,a))});a(sj,function(a){switch(a[22]){case
0:var
d=0,c=0;break;case
1:var
d=0,c=1;break;default:var
d=1,c=1}var
b=A(a),g=q(a);n(a,51);var
e=[0,b,[28,[0,p([0,g],[0,x(a)],0)]]],f=m(a);if(typeof
f==="number"&&11>f)switch(f){case
4:var
h=d?e:(u(a,[0,b,bY]),[0,b,[9,cn(0,[0,b,ahp])]]);return bA(sk,0,a,b,h);case
6:case
10:var
i=c?e:(u(a,[0,b,ca]),[0,b,[9,cn(0,[0,b,ahq])]]);return bA(sk,0,a,b,i)}if(c)aq(aho,a);else
u(a,[0,b,ca]);return e});a(HI,function(a){return o(0,function(a){var
b=q(a),c=A(a);n(a,50);if(ak(a,10)){var
d=cn(0,[0,c,ahr]),e=A(a);hu(a,ahs);var
f=cn(0,[0,e,aht]);return[22,[0,d,f,p([0,b],[0,x(a)],0)]]}var
g=q(a);n(a,4);var
h=s(ss,[0,g],0,k(b$,kn(0,a)));n(a,5);return[10,[0,h,p([0,b],[0,x(a)],0)]]},a)});a(iB,function(a,b,c,d,e){var
l=a?a[1]:1,h=b?b[1]:0,f=bJ(sn,[0,l],[0,h],c,d,e),n=GE(c),s=0;if(n){var
o=n[1];if(typeof
o==="number"&&83===o){var
g=1;s=1}}if(!s)var
g=0;function
p(a){var
b=au(a)[2];function
c(a,b){return j(K(a,cv,62),a,b)}return j(b,aS(a,f),c)}function
q(a,b,c){var
e=k(sm,b),f=e[1],o=e[2],i=ae(d,f),j=[0,c,a,[0,f,o],0],n=0;if(!g&&!h){var
m=[5,j];n=1}if(!n)var
m=[25,[0,j,i,g]];var
p=h||g;return bJ(iB,[0,l],[0,p],b,d,[0,[0,i,m]])}if(c[13])return f;var
r=m(c);if(typeof
r==="number"){var
i=r-98|0;if(2<i>>>0){if(-94===i)return q(0,c,p(c))}else if(1!==i&&an(c)){var
u=ml(function(a,b){throw t(cP,1)},c);return mq(u,f,function(a){var
b=p(a);return q(k(mM,a),a,b)})}}return f});a(sk,function(a,b,c,d){var
e=a?a[1]:1;return aS(b,bJ(iB,[0,e],0,b,c,[0,d]))});a(sl,function(a){return o(0,function(a){var
E=A(a),h=q(a);n(a,44);if(a[11]&&10===m(a)){var
F=x(a);r(a);var
i=cn(p([0,h],[0,F],0),[0,E,ahu]),b=m(a);if(typeof
b!=="number"&&4===b[0]&&!l(b[3],xq))return[22,[0,i,j(w[13],0,a),0]];aq(ahv,a);r(a);return[9,i]}var
o=A(a),c=m(a),g=0;if(typeof
c==="number")if(44===c)var
d=k(sl,a);else if(51===c)var
d=k(sj,rI(1,a));else
g=1;else
g=1;if(g)var
d=h5(a)?k(so,a):k(HL,a);var
s=bA(HJ,ahw,rI(1,a),o,d),e=m(a),z=0;if(typeof
e!=="number"&&3===e[0]){var
f=bA(sr,a,o,s,e[1]);z=1}if(!z)var
f=s;var
B=0;if(4!==m(a)){var
C=0;if(!an(a)||98!==m(a))C=1;if(C){var
u=f;B=1}}if(!B)var
G=au(a)[2],u=j(G,f,function(a,b){return j(K(a,cv,63),a,b)});var
H=an(a)?mq(ml(function(a,b){throw t(cP,1)},a),0,mM):0,v=m(a),D=0;if(typeof
v==="number"&&4===v){var
y=[0,k(sm,a)];D=1}if(!D)var
y=0;return[23,[0,u,H,y,p([0,h],0,0)]]},a)});var
ahy=function(a){var
o=q(a);n(a,98);var
b=0;for(;;){var
c=m(a);if(typeof
c==="number"){var
f=0;if(99!==c&&X!==c)f=1;if(!f){var
h=B(b),r=q(a);n(a,99);var
s=4===m(a)?au(a)[1]:x(a);return[0,h,aA([0,o],[0,s],r,0)]}}var
d=m(a),g=0;if(typeof
d!=="number"&&4===d[0]&&!l(d[2],jE)){var
j=A(a),k=q(a);hu(a,ahx);var
e=[1,[0,j,[0,p([0,k],[0,x(a)],0)]]];g=1}if(!g)var
e=[0,hw(a)];var
i=[0,e,b];if(99!==m(a))n(a,9);var
b=i}};a(mM,function(a){aB(a,1);var
b=98===m(a)?[0,o(0,ahy,a)]:0;aF(a);return b});var
ahz=function(a){var
b=q(a);n(a,12);var
c=k(b$,a);return[0,c,p([0,b],0,0)]};a(sm,function(a){return o(0,function(a){var
j=q(a);n(a,4);var
b=0;for(;;){var
c=m(a);if(typeof
c==="number"){var
f=0;if(5!==c&&X!==c)f=1;if(!f){var
h=B(b),l=q(a);n(a,5);return[0,h,aA([0,j],[0,x(a)],l,0)]}}var
d=m(a),g=0;if(typeof
d==="number"&&12===d){var
e=[1,o(0,ahz,a)];g=1}if(!g)var
e=[0,k(b$,a)];var
i=[0,e,b];if(5!==m(a))n(a,9);var
b=i}},a)});var
HR=function(a,b,c,d,e,f){var
j=a?a[1]:1,g=b?b[1]:0,l=c?c[1]:0,t=rI(0,d),m=k(w[7],t),o=A(d);n(d,7);var
q=x(d),h=ae(e,o),r=p(0,[0,q],0),i=[0,aS(d,f),[2,m],r],s=g?[26,[0,i,h,l]]:[21,i];return bJ(iB,[0,j],[0,g],d,e,[0,[0,h,s]])},HS=function(a,b,c,d,e,f){var
t=a?a[1]:1,n=b?b[1]:0,v=c?c[1]:0,o=m(d),s=0;if(typeof
o==="number"&&14===o){var
h=GW(d),i=h[1],g=d[30][1],w=h[2][1];if(g){var
l=g[1];d[30][1]=[0,[0,l[1],[0,[0,w,i],l[2]]],g[2]]}else
u(d,[0,i,68]);var
j=[1,h],p=i;s=1}if(!s)var
r=a3(d),j=[0,r],p=r[1];var
k=ae(e,p),y=0;if(0===f[0]&&28===f[1][2][0]&&1===j[0]){u(d,[0,k,87]);y=1}var
q=[0,aS(d,f),j,0],x=n?[26,[0,q,k,v]]:[21,q];return bJ(iB,[0,t],[0,n],d,e,[0,[0,k,x]])};a(sn,function(a,b,c,d,e){var
f=a?a[1]:1,h=b?b[1]:0,g=m(c);if(typeof
g==="number")switch(g){case
6:r(c);return HR([0,f],[0,h],0,c,d,e);case
10:r(c);return HS([0,f],[0,h],0,c,d,e);case
83:if(1-f)G(c,64);n(c,83);var
i=m(c);if(typeof
i==="number")switch(i){case
4:return e;case
6:r(c);return HR([0,f],ahD,ahC,c,d,e);case
98:if(an(c))return e;break}else if(3===i[0]){G(c,65);return e}return HS([0,f],ahB,ahA,c,d,e)}else if(3===g[0]){var
j=g[1];if(h)G(c,65);return bJ(iB,ahE,0,c,d,[0,bA(sr,c,d,aS(c,e),j)])}return e});a(HJ,function(a,b,c,d){var
e=a?a[1]:1;return aS(b,bJ(sn,[0,e],0,b,c,[0,d]))});a(so,function(a){return o(0,function(a){var
e=mK(a),c=e[1],x=e[2],f=o(0,function(a){var
y=q(a);n(a,15);var
f=jm(a),d=f[1],z=j2([0,x,[0,y,[0,f[2],0]]]);if(4===m(a))var
h=0,g=0;else{var
s=m(a),v=0;if(typeof
s==="number"&&98===s){var
t=0;v=1}if(!v)var
u=rE(d,rF(c,a)),t=[0,cp(u,j(w[13],ahF,u))];var
h=bo(a,bI(a)),g=t}var
b=iu(0,a),A=c||b[19],i=k(jl(A,d),b),B=86===m(b)?i:kt(b,i),l=r6(b),e=l[2],o=l[1];if(e)var
r=GS(b,e),p=o;else
var
r=e,p=ji(b,o);return[0,g,B,d,r,p,h,z]},a),b=f[2],g=b[3],d=b[2],h=b[1],l=b[7],r=b[6],s=b[5],t=b[4],u=f[1],i=kz(a,c,g,1,iy(d)),v=i[1];jk(a,i[2],h,d);return[8,[0,h,d,v,c,g,t,s,r,p([0,l],0,0),u]]},a)});a(mN,function(a,b,c){switch(b){case
1:b_(a,81);try{var
j=qE(lw(I(ahI,c))),d=j}catch(f){var
g=ay(f);if(g[1]!==cl)throw t(g,0);var
d=C(I(ahH,c))}break;case
2:b_(a,80);try{var
k=Em(c),d=k}catch(f){var
h=ay(f);if(h[1]!==cl)throw t(h,0);var
d=C(I(ahJ,c))}break;case
4:try{var
l=Em(c),d=l}catch(f){var
i=ay(f);if(i[1]!==cl)throw t(i,0);var
d=C(I(ahK,c))}break;default:try{var
f=qE(lw(c)),d=f}catch(f){var
e=ay(f);if(e[1]!==cl)throw t(e,0);var
d=C(I(ahG,c))}}n(a,[0,b,c]);return d});a(HK,function(a){var
b=H(a),d=0;if(0!==b&&aD===ax(a,b-1|0)){var
c=aY(a,0,b-1|0);d=1}if(!d)var
c=a;return c});a(mO,function(a,b,c){var
d=EV(k(HK,c));n(a,[1,b,c]);return d});a(sp,function(a){var
d=A(a),c=q(a),b=m(a);if(typeof
b==="number")switch(b){case
0:var
g=k(w[12],a);return[1,[0,g[1],[24,g[2]]],g[3]];case
4:return[0,k(HM,a)];case
6:var
z=o(0,HN,a),B=z[2];return[1,[0,z[1],[0,B[1]]],B[2]];case
21:r(a);return[0,[0,d,[31,[0,p([0,c],[0,x(a)],0)]]]];case
29:r(a);return[0,[0,d,[15,p([0,c],[0,x(a)],0)]]];case
40:return[0,k(w[22],a)];case
98:var
C=k(w[17],a),h=C[2],N=C[1],P=cz<=h[1]?[12,h[2]]:[11,h[2]];return[0,[0,N,P]];case
30:case
31:r(a);return[0,[0,d,[14,[0,31===b?1:0,p([0,c],[0,x(a)],0)]]]];case
74:case
105:return[0,k(HO,a)]}else
switch(b[0]){case
0:var
D=b[2],Q=s(mN,a,b[1],D);return[0,[0,d,[16,[0,Q,D,p([0,c],[0,x(a)],0)]]]];case
1:var
E=b[2],R=s(mO,a,b[1],E);return[0,[0,d,[17,[0,R,E,p([0,c],[0,x(a)],0)]]]];case
2:var
f=b[1],i=f[3],e=f[2],n=f[1];if(f[4])b_(a,81);r(a);var
t=p([0,c],[0,x(a)],0),F=a[28],G=F[6],I=F[7],v=0;if(G){var
J=G[1];if(ET(J,e))var
u=[19,[0,e,n,H(J),0,i,t]];else
v=1}else
v=1;if(v){var
M=0;if(I){var
K=I[1];if(ET(K,e)){var
u=[19,[0,e,n,H(K),1,i,t]];M=1}}if(!M)var
u=[13,[0,e,i,t]]}return[0,[0,n,u]];case
3:var
L=j(sq,a,b[1]);return[0,[0,L[1],[30,L[2]]]];case
4:if(!l(b[3],x_)&&40===O(1,a))return[0,k(w[22],a)];break}if(cO(a)){var
y=j(w[13],0,a);return[0,[0,y[1],[9,y]]]}aq(0,a);var
S=0;if(typeof
b!=="number"&&7===b[0]){r(a);S=1}return[0,[0,d,[15,p([0,c],ahL,0)]]]});a(HL,function(a){return aS(a,k(sp,a))});a(sq,function(a,b){var
v=b[5],i=b[1],L=b[3],M=b[2],N=q(a);n(a,[3,b]);var
y=[0,i,[0,[0,L,M],v]];if(v)var
C=0,A=[0,y,0],z=i;else{var
e=[0,y,0],j=0;for(;;){var
f=k(w[7],a),g=[0,f,j],l=m(a),D=0;if(typeof
l==="number"&&1===l){aB(a,4);var
h=m(a),E=0;if(typeof
h==="number"||!(3===h[0]))E=1;else{var
c=h[1],o=c[5],s=c[1],F=c[3],G=c[2];r(a);aF(a);var
u=[0,[0,s,[0,[0,F,G],o]],e];if(!o){var
e=u,j=g;continue}var
H=B(g),d=[0,s,B(u),H];D=1}if(E)throw t([0,R,ahM],1)}if(!D){aq(ahN,a);var
I=[0,f[1],ahO],J=B(g),K=B([0,I,e]),d=[0,f[1],K,J]}var
C=d[3],A=d[2],z=d[1];break}}var
O=x(a),P=ae(i,z);return[0,P,[0,A,C,p([0,N],[0,O],0)]]});a(sr,function(a,b,c,d){var
f=au(a)[2],g=j(f,c,function(a,b){return j(K(a,cv,3),a,b)}),e=j(sq,a,d);return[0,ae(b,e[1]),[29,[0,g,e,0]]]});a(HM,function(a){var
d=q(a),c=o(0,function(a){n(a,4);var
f=A(a),b=k(b$,a),c=m(a),e=0;if(typeof
c==="number")if(9===c)var
d=[0,s(mP,a,f,[0,b,0])];else if(86===c)var
d=[1,[0,b,iA(a),0]];else
e=1;else
e=1;if(e)var
d=[0,b];n(a,5);return d},a),b=c[2],e=c[1],f=x(a),g=0===b[0]?b[1]:[0,e,[32,b[1]]];return s(ss,[0,d],[0,f],g)});a(ss,function(a,b,c){var
d=c[2],T=c[1],J=a?a[1]:0,K=b?b[1]:0;function
f(a){return a_(a,p([0,J],[0,K],0))}function
L(a){return rr(a,p([0,J],[0,K],0))}switch(d[0]){case
0:var
M=d[1],U=L(M[2]),e=[0,[0,M[1],U]];break;case
1:var
g=d[1],V=g[10],W=f(g[9]),e=[1,[0,g[1],g[2],g[3],g[4],g[5],g[6],g[7],g[8],W,V]];break;case
3:var
k=d[1],X=f(k[4]),e=[3,[0,k[1],k[2],k[3],X]];break;case
4:var
l=d[1],Y=f(l[4]),e=[4,[0,l[1],l[2],l[3],Y]];break;case
5:var
m=d[1],Z=f(m[4]),e=[5,[0,m[1],m[2],m[3],Z]];break;case
6:var
i=d[1],_=f(i[7]),e=[6,[0,i[1],i[2],i[3],i[4],i[5],i[6],_]];break;case
7:var
n=d[1],$=f(n[4]),e=[7,[0,n[1],n[2],n[3],$]];break;case
8:var
h=d[1],aa=h[10],ab=f(h[9]),e=[8,[0,h[1],h[2],h[3],h[4],h[5],h[6],h[7],h[8],ab,aa]];break;case
9:var
N=d[1],O=N[2],ac=N[1],ad=f(O[2]),e=[9,[0,ac,[0,O[1],ad]]];break;case
10:var
P=d[1],ae=f(P[2]),e=[10,[0,P[1],ae]];break;case
11:var
o=d[1],af=f(o[4]),e=[11,[0,o[1],o[2],o[3],af]];break;case
12:var
q=d[1],ag=f(q[4]),e=[12,[0,q[1],q[2],q[3],ag]];break;case
13:var
x=d[1],ah=f(x[3]),e=[13,[0,x[1],x[2],ah]];break;case
14:var
Q=d[1],ai=f(Q[2]),e=[14,[0,Q[1],ai]];break;case
15:var
e=[15,f(d[1])];break;case
16:var
y=d[1],aj=f(y[3]),e=[16,[0,y[1],y[2],aj]];break;case
17:var
z=d[1],ak=f(z[3]),e=[17,[0,z[1],z[2],ak]];break;case
18:var
r=d[1],al=f(r[4]),e=[18,[0,r[1],r[2],r[3],al]];break;case
19:var
j=d[1],am=f(j[6]),e=[19,[0,j[1],j[2],j[3],j[4],j[5],am]];break;case
20:var
s=d[1],an=f(s[4]),e=[20,[0,s[1],s[2],s[3],an]];break;case
21:var
A=d[1],ao=f(A[3]),e=[21,[0,A[1],A[2],ao]];break;case
22:var
B=d[1],ap=f(B[3]),e=[22,[0,B[1],B[2],ap]];break;case
23:var
t=d[1],aq=f(t[4]),e=[23,[0,t[1],t[2],t[3],aq]];break;case
24:var
R=d[1],ar=L(R[2]),e=[24,[0,R[1],ar]];break;case
25:var
C=d[1],u=C[1],as=C[3],at=C[2],au=f(u[4]),e=[25,[0,[0,u[1],u[2],u[3],au],at,as]];break;case
26:var
D=d[1],E=D[1],av=D[3],aw=D[2],ax=f(E[3]),e=[26,[0,[0,E[1],E[2],ax],aw,av]];break;case
27:var
S=d[1],ay=f(S[2]),e=[27,[0,S[1],ay]];break;case
28:var
e=[28,[0,f(d[1][1])]];break;case
29:var
F=d[1],az=f(F[3]),e=[29,[0,F[1],F[2],az]];break;case
30:var
G=d[1],aA=f(G[3]),e=[30,[0,G[1],G[2],aA]];break;case
31:var
e=[31,[0,f(d[1][1])]];break;case
32:var
H=d[1],aB=f(H[3]),e=[32,[0,H[1],H[2],aB]];break;case
34:var
I=d[1],aC=f(I[3]),e=[34,[0,I[1],I[2],aC]];break;case
35:var
v=d[1],aD=f(v[4]),e=[35,[0,v[1],v[2],v[3],aD]];break;case
36:var
w=d[1],aE=w[4],aF=w[3],aG=f(w[2]),e=[36,[0,w[1],aG,aF,aE]];break;default:var
e=d}return[0,T,e]});a(HN,function(a){var
G=q(a);n(a,6);var
b=[0,0,cr];for(;;){var
d=b[2],e=b[1],c=m(a);if(typeof
c==="number"){var
h=0;if(13<=c){if(X===c)h=1}else if(7<=c)switch(c-7|0){case
0:h=1;break;case
2:var
C=A(a);r(a);var
b=[0,[0,[2,C],e],d];continue;case
5:var
D=q(a),l=o(0,function(a){r(a);var
b=k(jn,a);return 0===b[0]?[0,b[1],cr]:[0,b[1],b[2]]},a),s=l[2],g=s[2],t=l[1],E=s[1],F=[1,[0,t,[0,E,p([0,D],0,0)]]],u=7===m(a)?1:0,w=0;if(!u&&7===O(1,a)){var
v=[0,g[1],[0,[0,t,20],g[2]]];w=1}if(!w)var
v=g;if(1-u)n(a,9);var
b=[0,[0,F,e],sc(v,d)];continue}if(h){var
y=HB(d),z=B(e),H=q(a);n(a,7);return[0,[0,z,aA([0,G],[0,x(a)],H,0)],y]}}var
f=k(jn,a);if(0===f[0])var
j=cr,i=f[1];else
var
j=f[2],i=f[1];if(7!==m(a))n(a,9);var
b=[0,[0,[0,i],e],sc(j,d)]}});a(HO,function(a){aB(a,5);var
y=A(a),z=q(a),d=m(a),t=0;if(typeof
d!=="number"&&5===d[0]){var
o=d[3],s=d[2];r(a);var
B=x(a),i=B,b=o,h=s,g=I(ahU,I(s,I(ahT,o)));t=1}if(!t){aq(ahP,a);var
i=0,b=ahQ,h=ahR,g=ahS}aF(a);var
j=ad(H(b)),e=H(b)-1|0,u=0;if(e>=0){var
c=u;for(;;){var
f=v(b,c),k=f-100|0,C=0;if(21>=k>>>0)switch(k){case
0:case
3:case
5:case
9:case
15:case
17:case
21:bU(j,f);C=1;break}var
w=c+1|0;if(e!==c){var
c=w;continue}break}}var
n=az(j);if(l(n,b))G(a,[18,b]);return[0,y,[18,[0,h,n,g,p([0,z],[0,i],0)]]]});var
ahV=function(a){return function(a){if(typeof
a==="number"){var
b=0;if(66<=a){var
c=a+Kw|0;if(49<c>>>0)b=1;else{var
d=c-15|0;if(9>=d>>>0)switch(d){case
0:case
1:case
3:case
9:b=1;break}}}else
if(8<=a){if(60===a)b=1}else if(6<=a)b=1;if(b)return 0}throw t(cP,1)}},ahW=function(a){var
b=m(a);if(typeof
b==="number"&&!b){var
c=j(w[16],1,a);return[0,[0,c[1]],c[2]]}return[0,[1,k(w[10],a)],0]};a(st,function(a){var
c=ml(ahV,a),E=A(c);if(11===O(1,c))var
q=0,d=0;else
var
B=mK(c),q=B[2],d=B[1];var
r=d||c[19],e=rF(r,c),F=e[18],s=o(0,function(a){var
c=bo(a,bI(a));if(cO(a)&&0===c){var
d=j(w[13],ahX,a),b=d[1],g=[0,b,[0,[0,b,[2,[0,d,[0,hs(a)],0]]],0]];return[0,c,[0,b,[0,0,[0,g,0],0,0]],[0,[0,b[1],b[3],b[3]]],0]}var
e=k(jl(r,F),a);Ht(a,e);var
f=r6(iv(1,a));return[0,c,e,f[1],f[2]]},e),f=s[2],g=f[2],l=g[2],C=0,H=f[4],I=f[3],J=f[1],K=s[1];if(!l[1]){var
D=0,S=l[2];if(l[3]||!S)D=1;if(D){var
b=GF(e);C=1}}if(!C)var
b=e;var
h=g[2],t=h[1];if(t){var
L=g[1];u(b,[0,t[1][1],91]);var
i=[0,L,[0,0,h[2],h[3],h[4]]]}else
var
i=g;var
M=iy(i),v=be(b),N=v?11===m(b)?1:0:v;if(N)G(b,60);n(b,11);var
x=GG(GF(b),d,0,M),y=o(0,ahW,x),z=y[2],P=z[1],Q=y[1];jk(x,z[2],0,i);var
R=ae(E,Q);return[0,[0,R,[1,[0,0,i,P,d,0,H,I,J,p([0,q],0,0),K]]]]});a(mP,function(a,b,c){return o([0,b],function(a){var
b=c;for(;;){var
d=m(a);if(typeof
d==="number"&&9===d){r(a);var
b=[0,k(b$,a),b];continue}return[27,[0,B(b),0]]}},a)});var
ahY=function(a){var
e=q(a);r(a);var
f=p([0,e],0,0),b=k(mL,a),c=be(a)?ks(a):mr(a),d=c[2];return[0,j(d,b,function(a,b){return j(K(a,cv,64),a,b)}),f]},sz=function(a){if(!a[28][3])return 0;var
b=0;for(;;){var
c=m(a);if(typeof
c==="number"&&13===c){var
b=[0,o(0,ahY,a),b];continue}return B(b)}},h9=function(a,b){var
M=a?a[1]:0,f=q(b),c=m(b);if(typeof
c==="number")switch(c){case
6:var
t=o(0,function(a){var
b=q(a);n(a,6);var
d=kn(0,a),c=k(w[10],d);n(a,7);return[0,c,p([0,b],[0,x(a)],0)]},b),v=t[1];return[0,v,[5,[0,v,t[2]]]];case
14:if(!M){var
y=o(0,function(a){r(a);return[3,a3(a)]},b),z=y[1],P=y[2];u(b,[0,z,68]);return[0,z,P]}var
g=GW(b),e=b[30][1],N=g[2][1],O=g[1];if(e){var
i=e[1],J=e[2],K=i[2],L=[0,[0,j(a2[4],N,i[1]),K],J];b[30][1]=L}else
C(adP);return[0,O,[4,g]]}else
switch(c[0]){case
0:var
B=c[2],Q=c[1],D=A(b),R=s(mN,b,Q,B);return[0,D,[1,[0,D,[0,R,B,p([0,f],[0,x(b)],0)]]]];case
1:var
E=c[2],S=c[1],F=A(b),T=s(mO,b,S,E);return[0,F,[2,[0,F,[0,T,E,p([0,f],[0,x(b)],0)]]]];case
2:var
d=c[1],G=d[4],H=d[3],I=d[2],h=d[1];if(G)b_(b,81);n(b,[2,[0,h,I,H,G]]);return[0,h,[0,[0,h,[0,I,H,p([0,f],[0,x(b)],0)]]]]}var
l=a3(b);return[0,l[1],[3,l]]},mQ=function(a,b,c){var
e=jm(a),h=e[1],l=e[2],f=h9([0,b],a),d=f[1],g=0,i=cq(a,f[2]);return[0,i,o(0,function(a){var
f=iu(1,a),i=o(0,function(a){var
g=k(jl(0,0),a),n=0,e=86===m(a)?g:kt(a,g);if(c){var
f=e[2],i=0;if(f[1]){u(a,[0,d,28]);i=1}else{var
j=0;if(f[2]||f[3])j=1;else
i=1;if(j)u(a,[0,d,27])}}else{var
b=e[2];if(b[1])u(a,[0,d,71]);else{var
h=b[2],l=0;if(h&&!h[2]&&!b[3])l=1;if(!l)if(b[3])u(a,[0,d,70]);else
u(a,[0,d,70])}}return[0,n,e,ji(a,r5(a))]},f),b=i[2],e=b[2],n=b[3],q=b[1],r=i[1],j=kz(f,g,h,0,iy(e)),s=j[1];jk(f,j[2],0,e);return[0,0,e,s,g,h,0,n,q,p([0,l],0,0),r]},a)]},HT=function(a){var
b=k(jn,a);return 0===b[0]?[0,b[1],cr]:[0,b[1],b[2]]},HU=function(a,b){switch(b[0]){case
0:var
e=b[1],f=e[1],m=e[2];u(a,[0,f,53]);return[0,f,[13,m]];case
1:var
g=b[1],h=g[1],n=g[2];u(a,[0,h,53]);return[0,h,[16,n]];case
2:var
i=b[1],j=i[1],o=i[2];u(a,[0,j,53]);return[0,j,[17,o]];case
3:var
c=b[1],k=c[2][1],d=c[1];if(mm(k))u(a,[0,d,b0]);else if(jg(k))bX(a,[0,d,85]);return[0,d,[9,c]];case
4:return C(ahZ);default:var
l=b[1][2][1];u(a,[0,l[1],8]);return l}},HV=function(d,b,c){function
e(a){var
g=iu(1,a),h=o(0,function(a){var
e=bo(a,bI(a)),c=k(jl(d,b),a),f=86===m(a)?c:kt(a,c);return[0,e,f,ji(a,r5(a))]},g),e=h[2],f=e[2],j=e[3],l=e[1],n=h[1],i=kz(g,d,b,0,iy(f)),q=i[1];jk(g,i[2],0,f);return[0,0,f,q,d,b,0,j,l,p([0,c],0,0),n]}var
f=0;return function(a){return o(f,e,a)}},HW=function(a){n(a,86);return HT(a)},sA=function(a,b,c,d,e,f){var
g=o([0,b],function(a){if(!d&&!e){var
b=m(a);if(typeof
b==="number"){var
i=0;if(86<=b){if(98===b)i=1;else if(87>b){var
l=HW(a);return[0,[0,c,l[1],0],l[2]]}}else{if(82===b){if(3===c[0])var
g=c[1],r=A(a),s=function(a){var
b=q(a);n(a,82);var
c=x(a),d=j(w[19],a,[0,g[1],[9,g]]),e=k(w[10],a);return[3,[0,0,d,e,p([0,b],[0,c],0)]]},t=o([0,g[1]],s,a),h=[0,t,[0,[0,[0,r,[24,lW(ah0)]],0],0]];else
var
h=HW(a);return[0,[0,c,h[1],1],h[2]]}if(10>b)switch(b){case
4:i=1;break;case
1:case
9:return[0,[0,c,HU(a,c),1],cr]}}if(i){var
v=cq(a,c);return[0,[1,v,k(HV(d,e,f),a)],cr]}}return[0,[0,c,HU(a,c),1],cr]}var
u=cq(a,c);return[0,[1,u,k(HV(d,e,f),a)],cr]},a),h=g[2];return[0,[0,[0,g[1],h[1]]],h[2]]},ah1=function(a){if(12===m(a)){var
M=q(a),u=o(0,function(a){n(a,12);return HT(a)},a),v=u[2],N=v[2],P=v[1],Q=u[1];return[0,[1,[0,Q,[0,P,p([0,M],0,0)]]],N]}var
e=A(a),b=O(1,a),E=0;if(typeof
b==="number"){var
f=0;if(86<=b){if(98!==b&&87<=b)f=1}else if(82!==b)if(10<=b)f=1;else
switch(b){case
1:case
4:case
9:break;default:f=1}if(!f){var
w=0,i=0;E=1}}if(!E)var
D=mK(a),w=D[2],i=D[1];var
x=jm(a),y=x[1],R=J(w,x[2]),j=m(a);if(!i&&!y&&typeof
j!=="number"&&4===j[0]){var
z=j[3];if(!l(z,iV)){var
T=q(a),C=h9(0,a)[2],d=m(a);if(typeof
d==="number"){var
h=0;if(86<=d){if(98!==d&&87<=d)h=1}else if(82!==d)if(10<=d)h=1;else
switch(d){case
1:case
4:case
9:break;default:h=1}if(!h)return sA(a,e,C,0,0,0)}cq(a,C);var
k=o([0,e],function(a){return mQ(a,0,1)},a),r=k[2],F=r[2],G=r[1],H=k[1];return[0,[0,[0,H,[2,G,F,p([0,T],0,0)]]],cr]}if(!l(z,jt)){var
S=q(a),B=h9(0,a)[2],c=m(a);if(typeof
c==="number"){var
g=0;if(86<=c){if(98!==c&&87<=c)g=1}else if(82!==c)if(10<=c)g=1;else
switch(c){case
1:case
4:case
9:break;default:g=1}if(!g)return sA(a,e,B,0,0,0)}cq(a,B);var
s=o([0,e],function(a){return mQ(a,0,0)},a),t=s[2],I=t[2],K=t[1],L=s[1];return[0,[0,[0,L,[3,K,I,p([0,S],0,0)]]],cr]}}return sA(a,e,h9(0,a)[2],i,y,R)},ah2=function(a){var
b=o(0,function(a){var
F=q(a);n(a,0);var
d=0,c=[0,0,cr];for(;;){var
b=c[2],j=c[1],e=m(a);if(typeof
e==="number"){var
t=0;if(1!==e&&X!==e)t=1;if(!t){var
z=d?[0,b[1],[0,[0,d[1],95],b[2]]]:b,C=HB(z),D=B(j),G=q(a);n(a,1);return[0,[0,D,aA([0,F],[0,x(a)],G,0)],C]}}var
k=ah1(a),l=k[1],u=0,E=k[2];if(1===l[0]&&9===m(a)){var
o=[0,A(a)];u=1}if(!u)var
o=0;var
f=sc(E,b),p=m(a),v=0;if(typeof
p==="number"){var
g=p-2|0,h=0;if(aD<g>>>0){if(bh>=g+1>>>0)h=1}else if(7===g){r(a);h=1}if(h){var
s=f;v=1}}if(!v){var
w=rx(adW,9),y=GL([0,w],m(a)),i=[0,A(a),y];ak(a,8);var
s=[0,[0,i,f[1]],[0,i,f[2]]]}var
d=o,c=[0,[0,l,j],s]}},a),c=b[2];return[0,b[1],c[1],c[2]]},mR=function(a,b,c,d){var
f=c[2][1],j=c[1];if(V(f,iM)){u(a,[0,j,[15,f,0,K_===d?1:0,1]]);return b}var
e=b;for(;;){if(typeof
e==="number")var
g=0;else if(0===e[0])var
l=e[2],g=0===z(f,e[1])?[0,l]:0;else{var
i=z(f,e[2]),m=e[5],n=e[4],o=e[3];if(0!==i){var
p=0<=i?m:n,e=p;continue}var
g=[0,o]}if(!g)return lT(f,d,b);var
k=g[1],h=0;if(wu===d){if(BP===k)h=1}else if(BP===d&&wu===k)h=1;if(!h)u(a,[0,j,[1,f]]);return lT(f,Kn,b)}},HX=function(a,b){return o(0,function(a){var
g=b?q(a):0;n(a,52);var
c=0;for(;;){var
d=[0,o(0,function(a){var
b=cQ(a);if(98===m(a))var
d=au(a)[2],c=j(d,b,function(a,b){return j(K(a,ju,65),a,b)});else
var
c=b;return[0,c,Ho(a)]},a),c],e=m(a);if(typeof
e==="number"&&9===e){n(a,9);var
c=d;continue}var
f=B(d);return[0,f,p([0,g],0,0)]}},a)},sB=function(a){switch(a[0]){case
0:case
3:var
b=a[1];return[0,[0,b[1],b[2][1]]];default:return 0}},sC=function(a,b){return b?u(a,[0,b[1][1],bh]):0},sD=function(a,b){return b?u(a,[0,b[1],13]):0},HY=function(a,b,c,d,e,f,g,h){var
n=o([0,b],function(a){var
c=r4(a),i=m(a);if(f){var
A=0;if(typeof
i==="number"&&82===i){G(a,14);r(a);var
b=0}else
A=1;if(A)var
b=0}else{var
B=0;if(typeof
i==="number"&&82===i){r(a);var
O=iu(1,a),b=[0,k(w[7],O)];B=1}if(!B)var
b=1}var
l=m(a),u=0;if(typeof
l==="number"&&9>l)switch(l){case
8:r(a);var
t=m(a),v=0;if(typeof
t==="number"){var
C=0;if(1===t||X===t)C=1;else
v=1;if(C)var
z=x(a)}else
v=1;if(v)var
z=be(a)?h6(a):0;var
e=[0,d,c,b,z];u=1;break;case
4:case
6:aq(0,a);var
e=[0,d,c,b,0];u=1;break}if(!u){var
n=m(a),y=0;if(typeof
n==="number"){var
D=0;if(1===n||X===n)D=1;else
y=1;if(D)var
g=[0,0,function(a,b){return a}]}else
y=1;if(y)var
g=be(a)?ks(a):mr(a);if(typeof
b==="number")if(0===c[0])var
E=function(a,b){return j(K(a,KH,68),a,b)},s=b,q=c,o=j(g[2],d,E);else
var
F=c[1],H=function(a,b){return j(K(a,BQ,69),a,b)},s=b,q=[1,j(g[2],F,H)],o=d;else
var
I=b[1],J=function(a,b){return j(K(a,cv,70),a,b)},s=[0,j(g[2],I,J)],q=c,o=d;var
e=[0,o,q,s,0]}var
L=e[3],M=e[2],N=e[1];return[0,N,M,L,p([0,h],[0,e[4]],0)]},a),i=n[2],q=i[4],s=i[3],t=i[2],l=i[1],u=n[1];return 4===l[0]?[2,[0,u,[0,l[1],s,t,e,g,c,q]]]:[1,[0,u,[0,l,s,t,e,g,c,q]]]},sE=function(a,b,c,d,e,f,g,h,i,j){for(;;){var
y=m(a);if(typeof
y==="number"){var
v=y-1|0,w=0;if(7<v>>>0){var
z=v-81|0;if(4>=z>>>0)switch(z){case
3:aq(0,a);r(a);continue;case
0:case
4:w=1;break}}else if(5<v-1>>>0)w=1;if(w&&!e&&!f)return HY(a,b,c,d,g,h,i,j)}var
t=m(a),F=0;if(typeof
t==="number"&&(4===t||98===t))var
A=0;else
F=1;if(F)var
A=jh(a)?1:0;if(A)return HY(a,b,c,d,g,h,i,j);sD(a,h);sC(a,i);var
n=sB(d),x=0;if(g){if(n){var
B=n[1],G=B[1];if(!l(B[2],ic)){u(a,[0,G,[15,ah5,g,1,0]]);var
s=iu(1,a),q=1;x=1}}}else if(n){var
D=n[1],E=D[1];if(!l(D[2],iM)){if(e)u(a,[0,E,10]);if(f)u(a,[0,E,11]);var
s=iu(2,a),q=0;x=1}}if(!x)var
s=iu(1,a),q=1;var
H=cq(s,d),C=o(0,function(a){var
d=o(0,function(a){var
j=bo(a,bI(a)),d=k(jl(e,f),a),c=86===m(a)?d:kt(a,d),b=c[2],g=b[1],i=0;if(g){var
l=g[1][1],n=c[1];if(0===q){u(a,[0,l,92]);var
h=[0,n,[0,0,b[2],b[3],b[4]]];i=1}}if(!i)var
h=c;return[0,j,h,ji(a,r5(a))]},a),b=d[2],c=b[2],h=b[3],i=b[1],j=d[1],g=kz(a,e,f,0,iy(c)),l=g[1];jk(a,g[2],0,c);return[0,0,c,l,e,f,0,h,i,0,j]},s),I=[0,q,H,C,g,c,p([0,j],0,0)];return[0,[0,ae(b,C[1]),I]]}},sF=function(a,b){var
c=O(a,b);if(typeof
c==="number"){var
d=0;if(86<=c){if(98!==c&&87<=c)d=1}else if(82!==c)if(9<=c)d=1;else
switch(c){case
1:case
4:case
8:break;default:d=1}if(!d)return 1}return 0},ah6=0,HZ=function(a){return sF(ah6,a)},ah7=function(a){var
g=A(a),h=sz(a),S=m(a),ah=0;if(typeof
S==="number"&&60===S&&!sF(1,a)){var
aK=[0,A(a)],aL=q(a);r(a);var
T=aL,f=aK;ah=1}if(!ah)var
T=0,f=0;var
v=m(a),aM=0;if(typeof
v==="number"&&2>=v+Le>>>0&&h4(1,a)){var
ai=0;if(typeof
v==="number"){var
af=v+Le|0;if(2>=af>>>0){switch(af){case
0:var
E=JS;break;case
1:var
E=k6;break;default:var
E=le}var
ag=E;ai=1}}if(!ai)var
ag=C(ah$);G(a,[22,ag]);r(a);aM=1}var
U=42===m(a)?1:0;if(U){var
i=O(1,a),aj=0;if(typeof
i==="number"){var
x=0;if(87<=i){if(98!==i&&X!==i)x=1}else{var
w=i-9|0;if(76<w>>>0){if(77>w)switch(w+9|0){case
1:case
4:case
8:break;default:x=1}}else if(73!==w)x=1}if(!x){var
V=0;aj=1}}if(!aj)var
V=1;var
b=V}else
var
b=U;if(b){var
aB=q(a);r(a);var
W=aB}else
var
W=0;var
Y=64===m(a)?1:0;if(Y)var
Z=1-sF(1,a),c=Z?1-kp(1,a):Z;else
var
c=Y;if(c){var
aC=q(a);r(a);var
_=aC}else
var
_=0;var
$=jm(a),B=$[1],aD=$[2],aE=h4(1,a),aF=aE||(6===O(1,a)?1:0),z=A(a),n=m(a),y=0;if(typeof
n==="number")switch(n){case
103:var
aq=q(a);r(a);var
e=[0,[0,z,[0,0,p([0,aq],0,0)]]];y=1;break;case
104:var
ar=q(a);r(a);var
e=[0,[0,z,[0,1,p([0,ar],0,0)]]];y=1;break}else if(4===n[0]&&!l(n[3],jO)&&aF){var
as=q(a);r(a);var
e=[0,[0,z,[0,2,p([0,as],0,0)]]];y=1}if(!y)var
e=0;var
ak=0;if(e){var
al=0,ap=e[1][1];if(c||B)al=1;if(al){u(a,[0,ap,bh]);var
d=0;ak=1}}if(!ak)var
d=e;var
am=0;if(!B&&d){var
ae=jm(a),aa=ae[2],j=ae[1];am=1}if(!am)var
aa=aD,j=B;var
k=j2([0,T,[0,W,[0,_,[0,aa,0]]]]),D=m(a);if(!c&&!j&&typeof
D!=="number"&&4===D[0]){var
ab=D[3];if(!l(ab,iV)){var
aI=q(a),ad=h9(ah_,a)[2];if(HZ(a))return sE(a,g,h,ad,c,j,b,f,d,k);sD(a,f);sC(a,d);cq(a,ad);var
aJ=J(k,aI),F=o([0,g],function(a){return mQ(a,1,1)},a),H=F[2],I=H[1],at=H[2],au=F[1],s=sB(I),ao=0;if(b){if(s){var
K=s[1],av=K[1];if(!l(K[2],ic)){u(a,[0,av,[15,ah3,b,0,0]]);ao=1}}}else if(s){var
L=s[1],aw=L[1];if(!l(L[2],iM)){u(a,[0,aw,9]);ao=1}}return[0,[0,au,[0,2,I,at,b,h,p([0,aJ],0,0)]]]}if(!l(ab,jt)){var
aG=q(a),ac=h9(ah9,a)[2];if(HZ(a))return sE(a,g,h,ac,c,j,b,f,d,k);sD(a,f);sC(a,d);cq(a,ac);var
aH=J(k,aG),M=o([0,g],function(a){return mQ(a,1,0)},a),N=M[2],P=N[1],ax=N[2],ay=M[1],t=sB(P),an=0;if(b){if(t){var
Q=t[1],az=Q[1];if(!l(Q[2],ic)){u(a,[0,az,[15,ah4,b,0,0]]);an=1}}}else if(t){var
R=t[1],aA=R[1];if(!l(R[2],iM)){u(a,[0,aA,9]);an=1}}return[0,[0,ay,[0,3,P,ax,b,h,p([0,aH],0,0)]]]}}return sE(a,g,h,h9(ah8,a)[2],c,j,b,f,d,k)},H0=function(a,b,c,d){var
O=a?a[1]:0,e=hr(1,b),P=J(O,sz(e)),Q=q(e),g=m(e),W=0;if(typeof
g!=="number"&&4===g[0]&&!l(g[3],x_)){G(e,88);r(e);W=1}n(e,40);var
E=rG(1,e),f=m(E),H=0;if(c&&typeof
f==="number"){var
i=0;if(52<=f){if(98!==f&&53<=f)i=1}else if(41!==f&&f)i=1;if(!i){var
h=0;H=1}}if(!H)if(cO(e))var
T=j(w[13],0,E),U=au(e)[2],h=[0,j(U,T,function(a,b){return j(K(a,ju,72),a,b)})];else{GM(e,aic);var
h=[0,[0,A(e),aid]]}var
z=bI(e);if(z)var
R=z[1],S=au(e)[2],D=[0,j(S,R,function(a,b){return j(K(a,ta,71),a,b)})];else
var
D=0;var
I=q(e);if(ak(e,41))var
F=o(0,function(a){var
b=k(mL,rE(0,a));if(98===m(a))var
d=au(a)[2],c=j(d,b,function(a,b){return j(K(a,cv,66),a,b)});else
var
c=b;var
e=Ho(a);return[0,c,e,p([0,I],0,0)]},e),t=F[1],L=F[2],M=au(e)[2],v=[0,[0,t,j(M,L,function(a,b){return s(K(a,-663447790,67),a,t,b)})]];else
var
v=0;if(52===m(e)){if(1-an(e))G(e,cf);var
y=[0,GU(e,HX(e,1))]}else
var
y=0;var
N=o(0,function(b){var
ae=q(b);if(!ak(b,0)){ht(b,0);return aib}b[30][1]=[0,[0,a2[1],0],b[30][1]];var
c=0,a=QQ,o=0;for(;;){var
H=m(b);if(typeof
H==="number"){var
r=H-2|0;if(aD<r>>>0){if(bh>=r+1>>>0){var
ad=B(o),y=function(c,b){return k(j3(function(a){return 1-j(a2[3],a[1],c)}),b)},i=b[30][1];if(i){var
l=i[1],z=l[1];if(i[2]){var
A=i[2],S=y(z,l[2]),D=j1(A),T=D[2],U=D[1],W=EN(A),Y=[0,[0,U,J(T,S)],W];b[30][1]=Y}else{var
Z=y(z,l[2]);a7(function(a){return u(b,[0,a[2],[23,a[1]]])},Z);b[30][1]=0}}else
C(adO);n(b,1);var
t=m(b),w=0;if(!d){var
R=0;if(typeof
t!=="number"||1!==t&&X!==t)R=1;if(R)if(be(b)){var
v=h6(b);w=1}else{var
v=0;w=1}}if(!w)var
v=x(b);return[0,ad,p([0,ae],[0,v],0)]}}else if(6===r){n(b,8);continue}}var
g=ah7(b);switch(g[0]){case
0:var
I=g[1],h=I[2],_=I[1];switch(h[1]){case
0:if(h[4])var
f=a,e=c;else{if(c)u(b,[0,_,18]);var
f=a,e=1}break;case
1:var
K=h[2],$=4===K[0]?mR(b,a,K[1],K_):a,f=$,e=c;break;case
2:var
L=h[2],aa=4===L[0]?mR(b,a,L[1],wu):a,f=aa,e=c;break;default:var
M=h[2],ab=4===M[0]?mR(b,a,M[1],BP):a,f=ab,e=c}break;case
1:var
N=g[1][2],O=N[4],P=N[1];switch(P[0]){case
4:C(aia);break;case
0:case
3:var
Q=P[1],s=Q[2][1],E=V(s,iM),ac=Q[1];if(E)var
F=E;else
var
G=V(s,ic),F=G?O:G;if(F)u(b,[0,ac,[15,s,O,0,0]]);break}var
f=a,e=c;break;default:var
f=mR(b,a,g[1][2][1],Kn),e=c}var
c=e,a=f,o=[0,g,o]}},e);return[0,h,N,D,v,y,P,p([0,Q],0,0)]},mS=function(a,b){return o(0,function(a){return[2,H0([0,b],a,a[7],0)]},a)},aie=function(a){return[6,H0(0,a,1,1)]},aif=0,aig=function(a){return o(aif,aie,a)},H1=Hs(w),H2=function(a){var
b=kA(a);if(a[5])ix(a,b[1]);else{var
d=b[2],g=0;if(26===d[0]){var
e=d[1],f=b[1],c=0;if(e[4]){u(a,[0,f,5]);c=1}else if(e[5]){u(a,[0,f,26]);c=1}if(c)g=1}}return b},mT=function(a,b){var
c=b[4],d=b[3],e=b[2],f=b[1];if(c)b_(a,81);var
g=q(a);n(a,[2,[0,f,e,d,c]]);return[0,f,[0,e,d,p([0,g],[0,x(a)],0)]]},aL=function(a,b,c){var
h=a?a[1]:aij,i=b?b[1]:1,f=m(c);if(typeof
f==="number"){var
d=f-2|0;if(aD<d>>>0){if(bh>=d+1>>>0){var
j=function(a,b){return a};return[1,[0,x(c),j]]}}else if(6===d){r(c);var
e=m(c);if(typeof
e==="number"){var
g=0;if(1!==e&&X!==e)g=1;if(!g)return[0,x(c)]}return be(c)?[0,h6(c)]:aii}}if(be(c))return[1,ks(c)];if(i)aq([0,h],c);return aih},hx=function(a){var
b=m(a);if(typeof
b==="number"){var
c=0;if(1!==b&&X!==b)c=1;if(!c){var
d=function(a,b){return a};return[0,x(a),d]}}return be(a)?ks(a):mr(a)},sG=function(f,b,c){var
a=aL(0,0,b);if(0===a[0])return[0,a[1],c];var
g=a[1][2],d=B(c);if(d)var
h=d[2],i=d[1],e=B([0,j(g,i,function(a,b){return s(K(a,634872468,73),a,f,b)}),h]);else
var
e=0;return[0,0,e]},H3=function
b(a){return b.fun(a)},H4=function
b(a){return b.fun(a)},H5=function
b(a){return b.fun(a)},H6=function
b(a){return b.fun(a)},H7=function
b(a){return b.fun(a)},kC=function
c(a,b){return c.fun(a,b)},H8=function
b(a){return b.fun(a)},H9=function
b(a){return b.fun(a)},kD=function
d(a,b,c){return d.fun(a,b,c)},H_=function
b(a){return b.fun(a)},H$=function
b(a){return b.fun(a)},kE=function
c(a,b){return c.fun(a,b)},Ia=function
b(a){return b.fun(a)},Ib=function
b(a){return b.fun(a)},mU=function
c(a,b){return c.fun(a,b)},Ic=function
b(a){return b.fun(a)},mV=function
c(a,b){return c.fun(a,b)},Id=function
b(a){return b.fun(a)},Ie=function
b(a){return b.fun(a)},mW=function
c(a,b){return c.fun(a,b)},If=function
b(a){return b.fun(a)},kF=function
d(a,b,c){return d.fun(a,b,c)},kG=function
c(a,b){return c.fun(a,b)},Ig=function
c(a,b){return c.fun(a,b)},Ih=function
c(a,b){return c.fun(a,b)},sH=function
c(a,b){return c.fun(a,b)},Ii=function
b(a){return b.fun(a)},jo=function
b(a){return b.fun(a)},mX=function
d(a,b,c){return d.fun(a,b,c)},sI=function
c(a,b){return c.fun(a,b)},Ij=function
c(a,b){return c.fun(a,b)},sJ=function
b(a){return b.fun(a)},aik=function(a){var
c=q(a);n(a,59);var
d=8===m(a)?x(a):0,b=aL(0,0,a),e=0===b[0]?b[1]:b[1][1];return[5,[0,p([0,c],[0,J(d,e)],0)]]},ail=0,aim=function(a){var
e=q(a);n(a,37);var
o=km(1,a),b=k(w[2],o),d=1-a[5],f=d?ku(b):d;if(f)ix(a,b[1]);var
g=x(a);n(a,25);var
h=x(a);n(a,4);var
i=k(w[7],a);n(a,5);var
j=8===m(a)?x(a):0,c=aL(0,ain,a),l=0===c[0]?J(j,c[1]):c[1][1];return[17,[0,b,i,p([0,e],[0,J(g,J(h,l))],0)]]},aio=0,Ik=function(a,b,c){var
d=c[2][1],e=c[1];if(d&&!d[1][2][2]&&!d[2])return 0;return u(a,[0,e,b])},sK=function(a,b){if(!a[5]&&ku(b))return ix(a,b[1]);return 0},aip=function(b){var
$=q(b);n(b,39);var
z=b[19],g=z?ak(b,65):z,aa=J($,q(b));n(b,4);var
h=p([0,aa],0,0),A=m(b),Y=0;if(typeof
A==="number"&&64===A){var
B=1;Y=1}if(!Y)var
B=0;var
c=kn(1,b),d=m(c),f=0;if(typeof
d==="number")if(24<=d){if(29>d)switch(d+xH|0){case
0:var
V=o(0,Hx,c),v=V[2],ag=v[3],ah=v[1],ai=V[1],e=ag,a=[0,[1,[0,ai,[0,ah,0,p([0,v[2]],0,0)]]]];f=1;break;case
3:var
W=o(0,Hy,c),x=W[2],aj=x[3],al=x[1],am=W[1],e=aj,a=[0,[1,[0,am,[0,al,2,p([0,x[2]],0,0)]]]];f=1;break;case
4:if(17!==O(1,c)){var
X=o(0,Hz,c),y=X[2],an=y[3],ao=y[1],ap=X[1],e=an,a=[0,[1,[0,ap,[0,ao,1,p([0,y[2]],0,0)]]]];f=1}break}}else if(8===d){var
e=0,a=0;f=1}if(!f)var
e=0,a=[0,[0,k(w[8],c)]];var
i=m(b);if(typeof
i==="number"){if(17===i){if(!a)throw t([0,R,air],1);var
j=a[1];if(0===j[0])var
C=[1,sb(aiq,b,j[1])];else{var
E=j[1];Ik(b,43,E);var
C=[0,E]}if(g)n(b,63);else
n(b,17);var
ab=k(w[7],b);n(b,5);var
ar=km(1,b),D=k(w[2],ar);sK(b,D);return[24,[0,C,ab,D,0,h]]}if(63===i){if(!a)throw t([0,R,ait],1);var
r=a[1];if(0===r[0]){var
F=sb(ais,b,r[1]),G=1-g,ac=G?B:G,at=0;if(ac){var
H=F[2];if(2===H[0]){var
L=H[1][1],ae=L[1];if(!l(L[2][1],h_)){u(b,[0,ae,44]);at=1}}}var
I=[1,F]}else{var
M=r[1];Ik(b,44,M);var
I=[0,M]}n(b,63);var
ad=k(w[10],b);n(b,5);var
aq=km(1,b),K=k(w[2],aq);sK(b,K);return[25,[0,I,ad,K,g,h]]}}a7(function(a){return u(b,a)},e);if(g)n(b,63);else
n(b,8);if(a)var
s=a[1],af=0===s[0]?[0,[1,aS(b,s[1])]]:[0,[0,s[1]]],N=af;else
var
N=0;var
P=m(b),Z=0;if(typeof
P==="number"&&8===P){var
Q=0;Z=1}if(!Z)var
Q=[0,k(w[7],b)];n(b,8);var
S=m(b),_=0;if(typeof
S==="number"&&5===S){var
T=0;_=1}if(!_)var
T=[0,k(w[7],b)];n(b,5);var
as=km(1,b),U=k(w[2],as);sK(b,U);return[23,[0,N,Q,T,U,h]]},aiu=0,Il=function(a){var
b=h5(a)?H2(a):k(w[2],a),c=1-a[5],d=c?ku(b):c;if(d)ix(a,b[1]);return b},aiv=function(a){var
b=q(a);n(a,43);var
c=Il(a);return[0,c,p([0,b],0,0)]},aiw=function(a){var
b=q(a);n(a,16);var
c=J(b,q(a));n(a,4);var
d=k(w[7],a);n(a,5);var
e=Il(a),f=43===m(a)?[0,o(0,aiv,a)]:0;return[27,[0,d,e,f,p([0,c],0,0)]]},aix=0,Im=function(a){return o(aix,aiw,a)},aiy=function(a){if(1-a[11])G(a,31);var
o=q(a),r=A(a);n(a,19);var
d=8===m(a)?x(a):0,i=0;if(8!==m(a)&&!jh(a)){var
b=[0,k(w[7],a)];i=1}if(!i)var
b=0;var
s=ae(r,A(a)),c=aL(0,0,a),l=0;if(0===c[0])var
e=c[1];else{var
h=c[1],t=h[1];if(b){var
u=b[1],v=h[2],g=[0,j(v,u,function(a,b){return j(K(a,cv,74),a,b)})],f=d;l=1}else
var
e=t}if(!l)var
g=b,f=J(d,e);return[31,[0,g,p([0,o],[0,f],0),s]]},aiz=0,aiA=function(a){var
l=q(a);n(a,20);n(a,4);var
f=k(w[7],a);n(a,5);n(a,0);var
b=aiB;for(;;){var
d=b[2],h=b[1],c=m(a);if(typeof
c==="number"){var
g=0;if(1!==c&&X!==c)g=1;if(!g){var
i=B(d);n(a,1);var
o=hx(a)[1],r=f[1];return[32,[0,f,i,p([0,l],[0,o],0),r]]}}var
e=mt(0,function(e){return function(a){var
g=q(a),c=m(a),f=0;if(typeof
c==="number"&&36===c){if(e)G(a,58);n(a,36);var
d=x(a),b=0;f=1}if(!f){n(a,33);var
d=0,b=[0,k(w[7],a)]}var
h=e||(0===b?1:0);n(a,86);var
i=J(d,hx(a)[1]);function
l(a){if(typeof
a==="number"){var
b=a-1|0,c=0;if(32<b>>>0){if(35===b)c=1}else if(30<b-1>>>0)c=1;if(c)return 1}return 0}var
o=1,r=1===a[9]?a:[0,a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],o,a[10],a[11],a[12],a[13],a[14],a[15],a[16],a[17],a[18],a[19],a[20],a[21],a[22],a[23],a[24],a[25],a[26],a[27],a[28],a[29],a[30],a[31]],s=j(w[4],l,r);return[0,[0,b,s,p([0,g],[0,i],0)],h]}}(h),a),b=[0,e[2],[0,e[1],d]]}},aiC=0,aiD=function(a){var
f=q(a),g=A(a);n(a,22);if(be(a))u(a,[0,g,59]);var
c=k(w[7],a),b=aL(0,0,a);if(0===b[0])var
e=c,d=b[1];else
var
h=b[1][2],i=0,e=j(h,c,function(a,b){return j(K(a,cv,75),a,b)}),d=i;return[33,[0,e,p([0,f],[0,d],0)]]},aiE=0,aiF=function(a){var
y=q(a);n(a,23);var
e=k(w[15],a);if(34===m(a))var
v=au(a)[2],b=j(v,e,function(a,b){var
c=b[1];return[0,c,s(K(a,pg,4),a,c,b[2])]});else
var
b=e;var
f=m(a),r=0;if(typeof
f==="number"&&34===f){var
c=[0,o(0,function(a){var
e=q(a);n(a,34);var
f=x(a);if(4===m(a)){n(a,4);var
g=[0,j(w[18],a,72)];n(a,5);var
b=g}else
var
b=0;var
c=k(w[15],a);if(38===m(a))var
d=c;else
var
h=hx(a)[2],d=j(h,c,function(a,b){var
c=b[1];return[0,c,s(K(a,pg,76),a,c,b[2])]});return[0,b,d,p([0,e],[0,f],0)]},a)];r=1}if(!r)var
c=0;var
g=m(a),t=0;if(typeof
g==="number"&&38===g){n(a,38);var
h=k(w[15],a),i=h[1],z=h[2],A=hx(a)[2],d=[0,[0,i,j(A,z,function(a,b){return s(K(a,pg,77),a,i,b)})]];t=1}if(!t)var
d=0;var
l=0===c?1:0,B=l?0===d?1:0:l;if(B)u(a,[0,b[1],61]);return[34,[0,b,c,d,p([0,y],0,0)]]},aiG=0,aiH=function(b){var
a=Hx(b),e=a[3],f=a[2],c=sG(0,b,a[1]),d=0,g=c[2],h=c[1];a7(function(a){return u(b,a)},e);return[37,[0,g,d,p([0,f],[0,h],0)]]},aiI=0,aiJ=function(b){var
a=Hy(b),e=a[3],f=a[2],c=sG(2,b,a[1]),d=2,g=c[2],h=c[1];a7(function(a){return u(b,a)},e);return[37,[0,g,d,p([0,f],[0,h],0)]]},aiK=0,aiL=function(b){var
a=Hz(b),e=a[3],f=a[2],c=sG(1,b,a[1]),d=1,g=c[2],h=c[1];a7(function(a){return u(b,a)},e);return[37,[0,g,d,p([0,f],[0,h],0)]]},aiM=0,aiN=function(a){var
d=q(a);n(a,25);var
e=J(d,q(a));n(a,4);var
f=k(w[7],a);n(a,5);var
h=km(1,a),b=k(w[2],h),c=1-a[5],g=c?ku(b):c;if(g)ix(a,b[1]);return[38,[0,f,b,p([0,e],0,0)]]},aiO=0,aiP=function(a){var
W=q(a),b=k(w[7],a),f=m(a),g=b[2];if(9===g[0]&&typeof
f==="number"&&86===f){var
l=g[1],e=l[2][1],Z=b[1];n(a,86);if(j(a2[3],e,a[3]))u(a,[0,Z,[21,aiR,e]]);var
o=a[31],r=a[30],s=a[29],t=a[28],v=a[27],x=a[26],y=a[25],z=a[24],A=a[23],B=a[22],C=a[21],D=a[20],E=a[19],F=a[18],G=a[17],H=a[16],I=a[15],J=a[14],L=a[13],M=a[12],N=a[11],O=a[10],P=a[9],Q=a[8],R=a[7],S=a[6],T=a[5],U=a[4],V=j(a2[4],e,a[3]),c=[0,a[1],a[2],V,U,T,S,R,Q,P,O,N,M,L,J,I,H,G,F,E,D,C,B,A,z,y,x,v,t,s,r,o],_=h5(c)?H2(c):k(w[2],c);return[30,[0,l,_,p([0,W],0,0)]]}var
d=aL(aiQ,0,a);if(0===d[0])var
i=b,h=d[1];else
var
X=d[1][2],Y=0,i=j(X,b,function(a,b){return j(K(a,cv,78),a,b)}),h=Y;return[22,[0,i,0,p(0,[0,h],0)]]},aiS=0,aiT=function(a){var
e=k(w[7],a),c=aL(aiU,0,a);if(0===c[0])var
d=e,f=c[1];else
var
o=c[1][2],q=0,d=j(o,e,function(a,b){return j(K(a,cv,79),a,b)}),f=q;if(a[20]){var
g=d[2];if(13===g[0]){var
b=g[1][2],m=0;if(1<H(b)){var
n=ax(b,H(b)-1|0);if(ax(b,0)===n){var
l=[0,aY(b,1,H(b)-2|0)];m=1}}if(!m)var
l=0;var
h=l}else
var
h=0;var
i=h}else
var
i=0;return[22,[0,d,i,p(0,[0,f],0)]]},aiV=0,kH=function(a){return o(aiV,aiT,a)},In=function(a){return[0,hs(a),aiW]},Io=function(a){var
b=m(a);if(typeof
b!=="number"&&4===b[0]&&!l(b[3],k5)){r(a);var
c=m(a);if(typeof
c!=="number"&&2===c[0])return mT(a,c[1]);aq(aiY,a);return In(a)}aq(aiX,a);return In(a)},mY=function(g,b,c){function
d(a){return g?cQ(a):j(w[13],0,a)}var
a=O(1,c);if(typeof
a==="number")switch(a){case
1:case
9:case
113:return[0,d(c),0]}else if(4===a[0]&&!l(a[3],cw)){var
i=a3(c);r(c);return[0,i,[0,d(c)]]}var
e=m(c);if(b&&typeof
e==="number"){var
f=0,h=b[1];if(46!==e&&61!==e)f=1;if(!f){G(c,h);r(c);return[0,cQ(c),0]}}return[0,d(c),0]},aiZ=function(a){var
f=m(a),h=0;if(typeof
f==="number")if(46===f)var
b=ai0;else if(61===f)var
b=ai1;else
h=1;else
h=1;if(h)var
b=0;var
g=m(a),o=0;if(typeof
g==="number"){var
p=0;if(46===g||61===g)p=1;if(p){var
i=1;o=1}}if(!o)var
i=0;if(!i){var
n=mY(0,0,a);return[0,0,n[2],n[1],0]}var
c=a3(a),d=m(a);if(typeof
d==="number")switch(d){case
1:case
9:case
113:ms(0,a,c);return[0,0,0,c,0]}else if(4===d[0]&&!l(d[3],cw)){var
e=O(1,a);if(typeof
e==="number")switch(e){case
1:case
9:case
113:return[0,b,0,cQ(a),0]}else if(4===e[0]&&!l(e[3],cw)){var
q=a3(a);r(a);return[0,b,[0,cQ(a)],q,0]}ms(0,a,c);r(a);return[0,0,[0,j(w[13],0,a)],c,0]}var
k=mY(1,0,a);return[0,b,k[2],k[1],0]},Ip=function(a,b){var
p=m(a);if(typeof
p==="number"&&aV===p){var
g=o(0,function(a){r(a);var
c=m(a);if(typeof
c!=="number"&&4===c[0]&&!l(c[3],cw)){r(a);return 2<=b?[0,j(w[13],0,a)]:[0,cQ(a)]}aq(ai4,a);return 0},a),h=g[2],t=g[1],q=h?[0,[0,t,h[1]]]:0;return q?[0,[1,q[1]]]:0}n(a,0);var
d=0,c=0;for(;;){var
u=d?d[1]:1,e=m(a);if(typeof
e==="number"){var
s=0;if(1!==e&&X!==e)s=1;if(!s){var
v=B(c);n(a,1);return[0,[0,v]]}}if(1-u)G(a,33);switch(b){case
0:var
i=mY(1,ai2,a),f=[0,0,i[2],i[1],0];break;case
1:var
k=mY(1,ai3,a),f=[0,0,k[2],k[1],0];break;default:var
f=aiZ(a)}var
d=[0,ak(a,9)],c=[0,f,c]}},sL=function(a,b){var
c=aL(0,0,a);if(0===c[0])return[0,c[1],b];var
d=c[1][2];return[0,0,j(d,b,function(a,b){var
c=b[1];return[0,c,s(K(a,uW,80),a,c,b[2])]})]},kI=function(a,b,c){var
e=Ip(b,a),d=sL(b,Io(b)),f=d[2];return[28,[0,a,f,0,e,p([0,c],[0,d[1]],0)]]},mZ=function(a,b,c){var
h=2<=a?[0,j(w[13],0,b),0]:[0,cQ(b),0],d=m(b),g=0;if(typeof
d==="number"&&9===d){n(b,9);var
e=Ip(b,a);g=1}if(!g)var
e=0;var
f=sL(b,Io(b)),i=f[2];return[28,[0,a,i,[0,h],e,p([0,c],[0,f[1]],0)]]},ai5=function(a){var
b=hr(1,a),c=q(b);n(b,50);var
d=m(b);if(typeof
d==="number")switch(d){case
0:return kI(2,b,c);case
46:if(an(b)){n(b,46);var
f=m(b);if(typeof
f==="number"){var
i=0;if(aV!==f&&f)i=1;if(!i)return kI(1,b,c)}return mZ(1,b,c)}break;case
61:if(an(b)){var
e=O(1,b),g=0;if(typeof
e==="number")switch(e){case
0:r(b);return kI(0,b,c);case
106:r(b);aq(0,b);return kI(0,b,c);case
9:g=1;break}else if(4===e[0]&&!l(e[3],k5))g=1;return g?mZ(2,b,c):(r(b),mZ(0,b,c))}break;case
106:return kI(2,b,c)}else if(2===d[0]){var
h=sL(b,mT(b,d[1])),j=h[2];return[28,[0,2,j,0,0,p([0,c],[0,h[1]],0)]]}return mZ(2,b,c)},ai6=0,sM=function(a){return o(ai6,ai5,a)};a(H3,function(a){var
b=A(a),c=q(a);n(a,8);return[0,b,[18,[0,p([0,c],[0,hx(a)[1]],0)]]]});a(H4,function(a){var
h=q(a),b=o(0,function(a){n(a,32);var
k=0;if(8!==m(a)&&!jh(a)){var
d=j(w[13],0,a),i=d[2][1],s=d[1];if(1-j(a2[3],i,a[3]))u(a,[0,s,[27,i]]);var
b=[0,d];k=1}if(!k)var
b=0;var
c=aL(0,0,a),l=0;if(0===c[0])var
e=c[1];else{var
h=c[1],o=h[1];if(b){var
p=b[1],q=h[2],r=0,g=[0,j(q,p,function(a,b){return j(K(a,ju,81),a,b)})],f=r;l=1}else
var
e=o}if(!l)var
g=b,f=e;return[0,g,f]},a),c=b[2],d=c[1],e=b[1],f=0===d?1:0,i=c[2];if(f)var
k=a[8],l=k||a[9],g=1-l;else
var
g=f;if(g)u(a,[0,e,29]);return[0,e,[1,[0,d,p([0,h],[0,i],0)]]]});a(H5,function(a){var
e=q(a),b=o(0,function(a){n(a,35);var
k=0;if(8!==m(a)&&!jh(a)){var
d=j(w[13],0,a),i=d[2][1],s=d[1];if(1-j(a2[3],i,a[3]))u(a,[0,s,[27,i]]);var
b=[0,d];k=1}if(!k)var
b=0;var
c=aL(0,0,a),l=0;if(0===c[0])var
e=c[1];else{var
h=c[1],o=h[1];if(b){var
p=b[1],q=h[2],r=0,g=[0,j(q,p,function(a,b){return j(K(a,ju,82),a,b)})],f=r;l=1}else
var
e=o}if(!l)var
g=b,f=e;return[0,g,f]},a),c=b[2],d=b[1],f=c[2],g=c[1];if(1-a[8])u(a,[0,d,30]);return[0,d,[4,[0,g,p([0,e],[0,f],0)]]]});a(H6,function(a){var
b=o(0,function(a){var
d=q(a);n(a,26);var
e=J(d,q(a));n(a,4);var
f=k(w[7],a);n(a,5);var
b=k(w[2],a),c=1-a[5],g=c?ku(b):c;if(g)ix(a,b[1]);return[39,[0,f,b,p([0,e],0,0)]]},a),c=b[1],d=b[2];bX(a,[0,c,79]);return[0,c,d]});a(H7,function(a){var
b=k(w[15],a),c=b[1],d=b[2],e=hx(a)[2];return[0,c,[0,j(e,d,function(a,b){return s(K(a,pg,83),a,c,b)})]]});a(kC,function(a,b){if(1-an(b))G(b,aV);var
h=J(a,q(b));n(b,61);aB(b,1);var
d=cQ(b),i=98===m(b)?cp(b,d):d,k=bI(b);n(b,82);var
e=hw(b);aF(b);var
c=aL(0,0,b);if(0===c[0])var
g=e,f=c[1];else
var
l=c[1][2],o=0,g=j(l,e,function(a,b){return j(K(a,jw,84),a,b)}),f=o;return[0,i,k,g,p([0,h],[0,f],0)]});a(H8,function(a){return o(0,function(a){var
b=q(a);n(a,60);return[14,j(kC,b,a)]},a)});a(H9,function(a){if(h4(1,a)&&!GJ(1,a)){var
b=o(0,k(kC,0),a);return[0,b[1],[35,b[2]]]}return k(w[2],a)});a(kD,function(a,b,c){var
B=a?a[1]:0;if(1-an(c))G(c,98);var
C=J(b,q(c));n(c,62);var
D=q(c);n(c,61);var
E=J(C,D);aB(c,1);var
v=cQ(c),d=98===m(c)?cp(c,v):v,e=bI(c),w=m(c),y=0;if(typeof
w==="number"&&86===w){n(c,86);var
f=[0,hw(c)];y=1}if(!y)var
f=0;if(B){var
x=m(c),z=0;if(typeof
x==="number"&&82===x){G(c,17);r(c);var
A=0;if(8===m(c)||jh(c))A=1;else
var
t=[0,hw(c)];if(A)var
t=0}else
z=1;if(z)var
t=0;var
o=t}else{n(c,82);var
o=[0,hw(c)]}aF(c);var
u=aL(0,0,c);if(0===u[0])var
l=o,k=f,i=e,h=d,g=u[1];else{var
s=u[1][2];if(o)var
F=o[1],H=0,l=[0,j(s,F,function(a,b){return j(K(a,jw,85),a,b)})],k=f,i=e,h=d,g=H;else if(f)var
I=f[1],L=0,l=L,M=0,k=[0,j(s,I,function(a,b){return j(K(a,jw,86),a,b)})],i=e,h=d,g=M;else if(e)var
N=e[1],O=0,P=0,l=O,k=P,Q=0,i=[0,j(s,N,function(a,b){return j(K(a,ta,87),a,b)})],h=d,g=Q;else
var
R=0,S=0,T=0,l=R,k=S,i=T,U=0,h=j(s,d,function(a,b){return j(K(a,ju,88),a,b)}),g=U}return[0,h,i,l,k,p([0,E],[0,g],0)]});a(H_,function(a){return o(0,function(a){var
b=q(a);n(a,60);return[15,s(kD,ai7,b,a)]},a)});a(H$,function(a){var
b=O(1,a);if(typeof
b==="number"&&61===b){var
c=o(0,j(kD,ai8,0),a);return[0,c[1],[36,c[2]]]}return k(w[2],a)});a(kE,function(a,b){if(1-an(b))G(b,cf);var
f=J(a,q(b));n(b,53);var
c=cQ(b),g=41===m(b)?c:cp(b,c),d=bI(b),h=41===m(b)?d:bo(b,d),e=bz(r2,b),i=e[2],k=e[1],l=hx(b)[2],o=j(l,i,function(a,b){var
c=b[1];return[0,c,s(K(a,Kh,89),a,c,b[2])]});return[0,g,h,k,o,p([0,f],0,0)]});a(Ia,function(a){return o(0,function(a){var
b=q(a);n(a,60);return[11,j(kE,b,a)]},a)});a(Ib,function(a){if(!GK(1,a))return kH(a);var
b=o(0,k(kE,0),a);return[0,b[1],[29,b[2]]]});a(mU,function(a,b){var
c=hr(1,b),X=J(a,q(c));n(c,40);var
o=j(w[13],0,c),d=m(c),N=0;if(typeof
d==="number"){var
O=0;if(98===d||!d)O=1;if(O){var
t=cp(c,o);N=1}}if(!N)var
t=o;var
u=bI(c),v=m(c),P=0;if(typeof
v==="number"&&!v){var
x=bo(c,u);P=1}if(!P)var
x=u;if(ak(c,41)){var
y=Hp(c),z=m(c),Q=0;if(typeof
z==="number"&&!z){var
V=au(c)[2],A=[0,j(V,y,function(a,b){return aK(k(K(a,I5,15),a),b)})];Q=1}if(!Q)var
A=[0,y];var
C=A}else
var
C=0;var
e=m(c),R=0;if(typeof
e!=="number"&&4===e[0]&&!l(e[3],Ks)){r(c);var
f=0;for(;;){var
g=[0,Hp(c),f],h=m(c);if(typeof
h==="number"&&9===h){n(c,9);var
f=g;continue}var
i=B(g),L=m(c),S=0;if(typeof
L==="number"&&!L){var
M=GT(c,i);S=1}if(!S)var
M=i;var
D=M;R=1;break}}if(!R)var
D=0;var
E=m(c),T=0;if(typeof
E==="number"&&52===E){var
F=HX(c,0),G=m(c),U=0;if(typeof
G==="number"&&!G){var
H=[0,GU(c,F)];U=1}if(!U)var
H=[0,F];var
I=H;T=1}if(!T)var
I=0;var
W=bz(s(mD,1,0,0),c),Y=hx(c)[2],Z=j(Y,W,function(a,b){var
c=b[1];return[0,c,s(K(a,Kh,90),a,c,b[2])]});return[0,t,x,Z,C,D,I,p([0,X],0,0)]});a(Ic,function(a){return o(0,function(a){var
b=q(a);n(a,60);return[6,j(mU,b,a)]},a)});a(mV,function(a,b){var
g=J(a,q(b));hu(b,ai9);var
h=cp(b,j(w[13],ai_,b)),i=bo(b,bI(b)),m=bz(rZ,b),d=rN(b)?rP(b,r7(b)):r7(b),c=aL(0,0,b);if(0===c[0])var
f=d,e=c[1];else
var
k=c[1][2],l=0,f=j(k,d,function(a,b){return j(K(a,LD,91),a,b)}),e=l;return[0,h,i,m,f,p([0,g],[0,e],0)]});a(Id,function(a){return o(0,function(a){var
b=q(a);n(a,60);return[7,j(mV,b,a)]},a)});a(Ie,function(a){return o(0,function(a){var
b=q(a);n(a,60);return[8,j(H1[1],[0,b],a)]},a)});a(mW,function(a,b){var
l=a?a[1]:0,r=J(l,q(b));n(b,15);var
s=cp(b,j(w[13],0,b)),d=o(0,function(a){var
f=bo(a,bI(a)),g=bz(mA,a);n(a,86);aB(a,1);if(mu(a))var
b=[1,k(mC,a)];else{var
c=hw(a);if(66===m(a))var
e=au(a)[2],d=[0,j(e,c,function(a,b){return j(K(a,jw,6),a,b)})];else
var
d=[0,c];var
b=d}aF(a);return[12,[0,f,g,b,0]]},b),h=bz(Hn,b),e=aL(0,0,b);if(0===e[0])var
g=h,c=d,f=e[1];else{var
i=e[1][2];if(h)var
u=h[1],v=0,g=[0,j(i,u,function(a,b){return j(K(a,Me,92),a,b)})],c=d,f=v;else
var
x=0,g=x,y=0,c=j(i,d,function(a,b){return j(K(a,jw,93),a,b)}),f=y}var
t=[0,c[1],c];return[0,s,t,g,p([0,r],[0,f],0)]});a(If,function(a){return o(0,function(a){var
c=q(a);n(a,60);var
b=m(a),d=0;if(typeof
b==="number"&&64===b){G(a,12);n(a,64);d=1}return[10,j(mW,[0,c],a)]},a)});a(kF,function(a,b,c){var
h=J(c,q(b));switch(a){case
0:n(b,24);break;case
1:n(b,28);break;default:n(b,27)}var
i=j(w[13],ai$,b),e=iA(b),d=aL(0,0,b);if(0===d[0])var
g=e,f=d[1];else
var
k=d[1][2],l=0,g=j(k,e,function(a,b){return j(K(a,BQ,94),a,b)}),f=l;return[0,i,g,a,p([0,h],[0,f],0)]});a(kG,function(c,b){return o(0,function(a){var
b=q(a);n(a,60);return[16,s(kF,c,a,b)]},b)});a(Ig,function(a,b){var
c=A(b),d=q(b);n(b,60);var
f=J(d,q(b));hu(b,ajd);if(!a&&10!==m(b))return o([0,c],function(a){var
b=m(a),g=0;if(typeof
b!=="number"&&2===b[0]){var
l=mT(a,b[1]),h=au(a)[2],c=[1,j(h,l,function(a,b){var
c=b[1];return[0,c,s(K(a,uW,18),a,c,b[2])]})];g=1}if(!g)var
c=[0,cp(a,j(w[13],0,a))];var
d=mt(0,function(a){var
u=q(a);n(a,0);var
b=0,f=0;for(;;){var
g=m(a);if(typeof
g==="number"){var
r=0;if(1!==g&&X!==g)r=1;if(!r){var
i=B(f),v=0===i?q(a):0;n(a,1);return[0,[0,i,aA([0,u],[0,hx(a)[1]],v,0)],b]}}var
k=j(sH,aja,a),c=k[2],e=0;if(b){var
h=0;if(b[1])if(13===c[0])G(a,3);else{e=1;h=1}else
switch(c[0]){case
9:var
l=c[1][2],s=0;if(l)switch(l[1][0]){case
5:case
7:s=1;break}if(!s)G(a,3);break;case
13:G(a,19);break;default:e=1;h=1}if(!h)var
d=b}else
switch(c[0]){case
9:var
o=c[1][2],t=0;if(o)switch(o[1][0]){case
5:case
7:var
p=b;t=1;break}if(!t)var
p=ajb;var
d=p;break;case
13:var
d=ajc;break;default:e=1}if(e)var
d=b;var
b=d,f=[0,k,f]}},a),e=d[2],i=d[1],k=e?e[1]:0;return[12,[0,c,i,k,p([0,f],0,0)]]},b);return o([0,c],k(Ih,f),b)});a(Ih,function(a,b){var
g=q(b);n(b,10);var
h=q(b);hu(b,aje);var
i=j2([0,a,[0,g,[0,h,[0,q(b),0]]]]),d=iA(b),c=aL(0,0,b);if(0===c[0])var
f=c[1],e=d;else
var
k=c[1][2],l=0,f=l,e=j(k,d,function(a,b){return j(K(a,BQ,95),a,b)});return[13,[0,e,p([0,i],[0,f],0)]]});a(sH,function(a,b){var
c=a?a[1]:0;if(1-an(b))G(b,cu);var
d=O(1,b);if(typeof
d==="number")switch(d){case
24:return j(kG,0,b);case
27:return j(kG,2,b);case
28:return j(kG,1,b);case
40:return k(Ic,b);case
46:if(50===m(b))return sM(b);break;case
48:if(b[28][2])return k(Ie,b);break;case
49:if(c)return j(sJ,[0,c],b);break;case
53:return k(Ia,b);case
61:var
f=m(b);if(typeof
f==="number"&&50===f&&c)return sM(b);return k(H8,b);case
62:return k(H_,b);case
15:case
64:return k(If,b)}else if(4===d[0]){var
g=d[3];if(l(g,ih)){if(!l(g,J3))return j(Ig,c,b)}else if(b[28][1])return k(Id,b)}if(!c)return k(w[2],b);var
e=m(b);if(typeof
e==="number"&&50===e){G(b,45);return k(w[2],b)}return j(kG,0,b)});a(Ii,function(a){hu(a,ajf);var
b=m(a);if(typeof
b!=="number"&&2===b[0])return mT(a,b[1]);var
c=[0,A(a),ajg];aq(ajh,a);return c});a(jo,function(a){var
d=k(Ii,a),e=d[2],c=d[1],b=aL(0,0,a);if(0===b[0])return[0,[0,c,e],b[1]];var
f=b[1][2],g=0;return[0,[0,c,j(f,e,function(a,b){return s(K(a,uW,96),a,c,b)})],g]});a(mX,function(a,b,c){var
f=a?a[1]:1,d=m(b);if(typeof
d==="number"){var
e=0;if(1!==d&&X!==d)e=1;if(!e)return B(c)}if(1-f)G(b,25);var
g=o(0,function(a){var
e=a3(a),b=m(a),d=0;if(typeof
b!=="number"&&4===b[0]&&!l(b[3],cw)){r(a);var
c=[0,a3(a)];d=1}if(!d)var
c=0;return[0,e,c]},b);return s(mX,[0,ak(b,9)],b,[0,g,c])});a(sI,function(c,b){return a7(function(a){return ms(aji,c,a[2][1])},b)});a(Ij,function(f,b){var
a=GC(1,hr(1,b)),c=q(a),d=A(a);n(a,49);var
e=m(a);if(typeof
e==="number")if(53<=e){if(63>e)switch(e-53|0){case
0:return o([0,d],function(a){if(1-an(a))G(a,ib);var
b=o(0,k(kE,0),a),d=[0,b[1],[29,b[2]]];return[21,[0,[0,d],0,0,0,p([0,c],0,0)]]},a);case
8:if(0!==O(1,a))return o([0,d],function(a){if(1-an(a))G(a,ib);var
b=O(1,a);if(typeof
b==="number"){if(48===b){G(a,21);n(a,61);return[21,[0,0,0,0,0,p([0,c],0,0)]]}if(aV===b){n(a,61);var
f=A(a);n(a,aV);var
d=k(jo,a),g=d[1];return[21,[0,0,[0,[1,[0,f,0]]],[0,g],0,p([0,c],[0,d[2]],0)]]}}var
e=o(0,k(kC,0),a),h=[0,e[1],[35,e[2]]];return[21,[0,[0,h],0,0,0,p([0,c],0,0)]]},a);break;case
9:return o([0,d],function(a){var
b=o(0,function(a){return k(j(kD,0,0),a)},a),d=[0,b[1],[36,b[2]]];return[21,[0,[0,d],0,0,0,p([0,c],0,0)]]},a)}}else if(36===e)return o([0,d],function(a){var
r=J(c,q(a)),s=o(0,function(a){return n(a,36)},a)[1],b=GD(1,a);if(h5(b))var
e=0,d=[0,kA(b)];else if(kq(b))var
e=0,d=[0,mS(b,f)];else if(48===m(b))var
e=0,d=[0,k(HA(0),b)];else if(rM(b))var
e=0,d=[0,sa(b)];else{var
h=k(w[10],b),g=aL(0,0,b);if(0===g[0])var
l=g[1],i=h;else
var
t=g[1][2],u=0,l=u,i=j(t,h,function(a,b){return j(K(a,cv,97),a,b)});var
e=l,d=[1,i]}return[20,[0,s,d,p([0,r],[0,e],0)]]},a);if(kq(a))return o([0,d],function(a){var
b=mS(a,f);return[21,[0,[0,b],0,0,1,p([0,c],0,0)]]},a);if(h5(a))return o([0,d],function(a){k(mo(a),f);var
b=kA(a);return[21,[0,[0,b],0,0,1,p([0,c],0,0)]]},a);if(typeof
e==="number"){var
g=e+xH|0;if(4<g>>>0){if(24===g&&a[28][2])return o([0,d],function(a){var
b=j(w[3],[0,f],a);return[21,[0,[0,b],0,0,1,p([0,c],0,0)]]},a)}else if(1<g-1>>>0)return o([0,d],function(a){var
b=j(w[3],[0,f],a);return[21,[0,[0,b],0,0,1,p([0,c],0,0)]]},a)}if(rM(a))return o([0,d],function(a){var
b=sa(a);return[21,[0,[0,b],0,0,1,p([0,c],0,0)]]},a);if(typeof
e==="number"&&aV===e)return o([0,d],function(a){var
g=A(a);n(a,aV);var
b=m(a),f=0;if(typeof
b!=="number"&&4===b[0]&&!l(b[3],cw)){r(a);var
d=[0,a3(a)];f=1}if(!f)var
d=0;var
e=k(jo,a),h=e[1];return[21,[0,0,[0,[1,[0,g,d]]],[0,h],1,p([0,c],[0,e[2]],0)]]},a);var
t=ak(a,61)?0:1;return ak(a,0)?o([0,d],function(a){var
e=s(mX,0,a,0);n(a,1);var
b=m(a),i=0;if(typeof
b!=="number"&&4===b[0]&&!l(b[3],k5)){var
h=k(jo,a),g=h[2],f=[0,h[1]];i=1}if(!i){j(sI,a,e);var
d=aL(0,0,a),o=0===d[0]?d[1]:d[1][1],g=o,f=0}return[21,[0,0,[0,[0,e]],f,t,p([0,c],[0,g],0)]]},a):(aq(ajj,a),j(w[3],[0,f],a))});a(sJ,function(a){var
E=a?a[1]:0;function
b(a){if(1-an(a))G(a,cu);var
X=q(a);n(a,60);var
b=GC(1,hr(1,a)),c=J(X,q(b));n(b,49);var
f=m(b);if(typeof
f==="number")switch(f){case
36:var
Z=J(c,q(b)),_=o(0,function(a){return n(a,36)},b)[1],d=GD(1,b),h=m(d),v=0;if(typeof
h==="number")switch(h){case
15:var
ab=0,u=ab,i=[0,[1,o(0,function(a){return j(mW,0,a)},d)]];v=1;break;case
40:var
u=0,i=[0,[2,o(0,k(mU,0),d)]];v=1;break}else if(4===h[0]&&!l(h[3],ih)&&d[28][1]){var
u=0,i=[0,[3,o(0,k(mV,0),d)]];v=1}if(!v){var
N=hw(d),B=aL(0,0,d);if(0===B[0])var
P=B[1],O=N;else
var
$=B[1][2],aa=0,P=aa,O=j($,N,function(a,b){return j(K(a,jw,98),a,b)});var
u=P,i=[0,[4,O]]}return[9,[0,[0,_],i,0,0,p([0,Z],[0,u],0)]];case
48:if(b[28][2]){var
ac=H1[1],ad=o(0,function(a){return j(ac,0,a)},b);return[9,[0,0,[0,[8,ad]],0,0,p([0,c],0,0)]]}break;case
53:if(E){var
ae=o(0,k(kE,0),b);return[9,[0,0,[0,[7,ae]],0,0,p([0,c],0,0)]]}break;case
61:if(E){var
af=o(0,k(kC,0),b);return[9,[0,0,[0,[5,af]],0,0,p([0,c],0,0)]]}break;case
62:var
ag=o(0,j(kD,ajl,0),b);return[9,[0,0,[0,[6,ag]],0,0,p([0,c],0,0)]];case
106:var
ah=A(b);n(b,aV);var
C=m(b),T=0;if(typeof
C!=="number"&&4===C[0]&&!l(C[3],cw)){r(b);var
Q=[0,j(w[13],0,b)];T=1}if(!T)var
Q=0;var
S=k(jo,b),ai=S[1];return[9,[0,0,0,[0,[1,[0,ah,Q]]],[0,ai],p([0,c],[0,S[2]],0)]];case
15:case
24:case
27:case
28:case
40:var
e=m(b);if(typeof
e==="number"){var
D=0;if(24<=e){if(41>e){var
U=0;switch(e+xH|0){case
0:var
g=[0,[0,o(0,function(a){return s(kF,0,a,0)},b)]];break;case
3:var
g=[0,[0,o(0,function(a){return s(kF,2,a,0)},b)]];break;case
4:var
g=[0,[0,o(0,function(a){return s(kF,1,a,0)},b)]];break;case
16:var
g=[0,[2,o(0,k(mU,0),b)]];break;default:U=1}if(!U){var
M=g;D=1}}}else if(15===e){var
M=[0,[1,o(0,function(a){return j(mW,0,a)},b)]];D=1}if(D)return[9,[0,0,M,0,0,p([0,c],0,0)]]}throw t([0,R,ajk],1)}else if(4===f[0]&&!l(f[3],ih)&&b[28][1]){var
aj=[0,[3,o(0,k(mV,0),b)]];return[9,[0,0,aj,0,0,p([0,c],0,0)]]}var
x=m(b),V=0;if(typeof
x==="number")if(53===x)G(b,15);else if(61===x)G(b,16);else
V=1;else
V=1;n(b,0);var
F=s(mX,0,b,0);n(b,1);var
y=m(b),W=0;if(typeof
y!=="number"&&4===y[0]&&!l(y[3],k5)){var
L=k(jo,b),I=L[2],H=[0,L[1]];W=1}if(!W){j(sI,b,F);var
z=aL(0,0,b),Y=0===z[0]?z[1]:z[1][1],I=Y,H=0}return[9,[0,0,0,[0,[0,F]],H,p([0,c],[0,I],0)]]}var
c=0;return function(a){return o(c,b,a)}});var
Iq=function
c(a,b){return c.fun(a,b)},Ir=function
c(a,b){return c.fun(a,b)},kJ=function
c(a,b){return c.fun(a,b)},m0=function(c,b){return function(a){if(!a)return B(b);var
g=a[1];if(0!==g[0]){var
q=g[1],r=q[1];if(a[2]){var
y=a[2];u(c,[0,r,69]);return k(m0(c,b),y)}var
s=q[2],z=s[2];return k(m0(c,[0,[1,[0,r,[0,j(kJ,c,s[1]),z]]],b]),0)}var
l=g[1],d=l[2],v=a[2],w=l[1];switch(d[0]){case
0:var
m=d[2],e=d[1],x=d[3];switch(e[0]){case
0:var
f=[0,e[1]];break;case
1:var
f=[1,e[1]];break;case
2:var
f=[2,e[1]];break;case
3:var
f=[3,e[1]];break;case
4:var
f=C(ajm);break;default:var
f=[4,e[1]]}var
n=m[2],t=0;if(3===n[0]){var
i=n[1];if(!i[1]){var
p=[0,i[3]],o=i[2];t=1}}if(!t)var
p=0,o=j(kJ,c,m);var
h=[0,[0,[0,w,[0,f,o,p,x]]],b];break;case
1:u(c,[0,d[2][1],55]);var
h=b;break;default:u(c,[0,d[2][1],ajn]);var
h=b}return k(m0(c,h),v)}};a(Iq,function(a,b){var
c=b[2],d=c[2],e=c[1],f=b[1],g=jp(a);return[0,f,[0,[0,k(m0(a,0),e),g,d]]]});var
Is=function(a,b){var
c=b[1];return k(w[23],b)?[0,j(kJ,a,b)]:(u(a,[0,c,41]),0)},jq=function(c,b){return function(a){if(!a)return B(b);var
d=a[1];switch(d[0]){case
0:var
e=d[1],g=e[2];if(3===g[0]){var
f=g[1];if(!f[1]){var
q=a[2];return k(jq(c,[0,[0,[0,e[1],[0,f[2],[0,f[3]]]]],b]),q)}}var
p=a[2],h=Is(c,e);if(h)var
i=h[1],j=[0,[0,[0,i[1],[0,i,0]]],b];else
var
j=b;return k(jq(c,j),p);case
1:var
l=d[1],m=l[1];if(a[2]){var
r=a[2];u(c,[0,m,20]);return k(jq(c,b),r)}var
n=l[2],s=n[2],o=Is(c,n[1]),t=o?[0,[1,[0,m,[0,o[1],s]]],b]:b;return k(jq(c,t),0);default:var
v=a[2];return k(jq(c,[0,[2,d[1]],b]),v)}}};a(Ir,function(a,b){var
c=b[2],d=c[2],e=c[1],f=b[1],g=jp(a);return[0,f,[1,[0,k(jq(a,0),e),g,d]]]});a(kJ,function(a,b){var
c=b[2],d=b[1];switch(c[0]){case
0:return j(Ir,a,[0,d,c[1]]);case
9:var
e=c[1],f=e[2][1],g=e[1],i=0;if(a[5]&&iw(f))u(a,[0,g,76]);else
i=1;if(i&&1-a[5]){var
k=0;if(a[18]&&V(f,bf))u(a,[0,g,gE]);else
k=1;if(k){var
h=a[19],l=h?V(f,iE):h;if(l)u(a,[0,g,6])}}return[0,d,[2,[0,e,jp(a),0]]];case
24:return j(Iq,a,[0,d,c[1]]);default:return[0,d,[3,[0,d,c]]]}});var
kK=function(a,b){var
c=m(a);if(typeof
c==="number"){if(6===c)return o(0,function(a){var
z=q(a);n(a,6);var
c=0;for(;;){var
d=m(a);if(typeof
d==="number"){var
e=0;if(13<=d){if(X===d)e=1}else if(7<=d)switch(d-7|0){case
0:e=1;break;case
2:var
s=A(a);n(a,9);var
c=[0,[2,s],c];continue;case
5:var
t=q(a),h=o(0,function(a){n(a,12);return kK(a,b)},a),i=h[1],v=h[2],y=[1,[0,i,[0,v,p([0,t],0,0)]]];if(7!==m(a)){u(a,[0,i,20]);if(9===m(a))r(a)}var
c=[0,y,c];continue}if(e){var
j=B(c),C=q(a);n(a,7);var
D=86===m(a)?[1,iA(a)]:jp(a);return[1,[0,j,D,aA([0,z],[0,x(a)],C,0)]]}}var
f=o(0,function(a){var
f=kK(a,b),c=m(a),e=0;if(typeof
c==="number"&&82===c){n(a,82);var
d=[0,k(w[10],a)];e=1}if(!e)var
d=0;return[0,f,d]},a),g=f[2],l=[0,[0,f[1],[0,g[1],g[2]]]];if(7!==m(a))n(a,9);var
c=[0,l,c]}},a);if(!c){var
t=function(a){var
b=m(a);if(typeof
b==="number"&&82===b){n(a,82);return[0,k(w[10],a)]}return 0};return o(0,function(a){var
Y=q(a);n(a,0);var
k=0,g=0,i=0;for(;;){var
l=m(a);if(typeof
l==="number"){var
L=0;if(1!==l&&X!==l)L=1;if(!L){if(g)u(a,[0,g[1],95]);var
T=B(i),Z=q(a);n(a,1);var
_=x(a),$=86===m(a)?[1,iA(a)]:jp(a);return[0,[0,T,$,aA([0,Y],[0,_],Z,0)]]}}if(12===m(a))var
N=q(a),s=o(0,function(a){n(a,12);return kK(a,b)},a),O=s[2],P=s[1],e=[0,[1,[0,P,[0,O,p([0,N],0,0)]]]];else{var
v=A(a),y=j(w[20],0,a),z=m(a),M=0;if(typeof
z==="number"&&86===z){n(a,86);var
D=o([0,v],function(a){var
c=kK(a,b);return[0,c,t(a)]},a),E=D[2],c=y[2],Q=E[2],R=E[1],S=D[1];switch(c[0]){case
0:var
d=[0,c[1]];break;case
1:var
d=[1,c[1]];break;case
2:var
d=[2,c[1]];break;case
3:var
d=[3,c[1]];break;case
4:var
d=C(ajo);break;default:var
d=[4,c[1]]}var
e=[0,[0,[0,S,[0,d,R,Q,0]]]]}else
M=1;if(M){var
F=y[2];if(3===F[0]){var
f=F[1],G=f[2][1],h=f[1];if(mm(G))u(a,[0,h,b0]);else if(jg(G))bX(a,[0,h,85]);var
H=o([0,v],function(d,b){return function(a){var
c=[0,b,[2,[0,d,jp(a),0]]];return[0,c,t(a)]}}(f,h),a),I=H[2],e=[0,[0,[0,H[1],[0,[3,f],I[1],I[2],1]]]]}else{aq(ajp,a);var
e=0}}}if(!e)continue;var
r=e[1],U=r[1][1],V=k?(u(a,[0,U,69]),0):g;if(0===r[0])var
K=V,J=k;else
var
W=9===m(a)?[0,A(a)]:0,K=W,J=1;if(1!==m(a))n(a,9);var
k=J,g=K,i=[0,r,i]}},a)}}var
d=s(w[14],a,0,b);return[0,d[1],[2,d[2]]]},m1=function(a){var
d=m(a);if(typeof
d==="number"){var
b=d+IX|0,c=0;if(6<b>>>0){if(14===b)c=1}else if(4<b-1>>>0)c=1;if(c)return x(a)}return be(a)?h6(a):0},It=function(a){return 1===m(a)?0:[0,k(w[7],a)]},hy=function(a){var
j=A(a),b=m(a),h=0;if(typeof
b!=="number"&&8===b[0]){var
e=b[1];h=1}if(!h){aq(ajq,a);var
e=ajr}var
k=q(a);r(a);var
f=m(a),i=0;if(typeof
f==="number"){var
c=f+My|0,d=0;if(72<c>>>0){if(76===c)d=1}else if(70<c-1>>>0)d=1;if(d){var
g=x(a);i=1}}if(!i)var
g=m1(a);return[0,j,[0,e,p([0,k],[0,g],0)]]},Iu=function(a){var
c=O(1,a);if(typeof
c==="number"){if(10===c){var
b=o(0,function(a){var
b=[0,hy(a)];n(a,10);return[0,b,hy(a)]},a);for(;;){var
d=m(a);if(typeof
d==="number"&&10===d){var
e=b[1],b=o([0,e],function(b){return function(a){n(a,10);return[0,[1,b],hy(a)]}}(b),a);continue}return[2,b]}}if(86===c)return[1,o(0,function(a){var
b=hy(a);n(a,86);return[0,b,hy(a)]},a)]}return[0,hy(a)]},kL=function(a,b){return V(a[2][1],b[2][1])},Iv=function(a,b){var
g=a[2],e=g[1],h=b[2],c=h[1],f=0,i=g[2],j=h[2];if(0===e[0]){var
k=e[1];if(0===c[0])var
d=kL(k,c[1]);else
f=1}else{var
l=e[1];if(0===c[0])f=1;else
var
d=Iv(l,c[1])}if(f)var
d=0;return d?kL(i,j):d},m2=function(a,b){switch(a[0]){case
0:var
h=a[1];if(0===b[0])return kL(h,b[1]);break;case
1:var
i=a[1];if(1===b[0]){var
c=i[2],d=b[1][2],f=c[2],g=d[2],e=kL(c[1],d[1]);return e?kL(f,g):e}break;default:var
j=a[1];if(2===b[0])return Iv(j,b[1])}return 0},sN=function(a){switch(a[0]){case
0:return a[1][1];case
1:return a[1][1];default:return a[1][1]}},Iw=function
c(a,b){return c.fun(a,b)},sO=function
c(a,b){return c.fun(a,b)},sP=function
c(a,b){return c.fun(a,b)};a(Iw,function(a,b){var
c=m(b);if(typeof
c==="number"){if(0===c){aB(b,0);var
e=o(0,function(a){n(a,0);var
b=m(a),e=0;if(typeof
b==="number"&&12===b){var
f=q(a);n(a,12);var
g=k(w[10],a),c=[3,[0,g,p([0,f],0,0)]];e=1}if(!e)var
d=It(a),h=d?0:q(a),c=[2,[0,d,aA(0,0,h,0)]];n(a,1);return c},b),h=e[2],i=e[1];aF(b);return[0,i,h]}}else if(9===c[0]){var
l=c[3],r=c[2],s=c[1];n(b,c);return[0,s,[4,[0,r,l]]]}var
f=j(sP,a,b),d=f[2],g=f[1];return cz<=d[1]?[0,g,[1,d[2]]]:[0,g,[0,d[2]]]});var
m3=function(a){switch(a[0]){case
0:return a[1][2][1];case
1:var
c=a[1][2],e=c[1],f=I(ajv,c[2][2][1]);return I(e[2][1],f);default:var
d=a[1][2],b=d[1],g=d[2],h=0===b[0]?b[1][2][1]:m3([2,b[1]]);return I(h,I(ajw,g[2][1]))}};a(sO,function(a,b){var
ai=q(b),e=o(0,function(a){n(a,98);var
d=m(a);if(typeof
d==="number"){if(99===d){r(a);return aju}}else if(8===d[0]){var
t=Iu(a),h=0;if(an(a)&&98===m(a)&&bY!==O(1,a)){var
f=mq(a,0,mM);h=1}if(!h)var
f=0;var
b=0;for(;;){var
c=m(a);if(typeof
c==="number"){if(0===c){var
i=q(a);aB(a,0);var
e=o(0,function(a){n(a,0);n(a,12);var
b=k(w[10],a);n(a,1);return b},a),j=e[2],l=e[1];aF(a);var
b=[0,[1,[0,l,[0,j,p([0,i],[0,m1(a)],0)]]],b];continue}}else if(8===c[0]){var
b=[0,[0,o(0,function(a){var
h=O(1,a),l=0;if(typeof
h==="number"&&86===h){var
i=[1,o(0,function(a){var
b=hy(a);n(a,86);return[0,b,hy(a)]},a)];l=1}if(!l)var
i=[0,hy(a)];var
j=m(a),r=0;if(typeof
j==="number"&&82===j){n(a,82);var
v=q(a),b=m(a),d=0;if(typeof
b==="number")if(0===b){var
s=q(a);aB(a,0);var
e=o(0,function(a){n(a,0);var
b=It(a);n(a,1);return b},a),f=e[1],t=e[2];aF(a);var
g=[0,t,aA([0,s],[0,m1(a)],0,0)];if(!g[1])u(a,[0,f,52]);var
c=[0,[1,[0,f,g]]]}else
d=1;else if(10===b[0]){var
w=b[3],x=b[2],y=b[1];n(a,b);var
c=[0,[0,[0,y,[0,x,w,p([0,v],[0,m1(a)],0)]]]]}else
d=1;if(d){G(a,40);var
c=[0,[0,[0,A(a),ajs]]]}var
k=c;r=1}if(!r)var
k=0;return[0,i,k]},a)],b];continue}var
s=B(b),g=[0,ig,[0,t,f,ak(a,bY),s]];return ak(a,99)?[0,g]:(ht(a,99),[1,g])}}ht(a,99);return ajt},b);aF(b);var
af=e[2];if(0===af[0])var
ag=af[1],aj=typeof
ag==="number"?0:ag[2][3];else
var
aj=1;if(aj)var
a0=tX,c=a0,D=o(0,function(a){return 0},b);else{aB(b,3);var
ah=e[2][1],t=typeof
ah==="number"?0:[0,ah[2][1]],ad=A(b),d=0;for(;;){var
f=jf(b),aG=0;if(d&&t){var
h=d[1],P=h[2],F=0,aR=t[1],aS=d[2];if(0===P[0]){var
Q=P[1],R=Q[2];if(R)var
S=R[1][2][1],T=1-m2(Q[1][2][1],S),U=T?m2(aR,S):T;else
F=1}else
F=1;if(F)var
U=0;if(U){var
V=h[2],aH=0;if(0===V[0]){var
g=V[1],W=g[2];if(W){var
aT=W[1],aU=ae(h[1],g[3][1]),Z=[0,ig,aT],Y=[0,aU,[0,[0,g[1],0,g[3],g[4]]]];aH=1}}if(!aH)var
Z=tX,Y=h;aF(b);var
i=[0,B([0,Y,aS]),f,Z];aG=1}}if(!aG){var
v=m(b),H=0;if(typeof
v==="number")if(98===v){aB(b,2);var
_=m(b),y=O(1,b),aI=0;if(typeof
_==="number"&&98===_&&typeof
y==="number"){var
aJ=0;if(bY===y||X===y)aJ=1;if(aJ){var
N=o(0,function(a){n(a,98);n(a,bY);var
b=m(a);if(typeof
b==="number"){if(99===b){r(a);return cz}}else if(8===b[0]){var
c=Iu(a);mp(a,99);return[0,ig,[0,c]]}ht(a,99);return cz},b),$=N[2],aa=N[1],aV=typeof
$==="number"?[0,cz,aa]:[0,ig,[0,aa,$[2]]],K=b[24][1],aK=0;if(K){var
L=K[2];if(L){var
M=L[2];aK=1}}if(!aK)var
M=C(adV);b[24][1]=M;var
aP=je(b),aQ=kj(b[25][1],aP);b[26][1]=aQ;var
i=[0,B(d),f,aV];H=1;aI=1}}if(!aI){var
ab=j(sO,t,b),z=ab[2],ac=ab[1],aW=cz<=z[1]?[0,ac,[1,z[2]]]:[0,ac,[0,z[2]]],d=[0,aW,d];continue}}else if(X===v){aq(0,b);var
i=[0,B(d),f,tX];H=1}if(!H){var
d=[0,j(Iw,t,b),d];continue}}var
aX=i[3],aY=i[1],aZ=f?f[1]:ad,c=aX,D=[0,ae(ad,aZ),aY];break}}var
al=x(b),aL=0;if(typeof
c!=="number"){var
av=c[1],I=0;if(ig===av){var
aw=c[2],l=aw[2][1],ax=e[2],a4=aw[1];if(0===ax[0]){var
ay=ax[1];if(typeof
ay==="number")u(b,[0,sN(l),ajx]);else{var
s=ay[2][1];if(1-m2(l,s)){var
aM=0;if(a&&m2(a[1],l)){var
a5=[19,m3(s)];u(b,[0,sN(s),a5]);aM=1}if(!aM){var
a6=[13,m3(s)];u(b,[0,sN(l),a6])}}}}var
az=a4;I=1}else if(cz===av){var
aC=c[2],aD=e[2];if(0===aD[0]){var
aE=aD[1];if(typeof
aE!=="number")u(b,[0,aC,[13,m3(aE[2][1])]])}var
az=aC;I=1}if(I){var
E=az;aL=1}}if(!aL)var
E=e[1];var
am=e[2][1],ao=e[1];if(typeof
am==="number"){var
aN=0,a1=p([0,ai],[0,al],0);if(typeof
c!=="number"){var
as=c[1],J=0;if(ig===as){var
at=c[2][1];J=1}else if(cz===as){var
at=c[2];J=1}if(J){var
ap=at;aN=1}}if(!aN)var
ap=E;var
ar=[0,cz,[0,ao,ap,D,a1]]}else{var
a2=am[2],aO=0,a3=p([0,ai],[0,al],0);if(typeof
c!=="number"&&ig===c[1]){var
au=[0,c[2]];aO=1}if(!aO)var
au=0;var
ar=[0,ig,[0,[0,ao,a2],au,D,a3]]}return[0,ae(e[1],E),ar]});a(sP,function(a,b){aB(b,2);return j(sO,a,b)});var
Ix=function(a,b){var
c=a3(b);ms(a,b,c);return c},Iy=function
b(a){return b.fun(a)},sS=function
d(a,b,c){return d.fun(a,b,c)},sT=function
b(a){return b.fun(a)},Iz=function
c(a,b){return c.fun(a,b)},sU=function
c(a,b){return c.fun(a,b)},sV=function
c(a,b){return c.fun(a,b)},m4=function
c(a,b){return c.fun(a,b)},kN=function
c(a,b){return c.fun(a,b)},m5=function
b(a){return b.fun(a)},IA=function
b(a){return b.fun(a)},IB=function
b(a){return b.fun(a)},IC=function
d(a,b,c){return d.fun(a,b,c)},ID=function
b(a){return b.fun(a)},IE=function
b(a){return b.fun(a)},ajC=k(sP,0);a(Iy,function(c){var
e=m(c),C=0;if(typeof
e!=="number"&&6===e[0]){var
M=e[2],N=e[1];r(c);var
y=[0,[0,N,M]];C=1}if(!C)var
y=0;var
f=q(c),d=B(f),E=5;b:for(;;){if(d){var
o=d[2],s=d[1],t=s[2],u=s[1],k=t[2],b=0,F=H(k);for(;;){if(F<(b+5|0))var
v=0;else{var
l=V(aY(k,b,E),"@flow");if(!l){var
b=b+1|0;continue}var
v=l}if(!v){var
d=o;continue b}c[31][1]=u[3];var
g=B([0,[0,u,t],o]);break}}else
var
g=0;if(0===g){var
D=0;if(f){var
h=f[1],w=h[2];if(!w[1]){var
x=w[2],O=0,G=h[1];if(1<=H(x)&&42===ax(x,0)){c[31][1]=G[3];var
i=[0,h,0];D=1}else
O=1}}if(!D)var
i=0}else
var
i=g;var
a=j(Iz,c,function(a){return 0}),J=A(c);n(c,X);var
I=a2[1];aI(function(a,b){var
e=b[2];switch(e[0]){case
20:return kM(c,a,cn(0,[0,e[1][1],ajz]));case
21:var
f=e[1],h=f[1];if(h){if(!f[2]){var
i=h[1],d=i[2],g=0,n=i[1];switch(d[0]){case
37:var
o=d[1][1],p=0,r=aI(function(a,b){return aI(sR,a,[0,b[2][1],0])},p,o);return aI(function(a,b){return kM(c,a,b)},a,r);case
2:case
26:var
j=d[1][1];if(j)var
k=j[1];else
g=1;break;case
3:case
19:case
29:case
35:case
36:var
k=d[1][1];break;default:g=1}return g?a:kM(c,a,cn(0,[0,n,k[2][1]]))}}else{var
l=f[2];if(l){var
m=l[1];if(0!==m[0])return a;var
q=m[1];return aI(function(a,b){var
d=b[2],e=d[2],f=d[1];return e?kM(c,a,e[1]):kM(c,a,f)},a,q)}}return a;default:return a}},I,a);if(a)var
K=j1(B(a))[1],z=ae(j1(a)[1],K);else
var
z=J;var
L=B(c[2][1]);return[0,z,[0,a,y,p([0,i],0,0),L]]}});var
ajF=function(a,b,c,d){var
e=a,i=d;for(;;){var
g=i[3],j=i[2],h=i[1],f=m(e);if(typeof
f==="number"&&X===f)return[0,e,h,j,g];if(k(b,f))return[0,e,h,j,g];if(typeof
f!=="number"&&2===f[0]){var
n=k(c,e),o=[0,n,j],p=n[2];if(22===p[0]){var
q=p[1][2];if(q){var
l=V(q[1],"use strict"),r=n[1],s=l?1-e[21]:l;if(s)u(e,[0,r,84]);var
t=l?hr(1,e):e,v=[0,f,h],w=g||l,e=t,i=[0,v,o,w];continue}}return[0,e,h,o,g]}return[0,e,h,j,g]}};a(sS,function(a,b,c){var
d=ajF(GB(1,a),b,c,ajG),f=d[4],g=d[3],h=d[2],e=GB(0,d[1]),i=B(h);a7(function(a){if(typeof
a!=="number"&&2===a[0]){var
b=a[1],c=b[4],d=b[1];return c?bX(e,[0,d,81]):c}return C(I(ajE,I(F3(a),ajD)))},i);return[0,e,g,f]});a(sT,function(a){var
b=sz(a),d=m(a);if(typeof
d==="number"){var
e=d-49|0;if(11>=e>>>0)switch(e){case
0:return j(Ij,b,a);case
1:k(mo(a),b);var
c=O(1,a),g=0;if(typeof
c==="number"){var
h=0;if(4===c||10===c)h=1;if(h){var
f=kH(a);g=1}}if(!g)var
f=sM(a);return f;case
11:if(49===O(1,a)){k(mo(a),b);return j(sJ,0,a)}break}}return j(kN,[0,b],a)});a(Iz,function(a,b){var
c=s(sS,a,b,sT),d=c[2],e=j(sU,b,c[1]);return aI(function(a,b){return[0,b,a]},e,d)});a(sU,function(a,b){var
c=0;for(;;){var
d=m(b);if(typeof
d==="number"&&X===d)return B(c);if(k(a,d))return B(c);var
c=[0,k(sT,b),c]}});a(sV,function(a,b){var
c=s(sS,b,a,function(a){return j(kN,0,a)}),d=c[3],e=c[2],f=j(m4,a,c[1]);return[0,aI(function(a,b){return[0,b,a]},f,e),d]});a(m4,function(a,b){var
c=0;for(;;){var
d=m(b);if(typeof
d==="number"&&X===d)return B(c);if(k(a,d))return B(c);var
c=[0,j(kN,0,b),c]}});a(kN,function(a,b){var
d=a?a[1]:0;if(1-kq(b))k(mo(b),d);var
c=m(b);if(typeof
c==="number"){if(27===c)return o(aiK,aiJ,b);if(28===c)return o(aiM,aiL,b)}if(h5(b))return kA(b);if(kq(b))return mS(b,d);if(typeof
c==="number"){var
e=c+aG|0;if(14>=e>>>0)switch(e){case
0:if(b[28][2])return k(HA(0),b);break;case
5:return k(Ib,b);case
12:return j(sH,0,b);case
13:return k(H9,b);case
14:return k(H$,b)}}return rM(b)?sa(b):k(m5,b)});a(m5,function(a){var
b=m(a);if(typeof
b==="number"&&b1>b)switch(b){case
0:return k(H7,a);case
8:return k(H3,a);case
16:return Im(a);case
19:return o(aiz,aiy,a);case
20:return o(aiC,aiA,a);case
22:return o(aiE,aiD,a);case
23:return o(aiG,aiF,a);case
24:return o(aiI,aiH,a);case
25:return o(aiO,aiN,a);case
26:return k(H6,a);case
32:return k(H4,a);case
35:return k(H5,a);case
37:return o(aio,aim,a);case
39:return o(aiu,aip,a);case
43:return Im(a);case
59:return o(ail,aik,a);case
113:aq(ajI,a);return[0,A(a),ajJ];case
1:case
5:case
7:case
9:case
10:case
11:case
12:case
17:case
18:case
33:case
34:case
36:case
38:case
41:case
42:case
49:case
83:case
86:aq(ajH,a);r(a);return k(m5,a)}if(h5(a)){var
c=kA(a);ix(a,c[1]);return c}if(typeof
b==="number"&&28===b&&6===O(1,a)){var
d=ko(1,a);u(a,[0,ae(A(a),d),4]);return kH(a)}return cO(a)?o(aiS,aiP,a):kq(a)?(aq(0,a),r(a),kH(a)):kH(a)});a(IA,function(a){var
d=A(a),b=k(b$,a),c=m(a);if(typeof
c==="number"&&9===c)return s(mP,a,d,[0,b,0]);return b});a(IB,function(a){var
d=A(a),b=k(jn,a),c=m(a);if(typeof
c==="number"&&9===c)return[0,s(mP,a,d,[0,aS(a,b),0])];return b});a(IC,function(a,b,c){var
f=b?b[1]:0;return o(0,function(a){var
b=1-f,e=Ix([0,c],a),d=b?85===m(a)?1:0:b;if(d){if(1-an(a))G(a,bp);n(a,85)}return[0,e,r4(a),d]},a)});a(ID,function(a){var
c=A(a),d=q(a);n(a,0);var
b=j(m4,function(a){return 1===a?1:0},a),e=A(a),f=0===b?q(a):0;n(a,1);var
g=[0,b,aA([0,d],[0,x(a)],f,0)];return[0,ae(c,e),g]});a(IE,function(h){function
b(a){var
i=q(a);n(a,0);var
e=j(sV,function(a){return 1===a?1:0},a),f=e[1],k=e[2],l=0===f?q(a):0;n(a,1);var
b=m(a),d=0;if(!h){var
g=0;if(typeof
b!=="number"||1!==b&&X!==b)g=1;if(g)if(be(a)){var
c=h6(a);d=1}else{var
c=0;d=1}}if(!d)var
c=x(a);return[0,[0,f,aA([0,i],[0,c],l,0)],k]}var
c=0;return function(a){return mt(c,b,a)}});Fs(ajK[1],w,[0,Iy,m5,kN,m4,sV,sU,IA,IB,HF,b$,mL,ah2,Ix,IC,ID,IE,ajC,kK,kJ,h9,mS,aig,agy,mN,iA,mO]);var
sW=[c,au0,hN(0)],sX=[0,sW,[0]],auZ=lN(auY,function(c){var
a=rd(c,auX)[41],e=rh(c,0,0,auW,ro,1)[1];Fq(c,a,function(a,b){return 0});return function(a,b){var
d=lO(b,c);k(e,d);return ri(b,d,c)}}),QF=i2(sX)===c?sX:sX[1];EC(zW,QF);var
hz=al,a$=null,IH=undefined,au1=function(a){throw a},m6=function(a){return a!==IH?1:0};hz.String;hz.RegExp;hz.Object;hz.Date;hz.Math;var
au2=hz.Array,au3=hz.Error,II=function(a){return k(au1,a)};hz.JSON;E5(function(a){return a[1]===sW?[0,ck(a[2].toString())]:0});E5(function(a){return a
instanceof
au2?0:[0,ck(a.toString())]});var
IJ=[0,0],au4=L,cR=function(a){return avI(j4(a))},aC=function(a){return avG(j4(a))},W=function(a,b){return aC(B(lC(a,b)))},D=function(a,b){return b?k(a,b[1]):a$},jr=function(a,b){return 0===b[0]?a$:k(a,b[1])},IF=function(a){return cR([0,[0,ajM,a[1]],[0,[0,ajL,a[2]],0]])},IG=function(a){var
b=a[1],c=b?L(b[1][1]):a$,d=[0,[0,ajN,IF(a[3])],0];return cR([0,[0,ajP,c],[0,[0,ajO,IF(a[2])],d]])},ar=function(a){if(!a)return 0;var
b=a[1],c=b[1];return p([0,c],[0,J(b[3],b[2])],0)},kO=function(a,b,c){var
d=b[c];return m6(d)?d|0:a},au_=function(a,b){var
u=lu(b,IH)?{}:b,au=ck(a),ca=kO(kk[5],u,au5),cb=kO(kk[4],u,au6),cc=kO(kk[3],u,au7),cd=kO(kk[2],u,au8),at=[0,kO(kk[1],u,au9),cd,cc,cb,ca,0,0],bs=u[JF],bt=m6(bs),bu=bt?bs|0:bt,bv=u[LK],ce=m6(bv)?bv|0:1,bw=u["all_comments"],cf=m6(bw)?bw|0:1,av=[0,0],cg=bu?[0,function(a){av[1]=[0,a,av[1]];return 0}]:0,bP=au$[1],ad=0;try{var
bF=0,bG=FG(au),aE=bF,aD=bG}catch(f){var
aB=ay(f);if(aB!==hU)throw t(aB,0);var
bC=[0,[0,[0,ad,i$[2],i$[3]],54],0],aE=bC,aD=FG(adL)}var
aA=[0,ad,aD,Vl,0,at[4],FZ,Vk],bE=[0,kj(aA,0)],aF=[0,[0,aE],[0,0],a2[1],[0,0],at[5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,[0,adN],[0,aA],bE,[0,cg],at,ad,[0,0],[0,adM]],aH=k(w[1],aF),bL=B(aF[1][1]),bM=[0,sQ[1],0],U=B(aI(function(a,b){var
d=a[2],c=a[1];return j(sQ[3],b,c)?[0,c,d]:[0,j(sQ[4],b,c),[0,b,d]]},bM,bL)[2]);if(U){var
bN=U[2],bO=U[1];if(bP)throw t([0,SB,bO,bN],1)}IJ[1]=0;var
az=H(au)-0|0,n=hi(au),z=0,d=0;for(;;){if(d===az)var
aG=z;else{var
q=bD(n,d),bx=0;if(0<=q&&!(aa<q))var
r=1;else
bx=1;if(bx){var
by=0;if(vo<=q&&!(p_<q))var
r=2;else
by=1;if(by){var
bz=0;if(jN<=q&&!(nA<q))var
r=3;else
bz=1;if(bz){var
bA=0;if(jQ<=q&&y_>=q){var
r=4;bA=1}if(!bA)var
r=0}}}if(0===r){var
z=r8(z,d,0),d=d+1|0;continue}if((az-d|0)>=r){var
ax=r-1|0,bB=d+r|0;if(3<ax>>>0)throw t([0,R,QN],1);switch(ax){case
0:var
P=bD(n,d);break;case
1:var
P=(bD(n,d)&31)<<6|bD(n,d+1|0)&63;break;case
2:var
P=(bD(n,d)&15)<<12|(bD(n,d+1|0)&63)<<6|bD(n,d+2|0)&63;break;default:var
P=(bD(n,d)&7)<<18|(bD(n,d+1|0)&63)<<12|(bD(n,d+2|0)&63)<<6|bD(n,d+3|0)&63}var
z=r8(z,d,[0,P]),d=bB;continue}var
aG=r8(z,d,0)}var
A=afH,s=B([0,6,aG]);for(;;){var
Q=A[3],ab=A[2],E=A[1];if(!s){var
T=j4(B(Q));if(ce)var
$=aH;else
var
br=k(auZ[1],0),$=j(K(br,-201766268,99),br,aH);if(cf)var
aw=$;else
var
as=$[2],aw=[0,$[1],[0,as[1],as[2],as[3],0]];var
f=function(a,b,c,d){var
l=[0,mJ(T,b[3]),0],m=[0,[0,ajS,aC([0,mJ(T,b[2]),l])],0],n=J(m,[0,[0,ajT,IG(b)],0]);if(c){var
e=c[1],f=e[1];if(f){var
g=e[2];if(g)var
o=[0,[0,ajU,O(g)],0],h=[0,[0,ajV,O(f)],o];else
var
h=[0,[0,ajX,O(f)],0];var
i=h}else
var
k=e[2],p=k?[0,[0,ajY,O(k)],0]:0,i=p;var
j=i}else
var
j=0;return cR(cI(J(n,J(j,[0,[0,ajW,L(a)],0])),d))},aJ=function(a){return W(e,a)},X=function(a){var
b=a[2],c=b[3],d=b[1],e=a[1],g=[0,[0,arc,L(a7(b[2]))],0];return f(are,e,c,[0,[0,ard,W(bZ,d)],g])},aZ=function(a){var
b=a[2],c=b[5],d=b[4],e=b[2],h=b[1],i=a[1],j=[0,[0,apN,W(I,b[3])],0],k=[0,[0,apO,M(0,d)],j],l=[0,[0,apP,D(m,e)],k];return f(apR,i,c,[0,[0,apQ,g(h)],l])},aU=function(a,b){var
d=b[2],i=d[7],j=d[5],k=d[4],l=d[2],t=d[6],u=d[3],v=d[1],w=b[1];if(k)var
e=k[1][2],x=e[2],y=e[1],h=a_(e[3],i),o=x,n=[0,y];else
var
h=i,o=0,n=0;if(j)var
p=j[1][2],z=p[1],A=a_(p[2],h),r=A,q=W(aV,z);else
var
r=h,q=aC(0);var
B=[0,[0,aoh,q],[0,[0,aog,W(V,t)],0]],C=[0,[0,aoi,D(N,o)],B],E=[0,[0,aoj,D(c,n)],C],F=[0,[0,aok,D(m,u)],E],s=l[2],H=s[2],I=l[1],G=[0,[0,aol,f(aot,I,H,[0,[0,aos,W(bS,s[1])],0])],F];return f(a,w,r,[0,[0,aom,D(g,v)],G])},aj=function(a,b){var
c=b[2],d=c[5],e=c[4],i=c[3],j=c[2],k=c[1],l=b[1],n=a?an_:aod,o=[0,[0,an$,D(h,e)],0],p=[0,[0,aoa,D(h,i)],o],q=[0,[0,aob,D(m,j)],p];return f(n,l,d,[0,[0,aoc,g(k)],q])},aT=function(a){var
b=a[2],c=b[4],d=b[2],e=b[1],i=a[1],j=[0,[0,an6,h(b[3])],0],k=[0,[0,an7,D(m,d)],j];return f(an9,i,c,[0,[0,an8,g(e)],k])},aR=function(a){var
b=a[2],c=b[3],d=b[1],e=a[1],h=[0,[0,anQ,aX(b[2])],0];return f(anS,e,c,[0,[0,anR,g(d)],h])},aO=function(a){var
b=a[2],c=b[3],h=a[1],i=b[5],j=b[4],k=b[2],l=b[1],n=a_(ar(c[2][3]),i),d=c[2],e=d[1],o=d[2],p=[0,[0,anA,D(m,k)],0],q=[0,[0,anB,an(j)],p],r=[0,[0,anC,ah(e)],q],s=[0,[0,anD,D(aP,o)],r],t=[0,[0,anE,ah(e)],s];return f(anG,h,n,[0,[0,anF,g(l)],t])},aN=function(a){var
b=a[2],c=b[6],d=b[4],e=b[7],h=b[5],i=b[3],j=b[2],k=b[1],l=a[1],n=d?aC([0,I(d[1]),0]):aC(0),o=c?W(aV,c[1][2][1]):aC(0),p=[0,[0,anv,n],[0,[0,anu,o],[0,[0,ant,W(I,h)],0]]],q=[0,[0,anw,M(0,i)],p],r=[0,[0,anx,D(m,j)],q];return f(anz,l,e,[0,[0,any,g(k)],r])},aM=function(a){var
b=a[2],c=b[2],d=b[1],e=b[4],g=b[3],h=a[1],i=ae(d[1],c[1]),j=[0,[0,anq,D(Z,g)],0];return f(ans,h,e,[0,[0,anr,ag(i,[0,d,[1,c],0])],j])},aL=function(a){var
b=a[2],c=b[2],d=b[1],e=b[4],g=b[3],h=a[1],i=ae(d[1],c[1]),j=[0,[0,ann,L(a7(g))],0];return f(anp,h,e,[0,[0,ano,ag(i,[0,d,[1,c],0])],j])},p=function(a){var
b=a[2],c=b[2],d=a[1],e=[0,[0,anl,aJ(b[1])],0];return f(anm,d,ar(c),e)},e=function(a){var
d=a[2],b=a[1];switch(d[0]){case
0:return p([0,b,d[1]]);case
1:var
$=d[1],aY=$[2];return f(aj6,b,aY,[0,[0,aj5,D(g,$[1])],0]);case
2:return aU(aoe,[0,b,d[1]]);case
3:var
q=d[1],aG=q[3],cG=q[6],cH=q[5],cI=q[4],cJ=q[2],cK=q[1],cL=a_(ar(aG[2][3]),cG),cM=[0,[0,aoY,D(m,cJ)],0],cN=[0,[0,aoZ,an(cI)],cM],aI=aG[2],aJ=aI[2],aK=aI[1];if(aJ)var
aP=aJ[1],aQ=aP[2],cP=aQ[2],cQ=aP[1],cR=f(ao5,cQ,cP,[0,[0,ao4,l(aQ[1])],0]),aH=aC(B([0,cR,lC(aW,aK)]));else
var
aH=aC(cm(aW,aK));var
cO=[0,[0,ao1,g(cK)],[0,[0,ao0,aH],cN]];return f(ao3,b,cL,[0,[0,ao2,p(cH)],cO]);case
4:var
aa=d[1],a0=aa[2];return f(aj8,b,a0,[0,[0,aj7,D(g,aa[1])],0]);case
5:return f(aj9,b,d[1][1],0);case
6:return aN([0,b,d[1]]);case
7:return aO([0,b,d[1]]);case
8:return aR([0,b,d[1]]);case
9:var
r=d[1],ab=r[5],ac=r[4],F=r[3],ad=r[2],a1=r[1];if(F){var
af=F[1];if(0!==af[0]&&!af[1][2])return f(ake,b,ab,[0,[0,akd,D(i,ac)],0])}if(ad){var
j=ad[1];switch(j[0]){case
0:var
k=aL(j[1]);break;case
1:var
k=aM(j[1]);break;case
2:var
k=aN(j[1]);break;case
3:var
k=aO(j[1]);break;case
4:var
k=h(j[1]);break;case
5:var
k=aT(j[1]);break;case
6:var
k=aj(1,j[1]);break;case
7:var
k=aZ(j[1]);break;default:var
k=aR(j[1])}var
ag=k}else
var
ag=a$;var
a2=[0,[0,aj_,D(i,ac)],0],a3=[0,[0,aka,ag],[0,[0,aj$,aS(F)],a2]],a4=a1?1:0;return f(akc,b,ab,[0,[0,akb,!!a4],a3]);case
10:return aM([0,b,d[1]]);case
11:var
s=d[1],cu=s[5],cv=s[4],cw=s[2],cx=s[1],cy=[0,[0,anT,W(I,s[3])],0],cz=[0,[0,anU,M(0,cv)],cy],cA=[0,[0,anV,D(m,cw)],cz];return f(anX,b,cu,[0,[0,anW,g(cx)],cA]);case
12:var
y=d[1],G=y[1],a5=y[4],a6=y[3],a7=y[2],a8=0===G[0]?g(G[1]):i(G[1]),a9=0,ba=a6?"ES":"CommonJS";return f(aki,b,a5,[0,[0,akh,a8],[0,[0,akg,p(a7)],[0,[0,akf,ba],a9]]]);case
13:var
ah=d[1],bb=ah[2];return f(akk,b,bb,[0,[0,akj,o(ah[1])],0]);case
14:var
z=d[1],cB=z[4],cC=z[2],cD=z[1],cE=[0,[0,an2,h(z[3])],0],cF=[0,[0,an3,D(m,cC)],cE];return f(an5,b,cB,[0,[0,an4,g(cD)],cF]);case
15:return aj(1,[0,b,d[1]]);case
16:return aL([0,b,d[1]]);case
17:var
H=d[1],bc=H[3],bd=H[1],be=[0,[0,akl,c(H[2])],0];return f(akn,b,bc,[0,[0,akm,e(bd)],be]);case
18:return f(ako,b,d[1][1],0);case
19:var
J=d[1],cS=J[3],cT=J[1],cU=[0,[0,apK,aX(J[2])],0];return f(apM,b,cS,[0,[0,apL,g(cT)],cU]);case
20:var
am=d[1],K=am[2],bf=am[3],bg=0===K[0]?e(K[1]):c(K[1]);return f(akr,b,bf,[0,[0,akq,bg],[0,[0,akp,L(ai(1))],0]]);case
21:var
t=d[1],ao=t[5],ap=t[4],aq=t[3],N=t[2],bh=t[1];if(N){var
as=N[1];if(0!==as[0]){var
bl=as[1][2],bm=[0,[0,akx,L(ai(ap))],0],bn=[0,[0,aky,D(g,bl)],bm];return f(akA,b,ao,[0,[0,akz,D(i,aq)],bn])}}var
bi=[0,[0,aks,L(ai(ap))],0],bj=[0,[0,akt,D(i,aq)],bi],bk=[0,[0,aku,aS(N)],bj];return f(akw,b,ao,[0,[0,akv,D(e,bh)],bk]);case
22:var
O=d[1],bo=O[3],bp=O[1],bq=[0,[0,akB,D(au4,O[2])],0];return f(akD,b,bo,[0,[0,akC,c(bp)],bq]);case
23:var
u=d[1],br=u[5],bs=u[4],bt=u[3],bu=u[2],bv=u[1],bw=function(a){return 0===a[0]?X(a[1]):c(a[1])},bx=[0,[0,akE,e(bs)],0],by=[0,[0,akF,D(c,bt)],bx],bz=[0,[0,akG,D(c,bu)],by];return f(akI,b,br,[0,[0,akH,D(bw,bv)],bz]);case
24:var
v=d[1],P=v[1],bA=v[5],bB=v[4],bC=v[3],bD=v[2],bE=0===P[0]?X(P[1]):l(P[1]),bF=[0,[0,akK,e(bC)],[0,[0,akJ,!!bB],0]];return f(akN,b,bA,[0,[0,akM,bE],[0,[0,akL,c(bD)],bF]]);case
25:var
w=d[1],Q=w[1],bG=w[5],bH=w[4],bI=w[3],bJ=w[2],bK=0===Q[0]?X(Q[1]):l(Q[1]),bL=[0,[0,akP,e(bI)],[0,[0,akO,!!bH],0]];return f(akS,b,bG,[0,[0,akR,bK],[0,[0,akQ,c(bJ)],bL]]);case
26:var
n=d[1],aE=n[3],aF=n[2],ce=n[9],cf=n[8],cg=n[7],ch=n[6],ci=n[5],cj=n[4],ck=aF[2][4],cl=n[1],cn=0===aE[0]?aE[1]:C(amT),co=a_(ar(ck),ce),cp=[0,[0,amJ,D(m,cf)],0],cq=[0,[0,amL,!!0],[0,[0,amK,al(cg)],cp]],cr=[0,[0,amO,!!cj],[0,[0,amN,!!ci],[0,[0,amM,D(Z,ch)],cq]]],cs=[0,[0,amP,p(cn)],cr],ct=[0,[0,amQ,ak(aF)],cs];return f(amS,b,co,[0,[0,amR,D(g,cl)],ct]);case
27:var
A=d[1],at=A[3],bM=A[4],bN=A[2],bO=A[1];if(at)var
au=at[1][2],av=e(ad5(au[1],au[2]));else
var
av=a$;var
bP=[0,[0,akU,e(bN)],[0,[0,akT,av],0]];return f(akW,b,bM,[0,[0,akV,c(bO)],bP]);case
28:var
x=d[1],aw=x[4],ax=x[3],bS=x[5],bT=x[2],bU=x[1];if(aw){var
R=aw[1];if(0===R[0])var
bV=R[1],ay=cm(function(a){var
b=a[3],c=a[2],e=a[1],k=c?ae(b[1],c[1][1]):b[1],l=c?c[1]:b,j=0,m=0;if(e){var
d=0;switch(e[1]){case
0:var
h=ev;d=1;break;case
1:var
h=hJ;d=1;break}if(d){var
i=h;j=1}}if(!j)var
i=a$;var
n=[0,[0,auH,g(l)],[0,[0,auG,i],m]];return f(auJ,k,0,[0,[0,auI,g(b)],n])},bV);else
var
aA=R[1],cW=aA[1],ay=[0,f(auF,cW,0,[0,[0,auE,g(aA[2])],0]),0];var
S=ay}else
var
S=0;if(ax)var
aV=ax[1][1],cV=[0,[0,auC,g(aV)],0],az=[0,f(auD,aV[1],0,cV),S];else
var
az=S;switch(bU){case
0:var
T=akX;break;case
1:var
T=ak2;break;default:var
T=ak3}var
bW=[0,[0,akZ,i(bT)],[0,[0,akY,L(T)],0]];return f(ak1,b,bS,[0,[0,ak0,aC(az)],bW]);case
29:return aZ([0,b,d[1]]);case
30:var
U=d[1],bX=U[3],bY=U[1],bZ=[0,[0,ak4,e(U[2])],0];return f(ak6,b,bX,[0,[0,ak5,g(bY)],bZ]);case
31:var
aB=d[1],b0=aB[2];return f(ak8,b,b0,[0,[0,ak7,D(c,aB[1])],0]);case
32:var
V=d[1],b1=V[3],b2=V[1],b3=[0,[0,ak9,W(bQ,V[2])],0];return f(ak$,b,b1,[0,[0,ak_,c(b2)],b3]);case
33:var
aD=d[1],b4=aD[2];return f(alb,b,b4,[0,[0,ala,c(aD[1])],0]);case
34:var
E=d[1],b5=E[4],b6=E[2],b7=E[1],b8=[0,[0,alc,D(p,E[3])],0],b9=[0,[0,ald,D(bR,b6)],b8];return f(alf,b,b5,[0,[0,ale,p(b7)],b9]);case
35:return aT([0,b,d[1]]);case
36:return aj(0,[0,b,d[1]]);case
37:return X([0,b,d[1]]);case
38:var
Y=d[1],b_=Y[3],b$=Y[1],ca=[0,[0,alg,e(Y[2])],0];return f(ali,b,b_,[0,[0,alh,c(b$)],ca]);default:var
_=d[1],cb=_[3],cc=_[1],cd=[0,[0,alj,e(_[2])],0];return f(all,b,cb,[0,[0,alk,c(cc)],cd])}},bf=function(a){var
b=a[2],c=b[4],d=b[3][2],e=b[1],g=a[1],h=[0,[0,at3,f(aud,b[2],0,0)],0],i=[0,[0,at4,W(bg,d)],h];return f(at6,g,c,[0,[0,at5,f(aua,e,0,0)],i])},be=function(a){var
b=a[2],d=b[1],g=b[4],h=b[2],i=a[1],j=[0,[0,atZ,W(bg,b[3][2])],0],k=[0,[0,at0,D(b4,h)],j],c=d[2],e=c[2],l=c[4],m=c[3],n=c[1],o=d[1],p=e?[0,[0,at7,ap(e[1])],0]:0,q=[0,[0,at9,W(b3,l)],[0,[0,at8,!!m],0]];return f(at2,i,g,[0,[0,at1,f(at$,o,0,J([0,[0,at_,bh(n)],q],p))],k])},a6=function(a){var
b=a[2],d=b[3],e=b[1],g=a[1],h=[0,[0,aq0,W(c,b[2])],0];return f(aq2,g,d,[0,[0,aq1,W(bY,e)],h])},a5=function(a){var
b=a[2],c=b[1],d=b[2],e=a[1],g=c?aqM:aqQ;return f(aqP,e,d,[0,[0,aqO,!!c],[0,[0,aqN,L(g)],0]])},i=function(a){var
b=a[2];return f(aqL,a[1],b[3],[0,[0,aqK,L(b[1])],[0,[0,aqJ,L(b[2])],0]])},x=function(a){var
c=a[2],b=c[2],d=c[3],e=a[1];return f(aqI,e,d,[0,[0,aqH,a$],[0,[0,aqG,L(aY(b,0,H(b)-1|0))],[0,[0,aqF,L(b)],0]]])},v=function(a){var
b=a[2];return f(aqE,a[1],b[3],[0,[0,aqD,b[1]],[0,[0,aqC,L(b[2])],0]])},g=function(a){var
b=a[2];return f(am8,a[1],b[2],[0,[0,am7,L(b[1])],[0,[0,am6,a$],[0,[0,am5,!!0],0]]])},G=function(a){var
b=a[2],c=b[3],d=b[2],e=b[9],h=b[8],i=b[7],j=b[6],k=b[5],l=b[4],n=d[2][4],o=b[1],q=a[1],r=0===c[0]?c[1]:C(am4),s=a_(ar(n),e),t=[0,[0,amU,D(m,h)],0],u=[0,[0,amW,!!0],[0,[0,amV,al(i)],t]],v=[0,[0,amZ,!!l],[0,[0,amY,!!k],[0,[0,amX,D(Z,j)],u]]],w=[0,[0,am0,p(r)],v],x=[0,[0,am1,ak(d)],w];return f(am3,q,s,[0,[0,am2,D(g,o)],x])},c=function(a){var
b=a[2],d=a[1];switch(b[0]){case
0:var
Q=b[1],au=Q[2],av=[0,[0,alm,W(bX,Q[1])],0];return f(aln,d,ar(au),av);case
1:var
n=b[1],A=n[3],R=n[2],aw=n[9],ax=n[8],ay=n[7],az=n[6],aA=n[4],aB=R[2][4];if(0===A[0])var
T=0,S=p(A[1]);else
var
T=1,S=c(A[1]);var
aD=a_(ar(aB),aw),aE=[0,[0,alo,D(m,ax)],0],aF=[0,[0,alq,!!T],[0,[0,alp,al(ay)],aE]],aG=[0,[0,alu,S],[0,[0,alt,!!aA],[0,[0,als,!!0],[0,[0,alr,D(Z,az)],aF]]]];return f(alx,d,aD,[0,[0,alw,a$],[0,[0,alv,ak(R)],aG]]);case
2:var
B=b[1],aH=B[3],aI=B[1],aJ=[0,[0,aly,h(B[2][2])],0];return f(alA,d,aH,[0,[0,alz,c(aI)],aJ]);case
3:var
q=b[1],U=q[1],aL=q[4],aM=q[3],aN=q[2];if(U){switch(U[1]){case
0:var
j=Ry;break;case
1:var
j=Rz;break;case
2:var
j=RA;break;case
3:var
j=RB;break;case
4:var
j=RC;break;case
5:var
j=RD;break;case
6:var
j=RE;break;case
7:var
j=RF;break;case
8:var
j=RG;break;case
9:var
j=RH;break;case
10:var
j=RI;break;case
11:var
j=RJ;break;case
12:var
j=RK;break;case
13:var
j=RL;break;default:var
j=RM}var
V=j}else
var
V=alF;var
aO=[0,[0,alB,c(aM)],0];return f(alE,d,aL,[0,[0,alD,L(V)],[0,[0,alC,l(aN)],aO]]);case
4:var
r=b[1],aP=r[4],aQ=r[2],aR=r[1],aS=[0,[0,alG,c(r[3])],0],aT=[0,[0,alH,c(aQ)],aS];switch(aR){case
0:var
e=RN;break;case
1:var
e=RO;break;case
2:var
e=RP;break;case
3:var
e=RQ;break;case
4:var
e=RR;break;case
5:var
e=RS;break;case
6:var
e=RT;break;case
7:var
e=RU;break;case
8:var
e=RV;break;case
9:var
e=RW;break;case
10:var
e=RX;break;case
11:var
e=RY;break;case
12:var
e=RZ;break;case
13:var
e=R0;break;case
14:var
e=R1;break;case
15:var
e=R2;break;case
16:var
e=R3;break;case
17:var
e=R4;break;case
18:var
e=R5;break;case
19:var
e=R6;break;case
20:var
e=R7;break;default:var
e=R8}return f(alJ,d,aP,[0,[0,alI,L(e)],aT]);case
5:var
E=b[1],aV=E[4],aW=a_(ar(E[3][2][2]),aV);return f(alK,d,aW,bl(E));case
6:return aU(aof,[0,d,b[1]]);case
7:var
s=b[1],aX=s[4],aY=s[2],aZ=s[1],a0=[0,[0,alL,c(s[3])],0],a1=[0,[0,alM,c(aY)],a0];return f(alO,d,aX,[0,[0,alN,c(aZ)],a1]);case
8:return G([0,d,b[1]]);case
9:return g(b[1]);case
10:var
X=b[1],a2=X[2];return f(alQ,d,a2,[0,[0,alP,c(X[1])],0]);case
11:return be([0,d,b[1]]);case
12:return bf([0,d,b[1]]);case
13:return i([0,d,b[1]]);case
14:return a5([0,d,b[1]]);case
15:return f(aqZ,d,b[1],[0,[0,aqY,a$],[0,[0,aqX,iY],0]]);case
16:return v([0,d,b[1]]);case
17:return x([0,d,b[1]]);case
18:var
t=b[1],aq=t[2],as=t[1],bF=t[4],bG=t[3];try{var
bK=new
RegExp(L(as),L(aq)),at=bK}catch(f){var
at=a$}return f(aqW,d,bF,[0,[0,aqV,at],[0,[0,aqU,L(bG)],[0,[0,aqT,cR([0,[0,aqS,L(as)],[0,[0,aqR,L(aq)],0]])],0]]]);case
19:var
F=b[1];return i([0,d,[0,F[1],F[5],F[6]]]);case
20:var
u=b[1],a3=u[4],a4=u[3],a7=u[2];switch(u[1]){case
0:var
H=alR;break;case
1:var
H=alW;break;default:var
H=alX}var
a8=[0,[0,alS,c(a4)],0];return f(alV,d,a3,[0,[0,alU,L(H)],[0,[0,alT,c(a7)],a8]]);case
21:var
Y=b[1],a9=Y[3];return f(alY,d,a9,bm(Y));case
22:var
I=b[1],ba=I[3],bb=I[1],bc=[0,[0,alZ,g(I[2])],0];return f(al1,d,ba,[0,[0,al0,g(bb)],bc]);case
23:var
w=b[1],_=w[4],$=w[3],bd=w[2],bg=w[1];if($)var
aa=$[1],bh=a_(ar(aa[2][2]),_),ac=bh,ab=aK(aa);else
var
ac=_,ab=aC(0);var
bi=[0,[0,al3,D(ap,bd)],[0,[0,al2,ab],0]];return f(al5,d,ac,[0,[0,al4,c(bg)],bi]);case
24:var
ad=b[1],bj=ad[2],bk=[0,[0,al6,W(bU,ad[1])],0];return f(al7,d,ar(bj),bk);case
25:var
ae=b[1],K=ae[1],bn=ae[3],bo=K[4],bp=a_(ar(K[3][2][2]),bo);return f(al9,d,bp,J(bl(K),[0,[0,al8,!!bn],0]));case
26:var
af=b[1],ag=af[1],bq=ag[3],br=[0,[0,al_,!!af[3]],0];return f(al$,d,bq,J(bm(ag),br));case
27:var
ah=b[1],bs=ah[2];return f(amb,d,bs,[0,[0,ama,W(c,ah[1])],0]);case
28:return f(amc,d,b[1][1],0);case
29:var
M=b[1],bH=M[3],bI=M[1],bJ=[0,[0,aq8,a6(M[2])],0];return f(aq_,d,bH,[0,[0,aq9,c(bI)],bJ]);case
30:return a6([0,d,b[1]]);case
31:return f(amd,d,b[1][1],0);case
32:var
N=b[1],bt=N[3],bu=N[1],bv=[0,[0,ame,o(N[2])],0];return f(amg,d,bt,[0,[0,amf,c(bu)],bv]);case
33:var
y=b[1],ai=y[2],aj=y[1];if(ai){var
bw=y[3],bx=[0,[0,amh,h(ai[1])],0];return f(amj,d,bw,[0,[0,ami,c(aj)],bx])}var
by=y[3];return f(aml,d,by,[0,[0,amk,c(aj)],0]);case
34:var
O=b[1],am=O[3],an=O[2],ao=O[1];if(7<=ao)return f(amn,d,am,[0,[0,amm,c(an)],0]);switch(ao){case
0:var
k=amo;break;case
1:var
k=amt;break;case
2:var
k=amu;break;case
3:var
k=amv;break;case
4:var
k=amw;break;case
5:var
k=amx;break;case
6:var
k=amy;break;default:var
k=C(amz)}return f(ams,d,am,[0,[0,amr,L(k)],[0,[0,amq,!!1],[0,[0,amp,c(an)],0]]]);case
35:var
z=b[1],bz=z[4],bA=z[3],bB=z[2],bC=z[1]?amA:amF;return f(amE,d,bz,[0,[0,amD,L(bC)],[0,[0,amC,c(bB)],[0,[0,amB,!!bA],0]]]);default:var
P=b[1],bD=P[2],bE=[0,[0,amG,!!P[3]],0];return f(amI,d,bD,[0,[0,amH,D(c,P[1])],bE])}},af=function(a){var
b=a[2];return f(ana,a[1],b[2],[0,[0,am$,L(b[1])],[0,[0,am_,a$],[0,[0,am9,!!0],0]]])},ag=function(a,b){var
c=b[1][2],d=c[2],e=c[1],g=[0,[0,anb,!!b[3]],0];return f(ane,a,d,[0,[0,and,L(e)],[0,[0,anc,jr(o,b[2])],g]])},aK=function(a){return W(bW,a[2][1])},bQ=function(a){var
b=a[2],d=b[3],g=b[1],h=a[1],i=[0,[0,anf,W(e,b[2])],0];return f(anh,h,d,[0,[0,ang,D(c,g)],i])},bR=function(a){var
b=a[2],c=b[3],d=b[1],e=a[1],g=[0,[0,ani,p(b[2])],0];return f(ank,e,c,[0,[0,anj,D(l,d)],g])},ah=function(a){return aC(cm(function(a){var
b=a[2];return aQ(0,b[3],a[1],[0,b[1]],b[2][2])},a))},aQ=function(a,b,c,d,e){if(d)var
j=d[1],l=0===j[0]?D(g,[0,j[1]]):D(i,[0,j[1]]),k=l;else
var
k=D(g,0);return f(anP,c,a,[0,[0,anO,k],[0,[0,anN,h(e)],[0,[0,anM,!!b],0]]])},aP=function(a){var
b=a[2],c=b[4],d=b[3],e=b[2],f=b[1],g=a[1];return aQ(c,d,g,lB(function(a){return[0,a]},f),e)},ai=function(a){return a?anY:anZ},aS=function(a){if(!a)return aC(0);var
b=a[1];if(0===b[0])return W(b6,b[1]);var
c=b[1],d=c[2],e=c[1];return d?aC([0,f(an1,e,0,[0,[0,an0,g(d[1])],0]),0]):aC(0)},V=function(a){var
b=a[2],d=b[2],e=a[1];return f(aoo,e,d,[0,[0,aon,c(b[1])],0])},aV=function(a){var
b=a[2],c=b[1],d=a[1],e=[0,[0,aop,D(N,b[2])],0];return f(aor,d,0,[0,[0,aoq,g(c)],e])},bS=function(a){switch(a[0]){case
0:var
H=a[1],h=H[2],j=h[6],b=h[2],Q=h[5],R=h[4],S=h[3],T=h[1],U=H[1];switch(b[0]){case
0:var
m=j,l=0,k=i(b[1]);break;case
1:var
m=j,l=0,k=v(b[1]);break;case
2:var
m=j,l=0,k=x(b[1]);break;case
3:var
m=j,l=0,k=g(b[1]);break;case
4:var
m=j,l=0,k=af(b[1]);break;default:var
M=b[1][2],Y=M[1],Z=a_(M[2],j),m=Z,l=1,k=c(Y)}switch(T){case
0:var
t=aou;break;case
1:var
t=aoC;break;case
2:var
t=aoD;break;default:var
t=aoE}var
X=[0,[0,aoy,L(t)],[0,[0,aox,!!R],[0,[0,aow,!!l],[0,[0,aov,W(V,Q)],0]]]];return f(aoB,U,m,[0,[0,aoA,k],[0,[0,aoz,G(S)],X]]);case
1:var
I=a[1],e=I[2],s=e[7],O=e[6],B=e[2],n=e[1],al=e[5],am=e[4],an=e[3],ao=I[1];switch(n[0]){case
0:var
r=s,q=0,p=i(n[1]);break;case
1:var
r=s,q=0,p=v(n[1]);break;case
2:var
r=s,q=0,p=x(n[1]);break;case
3:var
r=s,q=0,p=g(n[1]);break;case
4:var
F=C(aoX),r=F[3],q=F[2],p=F[1];break;default:var
P=n[1][2],au=P[1],av=a_(P[2],s),r=av,q=1,p=c(au)}if(typeof
B==="number")if(B)var
w=0,E=0;else
var
w=1,E=0;else
var
w=0,E=[0,B[1]];var
ap=w?[0,[0,aoO,!!w],0]:0,aq=0===O?0:[0,[0,aoW,W(V,O)],0],ar=J(aq,ap),as=[0,[0,aoR,!!q],[0,[0,aoQ,!!am],[0,[0,aoP,D(y,al)],0]]],at=[0,[0,aoS,jr(o,an)],as];return f(aoV,ao,r,J([0,[0,aoU,p],[0,[0,aoT,D(c,E)],at]],ar));default:var
K=a[1],d=K[2],N=d[6],z=d[2],_=d[7],$=d[5],aa=d[4],ab=d[3],ac=d[1],ad=K[1];if(typeof
z==="number")if(z)var
u=0,A=0;else
var
u=1,A=0;else
var
u=0,A=[0,z[1]];var
ae=u?[0,[0,aoF,!!u],0]:0,ag=0===N?0:[0,[0,aoN,W(V,N)],0],ah=J(ag,ae),ai=[0,[0,aoI,!!0],[0,[0,aoH,!!aa],[0,[0,aoG,D(y,$)],0]]],aj=[0,[0,aoJ,jr(o,ab)],ai],ak=[0,[0,aoK,D(c,A)],aj];return f(aoM,ad,_,J([0,[0,aoL,af(ac)],ak],ah))}},aW=function(a){var
b=a[2],e=b[3],h=b[2],d=b[1],j=a[1],m=b[4],n=0===d[0]?g(d[1]):i(d[1]);if(e)var
o=[0,[0,ao6,c(e[1])],0],k=f(ao8,j,0,[0,[0,ao7,l(h)],o]);else
var
k=l(h);return f(apa,j,0,[0,[0,ao$,n],[0,[0,ao_,k],[0,[0,ao9,!!m],0]]])},aX=function(a){var
b=a[2],c=a[1];switch(b[0]){case
0:var
d=b[1],n=d[4],o=d[1],p=[0,[0,apc,!!d[2]],[0,[0,apb,!!d[3]],0]],q=[0,[0,apg,W(function(a){var
b=a[2],c=b[1],d=a[1],e=[0,[0,apd,a5(b[2])],0];return f(apf,d,0,[0,[0,ape,g(c)],e])},o)],p];return f(aph,c,ar(n),q);case
1:var
e=b[1],r=e[4],s=e[1],t=[0,[0,apj,!!e[2]],[0,[0,api,!!e[3]],0]],u=[0,[0,apn,W(function(a){var
b=a[2],c=b[1],d=a[1],e=[0,[0,apk,v(b[2])],0];return f(apm,d,0,[0,[0,apl,g(c)],e])},s)],t];return f(apo,c,ar(r),u);case
2:var
h=b[1],k=h[1],w=h[4],y=h[3],z=h[2];if(0===k[0])var
A=k[1],m=cm(function(a){var
b=a[1];return f(apq,b,0,[0,[0,app,g(a[2][1])],0])},A);else
var
C=k[1],m=cm(function(a){var
b=a[2],c=b[1],d=a[1],e=[0,[0,apv,i(b[2])],0];return f(apx,d,0,[0,[0,apw,g(c)],e])},C);var
B=[0,[0,apt,aC(m)],[0,[0,aps,!!z],[0,[0,apr,!!y],0]]];return f(apu,c,ar(w),B);case
3:var
l=b[1],D=l[3],E=l[1],F=[0,[0,apy,!!l[2]],0],G=[0,[0,apB,W(function(a){var
b=a[1];return f(apA,b,0,[0,[0,apz,g(a[2][1])],0])},E)],F];return f(apC,c,ar(D),G);default:var
j=b[1],H=j[4],I=j[1],J=[0,[0,apE,!!j[2]],[0,[0,apD,!!j[3]],0]],K=[0,[0,apI,W(function(a){var
b=a[2],c=b[1],d=a[1],e=[0,[0,apF,x(b[2])],0];return f(apH,d,0,[0,[0,apG,g(c)],e])},I)],J];return f(apJ,c,ar(H),K)}},I=function(a){var
b=a[2],c=b[1],d=b[3],e=b[2],h=a[1],i=0===c[0]?g(c[1]):am(c[1]);return f(apU,h,d,[0,[0,apT,i],[0,[0,apS,D(N,e)],0]])},l=function(a){var
b=a[2],d=a[1];switch(b[0]){case
0:var
e=b[1],h=e[3],i=e[1],j=[0,[0,apV,jr(o,e[2])],0],k=[0,[0,apW,W(bV,i)],j];return f(apX,d,ar(h),k);case
1:var
g=b[1],l=g[3],m=g[1],n=[0,[0,apY,jr(o,g[2])],0],p=[0,[0,apZ,W(bT,m)],n];return f(ap0,d,ar(l),p);case
2:return ag(d,b[1]);default:return c(b[1])}},a0=function(a){var
b=a[2],d=b[2],e=b[1],g=a[1];if(!d)return l(e);var
h=[0,[0,ap1,c(d[1])],0];return f(ap3,g,0,[0,[0,ap2,l(e)],h])},a1=function(a){var
b=a[2],c=b[2],d=a[1];return f(ap6,d,c,[0,[0,ap5,iP],[0,[0,ap4,o(b[1])],0]])},ak=function(a){var
c=a[2],d=c[3],e=c[2],b=c[1];if(d){var
g=d[1],h=g[2],k=h[2],m=g[1],n=f(ap8,m,k,[0,[0,ap7,l(h[1])],0]),i=B([0,n,lC(a0,e)]),o=b?[0,a1(b[1]),i]:i;return aC(o)}var
j=cm(a0,e),p=b?[0,a1(b[1]),j]:j;return aC(p)},a3=function(a,b){var
c=b[2];return f(ap_,a,c,[0,[0,ap9,l(b[1])],0])},bT=function(a){switch(a[0]){case
0:var
b=a[1],d=b[2],e=d[2],g=d[1],i=b[1];if(!e)return l(g);var
j=[0,[0,ap$,c(e[1])],0];return f(aqb,i,0,[0,[0,aqa,l(g)],j]);case
1:var
h=a[1];return a3(h[1],h[2]);default:return a$}},o=function(a){var
b=a[1];return f(atJ,b,0,[0,[0,atI,h(a[2])],0])},al=function(a){switch(a[0]){case
0:return a$;case
1:return o(a[1]);default:var
b=a[1],c=b[2],d=b[1];return f(atL,d,0,[0,[0,atK,a8([0,c[1],c[2]])],0])}},bU=function(a){if(0===a[0]){var
q=a[1],b=q[2],z=q[1];switch(b[0]){case
0:var
A=b[3],B=b[1],e=0,o=A,n=0,m=aqc,l=c(b[2]),d=B;break;case
1:var
s=b[2],F=b[1],e=0,o=0,n=1,m=aql,l=G([0,s[1],s[2]]),d=F;break;case
2:var
t=b[2],H=b[3],I=b[1],e=H,o=0,n=0,m=aqm,l=G([0,t[1],t[2]]),d=I;break;default:var
u=b[2],J=b[3],K=b[1],e=J,o=0,n=0,m=aqn,l=G([0,u[1],u[2]]),d=K}switch(d[0]){case
0:var
k=e,j=0,h=i(d[1]);break;case
1:var
k=e,j=0,h=v(d[1]);break;case
2:var
k=e,j=0,h=x(d[1]);break;case
3:var
k=e,j=0,h=g(d[1]);break;case
4:var
p=C(aqk),k=p[3],j=p[2],h=p[1];break;default:var
r=d[1][2],D=r[1],E=a_(r[2],e),k=E,j=1,h=c(D)}return f(aqj,z,k,[0,[0,aqi,h],[0,[0,aqh,l],[0,[0,aqg,L(m)],[0,[0,aqf,!!n],[0,[0,aqe,!!o],[0,[0,aqd,!!j],0]]]]]])}var
w=a[1],y=w[2],M=y[2],N=w[1];return f(aqp,N,M,[0,[0,aqo,c(y[1])],0])},bV=function(a){if(0!==a[0]){var
r=a[1];return a3(r[1],r[2])}var
m=a[1],j=m[2],n=j[3],k=j[2],b=j[1],s=j[4],t=m[1];switch(b[0]){case
0:var
h=0,e=0,d=i(b[1]);break;case
1:var
h=0,e=0,d=v(b[1]);break;case
2:var
h=0,e=0,d=x(b[1]);break;case
3:var
h=0,e=0,d=g(b[1]);break;default:var
q=b[1][2],y=q[2],h=y,e=1,d=c(q[1])}if(n)var
o=n[1],u=ae(k[1],o[1]),w=[0,[0,aqq,c(o)],0],p=f(aqs,u,0,[0,[0,aqr,l(k)],w]);else
var
p=l(k);return f(aqz,t,h,[0,[0,aqy,d],[0,[0,aqx,p],[0,[0,aqw,fH],[0,[0,aqv,!!0],[0,[0,aqu,!!s],[0,[0,aqt,!!e],0]]]]]])},a4=function(a){var
b=a[2],d=b[2],e=a[1];return f(aqB,e,d,[0,[0,aqA,c(b[1])],0])},bW=function(a){return 0===a[0]?c(a[1]):a4(a[1])},bX=function(a){switch(a[0]){case
0:return c(a[1]);case
1:return a4(a[1]);default:return a$}},bY=function(a){var
b=a[2],c=b[1],d=b[2],e=a[1];return f(aq7,e,0,[0,[0,aq6,cR([0,[0,aq4,L(c[1])],[0,[0,aq3,L(c[2])],0]])],[0,[0,aq5,!!d],0]])},a7=function(a){switch(a){case
0:return aq$;case
1:return ara;default:return arb}},bZ=function(a){var
b=a[2],d=b[1],e=a[1],g=[0,[0,arf,D(c,b[2])],0];return f(arh,e,0,[0,[0,arg,l(d)],g])},y=function(a){var
c=a[2],d=c[2],e=a[1];switch(c[1]){case
0:var
b=ari;break;case
1:var
b=arl;break;case
2:var
b=arm;break;case
3:var
b=arn;break;case
4:var
b=aro;break;default:var
b=arp}return f(ark,e,d,[0,[0,arj,L(b)],0])},bd=function(a,b){var
d=b[3],e=b[2];switch(b[4]){case
0:var
c=atb;break;case
1:var
c=atc;break;default:var
c=atd}return f(atg,a,d,[0,[0,atf,L(c)],[0,[0,ate,h(e)],0]])},ba=function(a){var
b=a[2],c=b[1],d=b[3],e=b[2],h=a[1],i=0===c[0]?g(c[1]):am(c[1]);return f(asV,h,d,[0,[0,asU,i],[0,[0,asT,D(N,e)],0]])},M=function(a,b){var
c=b[2],j=c[4],k=c[3],l=c[2],m=c[1],n=b[1],d=aI(function(a,b){var
d=a[4],e=a[3],j=a[2],k=a[1];switch(b[0]){case
0:var
w=b[1],c=w[2],q=c[2],p=c[1],J=c[8],K=c[7],M=c[6],N=c[5],O=c[4],P=c[3],Q=w[1];switch(p[0]){case
0:var
l=i(p[1]);break;case
1:var
l=v(p[1]);break;case
2:var
l=x(p[1]);break;case
3:var
l=g(p[1]);break;case
4:var
l=C(asf);break;default:var
l=C(asg)}switch(q[0]){case
0:var
t=ar5,s=h(q[1]);break;case
1:var
G=q[1],t=asd,s=Y([0,G[1],G[2]]);break;default:var
H=q[1],t=ase,s=Y([0,H[1],H[2]])}return[0,[0,f(asc,Q,J,[0,[0,asb,l],[0,[0,asa,s],[0,[0,ar$,!!M],[0,[0,ar_,!!P],[0,[0,ar9,!!O],[0,[0,ar8,!!N],[0,[0,ar7,D(y,K)],[0,[0,ar6,L(t)],0]]]]]]]]),k],j,e,d];case
1:var
z=b[1],I=z[2],R=I[2],S=z[1];return[0,[0,f(asi,S,R,[0,[0,ash,h(I[1])],0]),k],j,e,d];case
2:var
A=b[1],m=A[2],T=m[6],U=m[4],V=m[3],W=m[2],X=m[1],Z=A[1],_=[0,[0,ask,!!U],[0,[0,asj,D(y,m[5])],0]],$=[0,[0,asl,h(V)],_],aa=[0,[0,asm,h(W)],$];return[0,k,[0,f(aso,Z,T,[0,[0,asn,D(g,X)],aa]),j],e,d];case
3:var
B=b[1],u=B[2],ab=u[3],ac=B[1],ad=[0,[0,asp,!!u[2]],0];return[0,k,j,[0,f(asr,ac,ab,[0,[0,asq,Y(u[1])],ad]),e],d];case
4:var
E=b[1],o=E[2],ap=o[6],aq=o[5],ar=o[4],as=o[3],at=o[1],au=E[1],av=[0,[0,asB,!!as],[0,[0,asA,!!ar],[0,[0,asz,!!aq],[0,[0,asy,h(o[2])],0]]]];return[0,k,j,e,[0,f(asD,au,ap,[0,[0,asC,g(at)],av]),d]];default:var
F=b[1],n=F[2],ae=n[6],af=n[4],ag=n[3],ah=n[2],ai=n[1],aj=F[1],ak=0;switch(n[5]){case
0:var
r="PlusOptional";break;case
1:var
r="MinusOptional";break;case
2:var
r="Optional";break;default:var
r=a$}var
al=[0,[0,ast,D(y,af)],[0,[0,ass,r],ak]],am=[0,[0,asu,h(ag)],al],an=[0,[0,asv,h(ah)],am];return[0,[0,f(asx,aj,ae,[0,[0,asw,ao(ai)],an]),k],j,e,d]}},arX,k),o=d[3],p=d[2],q=d[1],r=[0,[0,arY,aC(B(d[4]))],0],s=[0,[0,arZ,aC(B(o))],r],t=[0,[0,ar0,aC(B(p))],s],e=[0,[0,ar2,!!m],[0,[0,ar1,aC(B(q))],t]],u=a?[0,[0,ar3,!!l],e]:e;return f(ar4,n,ar(j),u)},Y=function(a){var
b=a[2],d=b[3],c=b[2][2],e=b[4],g=c[3],i=c[2],j=c[1],k=b[1],l=a[1],n=a_(ar(c[4]),e),o=[0,[0,arJ,D(m,k)],0],p=[0,[0,arK,D(b0,g)],o],q=0===d[0]?h(d[1]):a8(d[1]),r=[0,[0,arM,D(b1,j)],[0,[0,arL,q],p]];return f(arO,l,n,[0,[0,arN,W(function(a){return a9(0,a)},i)],r])},h=function(a){var
b=a[2],c=a[1];switch(b[0]){case
0:return f(arq,c,b[1],0);case
1:return f(arr,c,b[1],0);case
2:return f(ars,c,b[1],0);case
3:return f(art,c,b[1],0);case
4:return f(aru,c,b[1],0);case
5:return f(arw,c,b[1],0);case
6:return f(arx,c,b[1],0);case
7:return f(ary,c,b[1],0);case
8:return f(arz,c,b[2],0);case
9:return f(arv,c,b[1],0);case
10:return f(atH,c,b[1],0);case
11:var
r=b[1],X=r[2];return f(arB,c,X,[0,[0,arA,h(r[1])],0]);case
12:return Y([0,c,b[1]]);case
13:var
e=b[1],p=e[2],K=e[4],O=e[3],P=e[1],Q=a_(ar(p[2][3]),K),q=p[2],R=q[2],S=q[1],T=[0,[0,anH,D(m,P)],0],U=[0,[0,anI,an(O)],T],V=[0,[0,anJ,D(aP,R)],U];return f(anL,c,Q,[0,[0,anK,ah(S)],V]);case
14:return M(1,[0,c,b[1]]);case
15:var
i=b[1],Z=i[3],_=i[2],$=[0,[0,asE,M(0,i[1])],0];return f(asG,c,Z,[0,[0,asF,W(I,_)],$]);case
16:var
s=b[1],aa=s[2];return f(asI,c,aa,[0,[0,asH,h(s[1])],0]);case
17:var
d=b[1],ab=d[5],ac=d[3],ad=d[2],ae=d[1],af=[0,[0,asJ,h(d[4])],0],ag=[0,[0,asK,h(ac)],af],ai=[0,[0,asL,h(ad)],ag];return f(asN,c,ab,[0,[0,asM,h(ae)],ai]);case
18:var
t=b[1],aj=t[2];return f(asP,c,aj,[0,[0,asO,ao(t[1])],0]);case
19:return ba([0,c,b[1]]);case
20:var
u=b[1],ak=u[3];return f(asY,c,ak,bb(u));case
21:var
v=b[1],F=v[1],al=F[3],am=[0,[0,asZ,!!v[2]],0];return f(as0,c,al,J(bb(F),am));case
22:var
w=b[1],n=w[1],ap=w[2];return f(as2,c,ap,[0,[0,as1,W(h,[0,n[1],[0,n[2],n[3]]])],0]);case
23:var
x=b[1],o=x[1],aq=x[2];return f(as4,c,aq,[0,[0,as3,W(h,[0,o[1],[0,o[2],o[3]]])],0]);case
24:var
j=b[1],G=j[2],as=j[3],at=j[1],au=G?[0,[0,as5,N(G[1])],0]:0;return f(as7,c,as,[0,[0,as6,bc(at)],au]);case
25:var
z=b[1],av=z[2];return f(ata,c,av,[0,[0,as$,h(z[1])],0]);case
26:return bd(c,b[1]);case
27:var
A=b[1],aw=A[2];return f(ati,c,aw,[0,[0,ath,h(A[1])],0]);case
28:var
B=b[1],ax=B[2],ay=B[1],az=0;return f(atk,c,ax,[0,[0,atj,W(function(a){var
b=a[2],d=a[1];switch(b[0]){case
0:return h(b[1]);case
1:var
c=b[1],i=c[2],j=c[1],k=[0,[0,atl,!!c[4]],0],l=[0,[0,atm,D(y,c[3])],k],m=[0,[0,atn,h(i)],l];return f(atp,d,0,[0,[0,ato,g(j)],m]);default:var
e=b[1],n=e[1],o=[0,[0,atq,h(e[2])],0];return f(ats,d,0,[0,[0,atr,D(g,n)],o])}},ay)],az]);case
29:var
k=b[1];return f(atv,c,k[3],[0,[0,atu,L(k[1])],[0,[0,att,L(k[2])],0]]);case
30:var
l=b[1];return f(aty,c,l[3],[0,[0,atx,l[1]],[0,[0,atw,L(l[2])],0]]);case
31:var
C=b[1];return f(atB,c,C[3],[0,[0,atA,a$],[0,[0,atz,L(C[2])],0]]);case
32:var
E=b[1],H=E[1],aA=E[2],aB=0,aC=H?atC:atG;return f(atF,c,aA,[0,[0,atE,!!H],[0,[0,atD,L(aC)],aB]]);case
33:return f(arC,c,b[1],0);case
34:return f(arD,c,b[1],0);default:return f(arE,c,b[1],0)}},a8=function(a){var
b=a[2],c=b[2],d=b[3],e=c[1],i=a[1],j=[0,[0,arF,!!b[1]],0],k=[0,[0,arG,D(h,c[2])],j],l=[0,[0,arH,g(e)],k];return f(arI,i,ar(d),l)},a9=function(a,b){var
c=b[2],d=c[1],e=b[1],i=[0,[0,arP,!!c[3]],0],j=[0,[0,arQ,h(c[2])],i];return f(arS,e,a,[0,[0,arR,D(g,d)],j])},b0=function(a){var
b=a[2];return a9(b[2],b[1])},b1=function(a){var
b=a[2],c=b[2],d=a[1],e=[0,[0,arU,h(b[1][2])],[0,[0,arT,!!0],0]];return f(arW,d,c,[0,[0,arV,D(g,0)],e])},am=function(a){var
c=a[2],b=c[1],d=c[2],e=a[1],h=0===b[0]?g(b[1]):am(b[1]);return f(asS,e,0,[0,[0,asR,h],[0,[0,asQ,g(d)],0]])},bb=function(a){var
b=a[1],c=[0,[0,asW,h(a[2])],0];return[0,[0,asX,h(b)],c]},bc=function(a){if(0===a[0])return g(a[1]);var
b=a[1],c=b[2],d=c[2],e=b[1],h=bc(c[1]);return f(as_,e,0,[0,[0,as9,h],[0,[0,as8,g(d)],0]])},an=function(a){return 0===a[0]?a$:bd(a[1],a[2])},m=function(a){var
b=a[2],c=b[2],d=a[1],e=[0,[0,atM,W(ao,b[1])],0];return f(atN,d,ar(c),e)},ao=function(a){var
b=a[2],c=b[1][2],d=b[5],e=b[4],g=b[2],i=c[2],j=c[1],k=a[1],l=b[3]?[0,[0,atO,!!1],0]:0,m=[0,[0,atP,D(h,d)],0],n=[0,[0,atQ,D(y,e)],m];return f(atT,k,i,J([0,[0,atS,L(j)],[0,[0,atR,jr(o,g)],n]],l))},N=function(a){var
b=a[2],c=b[2],d=a[1],e=[0,[0,atU,W(h,b[1])],0];return f(atV,d,ar(c),e)},ap=function(a){var
b=a[2],c=b[2],d=a[1],e=[0,[0,atW,W(b2,b[1])],0];return f(atX,d,ar(c),e)},b2=function(a){if(0===a[0])return h(a[1]);var
b=a[1],c=b[1],d=b[2][1];return ba([0,c,[0,[0,cn(0,[0,c,atY])],0,d]])},b3=function(a){if(0===a[0]){var
d=a[1],g=d[2],b=g[1],i=g[2],j=d[1],k=0===b[0]?F(b[1]):bk(b[1]);return f(aug,j,0,[0,[0,auf,k],[0,[0,aue,D(b5,i)],0]])}var
e=a[1],h=e[2],l=h[2],m=e[1];return f(aui,m,l,[0,[0,auh,c(h[1])],0])},b4=function(a){var
b=a[1];return f(auc,b,0,[0,[0,aub,bh(a[2][1])],0])},bi=function(a){var
d=a[2],e=d[1],b=a[1],g=d[2],h=e?c(e[1]):f(aul,[0,b[1],[0,b[2][1],b[2][2]+1|0],[0,b[3][1],b[3][2]-1|0]],0,0);return f(auk,b,ar(g),[0,[0,auj,h],0])},bg=function(a){var
b=a[2],d=a[1];switch(b[0]){case
0:return be([0,d,b[1]]);case
1:return bf([0,d,b[1]]);case
2:return bi([0,d,b[1]]);case
3:var
e=b[1],h=e[2];return f(aun,d,h,[0,[0,aum,c(e[1])],0]);default:var
g=b[1];return f(auq,d,0,[0,[0,aup,L(g[1])],[0,[0,auo,L(g[2])],0]])}},F=function(a){var
b=a[2];return f(auy,a[1],b[2],[0,[0,aux,L(b[1])],0])},bk=function(a){var
b=a[2],c=b[1],d=a[1],e=[0,[0,auu,F(b[2])],0];return f(auw,d,0,[0,[0,auv,F(c)],e])},bj=function(a){var
c=a[2],b=c[1],d=c[2],e=a[1],g=0===b[0]?F(b[1]):bj(b[1]);return f(aut,e,0,[0,[0,aus,g],[0,[0,aur,F(d)],0]])},bh=function(a){switch(a[0]){case
0:return F(a[1]);case
1:return bk(a[1]);default:return bj(a[1])}},b5=function(a){if(0===a[0]){var
b=a[1];return i([0,b[1],b[2]])}var
c=a[1];return bi([0,c[1],c[2]])},b6=function(a){var
b=a[2],c=b[2],d=b[1],e=a[1],h=c?g(c[1]):g(d);return f(auB,e,0,[0,[0,auA,g(d)],[0,[0,auz,h],0]])},O=function(a){return W(b7,a)},b7=function(a){var
b=a[2],e=a[1];if(b[1])var
d=b[2],c=auK;else
var
d=b[2],c=auM;return f(c,e,0,[0,[0,auL,L(d)],0])},Z=function(a){var
b=a[2],d=b[1],h=b[2],i=a[1];if(d)var
g=[0,[0,auN,c(d[1])],0],e=auO;else
var
g=0,e=auP;return f(e,i,h,g)},bl=function(a){var
b=a[2],d=a[1],e=[0,[0,auQ,aK(a[3])],0],f=[0,[0,auR,D(ap,b)],e];return[0,[0,auS,c(d)],f]},bm=function(a){var
b=a[2],f=a[1];switch(b[0]){case
0:var
e=0,d=g(b[1]);break;case
1:var
e=0,d=af(b[1]);break;default:var
e=1,d=c(b[1])}return[0,[0,auV,c(f)],[0,[0,auU,d],[0,[0,auT,!!e],0]]]},_=aw[2],bn=_[2],b8=_[4],b9=_[3],b_=aw[1],b$=aJ(_[1]),bo=[0,[0,aj0,b$],[0,[0,ajZ,O(b8)],0]];if(bn)var
bp=bn[1],bq=J(bo,[0,[0,aj3,f(aj2,bp[1],0,[0,[0,aj1,L(bp[2])],0])],0]);else
var
bq=bo;var
aq=f(aj4,b_,b9,bq),ch=J(U,IJ[1]);aq["errors"]=W(function(a){var
b=a[1],c=[0,[0,ajQ,L(SC(a[2]))],0];return cR([0,[0,ajR,IG(b)],c])},ch);if(bu){var
ci=av[1];aq[JF]=aC(lC(function(a){var
d=a[2],b=a[1],e=a[3],f=[0,[0,afN,L(rw(d))],0],g=[0,mJ(T,b[3]),0],h=[0,[0,afO,aC([0,mJ(T,b[2]),g])],f],i=[0,[0,afR,cR([0,[0,afQ,b[3][1]],[0,[0,afP,b[3][2]],0]])],0],j=[0,[0,afV,cR([0,[0,afU,cR([0,[0,afT,b[2][1]],[0,[0,afS,b[2][2]],0]])],i])],h];switch(e){case
0:var
c=afW;break;case
1:var
c=afZ;break;case
2:var
c=af0;break;case
3:var
c=af1;break;case
4:var
c=af2;break;default:var
c=af3}return cR([0,[0,afY,L(F3(d))],[0,[0,afX,L(c)],j]])},ci))}return aq}var
S=s[1];if(5===S){var
ac=s[2];if(ac&&6===ac[1]){var
bH=ac[2],A=[0,E+2|0,0,[0,j4(B([0,E,ab])),Q]],s=bH;continue}}else if(6>S){var
bK=s[2],A=[0,E+Hq(S)|0,[0,E,ab],Q],s=bK;continue}var
bI=s[2],bJ=[0,j4(B([0,E,ab])),Q],A=[0,E+Hq(S)|0,0,bJ],s=bI}}};if(true)var
IK=exports;else{ var IK, IL; }IK["parse"]=avJ(function(a,b){try{var
d=au_(a,b);return d}catch(f){var
c=ay(f);return c[1]===sW?II(c[2]):II(new
au3(L(I(ava,lI(c)))))}});qP(0);return}}(globalThis));


/***/ }),

/***/ 5644:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {


const {PassThrough: PassThroughStream} = __nccwpck_require__(2781);

module.exports = options => {
	options = {...options};

	const {array} = options;
	let {encoding} = options;
	const isBuffer = encoding === 'buffer';
	let objectMode = false;

	if (array) {
		objectMode = !(encoding || isBuffer);
	} else {
		encoding = encoding || 'utf8';
	}

	if (isBuffer) {
		encoding = null;
	}

	const stream = new PassThroughStream({objectMode});

	if (encoding) {
		stream.setEncoding(encoding);
	}

	let length = 0;
	const chunks = [];

	stream.on('data', chunk => {
		chunks.push(chunk);

		if (objectMode) {
			length = chunks.length;
		} else {
			length += chunk.length;
		}
	});

	stream.getBufferedValue = () => {
		if (array) {
			return chunks;
		}

		return isBuffer ? Buffer.concat(chunks, length) : chunks.join('');
	};

	stream.getBufferedLength = () => length;

	return stream;
};


/***/ }),

/***/ 3565:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {


const {constants: BufferConstants} = __nccwpck_require__(4300);
const stream = __nccwpck_require__(2781);
const {promisify} = __nccwpck_require__(3837);
const bufferStream = __nccwpck_require__(5644);

const streamPipelinePromisified = promisify(stream.pipeline);

class MaxBufferError extends Error {
	constructor() {
		super('maxBuffer exceeded');
		this.name = 'MaxBufferError';
	}
}

async function getStream(inputStream, options) {
	if (!inputStream) {
		throw new Error('Expected a stream');
	}

	options = {
		maxBuffer: Infinity,
		...options
	};

	const {maxBuffer} = options;
	const stream = bufferStream(options);

	await new Promise((resolve, reject) => {
		const rejectPromise = error => {
			// Don't retrieve an oversized buffer.
			if (error && stream.getBufferedLength() <= BufferConstants.MAX_LENGTH) {
				error.bufferedData = stream.getBufferedValue();
			}

			reject(error);
		};

		(async () => {
			try {
				await streamPipelinePromisified(inputStream, stream);
				resolve();
			} catch (error) {
				rejectPromise(error);
			}
		})();

		stream.on('data', () => {
			if (stream.getBufferedLength() > maxBuffer) {
				rejectPromise(new MaxBufferError());
			}
		});
	});

	return stream.getBufferedValue();
}

module.exports = getStream;
module.exports.buffer = (stream, options) => getStream(stream, {...options, encoding: 'buffer'});
module.exports.array = (stream, options) => getStream(stream, {...options, array: true});
module.exports.MaxBufferError = MaxBufferError;


/***/ }),

/***/ 7415:
/***/ ((module) => {



module.exports = (flag, argv = process.argv) => {
	const prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');
	const position = argv.indexOf(prefix + flag);
	const terminatorPosition = argv.indexOf('--');
	return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
};


/***/ }),

/***/ 5930:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var fs = __nccwpck_require__(7147)
var core
if (process.platform === 'win32' || global.TESTING_WINDOWS) {
  core = __nccwpck_require__(3138)
} else {
  core = __nccwpck_require__(6017)
}

module.exports = isexe
isexe.sync = sync

function isexe (path, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = {}
  }

  if (!cb) {
    if (typeof Promise !== 'function') {
      throw new TypeError('callback not provided')
    }

    return new Promise(function (resolve, reject) {
      isexe(path, options || {}, function (er, is) {
        if (er) {
          reject(er)
        } else {
          resolve(is)
        }
      })
    })
  }

  core(path, options || {}, function (er, is) {
    // ignore EACCES because that just means we aren't allowed to run it
    if (er) {
      if (er.code === 'EACCES' || options && options.ignoreErrors) {
        er = null
        is = false
      }
    }
    cb(er, is)
  })
}

function sync (path, options) {
  // my kingdom for a filtered catch
  try {
    return core.sync(path, options || {})
  } catch (er) {
    if (options && options.ignoreErrors || er.code === 'EACCES') {
      return false
    } else {
      throw er
    }
  }
}


/***/ }),

/***/ 6017:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

module.exports = isexe
isexe.sync = sync

var fs = __nccwpck_require__(7147)

function isexe (path, options, cb) {
  fs.stat(path, function (er, stat) {
    cb(er, er ? false : checkStat(stat, options))
  })
}

function sync (path, options) {
  return checkStat(fs.statSync(path), options)
}

function checkStat (stat, options) {
  return stat.isFile() && checkMode(stat, options)
}

function checkMode (stat, options) {
  var mod = stat.mode
  var uid = stat.uid
  var gid = stat.gid

  var myUid = options.uid !== undefined ?
    options.uid : process.getuid && process.getuid()
  var myGid = options.gid !== undefined ?
    options.gid : process.getgid && process.getgid()

  var u = parseInt('100', 8)
  var g = parseInt('010', 8)
  var o = parseInt('001', 8)
  var ug = u | g

  var ret = (mod & o) ||
    (mod & g) && gid === myGid ||
    (mod & u) && uid === myUid ||
    (mod & ug) && myUid === 0

  return ret
}


/***/ }),

/***/ 3138:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

module.exports = isexe
isexe.sync = sync

var fs = __nccwpck_require__(7147)

function checkPathExt (path, options) {
  var pathext = options.pathExt !== undefined ?
    options.pathExt : process.env.PATHEXT

  if (!pathext) {
    return true
  }

  pathext = pathext.split(';')
  if (pathext.indexOf('') !== -1) {
    return true
  }
  for (var i = 0; i < pathext.length; i++) {
    var p = pathext[i].toLowerCase()
    if (p && path.substr(-p.length).toLowerCase() === p) {
      return true
    }
  }
  return false
}

function checkStat (stat, path, options) {
  if (!stat.isSymbolicLink() && !stat.isFile()) {
    return false
  }
  return checkPathExt(path, options)
}

function isexe (path, options, cb) {
  fs.stat(path, function (er, stat) {
    cb(er, er ? false : checkStat(stat, path, options))
  })
}

function sync (path, options) {
  return checkStat(fs.statSync(path), path, options)
}


/***/ }),

/***/ 7416:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {


/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

module.exports = __nccwpck_require__(3545);


/***/ }),

/***/ 6529:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {


/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



const babylon = __nccwpck_require__(6899);

// These are the options that were the default of the Babel5 parse function
// see https://github.com/babel/babel/blob/5.x/packages/babel/src/api/node.js#L81
const options = {
  sourceType: 'module',
  allowHashBang: true,
  ecmaVersion: Infinity,
  allowImportExportEverywhere: true,
  allowReturnOutsideFunction: true,
  startLine: 1,
  tokens: true,
  plugins: [
    'estree',
    'jsx',
    'asyncGenerators',
    'classProperties',
    'doExpressions',
    'exportExtensions',
    'functionBind',
    'functionSent',
    'objectRestSpread',
    'dynamicImport',
    'nullishCoalescingOperator',
    'optionalChaining',
    ['decorators', {decoratorsBeforeExport: false}],
  ],
};

/**
 * Wrapper to set default options. Doesn't accept custom options because in that
 * case babylon should be used instead.
 */
module.exports = function() {
  return {
    parse(code) {
      return babylon.parse(code, options);
    },
  };
};


/***/ }),

/***/ 7892:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {


/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



const babylon = __nccwpck_require__(6899);

const defaultOptions = {
  sourceType: 'module',
  allowImportExportEverywhere: true,
  allowReturnOutsideFunction: true,
  startLine: 1,
  tokens: true,
  plugins: [
    ['flow', {all: true}],
    'flowComments',
    'jsx',

    'asyncGenerators',
    'bigInt',
    'classProperties',
    'classPrivateProperties',
    'classPrivateMethods',
    ['decorators', {decoratorsBeforeExport: false}],
    'doExpressions',
    'dynamicImport',
    'exportDefaultFrom',
    'exportNamespaceFrom',
    'functionBind',
    'functionSent',
    'importMeta',
    'logicalAssignment',
    'nullishCoalescingOperator',
    'numericSeparator',
    'objectRestSpread',
    'optionalCatchBinding',
    'optionalChaining',
    ['pipelineOperator', {proposal: 'minimal'}],
    'throwExpressions',
  ],
};

/**
 * Wrapper to set default options
 */
module.exports = function(options=defaultOptions) {
  return {
    parse(code) {
      return babylon.parse(code, options);
    },
  };
};


/***/ }),

/***/ 5522:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {


/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



const flowParser = __nccwpck_require__(702);

const defaultOptions = {
  enums: true,
  esproposal_class_instance_fields: true,
  esproposal_class_static_fields: true,
  esproposal_decorators: true,
  esproposal_export_star_as: true,
  esproposal_optional_chaining: true,
  esproposal_nullish_coalescing: true,
  tokens: true,
  types: true,
};

/**
 * Wrapper to set default options
 */
module.exports = function(options=defaultOptions) {
  return {
    parse(code) {
      return flowParser.parse(code, options);
    },
  };
};


/***/ }),

/***/ 3540:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {


/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



const babylon = __nccwpck_require__(6899);
const options = __nccwpck_require__(4351);

/**
 * Doesn't accept custom options because babylon should be used directly in
 * that case.
 */
module.exports = function() {
  return {
    parse(code) {
      return babylon.parse(code, options);
    },
  };
};


/***/ }),

/***/ 4351:
/***/ ((module) => {


/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



/**
 * Options shared by the TypeScript and TSX parsers.
 */
module.exports = {
  sourceType: 'module',
  allowImportExportEverywhere: true,
  allowReturnOutsideFunction: true,
  startLine: 1,
  tokens: true,
  plugins: [
    'asyncGenerators',
    'bigInt',
    'classPrivateMethods',
    'classPrivateProperties',
    'classProperties',
    'decorators-legacy',
    'doExpressions',
    'dynamicImport',
    'exportDefaultFrom',
    'exportExtensions',
    'exportNamespaceFrom',
    'functionBind',
    'functionSent',
    'importMeta',
    'nullishCoalescingOperator',
    'numericSeparator',
    'objectRestSpread',
    'optionalCatchBinding',
    'optionalChaining',
    ['pipelineOperator', { proposal: 'minimal' }],
    'throwExpressions',
    'typescript'
  ],
};


/***/ }),

/***/ 5545:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {


/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



const babylon = __nccwpck_require__(6899);
const baseOptions = __nccwpck_require__(4351);

const options = Object.assign({}, baseOptions);
options.plugins = ['jsx'].concat(baseOptions.plugins);

/**
 * Doesn't accept custom options because babylon should be used directly in
 * that case.
 */
module.exports = function() {
  return {
    parse(code) {
      return babylon.parse(code, options);
    },
  };
};


/***/ }),

/***/ 3647:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



const assert = __nccwpck_require__(9491);
const intersection = __nccwpck_require__(4970);
const recast = __nccwpck_require__(9684);
const union = __nccwpck_require__(9781);

const astTypes = recast.types;
var types = astTypes.namedTypes;
const NodePath = astTypes.NodePath;
const Node = types.Node;

/**
 * This represents a generic collection of node paths. It only has a generic
 * API to access and process the elements of the list. It doesn't know anything
 * about AST types.
 *
 * @mixes traversalMethods
 * @mixes mutationMethods
 * @mixes transformMethods
 * @mixes globalMethods
 */
class Collection {

  /**
   * @param {Array} paths An array of AST paths
   * @param {Collection} parent A parent collection
   * @param {Array} types An array of types all the paths in the collection
   *  have in common. If not passed, it will be inferred from the paths.
   * @return {Collection}
   */
  constructor(paths, parent, types) {
    assert.ok(Array.isArray(paths), 'Collection is passed an array');
    assert.ok(
      paths.every(p => p instanceof NodePath),
      'Array contains only paths'
    );
    this._parent = parent;
    this.__paths = paths;
    if (types && !Array.isArray(types)) {
      types = _toTypeArray(types);
    } else if (!types || Array.isArray(types) && types.length === 0) {
      types = _inferTypes(paths);
    }
    this._types = types.length === 0 ? _defaultType : types;
  }

  /**
   * Returns a new collection containing the nodes for which the callback
   * returns true.
   *
   * @param {function} callback
   * @return {Collection}
   */
  filter(callback) {
    return new this.constructor(this.__paths.filter(callback), this);
  }

  /**
   * Executes callback for each node/path in the collection.
   *
   * @param {function} callback
   * @return {Collection} The collection itself
   */
  forEach(callback) {
    this.__paths.forEach(
      (path, i, paths) => callback.call(path, path, i, paths)
    );
    return this;
  }

  /**
   * Tests whether at-least one path passes the test implemented by the provided callback.
   *
   * @param {function} callback
   * @return {boolean}
   */
  some(callback) {
    return this.__paths.some(
      (path, i, paths) => callback.call(path, path, i, paths)
    );
  }

  /**
   * Tests whether all paths pass the test implemented by the provided callback.
   *
   * @param {function} callback
   * @return {boolean}
   */
  every(callback) {
    return this.__paths.every(
      (path, i, paths) => callback.call(path, path, i, paths)
    );
  }

  /**
   * Executes the callback for every path in the collection and returns a new
   * collection from the return values (which must be paths).
   *
   * The callback can return null to indicate to exclude the element from the
   * new collection.
   *
   * If an array is returned, the array will be flattened into the result
   * collection.
   *
   * @param {function} callback
   * @param {Type} type Force the new collection to be of a specific type
   */
  map(callback, type) {
    const paths = [];
    this.forEach(function(path) {
      /*jshint eqnull:true*/
      let result = callback.apply(path, arguments);
      if (result == null) return;
      if (!Array.isArray(result)) {
        result = [result];
      }
      for (let i = 0; i < result.length; i++) {
        if (paths.indexOf(result[i]) === -1) {
          paths.push(result[i]);
        }
      }
    });
    return fromPaths(paths, this, type);
  }

  /**
   * Returns the number of elements in this collection.
   *
   * @return {number}
   */
  size() {
    return this.__paths.length;
  }

  /**
   * Returns the number of elements in this collection.
   *
   * @return {number}
   */
  get length() {
    return this.__paths.length;
  }

  /**
   * Returns an array of AST nodes in this collection.
   *
   * @return {Array}
   */
  nodes() {
    return this.__paths.map(p => p.value);
  }

  paths() {
    return this.__paths;
  }

  getAST() {
    if (this._parent) {
      return this._parent.getAST();
    }
    return this.__paths;
  }

  toSource(options) {
    if (this._parent) {
      return this._parent.toSource(options);
    }
    if (this.__paths.length === 1) {
      return recast.print(this.__paths[0], options).code;
    } else {
      return this.__paths.map(p => recast.print(p, options).code);
    }
  }

  /**
   * Returns a new collection containing only the element at position index.
   *
   * In case of a negative index, the element is taken from the end:
   *
   *   .at(0)  - first element
   *   .at(-1) - last element
   *
   * @param {number} index
   * @return {Collection}
   */
  at(index) {
    return fromPaths(
      this.__paths.slice(
        index,
        index === -1 ? undefined : index + 1
      ),
      this
    );
  }

  /**
   * Proxies to NodePath#get of the first path.
   *
   * @param {string|number} ...fields
   */
  get() {
    const path = this.__paths[0];
    if (!path) {
      throw Error(
        'You cannot call "get" on a collection with no paths. ' +
        'Instead, check the "length" property first to verify at least 1 path exists.'
      );
    }
    return path.get.apply(path, arguments);
  }

  /**
   * Returns the type(s) of the collection. This is only used for unit tests,
   * I don't think other consumers would need it.
   *
   * @return {Array<string>}
   */
  getTypes() {
    return this._types;
  }

  /**
   * Returns true if this collection has the type 'type'.
   *
   * @param {Type} type
   * @return {boolean}
   */
  isOfType(type) {
    return !!type && this._types.indexOf(type.toString()) > -1;
  }
}

/**
 * Given a set of paths, this infers the common types of all paths.
 * @private
 * @param {Array} paths An array of paths.
 * @return {Type} type An AST type
 */
function _inferTypes(paths) {
  let _types = [];

  if (paths.length > 0 && Node.check(paths[0].node)) {
    const nodeType = types[paths[0].node.type];
    const sameType = paths.length === 1 ||
      paths.every(path => nodeType.check(path.node));

    if (sameType) {
      _types = [nodeType.toString()].concat(
        astTypes.getSupertypeNames(nodeType.toString())
      );
    } else {
      // try to find a common type
      _types = intersection(
        paths.map(path => astTypes.getSupertypeNames(path.node.type))
      );
    }
  }

  return _types;
}

function _toTypeArray(value) {
  value = !Array.isArray(value) ? [value] : value;
  value = value.map(v => v.toString());
  if (value.length > 1) {
    return union(
      [value].concat(intersection(value.map(_getSupertypeNames)))
    );
  } else {
    return value.concat(_getSupertypeNames(value[0]));
  }
}

function _getSupertypeNames(type) {
  try {
    return astTypes.getSupertypeNames(type);
  } catch(error) {
    if (error.message === '') {
      // Likely the case that the passed type wasn't found in the definition
      // list. Maybe a typo. ast-types doesn't throw a useful error in that
      // case :(
      throw new Error(
        '"' + type + '" is not a known AST node type. Maybe a typo?'
      );
    }
    throw error;
  }
}

/**
 * Creates a new collection from an array of node paths.
 *
 * If type is passed, it will create a typed collection if such a collection
 * exists. The nodes or path values must be of the same type.
 *
 * Otherwise it will try to infer the type from the path list. If every
 * element has the same type, a typed collection is created (if it exists),
 * otherwise, a generic collection will be created.
 *
 * @ignore
 * @param {Array} paths An array of paths
 * @param {Collection} parent A parent collection
 * @param {Type} type An AST type
 * @return {Collection}
 */
function fromPaths(paths, parent, type) {
  assert.ok(
    paths.every(n => n instanceof NodePath),
    'Every element in the array should be a NodePath'
  );

  return new Collection(paths, parent, type);
}

/**
 * Creates a new collection from an array of nodes. This is a convenience
 * method which converts the nodes to node paths first and calls
 *
 *    Collections.fromPaths(paths, parent, type)
 *
 * @ignore
 * @param {Array} nodes An array of AST nodes
 * @param {Collection} parent A parent collection
 * @param {Type} type An AST type
 * @return {Collection}
 */
function fromNodes(nodes, parent, type) {
  assert.ok(
    nodes.every(n => Node.check(n)),
    'Every element in the array should be a Node'
  );
  return fromPaths(
    nodes.map(n => new NodePath(n)),
    parent,
    type
  );
}

const CPt = Collection.prototype;

/**
 * This function adds the provided methods to the prototype of the corresponding
 * typed collection. If no type is passed, the methods are added to
 * Collection.prototype and are available for all collections.
 *
 * @param {Object} methods Methods to add to the prototype
 * @param {Type=} type Optional type to add the methods to
 */
function registerMethods(methods, type) {
  for (const methodName in methods) {
    if (!methods.hasOwnProperty(methodName)) {
      return;
    }
    if (hasConflictingRegistration(methodName, type)) {
      let msg = `There is a conflicting registration for method with name "${methodName}".\nYou tried to register an additional method with `;

      if (type) {
        msg += `type "${type.toString()}".`
      } else {
        msg += 'universal type.'
      }

      msg += '\nThere are existing registrations for that method with ';

      const conflictingRegistrations = CPt[methodName].typedRegistrations;

      if (conflictingRegistrations) {
        msg += `type ${Object.keys(conflictingRegistrations).join(', ')}.`;
      } else {
        msg += 'universal type.';
      }

      throw Error(msg);
    }
    if (!type) {
      CPt[methodName] = methods[methodName];
    } else {
      type = type.toString();
      if (!CPt.hasOwnProperty(methodName)) {
        installTypedMethod(methodName);
      }
      var registrations = CPt[methodName].typedRegistrations;
      registrations[type] = methods[methodName];
      astTypes.getSupertypeNames(type).forEach(function (name) {
        registrations[name] = false;
      });
    }
  }
}

function installTypedMethod(methodName) {
  if (CPt.hasOwnProperty(methodName)) {
    throw new Error(`Internal Error: "${methodName}" method is already installed`);
  }

  const registrations = {};

  function typedMethod() {
    const types = Object.keys(registrations);

    for (let i = 0; i < types.length; i++) {
      const currentType = types[i];
      if (registrations[currentType] && this.isOfType(currentType)) {
        return registrations[currentType].apply(this, arguments);
      }
    }

    throw Error(
      `You have a collection of type [${this.getTypes()}]. ` +
      `"${methodName}" is only defined for one of [${types.join('|')}].`
    );
  }

  typedMethod.typedRegistrations = registrations;

  CPt[methodName] = typedMethod;
}

function hasConflictingRegistration(methodName, type) {
  if (!type) {
    return CPt.hasOwnProperty(methodName);
  }

  if (!CPt.hasOwnProperty(methodName)) {
    return false;
  }

  const registrations = CPt[methodName] && CPt[methodName].typedRegistrations;

  if (!registrations) {
    return true;
  }

  type = type.toString();

  if (registrations.hasOwnProperty(type)) {
    return true;
  }

  return astTypes.getSupertypeNames(type.toString()).some(function (name) {
    return !!registrations[name];
  });
}

var _defaultType = [];

/**
 * Sets the default collection type. In case a collection is created form an
 * empty set of paths and no type is specified, we return a collection of this
 * type.
 *
 * @ignore
 * @param {Type} type
 */
function setDefaultCollectionType(type) {
  _defaultType = _toTypeArray(type);
}

exports.fromPaths = fromPaths;
exports.fromNodes = fromNodes;
exports.registerMethods = registerMethods;
exports.hasConflictingRegistration = hasConflictingRegistration;
exports.setDefaultCollectionType = setDefaultCollectionType;


/***/ }),

/***/ 777:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



const Collection = __nccwpck_require__(3647);
const NodeCollection = __nccwpck_require__(6611);

const assert = __nccwpck_require__(9491);
const once = __nccwpck_require__(4025);
const recast = __nccwpck_require__(9684);
const requiresModule = (__nccwpck_require__(4600).filters.requiresModule);

const types = recast.types.namedTypes;
const JSXElement = types.JSXElement;
const JSXAttribute = types.JSXAttribute;
const Literal = types.Literal;

/**
 * Contains filter methods and mutation methods for processing JSXElements.
 * @mixin
 */
const globalMethods = {
  /**
   * Finds all JSXElements optionally filtered by name
   *
   * @param {string} name
   * @return {Collection}
   */
  findJSXElements: function(name) {
    const nameFilter = name && {openingElement: {name: {name: name}}};
    return this.find(JSXElement, nameFilter);
  },

  /**
   * Finds all JSXElements by module name. Given
   *
   *     var Bar = require('Foo');
   *     <Bar />
   *
   * findJSXElementsByModuleName('Foo') will find <Bar />, without having to
   * know the variable name.
   */
  findJSXElementsByModuleName: function(moduleName) {
    assert.ok(
      moduleName && typeof moduleName === 'string',
      'findJSXElementsByModuleName(...) needs a name to look for'
    );

    return this.find(types.VariableDeclarator)
      .filter(requiresModule(moduleName))
      .map(function(path) {
        const id = path.value.id.name;
        if (id) {
          return Collection.fromPaths([path])
            .closestScope()
            .findJSXElements(id)
            .paths();
        }
      });
  }
};

const filterMethods = {

  /**
   * Filter method for attributes.
   *
   * @param {Object} attributeFilter
   * @return {function}
   */
  hasAttributes: function(attributeFilter) {
    const attributeNames = Object.keys(attributeFilter);
    return function filter(path) {
      if (!JSXElement.check(path.value)) {
        return false;
      }
      const elementAttributes = Object.create(null);
      path.value.openingElement.attributes.forEach(function(attr) {
        if (!JSXAttribute.check(attr) ||
          !(attr.name.name in attributeFilter)) {
          return;
        }
        elementAttributes[attr.name.name] = attr;
      });

      return attributeNames.every(function(name) {
        if (!(name in elementAttributes) ){
          return false;
        }

        const value = elementAttributes[name].value;
        const expected = attributeFilter[name];

        // Only when value is truthy access it's properties
        const actual = !value
          ? value
          : Literal.check(value)
          ? value.value
          : value.expression;

        if (typeof expected === 'function') {
          return expected(actual);
        }

         // Literal attribute values are always strings
        return String(expected) === actual;
      });
    };
  },

  /**
   * Filter elements which contain a specific child type
   *
   * @param {string} name
   * @return {function}
   */
  hasChildren: function(name) {
    return function filter(path) {
      return JSXElement.check(path.value) &&
        path.value.children.some(
          child => JSXElement.check(child) &&
                   child.openingElement.name.name === name
        );
    };
  }
};

/**
* @mixin
*/
const traversalMethods = {

  /**
   * Returns all child nodes, including literals and expressions.
   *
   * @return {Collection}
   */
  childNodes: function() {
    const paths = [];
    this.forEach(function(path) {
      const children = path.get('children');
      const l = children.value.length;
      for (let i = 0; i < l; i++) {
        paths.push(children.get(i));
      }
    });
    return Collection.fromPaths(paths, this);
  },

  /**
   * Returns all children that are JSXElements.
   *
   * @return {JSXElementCollection}
   */
  childElements: function() {
    const paths = [];
    this.forEach(function(path) {
      const children = path.get('children');
      const l = children.value.length;
      for (let i = 0; i < l; i++) {
        if (types.JSXElement.check(children.value[i])) {
          paths.push(children.get(i));
        }
      }
    });
    return Collection.fromPaths(paths, this, JSXElement);
  },

  /**
   * Returns all children that are of jsxElementType.
   *
   * @return {Collection<jsxElementType>}
   */
  childNodesOfType: function(jsxChildElementType) {
    const paths = [];
    this.forEach(function(path) {
      const children = path.get('children');
      const l = children.value.length;
      for (let i = 0; i < l; i++) {
        if (jsxChildElementType.check(children.value[i])) {
          paths.push(children.get(i));
        }
      }
    });
    return Collection.fromPaths(paths, this, jsxChildElementType);
  },
};

const mappingMethods = {
  /**
   * Given a JSXElement, returns its "root" name. E.g. it would return "Foo" for
   * both <Foo /> and <Foo.Bar />.
   *
   * @param {NodePath} path
   * @return {string}
   */
  getRootName: function(path) {
    let name = path.value.openingElement.name;
    while (types.JSXMemberExpression.check(name)) {
      name = name.object;
    }

    return name && name.name || null;
  }
};

function register() {
  NodeCollection.register();
  Collection.registerMethods(globalMethods, types.Node);
  Collection.registerMethods(traversalMethods, JSXElement);
}

exports.register = once(register);
exports.filters = filterMethods;
exports.mappings = mappingMethods;


/***/ }),

/***/ 6611:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



const Collection = __nccwpck_require__(3647);

const matchNode = __nccwpck_require__(3949);
const once = __nccwpck_require__(4025);
const recast = __nccwpck_require__(9684);

const Node = recast.types.namedTypes.Node;
var types = recast.types.namedTypes;

/**
* @mixin
*/
const traversalMethods = {

  /**
   * Find nodes of a specific type within the nodes of this collection.
   *
   * @param {type}
   * @param {filter}
   * @return {Collection}
   */
  find: function(type, filter) {
    const paths = [];
    const visitorMethodName = 'visit' + type;

    const visitor = {};
    function visit(path) {
      /*jshint validthis:true */
      if (!filter || matchNode(path.value, filter)) {
        paths.push(path);
      }
      this.traverse(path);
    }
    this.__paths.forEach(function(p, i) {
      const self = this;
      visitor[visitorMethodName] = function(path) {
        if (self.__paths[i] === path) {
          this.traverse(path);
        } else {
          return visit.call(this, path);
        }
      };
      recast.visit(p, visitor);
    }, this);

    return Collection.fromPaths(paths, this, type);
  },

  /**
   * Returns a collection containing the paths that create the scope of the
   * currently selected paths. Dedupes the paths.
   *
   * @return {Collection}
   */
  closestScope: function() {
    return this.map(path => path.scope && path.scope.path);
  },

  /**
   * Traverse the AST up and finds the closest node of the provided type.
   *
   * @param {Collection}
   * @param {filter}
   * @return {Collection}
   */
  closest: function(type, filter) {
    return this.map(function(path) {
      let parent = path.parent;
      while (
        parent &&
        !(
          type.check(parent.value) &&
          (!filter || matchNode(parent.value, filter))
        )
      ) {
        parent = parent.parent;
      }
      return parent || null;
    });
  },

  /**
   * Finds the declaration for each selected path. Useful for member expressions
   * or JSXElements. Expects a callback function that maps each path to the name
   * to look for.
   *
   * If the callback returns a falsey value, the element is skipped.
   *
   * @param {function} nameGetter
   *
   * @return {Collection}
   */
  getVariableDeclarators: function(nameGetter) {
    return this.map(function(path) {
      /*jshint curly:false*/
      let scope = path.scope;
      if (!scope) return;
      const name = nameGetter.apply(path, arguments);
      if (!name) return;
      scope = scope.lookup(name);
      if (!scope) return;
      const bindings = scope.getBindings()[name];
      if (!bindings) return;
      const decl = Collection.fromPaths(bindings)
        .closest(types.VariableDeclarator);
      if (decl.length === 1) {
        return decl.paths()[0];
      }
    }, types.VariableDeclarator);
  },
};

function toArray(value) {
  return Array.isArray(value) ? value : [value];
}

/**
* @mixin
*/
const mutationMethods = {
  /**
   * Simply replaces the selected nodes with the provided node. If a function
   * is provided it is executed for every node and the node is replaced with the
   * functions return value.
   *
   * @param {Node|Array<Node>|function} nodes
   * @return {Collection}
   */
  replaceWith: function(nodes) {
    return this.forEach(function(path, i) {
      const newNodes =
        (typeof nodes === 'function') ? nodes.call(path, path, i) : nodes;
      path.replace.apply(path, toArray(newNodes));
    });
  },

  /**
   * Inserts a new node before the current one.
   *
   * @param {Node|Array<Node>|function} insert
   * @return {Collection}
   */
  insertBefore: function(insert) {
    return this.forEach(function(path, i) {
      const newNodes =
        (typeof insert === 'function') ? insert.call(path, path, i) : insert;
      path.insertBefore.apply(path, toArray(newNodes));
    });
  },

  /**
   * Inserts a new node after the current one.
   *
   * @param {Node|Array<Node>|function} insert
   * @return {Collection}
   */
  insertAfter: function(insert) {
    return this.forEach(function(path, i) {
      const newNodes =
        (typeof insert === 'function') ? insert.call(path, path, i) : insert;
      path.insertAfter.apply(path, toArray(newNodes));
    });
  },

  remove: function() {
    return this.forEach(path => path.prune());
  }

};

function register() {
  Collection.registerMethods(traversalMethods, Node);
  Collection.registerMethods(mutationMethods, Node);
  Collection.setDefaultCollectionType(Node);
}

exports.register = once(register);


/***/ }),

/***/ 4600:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



const Collection = __nccwpck_require__(3647);
const NodeCollection = __nccwpck_require__(6611);
const once = __nccwpck_require__(4025);
const recast = __nccwpck_require__(9684);

const astNodesAreEquivalent = recast.types.astNodesAreEquivalent;
const b = recast.types.builders;
var types = recast.types.namedTypes;

const VariableDeclarator = recast.types.namedTypes.VariableDeclarator;

/**
* @mixin
*/
const globalMethods = {
  /**
   * Finds all variable declarators, optionally filtered by name.
   *
   * @param {string} name
   * @return {Collection}
   */
  findVariableDeclarators: function(name) {
    const filter = name ? {id: {name: name}} : null;
    return this.find(VariableDeclarator, filter);
  }
};

const filterMethods = {
  /**
   * Returns a function that returns true if the provided path is a variable
   * declarator and requires one of the specified module names.
   *
   * @param {string|Array} names A module name or an array of module names
   * @return {Function}
   */
  requiresModule: function(names) {
    if (names && !Array.isArray(names)) {
      names = [names];
    }
    const requireIdentifier = b.identifier('require');
    return function(path) {
      const node = path.value;
      if (!VariableDeclarator.check(node) ||
          !types.CallExpression.check(node.init) ||
          !astNodesAreEquivalent(node.init.callee, requireIdentifier)) {
        return false;
      }
      return !names ||
        names.some(
          n => astNodesAreEquivalent(node.init.arguments[0], b.literal(n))
        );
    };
  }
};

/**
* @mixin
*/
const transformMethods = {
  /**
   * Renames a variable and all its occurrences.
   *
   * @param {string} newName
   * @return {Collection}
   */
  renameTo: function(newName) {
    // TODO: Include JSXElements
    return this.forEach(function(path) {
      const node = path.value;
      const oldName = node.id.name;
      const rootScope = path.scope;
      const rootPath = rootScope.path;
      Collection.fromPaths([rootPath])
        .find(types.Identifier, {name: oldName})
        .filter(function(path) { // ignore non-variables
          const parent = path.parent.node;

          if (
            types.MemberExpression.check(parent) &&
            parent.property === path.node &&
            !parent.computed
          ) {
            // obj.oldName
            return false;
          }

          if (
            types.Property.check(parent) &&
            parent.key === path.node &&
            !parent.computed
          ) {
            // { oldName: 3 }
            return false;
          }

          if (
            types.ObjectProperty.check(parent) &&
            parent.key === path.node &&
            !parent.computed
          ) {
            // { oldName: 3 }
            return false;
          }

          if (
            types.ObjectMethod.check(parent) &&
            parent.key === path.node &&
            !parent.computed
          ) {
            // { oldName() {} }
            return false;
          }

          if (
            types.MethodDefinition.check(parent) &&
            parent.key === path.node &&
            !parent.computed
          ) {
            // class A { oldName() {} }
            return false;
          }

          if (
            types.ClassMethod.check(parent) &&
            parent.key === path.node &&
            !parent.computed
          ) {
            // class A { oldName() {} }
            return false;
          }

          if (
            types.ClassProperty.check(parent) &&
            parent.key === path.node &&
            !parent.computed
          ) {
            // class A { oldName = 3 }
            return false;
          }

          if (
            types.JSXAttribute.check(parent) &&
            parent.name === path.node &&
            !parent.computed
          ) {
            // <Foo oldName={oldName} />
            return false;
          }

          return true;
        })
        .forEach(function(path) {
          let scope = path.scope;
          while (scope && scope !== rootScope) {
            if (scope.declares(oldName)) {
              return;
            }
            scope = scope.parent;
          }
          if (scope) { // identifier must refer to declared variable

            // It may look like we filtered out properties,
            // but the filter only ignored property "keys", not "value"s
            // In shorthand properties, "key" and "value" both have an
            // Identifier with the same structure.
            const parent = path.parent.node;
            if (
              types.Property.check(parent) &&
              parent.shorthand &&
              !parent.method
            )  {

              path.parent.get('shorthand').replace(false);
            }

            path.get('name').replace(newName);
          }
        });
    });
  }
};


function register() {
  NodeCollection.register();
  Collection.registerMethods(globalMethods);
  Collection.registerMethods(transformMethods, VariableDeclarator);
}

exports.register = once(register);
exports.filters = filterMethods;


/***/ }),

/***/ 9846:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {


/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

module.exports = {
  Node: __nccwpck_require__(6611),
  JSXElement: __nccwpck_require__(777),
  VariableDeclarator: __nccwpck_require__(4600),
};


/***/ }),

/***/ 3545:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {


/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


const Collection = __nccwpck_require__(3647);

const collections = __nccwpck_require__(9846);
const getParser = __nccwpck_require__(5033);
const matchNode = __nccwpck_require__(3949);
const recast = __nccwpck_require__(9684);
const template = __nccwpck_require__(7275);

const Node = recast.types.namedTypes.Node;
const NodePath = recast.types.NodePath;

// Register all built-in collections
for (var name in collections) {
  collections[name].register();
}

/**
 * Main entry point to the tool. The function accepts multiple different kinds
 * of arguments as a convenience. In particular the function accepts either
 *
 * - a string containing source code
 *   The string is parsed with Recast
 * - a single AST node
 * - a single node path
 * - an array of nodes
 * - an array of node paths
 *
 * @exports jscodeshift
 * @param {Node|NodePath|Array|string} source
 * @param {Object} options Options to pass to Recast when passing source code
 * @return {Collection}
 */
function core(source, options) {
  return typeof source === 'string' ?
    fromSource(source, options) :
    fromAST(source);
}

/**
 * Returns a collection from a node, node path, array of nodes or array of node
 * paths.
 *
 * @ignore
 * @param {Node|NodePath|Array} source
 * @return {Collection}
 */
function fromAST(ast) {
  if (Array.isArray(ast)) {
    if (ast[0] instanceof NodePath || ast.length === 0) {
      return Collection.fromPaths(ast);
    } else if (Node.check(ast[0])) {
      return Collection.fromNodes(ast);
    }
  } else {
    if (ast instanceof NodePath) {
      return Collection.fromPaths([ast]);
    } else if (Node.check(ast)) {
      return Collection.fromNodes([ast]);
    }
  }
  throw new TypeError(
    'Received an unexpected value ' + Object.prototype.toString.call(ast)
  );
}

function fromSource(source, options) {
  if (!options) {
    options = {};
  }
  if (!options.parser) {
    options.parser = getParser();
  }
  return fromAST(recast.parse(source, options));
}

/**
 * Utility function to match a node against a pattern.
 * @augments core
 * @static
 * @param {Node|NodePath|Object} path
 * @parma {Object} filter
 * @return boolean
 */
function match(path, filter) {
  if (!(path instanceof NodePath)) {
    if (typeof path.get === 'function') {
      path = path.get();
    } else {
      path = {value: path};
    }
  }
  return matchNode(path.value, filter);
}

const plugins = [];

/**
 * Utility function for registering plugins.
 *
 * Plugins are simple functions that are passed the core jscodeshift instance.
 * They should extend jscodeshift by calling `registerMethods`, etc.
 * This method guards against repeated registrations (the plugin callback will only be called once).
 *
 * @augments core
 * @static
 * @param {Function} plugin
 */
function use(plugin) {
  if (plugins.indexOf(plugin) === -1) {
    plugins.push(plugin);
    plugin(core);
  }
}

/**
 * Returns a version of the core jscodeshift function "bound" to a specific
 * parser.
 *
 * @augments core
 * @static
 */
function withParser(parser) {
  if (typeof parser === 'string') {
    parser = getParser(parser);
  }

  const newCore = function(source, options) {
    if (options && !options.parser) {
      options.parser = parser;
    } else {
      options = {parser};
    }
    return core(source, options);
  };

  return enrichCore(newCore, parser);
}

/**
* The ast-types library
* @external astTypes
* @see {@link https://github.com/benjamn/ast-types}
*/

function enrichCore(core, parser) {
  // add builders and types to the function for simple access
  Object.assign(core, recast.types.namedTypes);
  Object.assign(core, recast.types.builders);
  core.registerMethods = Collection.registerMethods;
  /**
  * @augments core
  * @type external:astTypes
  */
  core.types = recast.types;
  core.match = match;
  core.template = template(parser);

  // add mappings and filters to function
  core.filters = {};
  core.mappings = {};
  for (const name in collections) {
    if (collections[name].filters) {
      core.filters[name] = collections[name].filters;
    }
    if (collections[name].mappings) {
      core.mappings[name] = collections[name].mappings;
    }
  }
  core.use = use;
  core.withParser = withParser;
  return core;
}

module.exports = enrichCore(core, getParser());


/***/ }),

/***/ 5033:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {


/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



module.exports = function getParser(parserName, options) {
  switch (parserName) {
    case 'babylon':
      return __nccwpck_require__(7892)(options);
    case 'flow':
      return __nccwpck_require__(5522)(options);
    case 'ts':
      return __nccwpck_require__(3540)(options);
    case 'tsx':
      return __nccwpck_require__(5545)(options);
    case 'babel':
    default:
      return __nccwpck_require__(6529)(options);
  }
};


/***/ }),

/***/ 3949:
/***/ ((module) => {


/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



const hasOwn =
  Object.prototype.hasOwnProperty.call.bind(Object.prototype.hasOwnProperty);

/**
 * Checks whether needle is a strict subset of haystack.
 *
 * @param {*} haystack Value to test.
 * @param {*} needle Test function or value to look for in `haystack`.
 * @return {bool}
 */
function matchNode(haystack, needle) {
  if (typeof needle === 'function') {
    return needle(haystack);
  }
  if (isNode(needle) && isNode(haystack)) {
    return Object.keys(needle).every(function(property) {
      return (
        hasOwn(haystack, property) &&
        matchNode(haystack[property], needle[property])
      );
    });
  }
  return haystack === needle;
}

function isNode(value) {
  return typeof value === 'object' && value;
}

module.exports = matchNode;


/***/ }),

/***/ 7275:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {


/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



const recast = __nccwpck_require__(9684);

const builders = recast.types.builders;
const types = recast.types.namedTypes;

function splice(arr, element, replacement) {
  arr.splice.apply(arr, [arr.indexOf(element), 1].concat(replacement));
}

function cleanLocation(node) {
  delete node.start;
  delete node.end;
  delete node.loc;
  return node;
}

function ensureStatement(node) {
  return types.Statement.check(node) ?
    // Removing the location information seems to ensure that the node is
    // correctly reprinted with a trailing semicolon
    cleanLocation(node) :
    builders.expressionStatement(node);
}

function getVistor(varNames, nodes) {
  return {
    visitIdentifier: function(path) {
      this.traverse(path);
      const node = path.node;
      const parent = path.parent.node;

      // If this identifier is not one of our generated ones, do nothing
      const varIndex = varNames.indexOf(node.name);
      if (varIndex === -1) {
        return;
      }

      let replacement = nodes[varIndex];
      nodes[varIndex] = null;

      // If the replacement is an array, we need to explode the nodes in context
      if (Array.isArray(replacement)) {

        if (types.Function.check(parent) &&
            parent.params.indexOf(node) > -1) {
          // Function parameters: function foo(${bar}) {}
          splice(parent.params, node, replacement);
        } else if (types.VariableDeclarator.check(parent)) {
          // Variable declarations: var foo = ${bar}, baz = 42;
          splice(
            path.parent.parent.node.declarations,
            parent,
            replacement
          );
        } else if (types.ArrayExpression.check(parent)) {
          // Arrays: var foo = [${bar}, baz];
          splice(parent.elements, node, replacement);
        } else if (types.Property.check(parent) && parent.shorthand) {
          // Objects: var foo = {${bar}, baz: 42};
          splice(
            path.parent.parent.node.properties,
            parent,
            replacement
          );
        } else if (types.CallExpression.check(parent) &&
            parent.arguments.indexOf(node) > -1) {
          // Function call arguments: foo(${bar}, baz)
          splice(parent.arguments, node, replacement);
        } else if (types.ExpressionStatement.check(parent)) {
          // Generic sequence of statements: { ${foo}; bar; }
          path.parent.replace.apply(
            path.parent,
            replacement.map(ensureStatement)
          );
        } else {
          // Every else, let recast take care of it
          path.replace.apply(path, replacement);
        }
      } else if (types.ExpressionStatement.check(parent)) {
        path.parent.replace(ensureStatement(replacement));
      } else {
        path.replace(replacement);
      }
    }
  };
}

function replaceNodes(src, varNames, nodes, parser) {
  const ast = recast.parse(src, {parser});
  recast.visit(ast, getVistor(varNames, nodes));
  return ast;
}

let varNameCounter = 0;
function getUniqueVarName() {
  return `$jscodeshift${varNameCounter++}$`;
}


module.exports = function withParser(parser) {
  function statements(template/*, ...nodes*/) {
    template = Array.from(template);
    const nodes = Array.from(arguments).slice(1);
    const varNames = nodes.map(() => getUniqueVarName());
    const src = template.reduce(
      (result, elem, i) => result + varNames[i - 1] + elem
    );

    return replaceNodes(
      src,
      varNames,
      nodes,
      parser
    ).program.body;
  }

  function statement(/*template, ...nodes*/) {
    return statements.apply(null, arguments)[0];
  }

  function expression(template/*, ...nodes*/) {
    // wrap code in `(...)` to force evaluation as expression
    template = Array.from(template);
    if (template.length > 0) {
      template[0] = '(' + template[0];
      template[template.length - 1] += ')';
    }

    const expression = statement.apply(
      null,
      [template].concat(Array.from(arguments).slice(1))
    ).expression;

    // Remove added parens
    if (expression.extra) {
      expression.extra.parenthesized = false;
    }

    return expression;
  }

  function asyncExpression(template/*, ...nodes*/) {
    template = Array.from(template);
    if (template.length > 0) {
      template[0] = 'async () => (' + template[0];
      template[template.length - 1] += ')';
    }

    const expression = statement.apply(
      null,
      [template].concat(Array.from(arguments).slice(1))
    ).expression.body;

    // Remove added parens
    if (expression.extra) {
      expression.extra.parenthesized = false;
    }

    return expression;
  }

  return {statements, statement, expression, asyncExpression};
}


/***/ }),

/***/ 4970:
/***/ ((module) => {

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

module.exports = function(arrays) {
  const result = new Set(arrays[0]);
  let resultSize = result.length;

  let i, value, valuesToCheck;
  for (i = 1; i < arrays.length; i++) {
    valuesToCheck = new Set(arrays[i]);
    for (value of result) {
      if (!valuesToCheck.has(value)) {
        result.delete(value);
        resultSize -= 1;
      }
      if (resultSize === 0) {
        return [];
      }
    }
  }

  return Array.from(result);
};


/***/ }),

/***/ 4025:
/***/ ((module) => {

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * This replicates lodash's once functionality for our purposes.
 */
module.exports = function(func) {
  let called = false;
  let result;
  return function(...args) {
    if (called) {
      return result;
    }
    called = true;
    return result = func.apply(this, args);
  };
};


/***/ }),

/***/ 9781:
/***/ ((module) => {

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

module.exports = function(arrays) {
  const result = new Set(arrays[0]);

  let i,j, array;
  for (i = 1; i < arrays.length; i++) {
    array = arrays[i];
    for (j = 0; j < array.length; j++) {
      result.add(array[j]);
    }
  }

  return Array.from(result);
};


/***/ }),

/***/ 7256:
/***/ ((module) => {

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]';

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object),
    nativeMax = Math.max;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  // Safari 9 makes `arguments.length` enumerable in strict mode.
  var result = (isArray(value) || isArguments(value))
    ? baseTimes(value.length, String)
    : [];

  var length = result.length,
      skipIndexes = !!length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    object[key] = value;
  }
}

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = array;
    return apply(func, this, otherArgs);
  };
}

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    assignValue(object, key, newValue === undefined ? source[key] : newValue);
  }
  return object;
}

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return baseRest(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq(object[index], value);
  }
  return false;
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * This method is like `_.assign` except that it accepts `customizer`
 * which is invoked to produce the assigned values. If `customizer` returns
 * `undefined`, assignment is handled by the method instead. The `customizer`
 * is invoked with five arguments: (objValue, srcValue, key, object, source).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} sources The source objects.
 * @param {Function} [customizer] The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @see _.assignInWith
 * @example
 *
 * function customizer(objValue, srcValue) {
 *   return _.isUndefined(objValue) ? srcValue : objValue;
 * }
 *
 * var defaults = _.partialRight(_.assignWith, customizer);
 *
 * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
 * // => { 'a': 1, 'b': 2 }
 */
var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
  copyObject(source, keys(source), object, customizer);
});

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = assignWith;


/***/ }),

/***/ 3807:
/***/ ((module) => {

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/** Used to match words composed of alphanumeric characters. */
var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

/** Used to match Latin Unicode letters (excluding mathematical operators). */
var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
    rsComboSymbolsRange = '\\u20d0-\\u20f0',
    rsDingbatRange = '\\u2700-\\u27bf',
    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
    rsPunctuationRange = '\\u2000-\\u206f',
    rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
    rsVarRange = '\\ufe0e\\ufe0f',
    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

/** Used to compose unicode capture groups. */
var rsApos = "['\u2019]",
    rsAstral = '[' + rsAstralRange + ']',
    rsBreak = '[' + rsBreakRange + ']',
    rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
    rsDigits = '\\d+',
    rsDingbat = '[' + rsDingbatRange + ']',
    rsLower = '[' + rsLowerRange + ']',
    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsUpper = '[' + rsUpperRange + ']',
    rsZWJ = '\\u200d';

/** Used to compose unicode regexes. */
var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',
    rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',
    rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
    rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
    reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

/** Used to match apostrophes. */
var reApos = RegExp(rsApos, 'g');

/**
 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
 */
var reComboMark = RegExp(rsCombo, 'g');

/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

/** Used to match complex or compound words. */
var reUnicodeWord = RegExp([
  rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
  rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',
  rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr,
  rsUpper + '+' + rsOptUpperContr,
  rsDigits,
  rsEmoji
].join('|'), 'g');

/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');

/** Used to detect strings that need a more robust regexp to match words. */
var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

/** Used to map Latin Unicode letters to basic Latin letters. */
var deburredLetters = {
  // Latin-1 Supplement block.
  '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
  '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
  '\xc7': 'C',  '\xe7': 'c',
  '\xd0': 'D',  '\xf0': 'd',
  '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
  '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
  '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
  '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
  '\xd1': 'N',  '\xf1': 'n',
  '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
  '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
  '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
  '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
  '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
  '\xc6': 'Ae', '\xe6': 'ae',
  '\xde': 'Th', '\xfe': 'th',
  '\xdf': 'ss',
  // Latin Extended-A block.
  '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
  '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
  '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
  '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
  '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
  '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
  '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
  '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
  '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
  '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
  '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
  '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
  '\u0134': 'J',  '\u0135': 'j',
  '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
  '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
  '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
  '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
  '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
  '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
  '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
  '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
  '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
  '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
  '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
  '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
  '\u0163': 't',  '\u0165': 't', '\u0167': 't',
  '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
  '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
  '\u0174': 'W',  '\u0175': 'w',
  '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
  '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
  '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
  '\u0132': 'IJ', '\u0133': 'ij',
  '\u0152': 'Oe', '\u0153': 'oe',
  '\u0149': "'n", '\u017f': 'ss'
};

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array ? array.length : 0;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function asciiToArray(string) {
  return string.split('');
}

/**
 * Splits an ASCII `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */
function asciiWords(string) {
  return string.match(reAsciiWord) || [];
}

/**
 * The base implementation of `_.propertyOf` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyOf(object) {
  return function(key) {
    return object == null ? undefined : object[key];
  };
}

/**
 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
 * letters to basic Latin letters.
 *
 * @private
 * @param {string} letter The matched letter to deburr.
 * @returns {string} Returns the deburred letter.
 */
var deburrLetter = basePropertyOf(deburredLetters);

/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */
function hasUnicode(string) {
  return reHasUnicode.test(string);
}

/**
 * Checks if `string` contains a word composed of Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a word is found, else `false`.
 */
function hasUnicodeWord(string) {
  return reHasUnicodeWord.test(string);
}

/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function stringToArray(string) {
  return hasUnicode(string)
    ? unicodeToArray(string)
    : asciiToArray(string);
}

/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function unicodeToArray(string) {
  return string.match(reUnicode) || [];
}

/**
 * Splits a Unicode `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */
function unicodeWords(string) {
  return string.match(reUnicodeWord) || [];
}

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Built-in value references. */
var Symbol = root.Symbol;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : (length + start);
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : ((end - start) >>> 0);
  start >>>= 0;

  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Casts `array` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */
function castSlice(array, start, end) {
  var length = array.length;
  end = end === undefined ? length : end;
  return (!start && end >= length) ? array : baseSlice(array, start, end);
}

/**
 * Creates a function like `_.lowerFirst`.
 *
 * @private
 * @param {string} methodName The name of the `String` case method to use.
 * @returns {Function} Returns the new case function.
 */
function createCaseFirst(methodName) {
  return function(string) {
    string = toString(string);

    var strSymbols = hasUnicode(string)
      ? stringToArray(string)
      : undefined;

    var chr = strSymbols
      ? strSymbols[0]
      : string.charAt(0);

    var trailing = strSymbols
      ? castSlice(strSymbols, 1).join('')
      : string.slice(1);

    return chr[methodName]() + trailing;
  };
}

/**
 * Creates a function like `_.camelCase`.
 *
 * @private
 * @param {Function} callback The function to combine each word.
 * @returns {Function} Returns the new compounder function.
 */
function createCompounder(callback) {
  return function(string) {
    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
  };
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

/**
 * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the camel cased string.
 * @example
 *
 * _.camelCase('Foo Bar');
 * // => 'fooBar'
 *
 * _.camelCase('--foo-bar--');
 * // => 'fooBar'
 *
 * _.camelCase('__FOO_BAR__');
 * // => 'fooBar'
 */
var camelCase = createCompounder(function(result, word, index) {
  word = word.toLowerCase();
  return result + (index ? capitalize(word) : word);
});

/**
 * Converts the first character of `string` to upper case and the remaining
 * to lower case.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to capitalize.
 * @returns {string} Returns the capitalized string.
 * @example
 *
 * _.capitalize('FRED');
 * // => 'Fred'
 */
function capitalize(string) {
  return upperFirst(toString(string).toLowerCase());
}

/**
 * Deburrs `string` by converting
 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
 * letters to basic Latin letters and removing
 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to deburr.
 * @returns {string} Returns the deburred string.
 * @example
 *
 * _.deburr('déjà vu');
 * // => 'deja vu'
 */
function deburr(string) {
  string = toString(string);
  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
}

/**
 * Converts the first character of `string` to upper case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.upperFirst('fred');
 * // => 'Fred'
 *
 * _.upperFirst('FRED');
 * // => 'FRED'
 */
var upperFirst = createCaseFirst('toUpperCase');

/**
 * Splits `string` into an array of its words.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {RegExp|string} [pattern] The pattern to match words.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the words of `string`.
 * @example
 *
 * _.words('fred, barney, & pebbles');
 * // => ['fred', 'barney', 'pebbles']
 *
 * _.words('fred, barney, & pebbles', /[^, ]+/g);
 * // => ['fred', 'barney', '&', 'pebbles']
 */
function words(string, pattern, guard) {
  string = toString(string);
  pattern = guard ? undefined : pattern;

  if (pattern === undefined) {
    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
  }
  return string.match(pattern) || [];
}

module.exports = camelCase;


/***/ }),

/***/ 1083:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {



const { PassThrough } = __nccwpck_require__(2781);

module.exports = function (/*streams...*/) {
  var sources = []
  var output  = new PassThrough({objectMode: true})

  output.setMaxListeners(0)

  output.add = add
  output.isEmpty = isEmpty

  output.on('unpipe', remove)

  Array.prototype.slice.call(arguments).forEach(add)

  return output

  function add (source) {
    if (Array.isArray(source)) {
      source.forEach(add)
      return this
    }

    sources.push(source);
    source.once('end', remove.bind(null, source))
    source.once('error', output.emit.bind(output, 'error'))
    source.pipe(output, {end: false})
    return this
  }

  function isEmpty () {
    return sources.length == 0;
  }

  function remove (source) {
    sources = sources.filter(function (it) { return it !== source })
    if (!sources.length && output.readable) { output.end() }
  }
}


/***/ }),

/***/ 154:
/***/ ((module) => {



const pathKey = (options = {}) => {
	const environment = options.env || process.env;
	const platform = options.platform || process.platform;

	if (platform !== 'win32') {
		return 'PATH';
	}

	return Object.keys(environment).reverse().find(key => key.toUpperCase() === 'PATH') || 'Path';
};

module.exports = pathKey;
// TODO: Remove this for the next major release
module.exports["default"] = pathKey;


/***/ }),

/***/ 5478:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.printComments = exports.attach = void 0;
var tslib_1 = __nccwpck_require__(204);
var assert_1 = tslib_1.__importDefault(__nccwpck_require__(9491));
var types = tslib_1.__importStar(__nccwpck_require__(6587));
var n = types.namedTypes;
var isArray = types.builtInTypes.array;
var isObject = types.builtInTypes.object;
var lines_1 = __nccwpck_require__(1942);
var util_1 = __nccwpck_require__(8704);
var childNodesCache = new WeakMap();
// TODO Move a non-caching implementation of this function into ast-types,
// and implement a caching wrapper function here.
function getSortedChildNodes(node, lines, resultArray) {
    if (!node) {
        return resultArray;
    }
    // The .loc checks below are sensitive to some of the problems that
    // are fixed by this utility function. Specifically, if it decides to
    // set node.loc to null, indicating that the node's .loc information
    // is unreliable, then we don't want to add node to the resultArray.
    (0, util_1.fixFaultyLocations)(node, lines);
    if (resultArray) {
        if (n.Node.check(node) && n.SourceLocation.check(node.loc)) {
            // This reverse insertion sort almost always takes constant
            // time because we almost always (maybe always?) append the
            // nodes in order anyway.
            var i = resultArray.length - 1;
            for (; i >= 0; --i) {
                var child = resultArray[i];
                if (child &&
                    child.loc &&
                    (0, util_1.comparePos)(child.loc.end, node.loc.start) <= 0) {
                    break;
                }
            }
            resultArray.splice(i + 1, 0, node);
            return resultArray;
        }
    }
    else {
        var childNodes = childNodesCache.get(node);
        if (childNodes) {
            return childNodes;
        }
    }
    var names;
    if (isArray.check(node)) {
        names = Object.keys(node);
    }
    else if (isObject.check(node)) {
        names = types.getFieldNames(node);
    }
    else {
        return resultArray;
    }
    if (!resultArray) {
        childNodesCache.set(node, (resultArray = []));
    }
    for (var i = 0, nameCount = names.length; i < nameCount; ++i) {
        getSortedChildNodes(node[names[i]], lines, resultArray);
    }
    return resultArray;
}
// As efficiently as possible, decorate the comment object with
// .precedingNode, .enclosingNode, and/or .followingNode properties, at
// least one of which is guaranteed to be defined.
function decorateComment(node, comment, lines) {
    var childNodes = getSortedChildNodes(node, lines);
    // Time to dust off the old binary search robes and wizard hat.
    var left = 0;
    var right = childNodes && childNodes.length;
    var precedingNode;
    var followingNode;
    while (typeof right === "number" && left < right) {
        var middle = (left + right) >> 1;
        var child = childNodes[middle];
        if ((0, util_1.comparePos)(child.loc.start, comment.loc.start) <= 0 &&
            (0, util_1.comparePos)(comment.loc.end, child.loc.end) <= 0) {
            // The comment is completely contained by this child node.
            decorateComment((comment.enclosingNode = child), comment, lines);
            return; // Abandon the binary search at this level.
        }
        if ((0, util_1.comparePos)(child.loc.end, comment.loc.start) <= 0) {
            // This child node falls completely before the comment.
            // Because we will never consider this node or any nodes
            // before it again, this node must be the closest preceding
            // node we have encountered so far.
            precedingNode = child;
            left = middle + 1;
            continue;
        }
        if ((0, util_1.comparePos)(comment.loc.end, child.loc.start) <= 0) {
            // This child node falls completely after the comment.
            // Because we will never consider this node or any nodes after
            // it again, this node must be the closest following node we
            // have encountered so far.
            followingNode = child;
            right = middle;
            continue;
        }
        throw new Error("Comment location overlaps with node location");
    }
    if (precedingNode) {
        comment.precedingNode = precedingNode;
    }
    if (followingNode) {
        comment.followingNode = followingNode;
    }
}
function attach(comments, ast, lines) {
    if (!isArray.check(comments)) {
        return;
    }
    var tiesToBreak = [];
    comments.forEach(function (comment) {
        comment.loc.lines = lines;
        decorateComment(ast, comment, lines);
        var pn = comment.precedingNode;
        var en = comment.enclosingNode;
        var fn = comment.followingNode;
        if (pn && fn) {
            var tieCount = tiesToBreak.length;
            if (tieCount > 0) {
                var lastTie = tiesToBreak[tieCount - 1];
                assert_1.default.strictEqual(lastTie.precedingNode === comment.precedingNode, lastTie.followingNode === comment.followingNode);
                if (lastTie.followingNode !== comment.followingNode) {
                    breakTies(tiesToBreak, lines);
                }
            }
            tiesToBreak.push(comment);
        }
        else if (pn) {
            // No contest: we have a trailing comment.
            breakTies(tiesToBreak, lines);
            addTrailingComment(pn, comment);
        }
        else if (fn) {
            // No contest: we have a leading comment.
            breakTies(tiesToBreak, lines);
            addLeadingComment(fn, comment);
        }
        else if (en) {
            // The enclosing node has no child nodes at all, so what we
            // have here is a dangling comment, e.g. [/* crickets */].
            breakTies(tiesToBreak, lines);
            addDanglingComment(en, comment);
        }
        else {
            throw new Error("AST contains no nodes at all?");
        }
    });
    breakTies(tiesToBreak, lines);
    comments.forEach(function (comment) {
        // These node references were useful for breaking ties, but we
        // don't need them anymore, and they create cycles in the AST that
        // may lead to infinite recursion if we don't delete them here.
        delete comment.precedingNode;
        delete comment.enclosingNode;
        delete comment.followingNode;
    });
}
exports.attach = attach;
function breakTies(tiesToBreak, lines) {
    var tieCount = tiesToBreak.length;
    if (tieCount === 0) {
        return;
    }
    var pn = tiesToBreak[0].precedingNode;
    var fn = tiesToBreak[0].followingNode;
    var gapEndPos = fn.loc.start;
    // Iterate backwards through tiesToBreak, examining the gaps
    // between the tied comments. In order to qualify as leading, a
    // comment must be separated from fn by an unbroken series of
    // whitespace-only gaps (or other comments).
    var indexOfFirstLeadingComment = tieCount;
    var comment;
    for (; indexOfFirstLeadingComment > 0; --indexOfFirstLeadingComment) {
        comment = tiesToBreak[indexOfFirstLeadingComment - 1];
        assert_1.default.strictEqual(comment.precedingNode, pn);
        assert_1.default.strictEqual(comment.followingNode, fn);
        var gap = lines.sliceString(comment.loc.end, gapEndPos);
        if (/\S/.test(gap)) {
            // The gap string contained something other than whitespace.
            break;
        }
        gapEndPos = comment.loc.start;
    }
    while (indexOfFirstLeadingComment <= tieCount &&
        (comment = tiesToBreak[indexOfFirstLeadingComment]) &&
        // If the comment is a //-style comment and indented more
        // deeply than the node itself, reconsider it as trailing.
        (comment.type === "Line" || comment.type === "CommentLine") &&
        comment.loc.start.column > fn.loc.start.column) {
        ++indexOfFirstLeadingComment;
    }
    if (indexOfFirstLeadingComment) {
        var enclosingNode = tiesToBreak[indexOfFirstLeadingComment - 1].enclosingNode;
        if ((enclosingNode === null || enclosingNode === void 0 ? void 0 : enclosingNode.type) === "CallExpression") {
            --indexOfFirstLeadingComment;
        }
    }
    tiesToBreak.forEach(function (comment, i) {
        if (i < indexOfFirstLeadingComment) {
            addTrailingComment(pn, comment);
        }
        else {
            addLeadingComment(fn, comment);
        }
    });
    tiesToBreak.length = 0;
}
function addCommentHelper(node, comment) {
    var comments = node.comments || (node.comments = []);
    comments.push(comment);
}
function addLeadingComment(node, comment) {
    comment.leading = true;
    comment.trailing = false;
    addCommentHelper(node, comment);
}
function addDanglingComment(node, comment) {
    comment.leading = false;
    comment.trailing = false;
    addCommentHelper(node, comment);
}
function addTrailingComment(node, comment) {
    comment.leading = false;
    comment.trailing = true;
    addCommentHelper(node, comment);
}
function printLeadingComment(commentPath, print) {
    var comment = commentPath.getValue();
    n.Comment.assert(comment);
    var loc = comment.loc;
    var lines = loc && loc.lines;
    var parts = [print(commentPath)];
    if (comment.trailing) {
        // When we print trailing comments as leading comments, we don't
        // want to bring any trailing spaces along.
        parts.push("\n");
    }
    else if (lines instanceof lines_1.Lines) {
        var trailingSpace = lines.slice(loc.end, lines.skipSpaces(loc.end) || lines.lastPos());
        if (trailingSpace.length === 1) {
            // If the trailing space contains no newlines, then we want to
            // preserve it exactly as we found it.
            parts.push(trailingSpace);
        }
        else {
            // If the trailing space contains newlines, then replace it
            // with just that many newlines, with all other spaces removed.
            parts.push(new Array(trailingSpace.length).join("\n"));
        }
    }
    else {
        parts.push("\n");
    }
    return (0, lines_1.concat)(parts);
}
function printTrailingComment(commentPath, print) {
    var comment = commentPath.getValue(commentPath);
    n.Comment.assert(comment);
    var loc = comment.loc;
    var lines = loc && loc.lines;
    var parts = [];
    if (lines instanceof lines_1.Lines) {
        var fromPos = lines.skipSpaces(loc.start, true) || lines.firstPos();
        var leadingSpace = lines.slice(fromPos, loc.start);
        if (leadingSpace.length === 1) {
            // If the leading space contains no newlines, then we want to
            // preserve it exactly as we found it.
            parts.push(leadingSpace);
        }
        else {
            // If the leading space contains newlines, then replace it
            // with just that many newlines, sans all other spaces.
            parts.push(new Array(leadingSpace.length).join("\n"));
        }
    }
    parts.push(print(commentPath));
    return (0, lines_1.concat)(parts);
}
function printComments(path, print) {
    var value = path.getValue();
    var innerLines = print(path);
    var comments = n.Node.check(value) && types.getFieldValue(value, "comments");
    if (!comments || comments.length === 0) {
        return innerLines;
    }
    var leadingParts = [];
    var trailingParts = [innerLines];
    path.each(function (commentPath) {
        var comment = commentPath.getValue();
        var leading = types.getFieldValue(comment, "leading");
        var trailing = types.getFieldValue(comment, "trailing");
        if (leading ||
            (trailing &&
                !(n.Statement.check(value) ||
                    comment.type === "Block" ||
                    comment.type === "CommentBlock"))) {
            leadingParts.push(printLeadingComment(commentPath, print));
        }
        else if (trailing) {
            trailingParts.push(printTrailingComment(commentPath, print));
        }
    }, "comments");
    leadingParts.push.apply(leadingParts, trailingParts);
    return (0, lines_1.concat)(leadingParts);
}
exports.printComments = printComments;


/***/ }),

/***/ 2194:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __nccwpck_require__(204);
var assert_1 = tslib_1.__importDefault(__nccwpck_require__(9491));
var types = tslib_1.__importStar(__nccwpck_require__(6587));
var util = tslib_1.__importStar(__nccwpck_require__(8704));
var n = types.namedTypes;
var isArray = types.builtInTypes.array;
var isNumber = types.builtInTypes.number;
var PRECEDENCE = {};
[
    ["??"],
    ["||"],
    ["&&"],
    ["|"],
    ["^"],
    ["&"],
    ["==", "===", "!=", "!=="],
    ["<", ">", "<=", ">=", "in", "instanceof"],
    [">>", "<<", ">>>"],
    ["+", "-"],
    ["*", "/", "%"],
    ["**"],
].forEach(function (tier, i) {
    tier.forEach(function (op) {
        PRECEDENCE[op] = i;
    });
});
var FastPath = function FastPath(value) {
    assert_1.default.ok(this instanceof FastPath);
    this.stack = [value];
};
var FPp = FastPath.prototype;
// Static convenience function for coercing a value to a FastPath.
FastPath.from = function (obj) {
    if (obj instanceof FastPath) {
        // Return a defensive copy of any existing FastPath instances.
        return obj.copy();
    }
    if (obj instanceof types.NodePath) {
        // For backwards compatibility, unroll NodePath instances into
        // lightweight FastPath [..., name, value] stacks.
        var copy = Object.create(FastPath.prototype);
        var stack = [obj.value];
        for (var pp = void 0; (pp = obj.parentPath); obj = pp)
            stack.push(obj.name, pp.value);
        copy.stack = stack.reverse();
        return copy;
    }
    // Otherwise use obj as the value of the new FastPath instance.
    return new FastPath(obj);
};
FPp.copy = function copy() {
    var copy = Object.create(FastPath.prototype);
    copy.stack = this.stack.slice(0);
    return copy;
};
// The name of the current property is always the penultimate element of
// this.stack, and always a String.
FPp.getName = function getName() {
    var s = this.stack;
    var len = s.length;
    if (len > 1) {
        return s[len - 2];
    }
    // Since the name is always a string, null is a safe sentinel value to
    // return if we do not know the name of the (root) value.
    return null;
};
// The value of the current property is always the final element of
// this.stack.
FPp.getValue = function getValue() {
    var s = this.stack;
    return s[s.length - 1];
};
FPp.valueIsDuplicate = function () {
    var s = this.stack;
    var valueIndex = s.length - 1;
    return s.lastIndexOf(s[valueIndex], valueIndex - 1) >= 0;
};
function getNodeHelper(path, count) {
    var s = path.stack;
    for (var i = s.length - 1; i >= 0; i -= 2) {
        var value = s[i];
        if (n.Node.check(value) && --count < 0) {
            return value;
        }
    }
    return null;
}
FPp.getNode = function getNode(count) {
    if (count === void 0) { count = 0; }
    return getNodeHelper(this, ~~count);
};
FPp.getParentNode = function getParentNode(count) {
    if (count === void 0) { count = 0; }
    return getNodeHelper(this, ~~count + 1);
};
// The length of the stack can be either even or odd, depending on whether
// or not we have a name for the root value. The difference between the
// index of the root value and the index of the final value is always
// even, though, which allows us to return the root value in constant time
// (i.e. without iterating backwards through the stack).
FPp.getRootValue = function getRootValue() {
    var s = this.stack;
    if (s.length % 2 === 0) {
        return s[1];
    }
    return s[0];
};
// Temporarily push properties named by string arguments given after the
// callback function onto this.stack, then call the callback with a
// reference to this (modified) FastPath object. Note that the stack will
// be restored to its original state after the callback is finished, so it
// is probably a mistake to retain a reference to the path.
FPp.call = function call(callback /*, name1, name2, ... */) {
    var s = this.stack;
    var origLen = s.length;
    var value = s[origLen - 1];
    var argc = arguments.length;
    for (var i = 1; i < argc; ++i) {
        var name = arguments[i];
        value = value[name];
        s.push(name, value);
    }
    var result = callback(this);
    s.length = origLen;
    return result;
};
// Similar to FastPath.prototype.call, except that the value obtained by
// accessing this.getValue()[name1][name2]... should be array-like. The
// callback will be called with a reference to this path object for each
// element of the array.
FPp.each = function each(callback /*, name1, name2, ... */) {
    var s = this.stack;
    var origLen = s.length;
    var value = s[origLen - 1];
    var argc = arguments.length;
    for (var i = 1; i < argc; ++i) {
        var name = arguments[i];
        value = value[name];
        s.push(name, value);
    }
    for (var i = 0; i < value.length; ++i) {
        if (i in value) {
            s.push(i, value[i]);
            // If the callback needs to know the value of i, call
            // path.getName(), assuming path is the parameter name.
            callback(this);
            s.length -= 2;
        }
    }
    s.length = origLen;
};
// Similar to FastPath.prototype.each, except that the results of the
// callback function invocations are stored in an array and returned at
// the end of the iteration.
FPp.map = function map(callback /*, name1, name2, ... */) {
    var s = this.stack;
    var origLen = s.length;
    var value = s[origLen - 1];
    var argc = arguments.length;
    for (var i = 1; i < argc; ++i) {
        var name = arguments[i];
        value = value[name];
        s.push(name, value);
    }
    var result = new Array(value.length);
    for (var i = 0; i < value.length; ++i) {
        if (i in value) {
            s.push(i, value[i]);
            result[i] = callback(this, i);
            s.length -= 2;
        }
    }
    s.length = origLen;
    return result;
};
// Returns true if the node at the tip of the path is wrapped with
// parentheses, OR if the only reason the node needed parentheses was that
// it couldn't be the first expression in the enclosing statement (see
// FastPath#canBeFirstInStatement), and it has an opening `(` character.
// For example, the FunctionExpression in `(function(){}())` appears to
// need parentheses only because it's the first expression in the AST, but
// since it happens to be preceded by a `(` (which is not apparent from
// the AST but can be determined using FastPath#getPrevToken), there is no
// ambiguity about how to parse it, so it counts as having parentheses,
// even though it is not immediately followed by a `)`.
FPp.hasParens = function () {
    var node = this.getNode();
    var prevToken = this.getPrevToken(node);
    if (!prevToken) {
        return false;
    }
    var nextToken = this.getNextToken(node);
    if (!nextToken) {
        return false;
    }
    if (prevToken.value === "(") {
        if (nextToken.value === ")") {
            // If the node preceded by a `(` token and followed by a `)` token,
            // then of course it has parentheses.
            return true;
        }
        // If this is one of the few Expression types that can't come first in
        // the enclosing statement because of parsing ambiguities (namely,
        // FunctionExpression, ObjectExpression, and ClassExpression) and
        // this.firstInStatement() returns true, and the node would not need
        // parentheses in an expression context because this.needsParens(true)
        // returns false, then it just needs an opening parenthesis to resolve
        // the parsing ambiguity that made it appear to need parentheses.
        var justNeedsOpeningParen = !this.canBeFirstInStatement() &&
            this.firstInStatement() &&
            !this.needsParens(true);
        if (justNeedsOpeningParen) {
            return true;
        }
    }
    return false;
};
FPp.getPrevToken = function (node) {
    node = node || this.getNode();
    var loc = node && node.loc;
    var tokens = loc && loc.tokens;
    if (tokens && loc.start.token > 0) {
        var token = tokens[loc.start.token - 1];
        if (token) {
            // Do not return tokens that fall outside the root subtree.
            var rootLoc = this.getRootValue().loc;
            if (util.comparePos(rootLoc.start, token.loc.start) <= 0) {
                return token;
            }
        }
    }
    return null;
};
FPp.getNextToken = function (node) {
    node = node || this.getNode();
    var loc = node && node.loc;
    var tokens = loc && loc.tokens;
    if (tokens && loc.end.token < tokens.length) {
        var token = tokens[loc.end.token];
        if (token) {
            // Do not return tokens that fall outside the root subtree.
            var rootLoc = this.getRootValue().loc;
            if (util.comparePos(token.loc.end, rootLoc.end) <= 0) {
                return token;
            }
        }
    }
    return null;
};
// Inspired by require("ast-types").NodePath.prototype.needsParens, but
// more efficient because we're iterating backwards through a stack.
FPp.needsParens = function (assumeExpressionContext) {
    var node = this.getNode();
    // This needs to come before `if (!parent) { return false }` because
    // an object destructuring assignment requires parens for
    // correctness even when it's the topmost expression.
    if (node.type === "AssignmentExpression" &&
        node.left.type === "ObjectPattern") {
        return true;
    }
    var parent = this.getParentNode();
    var name = this.getName();
    // If the value of this path is some child of a Node and not a Node
    // itself, then it doesn't need parentheses. Only Node objects (in fact,
    // only Expression nodes) need parentheses.
    if (this.getValue() !== node) {
        return false;
    }
    // Only statements don't need parentheses.
    if (n.Statement.check(node)) {
        return false;
    }
    // Identifiers never need parentheses.
    if (node.type === "Identifier") {
        return false;
    }
    if (parent && parent.type === "ParenthesizedExpression") {
        return false;
    }
    if (node.extra && node.extra.parenthesized) {
        return true;
    }
    if (!parent)
        return false;
    // Wrap e.g. `-1` in parentheses inside `(-1) ** 2`.
    if (node.type === "UnaryExpression" &&
        parent.type === "BinaryExpression" &&
        name === "left" &&
        parent.left === node &&
        parent.operator === "**") {
        return true;
    }
    switch (node.type) {
        case "UnaryExpression":
        case "SpreadElement":
        case "SpreadProperty":
            return (parent.type === "MemberExpression" &&
                name === "object" &&
                parent.object === node);
        case "BinaryExpression":
        case "LogicalExpression":
            switch (parent.type) {
                case "CallExpression":
                    return name === "callee" && parent.callee === node;
                case "UnaryExpression":
                case "SpreadElement":
                case "SpreadProperty":
                    return true;
                case "MemberExpression":
                    return name === "object" && parent.object === node;
                case "BinaryExpression":
                case "LogicalExpression": {
                    var po = parent.operator;
                    var pp = PRECEDENCE[po];
                    var no = node.operator;
                    var np = PRECEDENCE[no];
                    if (pp > np) {
                        return true;
                    }
                    if (pp === np && name === "right") {
                        assert_1.default.strictEqual(parent.right, node);
                        return true;
                    }
                    break;
                }
                default:
                    return false;
            }
            break;
        case "SequenceExpression":
            switch (parent.type) {
                case "ReturnStatement":
                    return false;
                case "ForStatement":
                    // Although parentheses wouldn't hurt around sequence expressions in
                    // the head of for loops, traditional style dictates that e.g. i++,
                    // j++ should not be wrapped with parentheses.
                    return false;
                case "ExpressionStatement":
                    return name !== "expression";
                default:
                    // Otherwise err on the side of overparenthesization, adding
                    // explicit exceptions above if this proves overzealous.
                    return true;
            }
        case "OptionalIndexedAccessType":
            return node.optional && parent.type === "IndexedAccessType";
        case "IntersectionTypeAnnotation":
        case "UnionTypeAnnotation":
            return parent.type === "NullableTypeAnnotation";
        case "Literal":
            return (parent.type === "MemberExpression" &&
                isNumber.check(node.value) &&
                name === "object" &&
                parent.object === node);
        // Babel 6 Literal split
        case "NumericLiteral":
            return (parent.type === "MemberExpression" &&
                name === "object" &&
                parent.object === node);
        case "YieldExpression":
        case "AwaitExpression":
        case "AssignmentExpression":
        case "ConditionalExpression":
            switch (parent.type) {
                case "UnaryExpression":
                case "SpreadElement":
                case "SpreadProperty":
                case "BinaryExpression":
                case "LogicalExpression":
                    return true;
                case "CallExpression":
                case "NewExpression":
                    return name === "callee" && parent.callee === node;
                case "ConditionalExpression":
                    return name === "test" && parent.test === node;
                case "MemberExpression":
                    return name === "object" && parent.object === node;
                default:
                    return false;
            }
        case "ArrowFunctionExpression":
            if (n.CallExpression.check(parent) &&
                name === "callee" &&
                parent.callee === node) {
                return true;
            }
            if (n.MemberExpression.check(parent) &&
                name === "object" &&
                parent.object === node) {
                return true;
            }
            if (n.TSAsExpression &&
                n.TSAsExpression.check(parent) &&
                name === "expression" &&
                parent.expression === node) {
                return true;
            }
            return isBinary(parent);
        case "ObjectExpression":
            if (parent.type === "ArrowFunctionExpression" &&
                name === "body" &&
                parent.body === node) {
                return true;
            }
            break;
        case "TSAsExpression":
            if (parent.type === "ArrowFunctionExpression" &&
                name === "body" &&
                parent.body === node &&
                node.expression.type === "ObjectExpression") {
                return true;
            }
            break;
        case "CallExpression":
            if (name === "declaration" &&
                n.ExportDefaultDeclaration.check(parent) &&
                n.FunctionExpression.check(node.callee)) {
                return true;
            }
    }
    if (parent.type === "NewExpression" &&
        name === "callee" &&
        parent.callee === node) {
        return containsCallExpression(node);
    }
    if (assumeExpressionContext !== true &&
        !this.canBeFirstInStatement() &&
        this.firstInStatement()) {
        return true;
    }
    return false;
};
function isBinary(node) {
    return n.BinaryExpression.check(node) || n.LogicalExpression.check(node);
}
// @ts-ignore 'isUnaryLike' is declared but its value is never read. [6133]
function isUnaryLike(node) {
    return (n.UnaryExpression.check(node) ||
        // I considered making SpreadElement and SpreadProperty subtypes of
        // UnaryExpression, but they're not really Expression nodes.
        (n.SpreadElement && n.SpreadElement.check(node)) ||
        (n.SpreadProperty && n.SpreadProperty.check(node)));
}
function containsCallExpression(node) {
    if (n.CallExpression.check(node)) {
        return true;
    }
    if (isArray.check(node)) {
        return node.some(containsCallExpression);
    }
    if (n.Node.check(node)) {
        return types.someField(node, function (_name, child) {
            return containsCallExpression(child);
        });
    }
    return false;
}
FPp.canBeFirstInStatement = function () {
    var node = this.getNode();
    if (n.FunctionExpression.check(node)) {
        return false;
    }
    if (n.ObjectExpression.check(node)) {
        return false;
    }
    if (n.ClassExpression.check(node)) {
        return false;
    }
    return true;
};
FPp.firstInStatement = function () {
    var s = this.stack;
    var parentName, parent;
    var childName, child;
    for (var i = s.length - 1; i >= 0; i -= 2) {
        if (n.Node.check(s[i])) {
            childName = parentName;
            child = parent;
            parentName = s[i - 1];
            parent = s[i];
        }
        if (!parent || !child) {
            continue;
        }
        if (n.BlockStatement.check(parent) &&
            parentName === "body" &&
            childName === 0) {
            assert_1.default.strictEqual(parent.body[0], child);
            return true;
        }
        if (n.ExpressionStatement.check(parent) && childName === "expression") {
            assert_1.default.strictEqual(parent.expression, child);
            return true;
        }
        if (n.AssignmentExpression.check(parent) && childName === "left") {
            assert_1.default.strictEqual(parent.left, child);
            return true;
        }
        if (n.ArrowFunctionExpression.check(parent) && childName === "body") {
            assert_1.default.strictEqual(parent.body, child);
            return true;
        }
        // s[i + 1] and s[i + 2] represent the array between the parent
        // SequenceExpression node and its child nodes
        if (n.SequenceExpression.check(parent) &&
            s[i + 1] === "expressions" &&
            childName === 0) {
            assert_1.default.strictEqual(parent.expressions[0], child);
            continue;
        }
        if (n.CallExpression.check(parent) && childName === "callee") {
            assert_1.default.strictEqual(parent.callee, child);
            continue;
        }
        if (n.MemberExpression.check(parent) && childName === "object") {
            assert_1.default.strictEqual(parent.object, child);
            continue;
        }
        if (n.ConditionalExpression.check(parent) && childName === "test") {
            assert_1.default.strictEqual(parent.test, child);
            continue;
        }
        if (isBinary(parent) && childName === "left") {
            assert_1.default.strictEqual(parent.left, child);
            continue;
        }
        if (n.UnaryExpression.check(parent) &&
            !parent.prefix &&
            childName === "argument") {
            assert_1.default.strictEqual(parent.argument, child);
            continue;
        }
        return false;
    }
    return true;
};
exports["default"] = FastPath;


/***/ }),

/***/ 1942:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.concat = exports.fromString = exports.countSpaces = exports.Lines = void 0;
var tslib_1 = __nccwpck_require__(204);
var assert_1 = tslib_1.__importDefault(__nccwpck_require__(9491));
var source_map_1 = tslib_1.__importDefault(__nccwpck_require__(4390));
var options_1 = __nccwpck_require__(5169);
var util_1 = __nccwpck_require__(8704);
var mapping_1 = tslib_1.__importDefault(__nccwpck_require__(9518));
var Lines = /** @class */ (function () {
    function Lines(infos, sourceFileName) {
        if (sourceFileName === void 0) { sourceFileName = null; }
        this.infos = infos;
        this.mappings = [];
        this.cachedSourceMap = null;
        this.cachedTabWidth = void 0;
        assert_1.default.ok(infos.length > 0);
        this.length = infos.length;
        this.name = sourceFileName || null;
        if (this.name) {
            this.mappings.push(new mapping_1.default(this, {
                start: this.firstPos(),
                end: this.lastPos(),
            }));
        }
    }
    Lines.prototype.toString = function (options) {
        return this.sliceString(this.firstPos(), this.lastPos(), options);
    };
    Lines.prototype.getSourceMap = function (sourceMapName, sourceRoot) {
        if (!sourceMapName) {
            // Although we could make up a name or generate an anonymous
            // source map, instead we assume that any consumer who does not
            // provide a name does not actually want a source map.
            return null;
        }
        var targetLines = this;
        function updateJSON(json) {
            json = json || {};
            json.file = sourceMapName;
            if (sourceRoot) {
                json.sourceRoot = sourceRoot;
            }
            return json;
        }
        if (targetLines.cachedSourceMap) {
            // Since Lines objects are immutable, we can reuse any source map
            // that was previously generated. Nevertheless, we return a new
            // JSON object here to protect the cached source map from outside
            // modification.
            return updateJSON(targetLines.cachedSourceMap.toJSON());
        }
        var smg = new source_map_1.default.SourceMapGenerator(updateJSON());
        var sourcesToContents = {};
        targetLines.mappings.forEach(function (mapping) {
            var sourceCursor = mapping.sourceLines.skipSpaces(mapping.sourceLoc.start) ||
                mapping.sourceLines.lastPos();
            var targetCursor = targetLines.skipSpaces(mapping.targetLoc.start) ||
                targetLines.lastPos();
            while ((0, util_1.comparePos)(sourceCursor, mapping.sourceLoc.end) < 0 &&
                (0, util_1.comparePos)(targetCursor, mapping.targetLoc.end) < 0) {
                var sourceChar = mapping.sourceLines.charAt(sourceCursor);
                var targetChar = targetLines.charAt(targetCursor);
                assert_1.default.strictEqual(sourceChar, targetChar);
                var sourceName = mapping.sourceLines.name;
                // Add mappings one character at a time for maximum resolution.
                smg.addMapping({
                    source: sourceName,
                    original: { line: sourceCursor.line, column: sourceCursor.column },
                    generated: { line: targetCursor.line, column: targetCursor.column },
                });
                if (!hasOwn.call(sourcesToContents, sourceName)) {
                    var sourceContent = mapping.sourceLines.toString();
                    smg.setSourceContent(sourceName, sourceContent);
                    sourcesToContents[sourceName] = sourceContent;
                }
                targetLines.nextPos(targetCursor, true);
                mapping.sourceLines.nextPos(sourceCursor, true);
            }
        });
        targetLines.cachedSourceMap = smg;
        return smg.toJSON();
    };
    Lines.prototype.bootstrapCharAt = function (pos) {
        assert_1.default.strictEqual(typeof pos, "object");
        assert_1.default.strictEqual(typeof pos.line, "number");
        assert_1.default.strictEqual(typeof pos.column, "number");
        var line = pos.line, column = pos.column, strings = this.toString().split(lineTerminatorSeqExp), string = strings[line - 1];
        if (typeof string === "undefined")
            return "";
        if (column === string.length && line < strings.length)
            return "\n";
        if (column >= string.length)
            return "";
        return string.charAt(column);
    };
    Lines.prototype.charAt = function (pos) {
        assert_1.default.strictEqual(typeof pos, "object");
        assert_1.default.strictEqual(typeof pos.line, "number");
        assert_1.default.strictEqual(typeof pos.column, "number");
        var line = pos.line, column = pos.column, secret = this, infos = secret.infos, info = infos[line - 1], c = column;
        if (typeof info === "undefined" || c < 0)
            return "";
        var indent = this.getIndentAt(line);
        if (c < indent)
            return " ";
        c += info.sliceStart - indent;
        if (c === info.sliceEnd && line < this.length)
            return "\n";
        if (c >= info.sliceEnd)
            return "";
        return info.line.charAt(c);
    };
    Lines.prototype.stripMargin = function (width, skipFirstLine) {
        if (width === 0)
            return this;
        assert_1.default.ok(width > 0, "negative margin: " + width);
        if (skipFirstLine && this.length === 1)
            return this;
        var lines = new Lines(this.infos.map(function (info, i) {
            if (info.line && (i > 0 || !skipFirstLine)) {
                info = tslib_1.__assign(tslib_1.__assign({}, info), { indent: Math.max(0, info.indent - width) });
            }
            return info;
        }));
        if (this.mappings.length > 0) {
            var newMappings_1 = lines.mappings;
            assert_1.default.strictEqual(newMappings_1.length, 0);
            this.mappings.forEach(function (mapping) {
                newMappings_1.push(mapping.indent(width, skipFirstLine, true));
            });
        }
        return lines;
    };
    Lines.prototype.indent = function (by) {
        if (by === 0) {
            return this;
        }
        var lines = new Lines(this.infos.map(function (info) {
            if (info.line && !info.locked) {
                info = tslib_1.__assign(tslib_1.__assign({}, info), { indent: info.indent + by });
            }
            return info;
        }));
        if (this.mappings.length > 0) {
            var newMappings_2 = lines.mappings;
            assert_1.default.strictEqual(newMappings_2.length, 0);
            this.mappings.forEach(function (mapping) {
                newMappings_2.push(mapping.indent(by));
            });
        }
        return lines;
    };
    Lines.prototype.indentTail = function (by) {
        if (by === 0) {
            return this;
        }
        if (this.length < 2) {
            return this;
        }
        var lines = new Lines(this.infos.map(function (info, i) {
            if (i > 0 && info.line && !info.locked) {
                info = tslib_1.__assign(tslib_1.__assign({}, info), { indent: info.indent + by });
            }
            return info;
        }));
        if (this.mappings.length > 0) {
            var newMappings_3 = lines.mappings;
            assert_1.default.strictEqual(newMappings_3.length, 0);
            this.mappings.forEach(function (mapping) {
                newMappings_3.push(mapping.indent(by, true));
            });
        }
        return lines;
    };
    Lines.prototype.lockIndentTail = function () {
        if (this.length < 2) {
            return this;
        }
        return new Lines(this.infos.map(function (info, i) { return (tslib_1.__assign(tslib_1.__assign({}, info), { locked: i > 0 })); }));
    };
    Lines.prototype.getIndentAt = function (line) {
        assert_1.default.ok(line >= 1, "no line " + line + " (line numbers start from 1)");
        return Math.max(this.infos[line - 1].indent, 0);
    };
    Lines.prototype.guessTabWidth = function () {
        if (typeof this.cachedTabWidth === "number") {
            return this.cachedTabWidth;
        }
        var counts = []; // Sparse array.
        var lastIndent = 0;
        for (var line = 1, last = this.length; line <= last; ++line) {
            var info = this.infos[line - 1];
            var sliced = info.line.slice(info.sliceStart, info.sliceEnd);
            // Whitespace-only lines don't tell us much about the likely tab
            // width of this code.
            if (isOnlyWhitespace(sliced)) {
                continue;
            }
            var diff = Math.abs(info.indent - lastIndent);
            counts[diff] = ~~counts[diff] + 1;
            lastIndent = info.indent;
        }
        var maxCount = -1;
        var result = 2;
        for (var tabWidth = 1; tabWidth < counts.length; tabWidth += 1) {
            if (hasOwn.call(counts, tabWidth) && counts[tabWidth] > maxCount) {
                maxCount = counts[tabWidth];
                result = tabWidth;
            }
        }
        return (this.cachedTabWidth = result);
    };
    // Determine if the list of lines has a first line that starts with a //
    // or /* comment. If this is the case, the code may need to be wrapped in
    // parens to avoid ASI issues.
    Lines.prototype.startsWithComment = function () {
        if (this.infos.length === 0) {
            return false;
        }
        var firstLineInfo = this.infos[0], sliceStart = firstLineInfo.sliceStart, sliceEnd = firstLineInfo.sliceEnd, firstLine = firstLineInfo.line.slice(sliceStart, sliceEnd).trim();
        return (firstLine.length === 0 ||
            firstLine.slice(0, 2) === "//" ||
            firstLine.slice(0, 2) === "/*");
    };
    Lines.prototype.isOnlyWhitespace = function () {
        return isOnlyWhitespace(this.toString());
    };
    Lines.prototype.isPrecededOnlyByWhitespace = function (pos) {
        var info = this.infos[pos.line - 1];
        var indent = Math.max(info.indent, 0);
        var diff = pos.column - indent;
        if (diff <= 0) {
            // If pos.column does not exceed the indentation amount, then
            // there must be only whitespace before it.
            return true;
        }
        var start = info.sliceStart;
        var end = Math.min(start + diff, info.sliceEnd);
        var prefix = info.line.slice(start, end);
        return isOnlyWhitespace(prefix);
    };
    Lines.prototype.getLineLength = function (line) {
        var info = this.infos[line - 1];
        return this.getIndentAt(line) + info.sliceEnd - info.sliceStart;
    };
    Lines.prototype.nextPos = function (pos, skipSpaces) {
        if (skipSpaces === void 0) { skipSpaces = false; }
        var l = Math.max(pos.line, 0), c = Math.max(pos.column, 0);
        if (c < this.getLineLength(l)) {
            pos.column += 1;
            return skipSpaces ? !!this.skipSpaces(pos, false, true) : true;
        }
        if (l < this.length) {
            pos.line += 1;
            pos.column = 0;
            return skipSpaces ? !!this.skipSpaces(pos, false, true) : true;
        }
        return false;
    };
    Lines.prototype.prevPos = function (pos, skipSpaces) {
        if (skipSpaces === void 0) { skipSpaces = false; }
        var l = pos.line, c = pos.column;
        if (c < 1) {
            l -= 1;
            if (l < 1)
                return false;
            c = this.getLineLength(l);
        }
        else {
            c = Math.min(c - 1, this.getLineLength(l));
        }
        pos.line = l;
        pos.column = c;
        return skipSpaces ? !!this.skipSpaces(pos, true, true) : true;
    };
    Lines.prototype.firstPos = function () {
        // Trivial, but provided for completeness.
        return { line: 1, column: 0 };
    };
    Lines.prototype.lastPos = function () {
        return {
            line: this.length,
            column: this.getLineLength(this.length),
        };
    };
    Lines.prototype.skipSpaces = function (pos, backward, modifyInPlace) {
        if (backward === void 0) { backward = false; }
        if (modifyInPlace === void 0) { modifyInPlace = false; }
        if (pos) {
            pos = modifyInPlace
                ? pos
                : {
                    line: pos.line,
                    column: pos.column,
                };
        }
        else if (backward) {
            pos = this.lastPos();
        }
        else {
            pos = this.firstPos();
        }
        if (backward) {
            while (this.prevPos(pos)) {
                if (!isOnlyWhitespace(this.charAt(pos)) && this.nextPos(pos)) {
                    return pos;
                }
            }
            return null;
        }
        else {
            while (isOnlyWhitespace(this.charAt(pos))) {
                if (!this.nextPos(pos)) {
                    return null;
                }
            }
            return pos;
        }
    };
    Lines.prototype.trimLeft = function () {
        var pos = this.skipSpaces(this.firstPos(), false, true);
        return pos ? this.slice(pos) : emptyLines;
    };
    Lines.prototype.trimRight = function () {
        var pos = this.skipSpaces(this.lastPos(), true, true);
        return pos ? this.slice(this.firstPos(), pos) : emptyLines;
    };
    Lines.prototype.trim = function () {
        var start = this.skipSpaces(this.firstPos(), false, true);
        if (start === null) {
            return emptyLines;
        }
        var end = this.skipSpaces(this.lastPos(), true, true);
        if (end === null) {
            return emptyLines;
        }
        return this.slice(start, end);
    };
    Lines.prototype.eachPos = function (callback, startPos, skipSpaces) {
        if (startPos === void 0) { startPos = this.firstPos(); }
        if (skipSpaces === void 0) { skipSpaces = false; }
        var pos = this.firstPos();
        if (startPos) {
            (pos.line = startPos.line), (pos.column = startPos.column);
        }
        if (skipSpaces && !this.skipSpaces(pos, false, true)) {
            return; // Encountered nothing but spaces.
        }
        do
            callback.call(this, pos);
        while (this.nextPos(pos, skipSpaces));
    };
    Lines.prototype.bootstrapSlice = function (start, end) {
        var strings = this.toString()
            .split(lineTerminatorSeqExp)
            .slice(start.line - 1, end.line);
        if (strings.length > 0) {
            strings.push(strings.pop().slice(0, end.column));
            strings[0] = strings[0].slice(start.column);
        }
        return fromString(strings.join("\n"));
    };
    Lines.prototype.slice = function (start, end) {
        if (!end) {
            if (!start) {
                // The client seems to want a copy of this Lines object, but
                // Lines objects are immutable, so it's perfectly adequate to
                // return the same object.
                return this;
            }
            // Slice to the end if no end position was provided.
            end = this.lastPos();
        }
        if (!start) {
            throw new Error("cannot slice with end but not start");
        }
        var sliced = this.infos.slice(start.line - 1, end.line);
        if (start.line === end.line) {
            sliced[0] = sliceInfo(sliced[0], start.column, end.column);
        }
        else {
            assert_1.default.ok(start.line < end.line);
            sliced[0] = sliceInfo(sliced[0], start.column);
            sliced.push(sliceInfo(sliced.pop(), 0, end.column));
        }
        var lines = new Lines(sliced);
        if (this.mappings.length > 0) {
            var newMappings_4 = lines.mappings;
            assert_1.default.strictEqual(newMappings_4.length, 0);
            this.mappings.forEach(function (mapping) {
                var sliced = mapping.slice(this, start, end);
                if (sliced) {
                    newMappings_4.push(sliced);
                }
            }, this);
        }
        return lines;
    };
    Lines.prototype.bootstrapSliceString = function (start, end, options) {
        return this.slice(start, end).toString(options);
    };
    Lines.prototype.sliceString = function (start, end, options) {
        if (start === void 0) { start = this.firstPos(); }
        if (end === void 0) { end = this.lastPos(); }
        var _a = (0, options_1.normalize)(options), tabWidth = _a.tabWidth, useTabs = _a.useTabs, reuseWhitespace = _a.reuseWhitespace, lineTerminator = _a.lineTerminator;
        var parts = [];
        for (var line = start.line; line <= end.line; ++line) {
            var info = this.infos[line - 1];
            if (line === start.line) {
                if (line === end.line) {
                    info = sliceInfo(info, start.column, end.column);
                }
                else {
                    info = sliceInfo(info, start.column);
                }
            }
            else if (line === end.line) {
                info = sliceInfo(info, 0, end.column);
            }
            var indent = Math.max(info.indent, 0);
            var before_1 = info.line.slice(0, info.sliceStart);
            if (reuseWhitespace &&
                isOnlyWhitespace(before_1) &&
                countSpaces(before_1, tabWidth) === indent) {
                // Reuse original spaces if the indentation is correct.
                parts.push(info.line.slice(0, info.sliceEnd));
                continue;
            }
            var tabs = 0;
            var spaces = indent;
            if (useTabs) {
                tabs = Math.floor(indent / tabWidth);
                spaces -= tabs * tabWidth;
            }
            var result = "";
            if (tabs > 0) {
                result += new Array(tabs + 1).join("\t");
            }
            if (spaces > 0) {
                result += new Array(spaces + 1).join(" ");
            }
            result += info.line.slice(info.sliceStart, info.sliceEnd);
            parts.push(result);
        }
        return parts.join(lineTerminator);
    };
    Lines.prototype.isEmpty = function () {
        return this.length < 2 && this.getLineLength(1) < 1;
    };
    Lines.prototype.join = function (elements) {
        var separator = this;
        var infos = [];
        var mappings = [];
        var prevInfo;
        function appendLines(linesOrNull) {
            if (linesOrNull === null) {
                return;
            }
            if (prevInfo) {
                var info = linesOrNull.infos[0];
                var indent = new Array(info.indent + 1).join(" ");
                var prevLine_1 = infos.length;
                var prevColumn_1 = Math.max(prevInfo.indent, 0) +
                    prevInfo.sliceEnd -
                    prevInfo.sliceStart;
                prevInfo.line =
                    prevInfo.line.slice(0, prevInfo.sliceEnd) +
                        indent +
                        info.line.slice(info.sliceStart, info.sliceEnd);
                // If any part of a line is indentation-locked, the whole line
                // will be indentation-locked.
                prevInfo.locked = prevInfo.locked || info.locked;
                prevInfo.sliceEnd = prevInfo.line.length;
                if (linesOrNull.mappings.length > 0) {
                    linesOrNull.mappings.forEach(function (mapping) {
                        mappings.push(mapping.add(prevLine_1, prevColumn_1));
                    });
                }
            }
            else if (linesOrNull.mappings.length > 0) {
                mappings.push.apply(mappings, linesOrNull.mappings);
            }
            linesOrNull.infos.forEach(function (info, i) {
                if (!prevInfo || i > 0) {
                    prevInfo = tslib_1.__assign({}, info);
                    infos.push(prevInfo);
                }
            });
        }
        function appendWithSeparator(linesOrNull, i) {
            if (i > 0)
                appendLines(separator);
            appendLines(linesOrNull);
        }
        elements
            .map(function (elem) {
            var lines = fromString(elem);
            if (lines.isEmpty())
                return null;
            return lines;
        })
            .forEach(function (linesOrNull, i) {
            if (separator.isEmpty()) {
                appendLines(linesOrNull);
            }
            else {
                appendWithSeparator(linesOrNull, i);
            }
        });
        if (infos.length < 1)
            return emptyLines;
        var lines = new Lines(infos);
        lines.mappings = mappings;
        return lines;
    };
    Lines.prototype.concat = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var list = [this];
        list.push.apply(list, args);
        assert_1.default.strictEqual(list.length, args.length + 1);
        return emptyLines.join(list);
    };
    return Lines;
}());
exports.Lines = Lines;
var fromStringCache = {};
var hasOwn = fromStringCache.hasOwnProperty;
var maxCacheKeyLen = 10;
function countSpaces(spaces, tabWidth) {
    var count = 0;
    var len = spaces.length;
    for (var i = 0; i < len; ++i) {
        switch (spaces.charCodeAt(i)) {
            case 9: {
                // '\t'
                assert_1.default.strictEqual(typeof tabWidth, "number");
                assert_1.default.ok(tabWidth > 0);
                var next = Math.ceil(count / tabWidth) * tabWidth;
                if (next === count) {
                    count += tabWidth;
                }
                else {
                    count = next;
                }
                break;
            }
            case 11: // '\v'
            case 12: // '\f'
            case 13: // '\r'
            case 0xfeff: // zero-width non-breaking space
                // These characters contribute nothing to indentation.
                break;
            case 32: // ' '
            default:
                // Treat all other whitespace like ' '.
                count += 1;
                break;
        }
    }
    return count;
}
exports.countSpaces = countSpaces;
var leadingSpaceExp = /^\s*/;
// As specified here: http://www.ecma-international.org/ecma-262/6.0/#sec-line-terminators
var lineTerminatorSeqExp = /\u000D\u000A|\u000D(?!\u000A)|\u000A|\u2028|\u2029/;
/**
 * @param {Object} options - Options object that configures printing.
 */
function fromString(string, options) {
    if (string instanceof Lines)
        return string;
    string += "";
    var tabWidth = options && options.tabWidth;
    var tabless = string.indexOf("\t") < 0;
    var cacheable = !options && tabless && string.length <= maxCacheKeyLen;
    assert_1.default.ok(tabWidth || tabless, "No tab width specified but encountered tabs in string\n" + string);
    if (cacheable && hasOwn.call(fromStringCache, string))
        return fromStringCache[string];
    var lines = new Lines(string.split(lineTerminatorSeqExp).map(function (line) {
        // TODO: handle null exec result
        var spaces = leadingSpaceExp.exec(line)[0];
        return {
            line: line,
            indent: countSpaces(spaces, tabWidth),
            // Boolean indicating whether this line can be reindented.
            locked: false,
            sliceStart: spaces.length,
            sliceEnd: line.length,
        };
    }), (0, options_1.normalize)(options).sourceFileName);
    if (cacheable)
        fromStringCache[string] = lines;
    return lines;
}
exports.fromString = fromString;
function isOnlyWhitespace(string) {
    return !/\S/.test(string);
}
function sliceInfo(info, startCol, endCol) {
    var sliceStart = info.sliceStart;
    var sliceEnd = info.sliceEnd;
    var indent = Math.max(info.indent, 0);
    var lineLength = indent + sliceEnd - sliceStart;
    if (typeof endCol === "undefined") {
        endCol = lineLength;
    }
    startCol = Math.max(startCol, 0);
    endCol = Math.min(endCol, lineLength);
    endCol = Math.max(endCol, startCol);
    if (endCol < indent) {
        indent = endCol;
        sliceEnd = sliceStart;
    }
    else {
        sliceEnd -= lineLength - endCol;
    }
    lineLength = endCol;
    lineLength -= startCol;
    if (startCol < indent) {
        indent -= startCol;
    }
    else {
        startCol -= indent;
        indent = 0;
        sliceStart += startCol;
    }
    assert_1.default.ok(indent >= 0);
    assert_1.default.ok(sliceStart <= sliceEnd);
    assert_1.default.strictEqual(lineLength, indent + sliceEnd - sliceStart);
    if (info.indent === indent &&
        info.sliceStart === sliceStart &&
        info.sliceEnd === sliceEnd) {
        return info;
    }
    return {
        line: info.line,
        indent: indent,
        // A destructive slice always unlocks indentation.
        locked: false,
        sliceStart: sliceStart,
        sliceEnd: sliceEnd,
    };
}
function concat(elements) {
    return emptyLines.join(elements);
}
exports.concat = concat;
// The emptyLines object needs to be created all the way down here so that
// Lines.prototype will be fully populated.
var emptyLines = fromString("");


/***/ }),

/***/ 9518:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __nccwpck_require__(204);
var assert_1 = tslib_1.__importDefault(__nccwpck_require__(9491));
var util_1 = __nccwpck_require__(8704);
var Mapping = /** @class */ (function () {
    function Mapping(sourceLines, sourceLoc, targetLoc) {
        if (targetLoc === void 0) { targetLoc = sourceLoc; }
        this.sourceLines = sourceLines;
        this.sourceLoc = sourceLoc;
        this.targetLoc = targetLoc;
    }
    Mapping.prototype.slice = function (lines, start, end) {
        if (end === void 0) { end = lines.lastPos(); }
        var sourceLines = this.sourceLines;
        var sourceLoc = this.sourceLoc;
        var targetLoc = this.targetLoc;
        function skip(name) {
            var sourceFromPos = sourceLoc[name];
            var targetFromPos = targetLoc[name];
            var targetToPos = start;
            if (name === "end") {
                targetToPos = end;
            }
            else {
                assert_1.default.strictEqual(name, "start");
            }
            return skipChars(sourceLines, sourceFromPos, lines, targetFromPos, targetToPos);
        }
        if ((0, util_1.comparePos)(start, targetLoc.start) <= 0) {
            if ((0, util_1.comparePos)(targetLoc.end, end) <= 0) {
                targetLoc = {
                    start: subtractPos(targetLoc.start, start.line, start.column),
                    end: subtractPos(targetLoc.end, start.line, start.column),
                };
                // The sourceLoc can stay the same because the contents of the
                // targetLoc have not changed.
            }
            else if ((0, util_1.comparePos)(end, targetLoc.start) <= 0) {
                return null;
            }
            else {
                sourceLoc = {
                    start: sourceLoc.start,
                    end: skip("end"),
                };
                targetLoc = {
                    start: subtractPos(targetLoc.start, start.line, start.column),
                    end: subtractPos(end, start.line, start.column),
                };
            }
        }
        else {
            if ((0, util_1.comparePos)(targetLoc.end, start) <= 0) {
                return null;
            }
            if ((0, util_1.comparePos)(targetLoc.end, end) <= 0) {
                sourceLoc = {
                    start: skip("start"),
                    end: sourceLoc.end,
                };
                targetLoc = {
                    // Same as subtractPos(start, start.line, start.column):
                    start: { line: 1, column: 0 },
                    end: subtractPos(targetLoc.end, start.line, start.column),
                };
            }
            else {
                sourceLoc = {
                    start: skip("start"),
                    end: skip("end"),
                };
                targetLoc = {
                    // Same as subtractPos(start, start.line, start.column):
                    start: { line: 1, column: 0 },
                    end: subtractPos(end, start.line, start.column),
                };
            }
        }
        return new Mapping(this.sourceLines, sourceLoc, targetLoc);
    };
    Mapping.prototype.add = function (line, column) {
        return new Mapping(this.sourceLines, this.sourceLoc, {
            start: addPos(this.targetLoc.start, line, column),
            end: addPos(this.targetLoc.end, line, column),
        });
    };
    Mapping.prototype.subtract = function (line, column) {
        return new Mapping(this.sourceLines, this.sourceLoc, {
            start: subtractPos(this.targetLoc.start, line, column),
            end: subtractPos(this.targetLoc.end, line, column),
        });
    };
    Mapping.prototype.indent = function (by, skipFirstLine, noNegativeColumns) {
        if (skipFirstLine === void 0) { skipFirstLine = false; }
        if (noNegativeColumns === void 0) { noNegativeColumns = false; }
        if (by === 0) {
            return this;
        }
        var targetLoc = this.targetLoc;
        var startLine = targetLoc.start.line;
        var endLine = targetLoc.end.line;
        if (skipFirstLine && startLine === 1 && endLine === 1) {
            return this;
        }
        targetLoc = {
            start: targetLoc.start,
            end: targetLoc.end,
        };
        if (!skipFirstLine || startLine > 1) {
            var startColumn = targetLoc.start.column + by;
            targetLoc.start = {
                line: startLine,
                column: noNegativeColumns ? Math.max(0, startColumn) : startColumn,
            };
        }
        if (!skipFirstLine || endLine > 1) {
            var endColumn = targetLoc.end.column + by;
            targetLoc.end = {
                line: endLine,
                column: noNegativeColumns ? Math.max(0, endColumn) : endColumn,
            };
        }
        return new Mapping(this.sourceLines, this.sourceLoc, targetLoc);
    };
    return Mapping;
}());
exports["default"] = Mapping;
function addPos(toPos, line, column) {
    return {
        line: toPos.line + line - 1,
        column: toPos.line === 1 ? toPos.column + column : toPos.column,
    };
}
function subtractPos(fromPos, line, column) {
    return {
        line: fromPos.line - line + 1,
        column: fromPos.line === line ? fromPos.column - column : fromPos.column,
    };
}
function skipChars(sourceLines, sourceFromPos, targetLines, targetFromPos, targetToPos) {
    var targetComparison = (0, util_1.comparePos)(targetFromPos, targetToPos);
    if (targetComparison === 0) {
        // Trivial case: no characters to skip.
        return sourceFromPos;
    }
    var sourceCursor, targetCursor;
    if (targetComparison < 0) {
        // Skipping forward.
        sourceCursor =
            sourceLines.skipSpaces(sourceFromPos) || sourceLines.lastPos();
        targetCursor =
            targetLines.skipSpaces(targetFromPos) || targetLines.lastPos();
        var lineDiff = targetToPos.line - targetCursor.line;
        sourceCursor.line += lineDiff;
        targetCursor.line += lineDiff;
        if (lineDiff > 0) {
            // If jumping to later lines, reset columns to the beginnings
            // of those lines.
            sourceCursor.column = 0;
            targetCursor.column = 0;
        }
        else {
            assert_1.default.strictEqual(lineDiff, 0);
        }
        while ((0, util_1.comparePos)(targetCursor, targetToPos) < 0 &&
            targetLines.nextPos(targetCursor, true)) {
            assert_1.default.ok(sourceLines.nextPos(sourceCursor, true));
            assert_1.default.strictEqual(sourceLines.charAt(sourceCursor), targetLines.charAt(targetCursor));
        }
    }
    else {
        // Skipping backward.
        sourceCursor =
            sourceLines.skipSpaces(sourceFromPos, true) || sourceLines.firstPos();
        targetCursor =
            targetLines.skipSpaces(targetFromPos, true) || targetLines.firstPos();
        var lineDiff = targetToPos.line - targetCursor.line;
        sourceCursor.line += lineDiff;
        targetCursor.line += lineDiff;
        if (lineDiff < 0) {
            // If jumping to earlier lines, reset columns to the ends of
            // those lines.
            sourceCursor.column = sourceLines.getLineLength(sourceCursor.line);
            targetCursor.column = targetLines.getLineLength(targetCursor.line);
        }
        else {
            assert_1.default.strictEqual(lineDiff, 0);
        }
        while ((0, util_1.comparePos)(targetToPos, targetCursor) < 0 &&
            targetLines.prevPos(targetCursor, true)) {
            assert_1.default.ok(sourceLines.prevPos(sourceCursor, true));
            assert_1.default.strictEqual(sourceLines.charAt(sourceCursor), targetLines.charAt(targetCursor));
        }
    }
    return sourceCursor;
}


/***/ }),

/***/ 5169:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.normalize = void 0;
var util_1 = __nccwpck_require__(8704);
var defaults = {
    parser: __nccwpck_require__(2469),
    tabWidth: 4,
    useTabs: false,
    reuseWhitespace: true,
    lineTerminator: (0, util_1.getLineTerminator)(),
    wrapColumn: 74,
    sourceFileName: null,
    sourceMapName: null,
    sourceRoot: null,
    inputSourceMap: null,
    range: false,
    tolerant: true,
    quote: null,
    trailingComma: false,
    arrayBracketSpacing: false,
    objectCurlySpacing: true,
    arrowParensAlways: false,
    flowObjectCommas: true,
    tokens: true,
};
var hasOwn = defaults.hasOwnProperty;
// Copy options and fill in default values.
function normalize(opts) {
    var options = opts || defaults;
    function get(key) {
        return hasOwn.call(options, key) ? options[key] : defaults[key];
    }
    return {
        tabWidth: +get("tabWidth"),
        useTabs: !!get("useTabs"),
        reuseWhitespace: !!get("reuseWhitespace"),
        lineTerminator: get("lineTerminator"),
        wrapColumn: Math.max(get("wrapColumn"), 0),
        sourceFileName: get("sourceFileName"),
        sourceMapName: get("sourceMapName"),
        sourceRoot: get("sourceRoot"),
        inputSourceMap: get("inputSourceMap"),
        parser: get("esprima") || get("parser"),
        range: get("range"),
        tolerant: get("tolerant"),
        quote: get("quote"),
        trailingComma: get("trailingComma"),
        arrayBracketSpacing: get("arrayBracketSpacing"),
        objectCurlySpacing: get("objectCurlySpacing"),
        arrowParensAlways: get("arrowParensAlways"),
        flowObjectCommas: get("flowObjectCommas"),
        tokens: !!get("tokens"),
    };
}
exports.normalize = normalize;


/***/ }),

/***/ 9502:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parse = void 0;
var tslib_1 = __nccwpck_require__(204);
var assert_1 = tslib_1.__importDefault(__nccwpck_require__(9491));
var types = tslib_1.__importStar(__nccwpck_require__(6587));
var b = types.builders;
var isObject = types.builtInTypes.object;
var isArray = types.builtInTypes.array;
var options_1 = __nccwpck_require__(5169);
var lines_1 = __nccwpck_require__(1942);
var comments_1 = __nccwpck_require__(5478);
var util = tslib_1.__importStar(__nccwpck_require__(8704));
function parse(source, options) {
    options = (0, options_1.normalize)(options);
    var lines = (0, lines_1.fromString)(source, options);
    var sourceWithoutTabs = lines.toString({
        tabWidth: options.tabWidth,
        reuseWhitespace: false,
        useTabs: false,
    });
    var comments = [];
    var ast = options.parser.parse(sourceWithoutTabs, {
        jsx: true,
        loc: true,
        locations: true,
        range: options.range,
        comment: true,
        onComment: comments,
        tolerant: util.getOption(options, "tolerant", true),
        ecmaVersion: 6,
        sourceType: util.getOption(options, "sourceType", "module"),
    });
    // Use ast.tokens if possible, and otherwise fall back to the Esprima
    // tokenizer. All the preconfigured ../parsers/* expose ast.tokens
    // automatically, but custom parsers might need additional configuration
    // to avoid this fallback.
    var tokens = Array.isArray(ast.tokens)
        ? ast.tokens
        : (__nccwpck_require__(2285).tokenize)(sourceWithoutTabs, {
            loc: true,
        });
    // We will reattach the tokens array to the file object below.
    delete ast.tokens;
    // Make sure every token has a token.value string.
    tokens.forEach(function (token) {
        if (typeof token.value !== "string") {
            token.value = lines.sliceString(token.loc.start, token.loc.end);
        }
    });
    if (Array.isArray(ast.comments)) {
        comments = ast.comments;
        delete ast.comments;
    }
    if (ast.loc) {
        // If the source was empty, some parsers give loc.{start,end}.line
        // values of 0, instead of the minimum of 1.
        util.fixFaultyLocations(ast, lines);
    }
    else {
        ast.loc = {
            start: lines.firstPos(),
            end: lines.lastPos(),
        };
    }
    ast.loc.lines = lines;
    ast.loc.indent = 0;
    var file;
    var program;
    if (ast.type === "Program") {
        program = ast;
        // In order to ensure we reprint leading and trailing program
        // comments, wrap the original Program node with a File node. Only
        // ESTree parsers (Acorn and Esprima) return a Program as the root AST
        // node. Most other (Babylon-like) parsers return a File.
        file = b.file(ast, options.sourceFileName || null);
        file.loc = {
            start: lines.firstPos(),
            end: lines.lastPos(),
            lines: lines,
            indent: 0,
        };
    }
    else if (ast.type === "File") {
        file = ast;
        program = file.program;
    }
    // Expose file.tokens unless the caller passed false for options.tokens.
    if (options.tokens) {
        file.tokens = tokens;
    }
    // Expand the Program's .loc to include all comments (not just those
    // attached to the Program node, as its children may have comments as
    // well), since sometimes program.loc.{start,end} will coincide with the
    // .loc.{start,end} of the first and last *statements*, mistakenly
    // excluding comments that fall outside that region.
    var trueProgramLoc = util.getTrueLoc({
        type: program.type,
        loc: program.loc,
        body: [],
        comments: comments,
    }, lines);
    program.loc.start = trueProgramLoc.start;
    program.loc.end = trueProgramLoc.end;
    // Passing file.program here instead of just file means that initial
    // comments will be attached to program.body[0] instead of program.
    (0, comments_1.attach)(comments, program.body.length ? file.program : file, lines);
    // Return a copy of the original AST so that any changes made may be
    // compared to the original.
    return new TreeCopier(lines, tokens).copy(file);
}
exports.parse = parse;
var TreeCopier = function TreeCopier(lines, tokens) {
    assert_1.default.ok(this instanceof TreeCopier);
    this.lines = lines;
    this.tokens = tokens;
    this.startTokenIndex = 0;
    this.endTokenIndex = tokens.length;
    this.indent = 0;
    this.seen = new Map();
};
var TCp = TreeCopier.prototype;
TCp.copy = function (node) {
    if (this.seen.has(node)) {
        return this.seen.get(node);
    }
    if (isArray.check(node)) {
        var copy_1 = new Array(node.length);
        this.seen.set(node, copy_1);
        node.forEach(function (item, i) {
            copy_1[i] = this.copy(item);
        }, this);
        return copy_1;
    }
    if (!isObject.check(node)) {
        return node;
    }
    util.fixFaultyLocations(node, this.lines);
    var copy = Object.create(Object.getPrototypeOf(node), {
        original: {
            // Provide a link from the copy to the original.
            value: node,
            configurable: false,
            enumerable: false,
            writable: true,
        },
    });
    this.seen.set(node, copy);
    var loc = node.loc;
    var oldIndent = this.indent;
    var newIndent = oldIndent;
    var oldStartTokenIndex = this.startTokenIndex;
    var oldEndTokenIndex = this.endTokenIndex;
    if (loc) {
        // When node is a comment, we set node.loc.indent to
        // node.loc.start.column so that, when/if we print the comment by
        // itself, we can strip that much whitespace from the left margin of
        // the comment. This only really matters for multiline Block comments,
        // but it doesn't hurt for Line comments.
        if (node.type === "Block" ||
            node.type === "Line" ||
            node.type === "CommentBlock" ||
            node.type === "CommentLine" ||
            this.lines.isPrecededOnlyByWhitespace(loc.start)) {
            newIndent = this.indent = loc.start.column;
        }
        // Every node.loc has a reference to the original source lines as well
        // as a complete list of source tokens.
        loc.lines = this.lines;
        loc.tokens = this.tokens;
        loc.indent = newIndent;
        // Set loc.start.token and loc.end.token such that
        // loc.tokens.slice(loc.start.token, loc.end.token) returns a list of
        // all the tokens that make up this node.
        this.findTokenRange(loc);
    }
    var keys = Object.keys(node);
    var keyCount = keys.length;
    for (var i = 0; i < keyCount; ++i) {
        var key = keys[i];
        if (key === "loc") {
            copy[key] = node[key];
        }
        else if (key === "tokens" && node.type === "File") {
            // Preserve file.tokens (uncopied) in case client code cares about
            // it, even though Recast ignores it when reprinting.
            copy[key] = node[key];
        }
        else {
            copy[key] = this.copy(node[key]);
        }
    }
    this.indent = oldIndent;
    this.startTokenIndex = oldStartTokenIndex;
    this.endTokenIndex = oldEndTokenIndex;
    return copy;
};
// If we didn't have any idea where in loc.tokens to look for tokens
// contained by this loc, a binary search would be appropriate, but
// because we maintain this.startTokenIndex and this.endTokenIndex as we
// traverse the AST, we only need to make small (linear) adjustments to
// those indexes with each recursive iteration.
TCp.findTokenRange = function (loc) {
    // In the unlikely event that loc.tokens[this.startTokenIndex] starts
    // *after* loc.start, we need to rewind this.startTokenIndex first.
    while (this.startTokenIndex > 0) {
        var token = loc.tokens[this.startTokenIndex];
        if (util.comparePos(loc.start, token.loc.start) < 0) {
            --this.startTokenIndex;
        }
        else
            break;
    }
    // In the unlikely event that loc.tokens[this.endTokenIndex - 1] ends
    // *before* loc.end, we need to fast-forward this.endTokenIndex first.
    while (this.endTokenIndex < loc.tokens.length) {
        var token = loc.tokens[this.endTokenIndex];
        if (util.comparePos(token.loc.end, loc.end) < 0) {
            ++this.endTokenIndex;
        }
        else
            break;
    }
    // Increment this.startTokenIndex until we've found the first token
    // contained by this node.
    while (this.startTokenIndex < this.endTokenIndex) {
        var token = loc.tokens[this.startTokenIndex];
        if (util.comparePos(token.loc.start, loc.start) < 0) {
            ++this.startTokenIndex;
        }
        else
            break;
    }
    // Index into loc.tokens of the first token within this node.
    loc.start.token = this.startTokenIndex;
    // Decrement this.endTokenIndex until we've found the first token after
    // this node (not contained by the node).
    while (this.endTokenIndex > this.startTokenIndex) {
        var token = loc.tokens[this.endTokenIndex - 1];
        if (util.comparePos(loc.end, token.loc.end) < 0) {
            --this.endTokenIndex;
        }
        else
            break;
    }
    // Index into loc.tokens of the first token *after* this node.
    // If loc.start.token === loc.end.token, the node contains no tokens,
    // and the index is that of the next token following this node.
    loc.end.token = this.endTokenIndex;
};


/***/ }),

/***/ 4895:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getReprinter = exports.Patcher = void 0;
var tslib_1 = __nccwpck_require__(204);
var assert_1 = tslib_1.__importDefault(__nccwpck_require__(9491));
var linesModule = tslib_1.__importStar(__nccwpck_require__(1942));
var types = tslib_1.__importStar(__nccwpck_require__(6587));
var Printable = types.namedTypes.Printable;
var Expression = types.namedTypes.Expression;
var ReturnStatement = types.namedTypes.ReturnStatement;
var SourceLocation = types.namedTypes.SourceLocation;
var util_1 = __nccwpck_require__(8704);
var fast_path_1 = tslib_1.__importDefault(__nccwpck_require__(2194));
var isObject = types.builtInTypes.object;
var isArray = types.builtInTypes.array;
var isString = types.builtInTypes.string;
var riskyAdjoiningCharExp = /[0-9a-z_$]/i;
var Patcher = function Patcher(lines) {
    assert_1.default.ok(this instanceof Patcher);
    assert_1.default.ok(lines instanceof linesModule.Lines);
    var self = this, replacements = [];
    self.replace = function (loc, lines) {
        if (isString.check(lines))
            lines = linesModule.fromString(lines);
        replacements.push({
            lines: lines,
            start: loc.start,
            end: loc.end,
        });
    };
    self.get = function (loc) {
        // If no location is provided, return the complete Lines object.
        loc = loc || {
            start: { line: 1, column: 0 },
            end: { line: lines.length, column: lines.getLineLength(lines.length) },
        };
        var sliceFrom = loc.start, toConcat = [];
        function pushSlice(from, to) {
            assert_1.default.ok((0, util_1.comparePos)(from, to) <= 0);
            toConcat.push(lines.slice(from, to));
        }
        replacements
            .sort(function (a, b) { return (0, util_1.comparePos)(a.start, b.start); })
            .forEach(function (rep) {
            if ((0, util_1.comparePos)(sliceFrom, rep.start) > 0) {
                // Ignore nested replacement ranges.
            }
            else {
                pushSlice(sliceFrom, rep.start);
                toConcat.push(rep.lines);
                sliceFrom = rep.end;
            }
        });
        pushSlice(sliceFrom, loc.end);
        return linesModule.concat(toConcat);
    };
};
exports.Patcher = Patcher;
var Pp = Patcher.prototype;
Pp.tryToReprintComments = function (newNode, oldNode, print) {
    var patcher = this;
    if (!newNode.comments && !oldNode.comments) {
        // We were (vacuously) able to reprint all the comments!
        return true;
    }
    var newPath = fast_path_1.default.from(newNode);
    var oldPath = fast_path_1.default.from(oldNode);
    newPath.stack.push("comments", getSurroundingComments(newNode));
    oldPath.stack.push("comments", getSurroundingComments(oldNode));
    var reprints = [];
    var ableToReprintComments = findArrayReprints(newPath, oldPath, reprints);
    // No need to pop anything from newPath.stack or oldPath.stack, since
    // newPath and oldPath are fresh local variables.
    if (ableToReprintComments && reprints.length > 0) {
        reprints.forEach(function (reprint) {
            var oldComment = reprint.oldPath.getValue();
            assert_1.default.ok(oldComment.leading || oldComment.trailing);
            patcher.replace(oldComment.loc, 
            // Comments can't have .comments, so it doesn't matter whether we
            // print with comments or without.
            print(reprint.newPath).indentTail(oldComment.loc.indent));
        });
    }
    return ableToReprintComments;
};
// Get all comments that are either leading or trailing, ignoring any
// comments that occur inside node.loc. Returns an empty array for nodes
// with no leading or trailing comments.
function getSurroundingComments(node) {
    var result = [];
    if (node.comments && node.comments.length > 0) {
        node.comments.forEach(function (comment) {
            if (comment.leading || comment.trailing) {
                result.push(comment);
            }
        });
    }
    return result;
}
Pp.deleteComments = function (node) {
    if (!node.comments) {
        return;
    }
    var patcher = this;
    node.comments.forEach(function (comment) {
        if (comment.leading) {
            // Delete leading comments along with any trailing whitespace they
            // might have.
            patcher.replace({
                start: comment.loc.start,
                end: node.loc.lines.skipSpaces(comment.loc.end, false, false),
            }, "");
        }
        else if (comment.trailing) {
            // Delete trailing comments along with any leading whitespace they
            // might have.
            patcher.replace({
                start: node.loc.lines.skipSpaces(comment.loc.start, true, false),
                end: comment.loc.end,
            }, "");
        }
    });
};
function getReprinter(path) {
    assert_1.default.ok(path instanceof fast_path_1.default);
    // Make sure that this path refers specifically to a Node, rather than
    // some non-Node subproperty of a Node.
    var node = path.getValue();
    if (!Printable.check(node))
        return;
    var orig = node.original;
    var origLoc = orig && orig.loc;
    var lines = origLoc && origLoc.lines;
    var reprints = [];
    if (!lines || !findReprints(path, reprints))
        return;
    return function (print) {
        var patcher = new Patcher(lines);
        reprints.forEach(function (reprint) {
            var newNode = reprint.newPath.getValue();
            var oldNode = reprint.oldPath.getValue();
            SourceLocation.assert(oldNode.loc, true);
            var needToPrintNewPathWithComments = !patcher.tryToReprintComments(newNode, oldNode, print);
            if (needToPrintNewPathWithComments) {
                // Since we were not able to preserve all leading/trailing
                // comments, we delete oldNode's comments, print newPath with
                // comments, and then patch the resulting lines where oldNode used
                // to be.
                patcher.deleteComments(oldNode);
            }
            var newLines = print(reprint.newPath, {
                includeComments: needToPrintNewPathWithComments,
                // If the oldNode we're replacing already had parentheses, we may
                // not need to print the new node with any extra parentheses,
                // because the existing parentheses will suffice. However, if the
                // newNode has a different type than the oldNode, let the printer
                // decide if reprint.newPath needs parentheses, as usual.
                avoidRootParens: oldNode.type === newNode.type && reprint.oldPath.hasParens(),
            }).indentTail(oldNode.loc.indent);
            var nls = needsLeadingSpace(lines, oldNode.loc, newLines);
            var nts = needsTrailingSpace(lines, oldNode.loc, newLines);
            // If we try to replace the argument of a ReturnStatement like
            // return"asdf" with e.g. a literal null expression, we run the risk
            // of ending up with returnnull, so we need to add an extra leading
            // space in situations where that might happen. Likewise for
            // "asdf"in obj. See #170.
            if (nls || nts) {
                var newParts = [];
                nls && newParts.push(" ");
                newParts.push(newLines);
                nts && newParts.push(" ");
                newLines = linesModule.concat(newParts);
            }
            patcher.replace(oldNode.loc, newLines);
        });
        // Recall that origLoc is the .loc of an ancestor node that is
        // guaranteed to contain all the reprinted nodes and comments.
        var patchedLines = patcher.get(origLoc).indentTail(-orig.loc.indent);
        if (path.needsParens()) {
            return linesModule.concat(["(", patchedLines, ")"]);
        }
        return patchedLines;
    };
}
exports.getReprinter = getReprinter;
// If the last character before oldLoc and the first character of newLines
// are both identifier characters, they must be separated by a space,
// otherwise they will most likely get fused together into a single token.
function needsLeadingSpace(oldLines, oldLoc, newLines) {
    var posBeforeOldLoc = (0, util_1.copyPos)(oldLoc.start);
    // The character just before the location occupied by oldNode.
    var charBeforeOldLoc = oldLines.prevPos(posBeforeOldLoc) && oldLines.charAt(posBeforeOldLoc);
    // First character of the reprinted node.
    var newFirstChar = newLines.charAt(newLines.firstPos());
    return (charBeforeOldLoc &&
        riskyAdjoiningCharExp.test(charBeforeOldLoc) &&
        newFirstChar &&
        riskyAdjoiningCharExp.test(newFirstChar));
}
// If the last character of newLines and the first character after oldLoc
// are both identifier characters, they must be separated by a space,
// otherwise they will most likely get fused together into a single token.
function needsTrailingSpace(oldLines, oldLoc, newLines) {
    // The character just after the location occupied by oldNode.
    var charAfterOldLoc = oldLines.charAt(oldLoc.end);
    var newLastPos = newLines.lastPos();
    // Last character of the reprinted node.
    var newLastChar = newLines.prevPos(newLastPos) && newLines.charAt(newLastPos);
    return (newLastChar &&
        riskyAdjoiningCharExp.test(newLastChar) &&
        charAfterOldLoc &&
        riskyAdjoiningCharExp.test(charAfterOldLoc));
}
function findReprints(newPath, reprints) {
    var newNode = newPath.getValue();
    Printable.assert(newNode);
    var oldNode = newNode.original;
    Printable.assert(oldNode);
    assert_1.default.deepEqual(reprints, []);
    if (newNode.type !== oldNode.type) {
        return false;
    }
    var oldPath = new fast_path_1.default(oldNode);
    var canReprint = findChildReprints(newPath, oldPath, reprints);
    if (!canReprint) {
        // Make absolutely sure the calling code does not attempt to reprint
        // any nodes.
        reprints.length = 0;
    }
    return canReprint;
}
function findAnyReprints(newPath, oldPath, reprints) {
    var newNode = newPath.getValue();
    var oldNode = oldPath.getValue();
    if (newNode === oldNode)
        return true;
    if (isArray.check(newNode))
        return findArrayReprints(newPath, oldPath, reprints);
    if (isObject.check(newNode))
        return findObjectReprints(newPath, oldPath, reprints);
    return false;
}
function findArrayReprints(newPath, oldPath, reprints) {
    var newNode = newPath.getValue();
    var oldNode = oldPath.getValue();
    if (newNode === oldNode ||
        newPath.valueIsDuplicate() ||
        oldPath.valueIsDuplicate()) {
        return true;
    }
    isArray.assert(newNode);
    var len = newNode.length;
    if (!(isArray.check(oldNode) && oldNode.length === len))
        return false;
    for (var i = 0; i < len; ++i) {
        newPath.stack.push(i, newNode[i]);
        oldPath.stack.push(i, oldNode[i]);
        var canReprint = findAnyReprints(newPath, oldPath, reprints);
        newPath.stack.length -= 2;
        oldPath.stack.length -= 2;
        if (!canReprint) {
            return false;
        }
    }
    return true;
}
function findObjectReprints(newPath, oldPath, reprints) {
    var newNode = newPath.getValue();
    isObject.assert(newNode);
    if (newNode.original === null) {
        // If newNode.original node was set to null, reprint the node.
        return false;
    }
    var oldNode = oldPath.getValue();
    if (!isObject.check(oldNode))
        return false;
    if (newNode === oldNode ||
        newPath.valueIsDuplicate() ||
        oldPath.valueIsDuplicate()) {
        return true;
    }
    if (Printable.check(newNode)) {
        if (!Printable.check(oldNode)) {
            return false;
        }
        var newParentNode = newPath.getParentNode();
        var oldParentNode = oldPath.getParentNode();
        if (oldParentNode !== null &&
            oldParentNode.type === "FunctionTypeAnnotation" &&
            newParentNode !== null &&
            newParentNode.type === "FunctionTypeAnnotation") {
            var oldNeedsParens = oldParentNode.params.length !== 1 || !!oldParentNode.params[0].name;
            var newNeedParens = newParentNode.params.length !== 1 || !!newParentNode.params[0].name;
            if (!oldNeedsParens && newNeedParens) {
                return false;
            }
        }
        // Here we need to decide whether the reprinted code for newNode is
        // appropriate for patching into the location of oldNode.
        if (newNode.type === oldNode.type) {
            var childReprints = [];
            if (findChildReprints(newPath, oldPath, childReprints)) {
                reprints.push.apply(reprints, childReprints);
            }
            else if (oldNode.loc) {
                // If we have no .loc information for oldNode, then we won't be
                // able to reprint it.
                reprints.push({
                    oldPath: oldPath.copy(),
                    newPath: newPath.copy(),
                });
            }
            else {
                return false;
            }
            return true;
        }
        if (Expression.check(newNode) &&
            Expression.check(oldNode) &&
            // If we have no .loc information for oldNode, then we won't be
            // able to reprint it.
            oldNode.loc) {
            // If both nodes are subtypes of Expression, then we should be able
            // to fill the location occupied by the old node with code printed
            // for the new node with no ill consequences.
            reprints.push({
                oldPath: oldPath.copy(),
                newPath: newPath.copy(),
            });
            return true;
        }
        // The nodes have different types, and at least one of the types is
        // not a subtype of the Expression type, so we cannot safely assume
        // the nodes are syntactically interchangeable.
        return false;
    }
    return findChildReprints(newPath, oldPath, reprints);
}
function findChildReprints(newPath, oldPath, reprints) {
    var newNode = newPath.getValue();
    var oldNode = oldPath.getValue();
    isObject.assert(newNode);
    isObject.assert(oldNode);
    if (newNode.original === null) {
        // If newNode.original node was set to null, reprint the node.
        return false;
    }
    // If this node needs parentheses and will not be wrapped with
    // parentheses when reprinted, then return false to skip reprinting and
    // let it be printed generically.
    if (newPath.needsParens() && !oldPath.hasParens()) {
        return false;
    }
    var keys = (0, util_1.getUnionOfKeys)(oldNode, newNode);
    if (oldNode.type === "File" || newNode.type === "File") {
        // Don't bother traversing file.tokens, an often very large array
        // returned by Babylon, and useless for our purposes.
        delete keys.tokens;
    }
    // Don't bother traversing .loc objects looking for reprintable nodes.
    delete keys.loc;
    var originalReprintCount = reprints.length;
    for (var k in keys) {
        if (k.charAt(0) === "_") {
            // Ignore "private" AST properties added by e.g. Babel plugins and
            // parsers like Babylon.
            continue;
        }
        newPath.stack.push(k, types.getFieldValue(newNode, k));
        oldPath.stack.push(k, types.getFieldValue(oldNode, k));
        var canReprint = findAnyReprints(newPath, oldPath, reprints);
        newPath.stack.length -= 2;
        oldPath.stack.length -= 2;
        if (!canReprint) {
            return false;
        }
    }
    // Return statements might end up running into ASI issues due to
    // comments inserted deep within the tree, so reprint them if anything
    // changed within them.
    if (ReturnStatement.check(newPath.getNode()) &&
        reprints.length > originalReprintCount) {
        return false;
    }
    return true;
}


/***/ }),

/***/ 4279:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Printer = void 0;
var tslib_1 = __nccwpck_require__(204);
var assert_1 = tslib_1.__importDefault(__nccwpck_require__(9491));
var types = tslib_1.__importStar(__nccwpck_require__(6587));
var comments_1 = __nccwpck_require__(5478);
var fast_path_1 = tslib_1.__importDefault(__nccwpck_require__(2194));
var lines_1 = __nccwpck_require__(1942);
var options_1 = __nccwpck_require__(5169);
var patcher_1 = __nccwpck_require__(4895);
var util = tslib_1.__importStar(__nccwpck_require__(8704));
var namedTypes = types.namedTypes;
var isString = types.builtInTypes.string;
var isObject = types.builtInTypes.object;
var PrintResult = function PrintResult(code, sourceMap) {
    assert_1.default.ok(this instanceof PrintResult);
    isString.assert(code);
    this.code = code;
    if (sourceMap) {
        isObject.assert(sourceMap);
        this.map = sourceMap;
    }
};
var PRp = PrintResult.prototype;
var warnedAboutToString = false;
PRp.toString = function () {
    if (!warnedAboutToString) {
        console.warn("Deprecation warning: recast.print now returns an object with " +
            "a .code property. You appear to be treating the object as a " +
            "string, which might still work but is strongly discouraged.");
        warnedAboutToString = true;
    }
    return this.code;
};
var emptyPrintResult = new PrintResult("");
var Printer = function Printer(config) {
    assert_1.default.ok(this instanceof Printer);
    var explicitTabWidth = config && config.tabWidth;
    config = (0, options_1.normalize)(config);
    // It's common for client code to pass the same options into both
    // recast.parse and recast.print, but the Printer doesn't need (and
    // can be confused by) config.sourceFileName, so we null it out.
    config.sourceFileName = null;
    // Non-destructively modifies options with overrides, and returns a
    // new print function that uses the modified options.
    function makePrintFunctionWith(options, overrides) {
        options = Object.assign({}, options, overrides);
        return function (path) { return print(path, options); };
    }
    function print(path, options) {
        assert_1.default.ok(path instanceof fast_path_1.default);
        options = options || {};
        if (options.includeComments) {
            return (0, comments_1.printComments)(path, makePrintFunctionWith(options, {
                includeComments: false,
            }));
        }
        var oldTabWidth = config.tabWidth;
        if (!explicitTabWidth) {
            var loc = path.getNode().loc;
            if (loc && loc.lines && loc.lines.guessTabWidth) {
                config.tabWidth = loc.lines.guessTabWidth();
            }
        }
        var reprinter = (0, patcher_1.getReprinter)(path);
        var lines = reprinter
            ? // Since the print function that we pass to the reprinter will
                // be used to print "new" nodes, it's tempting to think we
                // should pass printRootGenerically instead of print, to avoid
                // calling maybeReprint again, but that would be a mistake
                // because the new nodes might not be entirely new, but merely
                // moved from elsewhere in the AST. The print function is the
                // right choice because it gives us the opportunity to reprint
                // such nodes using their original source.
                reprinter(print)
            : genericPrint(path, config, options, makePrintFunctionWith(options, {
                includeComments: true,
                avoidRootParens: false,
            }));
        config.tabWidth = oldTabWidth;
        return lines;
    }
    this.print = function (ast) {
        if (!ast) {
            return emptyPrintResult;
        }
        var lines = print(fast_path_1.default.from(ast), {
            includeComments: true,
            avoidRootParens: false,
        });
        return new PrintResult(lines.toString(config), util.composeSourceMaps(config.inputSourceMap, lines.getSourceMap(config.sourceMapName, config.sourceRoot)));
    };
    this.printGenerically = function (ast) {
        if (!ast) {
            return emptyPrintResult;
        }
        // Print the entire AST generically.
        function printGenerically(path) {
            return (0, comments_1.printComments)(path, function (path) {
                return genericPrint(path, config, {
                    includeComments: true,
                    avoidRootParens: false,
                }, printGenerically);
            });
        }
        var path = fast_path_1.default.from(ast);
        var oldReuseWhitespace = config.reuseWhitespace;
        // Do not reuse whitespace (or anything else, for that matter)
        // when printing generically.
        config.reuseWhitespace = false;
        // TODO Allow printing of comments?
        var pr = new PrintResult(printGenerically(path).toString(config));
        config.reuseWhitespace = oldReuseWhitespace;
        return pr;
    };
};
exports.Printer = Printer;
function genericPrint(path, config, options, printPath) {
    assert_1.default.ok(path instanceof fast_path_1.default);
    var node = path.getValue();
    var parts = [];
    var linesWithoutParens = genericPrintNoParens(path, config, printPath);
    if (!node || linesWithoutParens.isEmpty()) {
        return linesWithoutParens;
    }
    var shouldAddParens = false;
    var decoratorsLines = printDecorators(path, printPath);
    if (decoratorsLines.isEmpty()) {
        // Nodes with decorators can't have parentheses, so we can avoid
        // computing path.needsParens() except in this case.
        if (!options.avoidRootParens) {
            shouldAddParens = path.needsParens();
        }
    }
    else {
        parts.push(decoratorsLines);
    }
    if (shouldAddParens) {
        parts.unshift("(");
    }
    parts.push(linesWithoutParens);
    if (shouldAddParens) {
        parts.push(")");
    }
    return (0, lines_1.concat)(parts);
}
// Note that the `options` parameter of this function is what other
// functions in this file call the `config` object (that is, the
// configuration object originally passed into the Printer constructor).
// Its properties are documented in lib/options.js.
function genericPrintNoParens(path, options, print) {
    var n = path.getValue();
    if (!n) {
        return (0, lines_1.fromString)("");
    }
    if (typeof n === "string") {
        return (0, lines_1.fromString)(n, options);
    }
    namedTypes.Printable.assert(n);
    var parts = [];
    switch (n.type) {
        case "File":
            return path.call(print, "program");
        case "Program":
            // Babel 6
            if (n.directives) {
                path.each(function (childPath) {
                    parts.push(print(childPath), ";\n");
                }, "directives");
            }
            if (n.interpreter) {
                parts.push(path.call(print, "interpreter"));
            }
            parts.push(path.call(function (bodyPath) { return printStatementSequence(bodyPath, options, print); }, "body"));
            return (0, lines_1.concat)(parts);
        case "Noop": // Babel extension.
        case "EmptyStatement":
            return (0, lines_1.fromString)("");
        case "ExpressionStatement":
            return (0, lines_1.concat)([path.call(print, "expression"), ";"]);
        case "ParenthesizedExpression": // Babel extension.
            return (0, lines_1.concat)(["(", path.call(print, "expression"), ")"]);
        case "BinaryExpression":
        case "LogicalExpression":
        case "AssignmentExpression":
            return (0, lines_1.fromString)(" ").join([
                path.call(print, "left"),
                n.operator,
                path.call(print, "right"),
            ]);
        case "AssignmentPattern":
            return (0, lines_1.concat)([
                path.call(print, "left"),
                " = ",
                path.call(print, "right"),
            ]);
        case "MemberExpression":
        case "OptionalMemberExpression": {
            parts.push(path.call(print, "object"));
            var property = path.call(print, "property");
            // Like n.optional, except with defaults applied, so optional
            // defaults to true for OptionalMemberExpression nodes.
            var optional = types.getFieldValue(n, "optional");
            if (n.computed) {
                parts.push(optional ? "?.[" : "[", property, "]");
            }
            else {
                parts.push(optional ? "?." : ".", property);
            }
            return (0, lines_1.concat)(parts);
        }
        case "ChainExpression":
            return path.call(print, "expression");
        case "MetaProperty":
            return (0, lines_1.concat)([
                path.call(print, "meta"),
                ".",
                path.call(print, "property"),
            ]);
        case "BindExpression":
            if (n.object) {
                parts.push(path.call(print, "object"));
            }
            parts.push("::", path.call(print, "callee"));
            return (0, lines_1.concat)(parts);
        case "Path":
            return (0, lines_1.fromString)(".").join(n.body);
        case "Identifier":
            return (0, lines_1.concat)([
                (0, lines_1.fromString)(n.name, options),
                n.optional ? "?" : "",
                path.call(print, "typeAnnotation"),
            ]);
        case "SpreadElement":
        case "SpreadElementPattern":
        case "RestProperty": // Babel 6 for ObjectPattern
        case "SpreadProperty":
        case "SpreadPropertyPattern":
        case "ObjectTypeSpreadProperty":
        case "RestElement":
            return (0, lines_1.concat)([
                "...",
                path.call(print, "argument"),
                path.call(print, "typeAnnotation"),
            ]);
        case "FunctionDeclaration":
        case "FunctionExpression":
        case "TSDeclareFunction":
            if (n.declare) {
                parts.push("declare ");
            }
            if (n.async) {
                parts.push("async ");
            }
            parts.push("function");
            if (n.generator)
                parts.push("*");
            if (n.id) {
                parts.push(" ", path.call(print, "id"), path.call(print, "typeParameters"));
            }
            else {
                if (n.typeParameters) {
                    parts.push(path.call(print, "typeParameters"));
                }
            }
            parts.push("(", printFunctionParams(path, options, print), ")", path.call(print, "returnType"));
            if (n.body) {
                parts.push(" ", path.call(print, "body"));
            }
            return (0, lines_1.concat)(parts);
        case "ArrowFunctionExpression":
            if (n.async) {
                parts.push("async ");
            }
            if (n.typeParameters) {
                parts.push(path.call(print, "typeParameters"));
            }
            if (!options.arrowParensAlways &&
                n.params.length === 1 &&
                !n.rest &&
                n.params[0].type === "Identifier" &&
                !n.params[0].typeAnnotation &&
                !n.returnType) {
                parts.push(path.call(print, "params", 0));
            }
            else {
                parts.push("(", printFunctionParams(path, options, print), ")", path.call(print, "returnType"));
            }
            parts.push(" => ", path.call(print, "body"));
            return (0, lines_1.concat)(parts);
        case "MethodDefinition":
            return printMethod(path, options, print);
        case "YieldExpression":
            parts.push("yield");
            if (n.delegate)
                parts.push("*");
            if (n.argument)
                parts.push(" ", path.call(print, "argument"));
            return (0, lines_1.concat)(parts);
        case "AwaitExpression":
            parts.push("await");
            if (n.all)
                parts.push("*");
            if (n.argument)
                parts.push(" ", path.call(print, "argument"));
            return (0, lines_1.concat)(parts);
        case "ModuleExpression":
            return (0, lines_1.concat)([
                "module {\n",
                path.call(print, "body").indent(options.tabWidth),
                "\n}",
            ]);
        case "ModuleDeclaration":
            parts.push("module", path.call(print, "id"));
            if (n.source) {
                assert_1.default.ok(!n.body);
                parts.push("from", path.call(print, "source"));
            }
            else {
                parts.push(path.call(print, "body"));
            }
            return (0, lines_1.fromString)(" ").join(parts);
        case "ImportSpecifier":
            if (n.importKind && n.importKind !== "value") {
                parts.push(n.importKind + " ");
            }
            if (n.imported) {
                parts.push(path.call(print, "imported"));
                if (n.local && n.local.name !== n.imported.name) {
                    parts.push(" as ", path.call(print, "local"));
                }
            }
            else if (n.id) {
                parts.push(path.call(print, "id"));
                if (n.name) {
                    parts.push(" as ", path.call(print, "name"));
                }
            }
            return (0, lines_1.concat)(parts);
        case "ExportSpecifier":
            if (n.exportKind && n.exportKind !== "value") {
                parts.push(n.exportKind + " ");
            }
            if (n.local) {
                parts.push(path.call(print, "local"));
                if (n.exported && n.exported.name !== n.local.name) {
                    parts.push(" as ", path.call(print, "exported"));
                }
            }
            else if (n.id) {
                parts.push(path.call(print, "id"));
                if (n.name) {
                    parts.push(" as ", path.call(print, "name"));
                }
            }
            return (0, lines_1.concat)(parts);
        case "ExportBatchSpecifier":
            return (0, lines_1.fromString)("*");
        case "ImportNamespaceSpecifier":
            parts.push("* as ");
            if (n.local) {
                parts.push(path.call(print, "local"));
            }
            else if (n.id) {
                parts.push(path.call(print, "id"));
            }
            return (0, lines_1.concat)(parts);
        case "ImportDefaultSpecifier":
            if (n.local) {
                return path.call(print, "local");
            }
            return path.call(print, "id");
        case "TSExportAssignment":
            return (0, lines_1.concat)(["export = ", path.call(print, "expression")]);
        case "ExportDeclaration":
        case "ExportDefaultDeclaration":
        case "ExportNamedDeclaration":
            return printExportDeclaration(path, options, print);
        case "ExportAllDeclaration":
            parts.push("export *");
            if (n.exported) {
                parts.push(" as ", path.call(print, "exported"));
            }
            parts.push(" from ", path.call(print, "source"), ";");
            return (0, lines_1.concat)(parts);
        case "TSNamespaceExportDeclaration":
            parts.push("export as namespace ", path.call(print, "id"));
            return maybeAddSemicolon((0, lines_1.concat)(parts));
        case "ExportNamespaceSpecifier":
            return (0, lines_1.concat)(["* as ", path.call(print, "exported")]);
        case "ExportDefaultSpecifier":
            return path.call(print, "exported");
        case "Import":
            return (0, lines_1.fromString)("import", options);
        // Recast and ast-types currently support dynamic import(...) using
        // either this dedicated ImportExpression type or a CallExpression
        // whose callee has type Import.
        // https://github.com/benjamn/ast-types/pull/365#issuecomment-605214486
        case "ImportExpression":
            return (0, lines_1.concat)(["import(", path.call(print, "source"), ")"]);
        case "ImportDeclaration": {
            parts.push("import ");
            if (n.importKind && n.importKind !== "value") {
                parts.push(n.importKind + " ");
            }
            if (n.specifiers && n.specifiers.length > 0) {
                var unbracedSpecifiers_1 = [];
                var bracedSpecifiers_1 = [];
                path.each(function (specifierPath) {
                    var spec = specifierPath.getValue();
                    if (spec.type === "ImportSpecifier") {
                        bracedSpecifiers_1.push(print(specifierPath));
                    }
                    else if (spec.type === "ImportDefaultSpecifier" ||
                        spec.type === "ImportNamespaceSpecifier") {
                        unbracedSpecifiers_1.push(print(specifierPath));
                    }
                }, "specifiers");
                unbracedSpecifiers_1.forEach(function (lines, i) {
                    if (i > 0) {
                        parts.push(", ");
                    }
                    parts.push(lines);
                });
                if (bracedSpecifiers_1.length > 0) {
                    var lines = (0, lines_1.fromString)(", ").join(bracedSpecifiers_1);
                    if (lines.getLineLength(1) > options.wrapColumn) {
                        lines = (0, lines_1.concat)([
                            (0, lines_1.fromString)(",\n").join(bracedSpecifiers_1).indent(options.tabWidth),
                            ",",
                        ]);
                    }
                    if (unbracedSpecifiers_1.length > 0) {
                        parts.push(", ");
                    }
                    if (lines.length > 1) {
                        parts.push("{\n", lines, "\n}");
                    }
                    else if (options.objectCurlySpacing) {
                        parts.push("{ ", lines, " }");
                    }
                    else {
                        parts.push("{", lines, "}");
                    }
                }
                parts.push(" from ");
            }
            parts.push(path.call(print, "source"), maybePrintImportAssertions(path, options, print), ";");
            return (0, lines_1.concat)(parts);
        }
        case "ImportAttribute":
            return (0, lines_1.concat)([path.call(print, "key"), ": ", path.call(print, "value")]);
        case "StaticBlock":
            parts.push("static ");
        // Intentionally fall through to BlockStatement below.
        case "BlockStatement": {
            var naked_1 = path.call(function (bodyPath) { return printStatementSequence(bodyPath, options, print); }, "body");
            if (naked_1.isEmpty()) {
                if (!n.directives || n.directives.length === 0) {
                    parts.push("{}");
                    return (0, lines_1.concat)(parts);
                }
            }
            parts.push("{\n");
            // Babel 6
            if (n.directives) {
                path.each(function (childPath) {
                    parts.push(maybeAddSemicolon(print(childPath).indent(options.tabWidth)), n.directives.length > 1 || !naked_1.isEmpty() ? "\n" : "");
                }, "directives");
            }
            parts.push(naked_1.indent(options.tabWidth));
            parts.push("\n}");
            return (0, lines_1.concat)(parts);
        }
        case "ReturnStatement": {
            parts.push("return");
            if (n.argument) {
                var argLines = path.call(print, "argument");
                if (argLines.startsWithComment() ||
                    (argLines.length > 1 &&
                        namedTypes.JSXElement &&
                        namedTypes.JSXElement.check(n.argument))) {
                    parts.push(" (\n", argLines.indent(options.tabWidth), "\n)");
                }
                else {
                    parts.push(" ", argLines);
                }
            }
            parts.push(";");
            return (0, lines_1.concat)(parts);
        }
        case "CallExpression":
        case "OptionalCallExpression":
            parts.push(path.call(print, "callee"));
            if (n.typeParameters) {
                parts.push(path.call(print, "typeParameters"));
            }
            if (n.typeArguments) {
                parts.push(path.call(print, "typeArguments"));
            }
            // Like n.optional, but defaults to true for OptionalCallExpression
            // nodes that are missing an n.optional property (unusual),
            // according to the OptionalCallExpression definition in ast-types.
            if (types.getFieldValue(n, "optional")) {
                parts.push("?.");
            }
            parts.push(printArgumentsList(path, options, print));
            return (0, lines_1.concat)(parts);
        case "RecordExpression":
            parts.push("#");
        // Intentionally fall through to printing the object literal...
        case "ObjectExpression":
        case "ObjectPattern":
        case "ObjectTypeAnnotation": {
            var isTypeAnnotation_1 = n.type === "ObjectTypeAnnotation";
            var separator_1 = options.flowObjectCommas
                ? ","
                : isTypeAnnotation_1
                    ? ";"
                    : ",";
            var fields = [];
            var allowBreak_1 = false;
            if (isTypeAnnotation_1) {
                fields.push("indexers", "callProperties");
                if (n.internalSlots != null) {
                    fields.push("internalSlots");
                }
            }
            fields.push("properties");
            var len_1 = 0;
            fields.forEach(function (field) {
                len_1 += n[field].length;
            });
            var oneLine_1 = (isTypeAnnotation_1 && len_1 === 1) || len_1 === 0;
            var leftBrace = n.exact ? "{|" : "{";
            var rightBrace = n.exact ? "|}" : "}";
            parts.push(oneLine_1 ? leftBrace : leftBrace + "\n");
            var leftBraceIndex = parts.length - 1;
            var i_1 = 0;
            fields.forEach(function (field) {
                path.each(function (childPath) {
                    var lines = print(childPath);
                    if (!oneLine_1) {
                        lines = lines.indent(options.tabWidth);
                    }
                    var multiLine = !isTypeAnnotation_1 && lines.length > 1;
                    if (multiLine && allowBreak_1) {
                        // Similar to the logic for BlockStatement.
                        parts.push("\n");
                    }
                    parts.push(lines);
                    if (i_1 < len_1 - 1) {
                        // Add an extra line break if the previous object property
                        // had a multi-line value.
                        parts.push(separator_1 + (multiLine ? "\n\n" : "\n"));
                        allowBreak_1 = !multiLine;
                    }
                    else if (len_1 !== 1 && isTypeAnnotation_1) {
                        parts.push(separator_1);
                    }
                    else if (!oneLine_1 &&
                        util.isTrailingCommaEnabled(options, "objects") &&
                        childPath.getValue().type !== "RestElement") {
                        parts.push(separator_1);
                    }
                    i_1++;
                }, field);
            });
            if (n.inexact) {
                var line = (0, lines_1.fromString)("...", options);
                if (oneLine_1) {
                    if (len_1 > 0) {
                        parts.push(separator_1, " ");
                    }
                    parts.push(line);
                }
                else {
                    // No trailing separator after ... to maintain parity with prettier.
                    parts.push("\n", line.indent(options.tabWidth));
                }
            }
            parts.push(oneLine_1 ? rightBrace : "\n" + rightBrace);
            if (i_1 !== 0 && oneLine_1 && options.objectCurlySpacing) {
                parts[leftBraceIndex] = leftBrace + " ";
                parts[parts.length - 1] = " " + rightBrace;
            }
            if (n.typeAnnotation) {
                parts.push(path.call(print, "typeAnnotation"));
            }
            return (0, lines_1.concat)(parts);
        }
        case "PropertyPattern":
            return (0, lines_1.concat)([
                path.call(print, "key"),
                ": ",
                path.call(print, "pattern"),
            ]);
        case "ObjectProperty": // Babel 6
        case "Property": {
            // Non-standard AST node type.
            if (n.method || n.kind === "get" || n.kind === "set") {
                return printMethod(path, options, print);
            }
            if (n.shorthand && n.value.type === "AssignmentPattern") {
                return path.call(print, "value");
            }
            var key = path.call(print, "key");
            if (n.computed) {
                parts.push("[", key, "]");
            }
            else {
                parts.push(key);
            }
            if (!n.shorthand || n.key.name !== n.value.name) {
                parts.push(": ", path.call(print, "value"));
            }
            return (0, lines_1.concat)(parts);
        }
        case "ClassMethod": // Babel 6
        case "ObjectMethod": // Babel 6
        case "ClassPrivateMethod":
        case "TSDeclareMethod":
            return printMethod(path, options, print);
        case "PrivateName":
            return (0, lines_1.concat)(["#", path.call(print, "id")]);
        case "Decorator":
            return (0, lines_1.concat)(["@", path.call(print, "expression")]);
        case "TupleExpression":
            parts.push("#");
        // Intentionally fall through to printing the tuple elements...
        case "ArrayExpression":
        case "ArrayPattern": {
            var elems = n.elements;
            var len_2 = elems.length;
            var printed_1 = path.map(print, "elements");
            var joined = (0, lines_1.fromString)(", ").join(printed_1);
            var oneLine_2 = joined.getLineLength(1) <= options.wrapColumn;
            if (oneLine_2) {
                if (options.arrayBracketSpacing) {
                    parts.push("[ ");
                }
                else {
                    parts.push("[");
                }
            }
            else {
                parts.push("[\n");
            }
            path.each(function (elemPath) {
                var i = elemPath.getName();
                var elem = elemPath.getValue();
                if (!elem) {
                    // If the array expression ends with a hole, that hole
                    // will be ignored by the interpreter, but if it ends with
                    // two (or more) holes, we need to write out two (or more)
                    // commas so that the resulting code is interpreted with
                    // both (all) of the holes.
                    parts.push(",");
                }
                else {
                    var lines = printed_1[i];
                    if (oneLine_2) {
                        if (i > 0)
                            parts.push(" ");
                    }
                    else {
                        lines = lines.indent(options.tabWidth);
                    }
                    parts.push(lines);
                    if (i < len_2 - 1 ||
                        (!oneLine_2 && util.isTrailingCommaEnabled(options, "arrays")))
                        parts.push(",");
                    if (!oneLine_2)
                        parts.push("\n");
                }
            }, "elements");
            if (oneLine_2 && options.arrayBracketSpacing) {
                parts.push(" ]");
            }
            else {
                parts.push("]");
            }
            if (n.typeAnnotation) {
                parts.push(path.call(print, "typeAnnotation"));
            }
            return (0, lines_1.concat)(parts);
        }
        case "SequenceExpression":
            return (0, lines_1.fromString)(", ").join(path.map(print, "expressions"));
        case "ThisExpression":
            return (0, lines_1.fromString)("this");
        case "Super":
            return (0, lines_1.fromString)("super");
        case "NullLiteral": // Babel 6 Literal split
            return (0, lines_1.fromString)("null");
        case "RegExpLiteral": // Babel 6 Literal split
            return (0, lines_1.fromString)(getPossibleRaw(n) || "/".concat(n.pattern, "/").concat(n.flags || ""), options);
        case "BigIntLiteral": // Babel 7 Literal split
            return (0, lines_1.fromString)(getPossibleRaw(n) || n.value + "n", options);
        case "NumericLiteral": // Babel 6 Literal Split
            return (0, lines_1.fromString)(getPossibleRaw(n) || n.value, options);
        case "DecimalLiteral":
            return (0, lines_1.fromString)(getPossibleRaw(n) || n.value + "m", options);
        case "StringLiteral":
            return (0, lines_1.fromString)(nodeStr(n.value, options));
        case "BooleanLiteral": // Babel 6 Literal split
        case "Literal":
            return (0, lines_1.fromString)(getPossibleRaw(n) ||
                (typeof n.value === "string" ? nodeStr(n.value, options) : n.value), options);
        case "Directive": // Babel 6
            return path.call(print, "value");
        case "DirectiveLiteral": // Babel 6
            return (0, lines_1.fromString)(getPossibleRaw(n) || nodeStr(n.value, options), options);
        case "InterpreterDirective":
            return (0, lines_1.fromString)("#!".concat(n.value, "\n"), options);
        case "ModuleSpecifier":
            if (n.local) {
                throw new Error("The ESTree ModuleSpecifier type should be abstract");
            }
            // The Esprima ModuleSpecifier type is just a string-valued
            // Literal identifying the imported-from module.
            return (0, lines_1.fromString)(nodeStr(n.value, options), options);
        case "UnaryExpression":
            parts.push(n.operator);
            if (/[a-z]$/.test(n.operator))
                parts.push(" ");
            parts.push(path.call(print, "argument"));
            return (0, lines_1.concat)(parts);
        case "UpdateExpression":
            parts.push(path.call(print, "argument"), n.operator);
            if (n.prefix)
                parts.reverse();
            return (0, lines_1.concat)(parts);
        case "ConditionalExpression":
            return (0, lines_1.concat)([
                path.call(print, "test"),
                " ? ",
                path.call(print, "consequent"),
                " : ",
                path.call(print, "alternate"),
            ]);
        case "NewExpression": {
            parts.push("new ", path.call(print, "callee"));
            if (n.typeParameters) {
                parts.push(path.call(print, "typeParameters"));
            }
            if (n.typeArguments) {
                parts.push(path.call(print, "typeArguments"));
            }
            var args = n.arguments;
            if (args) {
                parts.push(printArgumentsList(path, options, print));
            }
            return (0, lines_1.concat)(parts);
        }
        case "VariableDeclaration": {
            if (n.declare) {
                parts.push("declare ");
            }
            parts.push(n.kind, " ");
            var maxLen_1 = 0;
            var printed = path.map(function (childPath) {
                var lines = print(childPath);
                maxLen_1 = Math.max(lines.length, maxLen_1);
                return lines;
            }, "declarations");
            if (maxLen_1 === 1) {
                parts.push((0, lines_1.fromString)(", ").join(printed));
            }
            else if (printed.length > 1) {
                parts.push((0, lines_1.fromString)(",\n")
                    .join(printed)
                    .indentTail(n.kind.length + 1));
            }
            else {
                parts.push(printed[0]);
            }
            // We generally want to terminate all variable declarations with a
            // semicolon, except when they are children of for loops.
            var parentNode = path.getParentNode();
            if (!namedTypes.ForStatement.check(parentNode) &&
                !namedTypes.ForInStatement.check(parentNode) &&
                !(namedTypes.ForOfStatement &&
                    namedTypes.ForOfStatement.check(parentNode)) &&
                !(namedTypes.ForAwaitStatement &&
                    namedTypes.ForAwaitStatement.check(parentNode))) {
                parts.push(";");
            }
            return (0, lines_1.concat)(parts);
        }
        case "VariableDeclarator":
            return n.init
                ? (0, lines_1.fromString)(" = ").join([
                    path.call(print, "id"),
                    path.call(print, "init"),
                ])
                : path.call(print, "id");
        case "WithStatement":
            return (0, lines_1.concat)([
                "with (",
                path.call(print, "object"),
                ") ",
                path.call(print, "body"),
            ]);
        case "IfStatement": {
            var con = adjustClause(path.call(print, "consequent"), options);
            parts.push("if (", path.call(print, "test"), ")", con);
            if (n.alternate)
                parts.push(endsWithBrace(con) ? " else" : "\nelse", adjustClause(path.call(print, "alternate"), options));
            return (0, lines_1.concat)(parts);
        }
        case "ForStatement": {
            // TODO Get the for (;;) case right.
            var init = path.call(print, "init");
            var sep = init.length > 1 ? ";\n" : "; ";
            var forParen = "for (";
            var indented = (0, lines_1.fromString)(sep)
                .join([init, path.call(print, "test"), path.call(print, "update")])
                .indentTail(forParen.length);
            var head = (0, lines_1.concat)([forParen, indented, ")"]);
            var clause = adjustClause(path.call(print, "body"), options);
            parts.push(head);
            if (head.length > 1) {
                parts.push("\n");
                clause = clause.trimLeft();
            }
            parts.push(clause);
            return (0, lines_1.concat)(parts);
        }
        case "WhileStatement":
            return (0, lines_1.concat)([
                "while (",
                path.call(print, "test"),
                ")",
                adjustClause(path.call(print, "body"), options),
            ]);
        case "ForInStatement":
            // Note: esprima can't actually parse "for each (".
            return (0, lines_1.concat)([
                n.each ? "for each (" : "for (",
                path.call(print, "left"),
                " in ",
                path.call(print, "right"),
                ")",
                adjustClause(path.call(print, "body"), options),
            ]);
        case "ForOfStatement":
        case "ForAwaitStatement":
            parts.push("for ");
            if (n.await || n.type === "ForAwaitStatement") {
                parts.push("await ");
            }
            parts.push("(", path.call(print, "left"), " of ", path.call(print, "right"), ")", adjustClause(path.call(print, "body"), options));
            return (0, lines_1.concat)(parts);
        case "DoWhileStatement": {
            var doBody = (0, lines_1.concat)([
                "do",
                adjustClause(path.call(print, "body"), options),
            ]);
            parts.push(doBody);
            if (endsWithBrace(doBody))
                parts.push(" while");
            else
                parts.push("\nwhile");
            parts.push(" (", path.call(print, "test"), ");");
            return (0, lines_1.concat)(parts);
        }
        case "DoExpression": {
            var statements = path.call(function (bodyPath) { return printStatementSequence(bodyPath, options, print); }, "body");
            return (0, lines_1.concat)(["do {\n", statements.indent(options.tabWidth), "\n}"]);
        }
        case "BreakStatement":
            parts.push("break");
            if (n.label)
                parts.push(" ", path.call(print, "label"));
            parts.push(";");
            return (0, lines_1.concat)(parts);
        case "ContinueStatement":
            parts.push("continue");
            if (n.label)
                parts.push(" ", path.call(print, "label"));
            parts.push(";");
            return (0, lines_1.concat)(parts);
        case "LabeledStatement":
            return (0, lines_1.concat)([
                path.call(print, "label"),
                ":\n",
                path.call(print, "body"),
            ]);
        case "TryStatement":
            parts.push("try ", path.call(print, "block"));
            if (n.handler) {
                parts.push(" ", path.call(print, "handler"));
            }
            else if (n.handlers) {
                path.each(function (handlerPath) {
                    parts.push(" ", print(handlerPath));
                }, "handlers");
            }
            if (n.finalizer) {
                parts.push(" finally ", path.call(print, "finalizer"));
            }
            return (0, lines_1.concat)(parts);
        case "CatchClause":
            parts.push("catch ");
            if (n.param) {
                parts.push("(", path.call(print, "param"));
            }
            if (n.guard) {
                // Note: esprima does not recognize conditional catch clauses.
                parts.push(" if ", path.call(print, "guard"));
            }
            if (n.param) {
                parts.push(") ");
            }
            parts.push(path.call(print, "body"));
            return (0, lines_1.concat)(parts);
        case "ThrowStatement":
            return (0, lines_1.concat)(["throw ", path.call(print, "argument"), ";"]);
        case "SwitchStatement":
            return (0, lines_1.concat)([
                "switch (",
                path.call(print, "discriminant"),
                ") {\n",
                (0, lines_1.fromString)("\n").join(path.map(print, "cases")),
                "\n}",
            ]);
        // Note: ignoring n.lexical because it has no printing consequences.
        case "SwitchCase":
            if (n.test)
                parts.push("case ", path.call(print, "test"), ":");
            else
                parts.push("default:");
            if (n.consequent.length > 0) {
                parts.push("\n", path
                    .call(function (consequentPath) {
                    return printStatementSequence(consequentPath, options, print);
                }, "consequent")
                    .indent(options.tabWidth));
            }
            return (0, lines_1.concat)(parts);
        case "DebuggerStatement":
            return (0, lines_1.fromString)("debugger;");
        // JSX extensions below.
        case "JSXAttribute":
            parts.push(path.call(print, "name"));
            if (n.value)
                parts.push("=", path.call(print, "value"));
            return (0, lines_1.concat)(parts);
        case "JSXIdentifier":
            return (0, lines_1.fromString)(n.name, options);
        case "JSXNamespacedName":
            return (0, lines_1.fromString)(":").join([
                path.call(print, "namespace"),
                path.call(print, "name"),
            ]);
        case "JSXMemberExpression":
            return (0, lines_1.fromString)(".").join([
                path.call(print, "object"),
                path.call(print, "property"),
            ]);
        case "JSXSpreadAttribute":
            return (0, lines_1.concat)(["{...", path.call(print, "argument"), "}"]);
        case "JSXSpreadChild":
            return (0, lines_1.concat)(["{...", path.call(print, "expression"), "}"]);
        case "JSXExpressionContainer":
            return (0, lines_1.concat)(["{", path.call(print, "expression"), "}"]);
        case "JSXElement":
        case "JSXFragment": {
            var openingPropName = "opening" + (n.type === "JSXElement" ? "Element" : "Fragment");
            var closingPropName = "closing" + (n.type === "JSXElement" ? "Element" : "Fragment");
            var openingLines = path.call(print, openingPropName);
            if (n[openingPropName].selfClosing) {
                assert_1.default.ok(!n[closingPropName], "unexpected " +
                    closingPropName +
                    " element in self-closing " +
                    n.type);
                return openingLines;
            }
            var childLines = (0, lines_1.concat)(path.map(function (childPath) {
                var child = childPath.getValue();
                if (namedTypes.Literal.check(child) &&
                    typeof child.value === "string") {
                    if (/\S/.test(child.value)) {
                        return child.value.replace(/^\s+|\s+$/g, "");
                    }
                    else if (/\n/.test(child.value)) {
                        return "\n";
                    }
                }
                return print(childPath);
            }, "children")).indentTail(options.tabWidth);
            var closingLines = path.call(print, closingPropName);
            return (0, lines_1.concat)([openingLines, childLines, closingLines]);
        }
        case "JSXOpeningElement": {
            parts.push("<", path.call(print, "name"));
            var attrParts_1 = [];
            path.each(function (attrPath) {
                attrParts_1.push(" ", print(attrPath));
            }, "attributes");
            var attrLines = (0, lines_1.concat)(attrParts_1);
            var needLineWrap = attrLines.length > 1 || attrLines.getLineLength(1) > options.wrapColumn;
            if (needLineWrap) {
                attrParts_1.forEach(function (part, i) {
                    if (part === " ") {
                        assert_1.default.strictEqual(i % 2, 0);
                        attrParts_1[i] = "\n";
                    }
                });
                attrLines = (0, lines_1.concat)(attrParts_1).indentTail(options.tabWidth);
            }
            parts.push(attrLines, n.selfClosing ? " />" : ">");
            return (0, lines_1.concat)(parts);
        }
        case "JSXClosingElement":
            return (0, lines_1.concat)(["</", path.call(print, "name"), ">"]);
        case "JSXOpeningFragment":
            return (0, lines_1.fromString)("<>");
        case "JSXClosingFragment":
            return (0, lines_1.fromString)("</>");
        case "JSXText":
            return (0, lines_1.fromString)(n.value, options);
        case "JSXEmptyExpression":
            return (0, lines_1.fromString)("");
        case "TypeAnnotatedIdentifier":
            return (0, lines_1.concat)([
                path.call(print, "annotation"),
                " ",
                path.call(print, "identifier"),
            ]);
        case "ClassBody":
            if (n.body.length === 0) {
                return (0, lines_1.fromString)("{}");
            }
            return (0, lines_1.concat)([
                "{\n",
                path
                    .call(function (bodyPath) { return printStatementSequence(bodyPath, options, print); }, "body")
                    .indent(options.tabWidth),
                "\n}",
            ]);
        case "ClassPropertyDefinition":
            parts.push("static ", path.call(print, "definition"));
            if (!namedTypes.MethodDefinition.check(n.definition))
                parts.push(";");
            return (0, lines_1.concat)(parts);
        case "ClassProperty": {
            if (n.declare) {
                parts.push("declare ");
            }
            var access = n.accessibility || n.access;
            if (typeof access === "string") {
                parts.push(access, " ");
            }
            if (n.static) {
                parts.push("static ");
            }
            if (n.abstract) {
                parts.push("abstract ");
            }
            if (n.readonly) {
                parts.push("readonly ");
            }
            var key = path.call(print, "key");
            if (n.computed) {
                key = (0, lines_1.concat)(["[", key, "]"]);
            }
            if (n.variance) {
                key = (0, lines_1.concat)([printVariance(path, print), key]);
            }
            parts.push(key);
            if (n.optional) {
                parts.push("?");
            }
            if (n.definite) {
                parts.push("!");
            }
            if (n.typeAnnotation) {
                parts.push(path.call(print, "typeAnnotation"));
            }
            if (n.value) {
                parts.push(" = ", path.call(print, "value"));
            }
            parts.push(";");
            return (0, lines_1.concat)(parts);
        }
        case "ClassPrivateProperty":
            if (n.static) {
                parts.push("static ");
            }
            parts.push(path.call(print, "key"));
            if (n.typeAnnotation) {
                parts.push(path.call(print, "typeAnnotation"));
            }
            if (n.value) {
                parts.push(" = ", path.call(print, "value"));
            }
            parts.push(";");
            return (0, lines_1.concat)(parts);
        case "ClassAccessorProperty": {
            parts.push.apply(parts, tslib_1.__spreadArray(tslib_1.__spreadArray([], printClassMemberModifiers(n), false), ["accessor "], false));
            if (n.computed) {
                parts.push("[", path.call(print, "key"), "]");
            }
            else {
                parts.push(path.call(print, "key"));
            }
            if (n.optional) {
                parts.push("?");
            }
            if (n.definite) {
                parts.push("!");
            }
            if (n.typeAnnotation) {
                parts.push(path.call(print, "typeAnnotation"));
            }
            if (n.value) {
                parts.push(" = ", path.call(print, "value"));
            }
            parts.push(";");
            return (0, lines_1.concat)(parts);
        }
        case "ClassDeclaration":
        case "ClassExpression":
        case "DeclareClass":
            if (n.declare) {
                parts.push("declare ");
            }
            if (n.abstract) {
                parts.push("abstract ");
            }
            parts.push("class");
            if (n.id) {
                parts.push(" ", path.call(print, "id"));
            }
            if (n.typeParameters) {
                parts.push(path.call(print, "typeParameters"));
            }
            if (n.superClass) {
                // ClassDeclaration and ClassExpression only
                parts.push(" extends ", path.call(print, "superClass"), path.call(print, "superTypeParameters"));
            }
            if (n.extends && n.extends.length > 0) {
                // DeclareClass only
                parts.push(" extends ", (0, lines_1.fromString)(", ").join(path.map(print, "extends")));
            }
            if (n["implements"] && n["implements"].length > 0) {
                parts.push(" implements ", (0, lines_1.fromString)(", ").join(path.map(print, "implements")));
            }
            parts.push(" ", path.call(print, "body"));
            if (n.type === "DeclareClass") {
                return printFlowDeclaration(path, parts);
            }
            else {
                return (0, lines_1.concat)(parts);
            }
        case "TemplateElement":
            return (0, lines_1.fromString)(n.value.raw, options).lockIndentTail();
        case "TemplateLiteral": {
            var expressions_1 = path.map(print, "expressions");
            parts.push("`");
            path.each(function (childPath) {
                var i = childPath.getName();
                parts.push(print(childPath));
                if (i < expressions_1.length) {
                    parts.push("${", expressions_1[i], "}");
                }
            }, "quasis");
            parts.push("`");
            return (0, lines_1.concat)(parts).lockIndentTail();
        }
        case "TaggedTemplateExpression":
            return (0, lines_1.concat)([path.call(print, "tag"), path.call(print, "quasi")]);
        // These types are unprintable because they serve as abstract
        // supertypes for other (printable) types.
        case "Node":
        case "Printable":
        case "SourceLocation":
        case "Position":
        case "Statement":
        case "Function":
        case "Pattern":
        case "Expression":
        case "Declaration":
        case "Specifier":
        case "NamedSpecifier":
        case "Comment": // Supertype of Block and Line
        case "Flow": // Supertype of all Flow AST node types
        case "FlowType": // Supertype of all Flow types
        case "FlowPredicate": // Supertype of InferredPredicate and DeclaredPredicate
        case "MemberTypeAnnotation": // Flow
        case "Type": // Flow
        case "TSHasOptionalTypeParameterInstantiation":
        case "TSHasOptionalTypeParameters":
        case "TSHasOptionalTypeAnnotation":
        case "ChainElement": // Supertype of MemberExpression and CallExpression
            throw new Error("unprintable type: " + JSON.stringify(n.type));
        case "CommentBlock": // Babel block comment.
        case "Block": // Esprima block comment.
            return (0, lines_1.concat)(["/*", (0, lines_1.fromString)(n.value, options), "*/"]);
        case "CommentLine": // Babel line comment.
        case "Line": // Esprima line comment.
            return (0, lines_1.concat)(["//", (0, lines_1.fromString)(n.value, options)]);
        // Type Annotations for Facebook Flow, typically stripped out or
        // transformed away before printing.
        case "TypeAnnotation":
            if (n.typeAnnotation) {
                if (n.typeAnnotation.type !== "FunctionTypeAnnotation") {
                    parts.push(": ");
                }
                parts.push(path.call(print, "typeAnnotation"));
                return (0, lines_1.concat)(parts);
            }
            return (0, lines_1.fromString)("");
        case "ExistentialTypeParam":
        case "ExistsTypeAnnotation":
            return (0, lines_1.fromString)("*", options);
        case "EmptyTypeAnnotation":
            return (0, lines_1.fromString)("empty", options);
        case "AnyTypeAnnotation":
            return (0, lines_1.fromString)("any", options);
        case "MixedTypeAnnotation":
            return (0, lines_1.fromString)("mixed", options);
        case "ArrayTypeAnnotation":
            return (0, lines_1.concat)([path.call(print, "elementType"), "[]"]);
        case "TupleTypeAnnotation": {
            var printed_2 = path.map(print, "types");
            var joined = (0, lines_1.fromString)(", ").join(printed_2);
            var oneLine_3 = joined.getLineLength(1) <= options.wrapColumn;
            if (oneLine_3) {
                if (options.arrayBracketSpacing) {
                    parts.push("[ ");
                }
                else {
                    parts.push("[");
                }
            }
            else {
                parts.push("[\n");
            }
            path.each(function (elemPath) {
                var i = elemPath.getName();
                var elem = elemPath.getValue();
                if (!elem) {
                    // If the array expression ends with a hole, that hole
                    // will be ignored by the interpreter, but if it ends with
                    // two (or more) holes, we need to write out two (or more)
                    // commas so that the resulting code is interpreted with
                    // both (all) of the holes.
                    parts.push(",");
                }
                else {
                    var lines = printed_2[i];
                    if (oneLine_3) {
                        if (i > 0)
                            parts.push(" ");
                    }
                    else {
                        lines = lines.indent(options.tabWidth);
                    }
                    parts.push(lines);
                    if (i < n.types.length - 1 ||
                        (!oneLine_3 && util.isTrailingCommaEnabled(options, "arrays")))
                        parts.push(",");
                    if (!oneLine_3)
                        parts.push("\n");
                }
            }, "types");
            if (oneLine_3 && options.arrayBracketSpacing) {
                parts.push(" ]");
            }
            else {
                parts.push("]");
            }
            return (0, lines_1.concat)(parts);
        }
        case "BooleanTypeAnnotation":
            return (0, lines_1.fromString)("boolean", options);
        case "BooleanLiteralTypeAnnotation":
            assert_1.default.strictEqual(typeof n.value, "boolean");
            return (0, lines_1.fromString)("" + n.value, options);
        case "InterfaceTypeAnnotation":
            parts.push("interface");
            if (n.extends && n.extends.length > 0) {
                parts.push(" extends ", (0, lines_1.fromString)(", ").join(path.map(print, "extends")));
            }
            parts.push(" ", path.call(print, "body"));
            return (0, lines_1.concat)(parts);
        case "DeclareFunction":
            return printFlowDeclaration(path, [
                "function ",
                path.call(print, "id"),
                ";",
            ]);
        case "DeclareModule":
            return printFlowDeclaration(path, [
                "module ",
                path.call(print, "id"),
                " ",
                path.call(print, "body"),
            ]);
        case "DeclareModuleExports":
            return printFlowDeclaration(path, [
                "module.exports",
                path.call(print, "typeAnnotation"),
            ]);
        case "DeclareVariable":
            return printFlowDeclaration(path, ["var ", path.call(print, "id"), ";"]);
        case "DeclareExportDeclaration":
        case "DeclareExportAllDeclaration":
            return (0, lines_1.concat)(["declare ", printExportDeclaration(path, options, print)]);
        case "EnumDeclaration":
            return (0, lines_1.concat)([
                "enum ",
                path.call(print, "id"),
                path.call(print, "body"),
            ]);
        case "EnumBooleanBody":
        case "EnumNumberBody":
        case "EnumStringBody":
        case "EnumSymbolBody": {
            if (n.type === "EnumSymbolBody" || n.explicitType) {
                parts.push(" of ", 
                // EnumBooleanBody => boolean, etc.
                n.type.slice(4, -4).toLowerCase());
            }
            parts.push(" {\n", (0, lines_1.fromString)("\n")
                .join(path.map(print, "members"))
                .indent(options.tabWidth), "\n}");
            return (0, lines_1.concat)(parts);
        }
        case "EnumDefaultedMember":
            return (0, lines_1.concat)([path.call(print, "id"), ","]);
        case "EnumBooleanMember":
        case "EnumNumberMember":
        case "EnumStringMember":
            return (0, lines_1.concat)([
                path.call(print, "id"),
                " = ",
                path.call(print, "init"),
                ",",
            ]);
        case "InferredPredicate":
            return (0, lines_1.fromString)("%checks", options);
        case "DeclaredPredicate":
            return (0, lines_1.concat)(["%checks(", path.call(print, "value"), ")"]);
        case "FunctionTypeAnnotation": {
            // FunctionTypeAnnotation is ambiguous:
            // declare function(a: B): void; OR
            // const A: (a: B) => void;
            var parent = path.getParentNode(0);
            var isArrowFunctionTypeAnnotation = !(namedTypes.ObjectTypeCallProperty.check(parent) ||
                (namedTypes.ObjectTypeInternalSlot.check(parent) && parent.method) ||
                namedTypes.DeclareFunction.check(path.getParentNode(2)));
            var needsColon = isArrowFunctionTypeAnnotation &&
                !namedTypes.FunctionTypeParam.check(parent) &&
                !namedTypes.TypeAlias.check(parent);
            if (needsColon) {
                parts.push(": ");
            }
            var hasTypeParameters = !!n.typeParameters;
            var needsParens = hasTypeParameters || n.params.length !== 1 || n.params[0].name;
            parts.push(hasTypeParameters ? path.call(print, "typeParameters") : "", needsParens ? "(" : "", printFunctionParams(path, options, print), needsParens ? ")" : "");
            // The returnType is not wrapped in a TypeAnnotation, so the colon
            // needs to be added separately.
            if (n.returnType) {
                parts.push(isArrowFunctionTypeAnnotation ? " => " : ": ", path.call(print, "returnType"));
            }
            return (0, lines_1.concat)(parts);
        }
        case "FunctionTypeParam": {
            var name = path.call(print, "name");
            parts.push(name);
            if (n.optional) {
                parts.push("?");
            }
            if (name.infos[0].line) {
                parts.push(": ");
            }
            parts.push(path.call(print, "typeAnnotation"));
            return (0, lines_1.concat)(parts);
        }
        case "GenericTypeAnnotation":
            return (0, lines_1.concat)([
                path.call(print, "id"),
                path.call(print, "typeParameters"),
            ]);
        case "DeclareInterface":
            parts.push("declare ");
        // Fall through to InterfaceDeclaration...
        case "InterfaceDeclaration":
        case "TSInterfaceDeclaration":
            if (n.declare) {
                parts.push("declare ");
            }
            parts.push("interface ", path.call(print, "id"), path.call(print, "typeParameters"), " ");
            if (n["extends"] && n["extends"].length > 0) {
                parts.push("extends ", (0, lines_1.fromString)(", ").join(path.map(print, "extends")), " ");
            }
            if (n.body) {
                parts.push(path.call(print, "body"));
            }
            return (0, lines_1.concat)(parts);
        case "ClassImplements":
        case "InterfaceExtends":
            return (0, lines_1.concat)([
                path.call(print, "id"),
                path.call(print, "typeParameters"),
            ]);
        case "IntersectionTypeAnnotation":
            return (0, lines_1.fromString)(" & ").join(path.map(print, "types"));
        case "NullableTypeAnnotation":
            return (0, lines_1.concat)(["?", path.call(print, "typeAnnotation")]);
        case "NullLiteralTypeAnnotation":
            return (0, lines_1.fromString)("null", options);
        case "ThisTypeAnnotation":
            return (0, lines_1.fromString)("this", options);
        case "NumberTypeAnnotation":
            return (0, lines_1.fromString)("number", options);
        case "ObjectTypeCallProperty":
            return path.call(print, "value");
        case "ObjectTypeIndexer":
            if (n.static) {
                parts.push("static ");
            }
            parts.push(printVariance(path, print), "[");
            if (n.id) {
                parts.push(path.call(print, "id"), ": ");
            }
            parts.push(path.call(print, "key"), "]: ", path.call(print, "value"));
            return (0, lines_1.concat)(parts);
        case "ObjectTypeProperty":
            return (0, lines_1.concat)([
                printVariance(path, print),
                path.call(print, "key"),
                n.optional ? "?" : "",
                ": ",
                path.call(print, "value"),
            ]);
        case "ObjectTypeInternalSlot":
            return (0, lines_1.concat)([
                n.static ? "static " : "",
                "[[",
                path.call(print, "id"),
                "]]",
                n.optional ? "?" : "",
                n.value.type !== "FunctionTypeAnnotation" ? ": " : "",
                path.call(print, "value"),
            ]);
        case "QualifiedTypeIdentifier":
            return (0, lines_1.concat)([
                path.call(print, "qualification"),
                ".",
                path.call(print, "id"),
            ]);
        case "StringLiteralTypeAnnotation":
            return (0, lines_1.fromString)(nodeStr(n.value, options), options);
        case "NumberLiteralTypeAnnotation":
        case "NumericLiteralTypeAnnotation":
            assert_1.default.strictEqual(typeof n.value, "number");
            return (0, lines_1.fromString)(JSON.stringify(n.value), options);
        case "BigIntLiteralTypeAnnotation":
            return (0, lines_1.fromString)(n.raw, options);
        case "StringTypeAnnotation":
            return (0, lines_1.fromString)("string", options);
        case "DeclareTypeAlias":
            parts.push("declare ");
        // Fall through to TypeAlias...
        case "TypeAlias":
            return (0, lines_1.concat)([
                "type ",
                path.call(print, "id"),
                path.call(print, "typeParameters"),
                " = ",
                path.call(print, "right"),
                ";",
            ]);
        case "DeclareOpaqueType":
            parts.push("declare ");
        // Fall through to OpaqueType...
        case "OpaqueType":
            parts.push("opaque type ", path.call(print, "id"), path.call(print, "typeParameters"));
            if (n["supertype"]) {
                parts.push(": ", path.call(print, "supertype"));
            }
            if (n["impltype"]) {
                parts.push(" = ", path.call(print, "impltype"));
            }
            parts.push(";");
            return (0, lines_1.concat)(parts);
        case "TypeCastExpression":
            return (0, lines_1.concat)([
                "(",
                path.call(print, "expression"),
                path.call(print, "typeAnnotation"),
                ")",
            ]);
        case "TypeParameterDeclaration":
        case "TypeParameterInstantiation":
            return (0, lines_1.concat)([
                "<",
                (0, lines_1.fromString)(", ").join(path.map(print, "params")),
                ">",
            ]);
        case "Variance":
            if (n.kind === "plus") {
                return (0, lines_1.fromString)("+");
            }
            if (n.kind === "minus") {
                return (0, lines_1.fromString)("-");
            }
            return (0, lines_1.fromString)("");
        case "TypeParameter":
            if (n.variance) {
                parts.push(printVariance(path, print));
            }
            parts.push(path.call(print, "name"));
            if (n.bound) {
                parts.push(path.call(print, "bound"));
            }
            if (n["default"]) {
                parts.push("=", path.call(print, "default"));
            }
            return (0, lines_1.concat)(parts);
        case "TypeofTypeAnnotation":
            return (0, lines_1.concat)([
                (0, lines_1.fromString)("typeof ", options),
                path.call(print, "argument"),
            ]);
        case "IndexedAccessType":
        case "OptionalIndexedAccessType":
            return (0, lines_1.concat)([
                path.call(print, "objectType"),
                n.optional ? "?." : "",
                "[",
                path.call(print, "indexType"),
                "]",
            ]);
        case "UnionTypeAnnotation":
            return (0, lines_1.fromString)(" | ").join(path.map(print, "types"));
        case "VoidTypeAnnotation":
            return (0, lines_1.fromString)("void", options);
        case "NullTypeAnnotation":
            return (0, lines_1.fromString)("null", options);
        case "SymbolTypeAnnotation":
            return (0, lines_1.fromString)("symbol", options);
        case "BigIntTypeAnnotation":
            return (0, lines_1.fromString)("bigint", options);
        // Type Annotations for TypeScript (when using Babylon as parser)
        case "TSType":
            throw new Error("unprintable type: " + JSON.stringify(n.type));
        case "TSNumberKeyword":
            return (0, lines_1.fromString)("number", options);
        case "TSBigIntKeyword":
            return (0, lines_1.fromString)("bigint", options);
        case "TSObjectKeyword":
            return (0, lines_1.fromString)("object", options);
        case "TSBooleanKeyword":
            return (0, lines_1.fromString)("boolean", options);
        case "TSStringKeyword":
            return (0, lines_1.fromString)("string", options);
        case "TSSymbolKeyword":
            return (0, lines_1.fromString)("symbol", options);
        case "TSAnyKeyword":
            return (0, lines_1.fromString)("any", options);
        case "TSVoidKeyword":
            return (0, lines_1.fromString)("void", options);
        case "TSIntrinsicKeyword":
            return (0, lines_1.fromString)("intrinsic", options);
        case "TSThisType":
            return (0, lines_1.fromString)("this", options);
        case "TSNullKeyword":
            return (0, lines_1.fromString)("null", options);
        case "TSUndefinedKeyword":
            return (0, lines_1.fromString)("undefined", options);
        case "TSUnknownKeyword":
            return (0, lines_1.fromString)("unknown", options);
        case "TSNeverKeyword":
            return (0, lines_1.fromString)("never", options);
        case "TSArrayType":
            return (0, lines_1.concat)([path.call(print, "elementType"), "[]"]);
        case "TSLiteralType":
            return path.call(print, "literal");
        case "TSUnionType":
            return (0, lines_1.fromString)(" | ").join(path.map(print, "types"));
        case "TSIntersectionType":
            return (0, lines_1.fromString)(" & ").join(path.map(print, "types"));
        case "TSConditionalType":
            parts.push(path.call(print, "checkType"), " extends ", path.call(print, "extendsType"), " ? ", path.call(print, "trueType"), " : ", path.call(print, "falseType"));
            return (0, lines_1.concat)(parts);
        case "TSInferType":
            parts.push("infer ", path.call(print, "typeParameter"));
            return (0, lines_1.concat)(parts);
        case "TSParenthesizedType":
            return (0, lines_1.concat)(["(", path.call(print, "typeAnnotation"), ")"]);
        case "TSFunctionType":
            return (0, lines_1.concat)([
                path.call(print, "typeParameters"),
                "(",
                printFunctionParams(path, options, print),
                ") => ",
                path.call(print, "typeAnnotation", "typeAnnotation"),
            ]);
        case "TSConstructorType":
            return (0, lines_1.concat)([
                "new ",
                path.call(print, "typeParameters"),
                "(",
                printFunctionParams(path, options, print),
                ") => ",
                path.call(print, "typeAnnotation", "typeAnnotation"),
            ]);
        case "TSMappedType": {
            parts.push(n.readonly ? "readonly " : "", "[", path.call(print, "typeParameter"), "]", n.optional ? "?" : "");
            if (n.typeAnnotation) {
                parts.push(": ", path.call(print, "typeAnnotation"), ";");
            }
            return (0, lines_1.concat)(["{\n", (0, lines_1.concat)(parts).indent(options.tabWidth), "\n}"]);
        }
        case "TSTupleType":
            return (0, lines_1.concat)([
                "[",
                (0, lines_1.fromString)(", ").join(path.map(print, "elementTypes")),
                "]",
            ]);
        case "TSNamedTupleMember":
            parts.push(path.call(print, "label"));
            if (n.optional) {
                parts.push("?");
            }
            parts.push(": ", path.call(print, "elementType"));
            return (0, lines_1.concat)(parts);
        case "TSRestType":
            return (0, lines_1.concat)(["...", path.call(print, "typeAnnotation")]);
        case "TSOptionalType":
            return (0, lines_1.concat)([path.call(print, "typeAnnotation"), "?"]);
        case "TSIndexedAccessType":
            return (0, lines_1.concat)([
                path.call(print, "objectType"),
                "[",
                path.call(print, "indexType"),
                "]",
            ]);
        case "TSTypeOperator":
            return (0, lines_1.concat)([
                path.call(print, "operator"),
                " ",
                path.call(print, "typeAnnotation"),
            ]);
        case "TSTypeLiteral": {
            var members = (0, lines_1.fromString)("\n").join(path.map(print, "members").map(function (member) {
                if (lastNonSpaceCharacter(member) !== ";") {
                    return member.concat(";");
                }
                return member;
            }));
            if (members.isEmpty()) {
                return (0, lines_1.fromString)("{}", options);
            }
            parts.push("{\n", members.indent(options.tabWidth), "\n}");
            return (0, lines_1.concat)(parts);
        }
        case "TSEnumMember":
            parts.push(path.call(print, "id"));
            if (n.initializer) {
                parts.push(" = ", path.call(print, "initializer"));
            }
            return (0, lines_1.concat)(parts);
        case "TSTypeQuery":
            return (0, lines_1.concat)(["typeof ", path.call(print, "exprName")]);
        case "TSParameterProperty":
            if (n.accessibility) {
                parts.push(n.accessibility, " ");
            }
            if (n.export) {
                parts.push("export ");
            }
            if (n.static) {
                parts.push("static ");
            }
            if (n.readonly) {
                parts.push("readonly ");
            }
            parts.push(path.call(print, "parameter"));
            return (0, lines_1.concat)(parts);
        case "TSTypeReference":
            return (0, lines_1.concat)([
                path.call(print, "typeName"),
                path.call(print, "typeParameters"),
            ]);
        case "TSQualifiedName":
            return (0, lines_1.concat)([path.call(print, "left"), ".", path.call(print, "right")]);
        case "TSAsExpression":
        case "TSSatisfiesExpression":
            {
                var expression = path.call(print, "expression");
                parts.push(expression, n.type === "TSSatisfiesExpression" ? " satisfies " : " as ", path.call(print, "typeAnnotation"));
                return (0, lines_1.concat)(parts);
            }
        case "TSTypeCastExpression":
            return (0, lines_1.concat)([
                path.call(print, "expression"),
                path.call(print, "typeAnnotation"),
            ]);
        case "TSNonNullExpression":
            return (0, lines_1.concat)([path.call(print, "expression"), "!"]);
        case "TSTypeAnnotation":
            return (0, lines_1.concat)([": ", path.call(print, "typeAnnotation")]);
        case "TSIndexSignature":
            return (0, lines_1.concat)([
                n.readonly ? "readonly " : "",
                "[",
                path.map(print, "parameters"),
                "]",
                path.call(print, "typeAnnotation"),
            ]);
        case "TSPropertySignature":
            parts.push(printVariance(path, print), n.readonly ? "readonly " : "");
            if (n.computed) {
                parts.push("[", path.call(print, "key"), "]");
            }
            else {
                parts.push(path.call(print, "key"));
            }
            parts.push(n.optional ? "?" : "", path.call(print, "typeAnnotation"));
            return (0, lines_1.concat)(parts);
        case "TSMethodSignature":
            if (n.computed) {
                parts.push("[", path.call(print, "key"), "]");
            }
            else {
                parts.push(path.call(print, "key"));
            }
            if (n.optional) {
                parts.push("?");
            }
            parts.push(path.call(print, "typeParameters"), "(", printFunctionParams(path, options, print), ")", path.call(print, "typeAnnotation"));
            return (0, lines_1.concat)(parts);
        case "TSTypePredicate":
            if (n.asserts) {
                parts.push("asserts ");
            }
            parts.push(path.call(print, "parameterName"));
            if (n.typeAnnotation) {
                parts.push(" is ", path.call(print, "typeAnnotation", "typeAnnotation"));
            }
            return (0, lines_1.concat)(parts);
        case "TSCallSignatureDeclaration":
            return (0, lines_1.concat)([
                path.call(print, "typeParameters"),
                "(",
                printFunctionParams(path, options, print),
                ")",
                path.call(print, "typeAnnotation"),
            ]);
        case "TSConstructSignatureDeclaration":
            if (n.typeParameters) {
                parts.push("new", path.call(print, "typeParameters"));
            }
            else {
                parts.push("new ");
            }
            parts.push("(", printFunctionParams(path, options, print), ")", path.call(print, "typeAnnotation"));
            return (0, lines_1.concat)(parts);
        case "TSTypeAliasDeclaration":
            return (0, lines_1.concat)([
                n.declare ? "declare " : "",
                "type ",
                path.call(print, "id"),
                path.call(print, "typeParameters"),
                " = ",
                path.call(print, "typeAnnotation"),
                ";",
            ]);
        case "TSTypeParameter": {
            parts.push(path.call(print, "name"));
            // ambiguous because of TSMappedType
            var parent = path.getParentNode(0);
            var isInMappedType = namedTypes.TSMappedType.check(parent);
            if (n.constraint) {
                parts.push(isInMappedType ? " in " : " extends ", path.call(print, "constraint"));
            }
            if (n["default"]) {
                parts.push(" = ", path.call(print, "default"));
            }
            return (0, lines_1.concat)(parts);
        }
        case "TSTypeAssertion": {
            parts.push("<", path.call(print, "typeAnnotation"), "> ", path.call(print, "expression"));
            return (0, lines_1.concat)(parts);
        }
        case "TSTypeParameterDeclaration":
        case "TSTypeParameterInstantiation":
            return (0, lines_1.concat)([
                "<",
                (0, lines_1.fromString)(", ").join(path.map(print, "params")),
                ">",
            ]);
        case "TSEnumDeclaration": {
            parts.push(n.declare ? "declare " : "", n.const ? "const " : "", "enum ", path.call(print, "id"));
            var memberLines = (0, lines_1.fromString)(",\n").join(path.map(print, "members"));
            if (memberLines.isEmpty()) {
                parts.push(" {}");
            }
            else {
                parts.push(" {\n", memberLines.indent(options.tabWidth), "\n}");
            }
            return (0, lines_1.concat)(parts);
        }
        case "TSExpressionWithTypeArguments":
            return (0, lines_1.concat)([
                path.call(print, "expression"),
                path.call(print, "typeParameters"),
            ]);
        case "TSInterfaceBody": {
            var lines = (0, lines_1.fromString)("\n").join(path.map(print, "body").map(function (element) {
                if (lastNonSpaceCharacter(element) !== ";") {
                    return element.concat(";");
                }
                return element;
            }));
            if (lines.isEmpty()) {
                return (0, lines_1.fromString)("{}", options);
            }
            return (0, lines_1.concat)(["{\n", lines.indent(options.tabWidth), "\n}"]);
        }
        case "TSImportType":
            parts.push("import(", path.call(print, "argument"), ")");
            if (n.qualifier) {
                parts.push(".", path.call(print, "qualifier"));
            }
            if (n.typeParameters) {
                parts.push(path.call(print, "typeParameters"));
            }
            return (0, lines_1.concat)(parts);
        case "TSImportEqualsDeclaration":
            if (n.isExport) {
                parts.push("export ");
            }
            parts.push("import ", path.call(print, "id"), " = ", path.call(print, "moduleReference"));
            return maybeAddSemicolon((0, lines_1.concat)(parts));
        case "TSExternalModuleReference":
            return (0, lines_1.concat)(["require(", path.call(print, "expression"), ")"]);
        case "TSModuleDeclaration": {
            var parent = path.getParentNode();
            if (parent.type === "TSModuleDeclaration") {
                parts.push(".");
            }
            else {
                if (n.declare) {
                    parts.push("declare ");
                }
                if (!n.global) {
                    var isExternal = n.id.type === "StringLiteral" ||
                        (n.id.type === "Literal" && typeof n.id.value === "string");
                    if (isExternal) {
                        parts.push("module ");
                    }
                    else if (n.loc && n.loc.lines && n.id.loc) {
                        var prefix = n.loc.lines.sliceString(n.loc.start, n.id.loc.start);
                        // These keywords are fundamentally ambiguous in the
                        // Babylon parser, and not reflected in the AST, so
                        // the best we can do is to match the original code,
                        // when possible.
                        if (prefix.indexOf("module") >= 0) {
                            parts.push("module ");
                        }
                        else {
                            parts.push("namespace ");
                        }
                    }
                    else {
                        parts.push("namespace ");
                    }
                }
            }
            parts.push(path.call(print, "id"));
            if (n.body) {
                parts.push(" ");
                parts.push(path.call(print, "body"));
            }
            return (0, lines_1.concat)(parts);
        }
        case "TSModuleBlock": {
            var naked = path.call(function (bodyPath) { return printStatementSequence(bodyPath, options, print); }, "body");
            if (naked.isEmpty()) {
                parts.push("{}");
            }
            else {
                parts.push("{\n", naked.indent(options.tabWidth), "\n}");
            }
            return (0, lines_1.concat)(parts);
        }
        case "TSInstantiationExpression": {
            parts.push(path.call(print, "expression"), path.call(print, "typeParameters"));
            return (0, lines_1.concat)(parts);
        }
        // https://github.com/babel/babel/pull/10148
        case "V8IntrinsicIdentifier":
            return (0, lines_1.concat)(["%", path.call(print, "name")]);
        // https://github.com/babel/babel/pull/13191
        case "TopicReference":
            return (0, lines_1.fromString)("#");
        // Unhandled types below. If encountered, nodes of these types should
        // be either left alone or desugared into AST types that are fully
        // supported by the pretty-printer.
        case "ClassHeritage": // TODO
        case "ComprehensionBlock": // TODO
        case "ComprehensionExpression": // TODO
        case "Glob": // TODO
        case "GeneratorExpression": // TODO
        case "LetStatement": // TODO
        case "LetExpression": // TODO
        case "GraphExpression": // TODO
        case "GraphIndexExpression": // TODO
        case "XMLDefaultDeclaration":
        case "XMLAnyName":
        case "XMLQualifiedIdentifier":
        case "XMLFunctionQualifiedIdentifier":
        case "XMLAttributeSelector":
        case "XMLFilterExpression":
        case "XML":
        case "XMLElement":
        case "XMLList":
        case "XMLEscape":
        case "XMLText":
        case "XMLStartTag":
        case "XMLEndTag":
        case "XMLPointTag":
        case "XMLName":
        case "XMLAttribute":
        case "XMLCdata":
        case "XMLComment":
        case "XMLProcessingInstruction":
        default:
            debugger;
            throw new Error("unknown type: " + JSON.stringify(n.type));
    }
}
function printDecorators(path, printPath) {
    var parts = [];
    var node = path.getValue();
    if (node.decorators &&
        node.decorators.length > 0 &&
        // If the parent node is an export declaration, it will be
        // responsible for printing node.decorators.
        !util.getParentExportDeclaration(path)) {
        path.each(function (decoratorPath) {
            parts.push(printPath(decoratorPath), "\n");
        }, "decorators");
    }
    else if (util.isExportDeclaration(node) &&
        node.declaration &&
        node.declaration.decorators) {
        // Export declarations are responsible for printing any decorators
        // that logically apply to node.declaration.
        path.each(function (decoratorPath) {
            parts.push(printPath(decoratorPath), "\n");
        }, "declaration", "decorators");
    }
    return (0, lines_1.concat)(parts);
}
function printStatementSequence(path, options, print) {
    var filtered = [];
    var sawComment = false;
    var sawStatement = false;
    path.each(function (stmtPath) {
        var stmt = stmtPath.getValue();
        // Just in case the AST has been modified to contain falsy
        // "statements," it's safer simply to skip them.
        if (!stmt) {
            return;
        }
        // Skip printing EmptyStatement nodes to avoid leaving stray
        // semicolons lying around.
        if (stmt.type === "EmptyStatement" &&
            !(stmt.comments && stmt.comments.length > 0)) {
            return;
        }
        if (namedTypes.Comment.check(stmt)) {
            // The pretty printer allows a dangling Comment node to act as
            // a Statement when the Comment can't be attached to any other
            // non-Comment node in the tree.
            sawComment = true;
        }
        else if (namedTypes.Statement.check(stmt)) {
            sawStatement = true;
        }
        else {
            // When the pretty printer encounters a string instead of an
            // AST node, it just prints the string. This behavior can be
            // useful for fine-grained formatting decisions like inserting
            // blank lines.
            isString.assert(stmt);
        }
        // We can't hang onto stmtPath outside of this function, because
        // it's just a reference to a mutable FastPath object, so we have
        // to go ahead and print it here.
        filtered.push({
            node: stmt,
            printed: print(stmtPath),
        });
    });
    if (sawComment) {
        assert_1.default.strictEqual(sawStatement, false, "Comments may appear as statements in otherwise empty statement " +
            "lists, but may not coexist with non-Comment nodes.");
    }
    var prevTrailingSpace = null;
    var len = filtered.length;
    var parts = [];
    filtered.forEach(function (info, i) {
        var printed = info.printed;
        var stmt = info.node;
        var multiLine = printed.length > 1;
        var notFirst = i > 0;
        var notLast = i < len - 1;
        var leadingSpace;
        var trailingSpace;
        var lines = stmt && stmt.loc && stmt.loc.lines;
        var trueLoc = lines && options.reuseWhitespace && util.getTrueLoc(stmt, lines);
        if (notFirst) {
            if (trueLoc) {
                var beforeStart = lines.skipSpaces(trueLoc.start, true);
                var beforeStartLine = beforeStart ? beforeStart.line : 1;
                var leadingGap = trueLoc.start.line - beforeStartLine;
                leadingSpace = Array(leadingGap + 1).join("\n");
            }
            else {
                leadingSpace = multiLine ? "\n\n" : "\n";
            }
        }
        else {
            leadingSpace = "";
        }
        if (notLast) {
            if (trueLoc) {
                var afterEnd = lines.skipSpaces(trueLoc.end);
                var afterEndLine = afterEnd ? afterEnd.line : lines.length;
                var trailingGap = afterEndLine - trueLoc.end.line;
                trailingSpace = Array(trailingGap + 1).join("\n");
            }
            else {
                trailingSpace = multiLine ? "\n\n" : "\n";
            }
        }
        else {
            trailingSpace = "";
        }
        parts.push(maxSpace(prevTrailingSpace, leadingSpace), printed);
        if (notLast) {
            prevTrailingSpace = trailingSpace;
        }
        else if (trailingSpace) {
            parts.push(trailingSpace);
        }
    });
    return (0, lines_1.concat)(parts);
}
function maxSpace(s1, s2) {
    if (!s1 && !s2) {
        return (0, lines_1.fromString)("");
    }
    if (!s1) {
        return (0, lines_1.fromString)(s2);
    }
    if (!s2) {
        return (0, lines_1.fromString)(s1);
    }
    var spaceLines1 = (0, lines_1.fromString)(s1);
    var spaceLines2 = (0, lines_1.fromString)(s2);
    if (spaceLines2.length > spaceLines1.length) {
        return spaceLines2;
    }
    return spaceLines1;
}
function printClassMemberModifiers(node) {
    var parts = [];
    if (node.declare) {
        parts.push("declare ");
    }
    var access = node.accessibility || node.access;
    if (typeof access === "string") {
        parts.push(access, " ");
    }
    if (node.static) {
        parts.push("static ");
    }
    if (node.override) {
        parts.push("override ");
    }
    if (node.abstract) {
        parts.push("abstract ");
    }
    if (node.readonly) {
        parts.push("readonly ");
    }
    return parts;
}
function printMethod(path, options, print) {
    var node = path.getNode();
    var kind = node.kind;
    var parts = [];
    var nodeValue = node.value;
    if (!namedTypes.FunctionExpression.check(nodeValue)) {
        nodeValue = node;
    }
    parts.push.apply(parts, printClassMemberModifiers(node));
    if (nodeValue.async) {
        parts.push("async ");
    }
    if (nodeValue.generator) {
        parts.push("*");
    }
    if (kind === "get" || kind === "set") {
        parts.push(kind, " ");
    }
    var key = path.call(print, "key");
    if (node.computed) {
        key = (0, lines_1.concat)(["[", key, "]"]);
    }
    parts.push(key);
    if (node.optional) {
        parts.push("?");
    }
    if (node === nodeValue) {
        parts.push(path.call(print, "typeParameters"), "(", printFunctionParams(path, options, print), ")", path.call(print, "returnType"));
        if (node.body) {
            parts.push(" ", path.call(print, "body"));
        }
        else {
            parts.push(";");
        }
    }
    else {
        parts.push(path.call(print, "value", "typeParameters"), "(", path.call(function (valuePath) { return printFunctionParams(valuePath, options, print); }, "value"), ")", path.call(print, "value", "returnType"));
        if (nodeValue.body) {
            parts.push(" ", path.call(print, "value", "body"));
        }
        else {
            parts.push(";");
        }
    }
    return (0, lines_1.concat)(parts);
}
function printArgumentsList(path, options, print) {
    var printed = path.map(print, "arguments");
    var trailingComma = util.isTrailingCommaEnabled(options, "parameters");
    var joined = (0, lines_1.fromString)(", ").join(printed);
    if (joined.getLineLength(1) > options.wrapColumn) {
        joined = (0, lines_1.fromString)(",\n").join(printed);
        return (0, lines_1.concat)([
            "(\n",
            joined.indent(options.tabWidth),
            trailingComma ? ",\n)" : "\n)",
        ]);
    }
    return (0, lines_1.concat)(["(", joined, ")"]);
}
function printFunctionParams(path, options, print) {
    var fun = path.getValue();
    var params;
    var printed = [];
    if (fun.params) {
        params = fun.params;
        printed = path.map(print, "params");
    }
    else if (fun.parameters) {
        params = fun.parameters;
        printed = path.map(print, "parameters");
    }
    if (fun.defaults) {
        path.each(function (defExprPath) {
            var i = defExprPath.getName();
            var p = printed[i];
            if (p && defExprPath.getValue()) {
                printed[i] = (0, lines_1.concat)([p, " = ", print(defExprPath)]);
            }
        }, "defaults");
    }
    if (fun.rest) {
        printed.push((0, lines_1.concat)(["...", path.call(print, "rest")]));
    }
    var joined = (0, lines_1.fromString)(", ").join(printed);
    if (joined.length > 1 || joined.getLineLength(1) > options.wrapColumn) {
        joined = (0, lines_1.fromString)(",\n").join(printed);
        if (util.isTrailingCommaEnabled(options, "parameters") &&
            !fun.rest &&
            params[params.length - 1].type !== "RestElement") {
            joined = (0, lines_1.concat)([joined, ",\n"]);
        }
        else {
            joined = (0, lines_1.concat)([joined, "\n"]);
        }
        return (0, lines_1.concat)(["\n", joined.indent(options.tabWidth)]);
    }
    return joined;
}
function maybePrintImportAssertions(path, options, print) {
    var n = path.getValue();
    if (n.assertions && n.assertions.length > 0) {
        var parts = [" assert {"];
        var printed = path.map(print, "assertions");
        var flat = (0, lines_1.fromString)(", ").join(printed);
        if (flat.length > 1 || flat.getLineLength(1) > options.wrapColumn) {
            parts.push("\n", (0, lines_1.fromString)(",\n").join(printed).indent(options.tabWidth), "\n}");
        }
        else {
            parts.push(" ", flat, " }");
        }
        return (0, lines_1.concat)(parts);
    }
    return (0, lines_1.fromString)("");
}
function printExportDeclaration(path, options, print) {
    var decl = path.getValue();
    var parts = ["export "];
    if (decl.exportKind && decl.exportKind === "type") {
        if (!decl.declaration) {
            parts.push("type ");
        }
    }
    var shouldPrintSpaces = options.objectCurlySpacing;
    namedTypes.Declaration.assert(decl);
    if (decl["default"] || decl.type === "ExportDefaultDeclaration") {
        parts.push("default ");
    }
    if (decl.declaration) {
        parts.push(path.call(print, "declaration"));
    }
    else if (decl.specifiers) {
        if (decl.specifiers.length === 1 &&
            decl.specifiers[0].type === "ExportBatchSpecifier") {
            parts.push("*");
        }
        else if (decl.specifiers.length === 0) {
            parts.push("{}");
        }
        else if (decl.specifiers[0].type === "ExportDefaultSpecifier") {
            var unbracedSpecifiers_2 = [];
            var bracedSpecifiers_2 = [];
            path.each(function (specifierPath) {
                var spec = specifierPath.getValue();
                if (spec.type === "ExportDefaultSpecifier") {
                    unbracedSpecifiers_2.push(print(specifierPath));
                }
                else {
                    bracedSpecifiers_2.push(print(specifierPath));
                }
            }, "specifiers");
            unbracedSpecifiers_2.forEach(function (lines, i) {
                if (i > 0) {
                    parts.push(", ");
                }
                parts.push(lines);
            });
            if (bracedSpecifiers_2.length > 0) {
                var lines_2 = (0, lines_1.fromString)(", ").join(bracedSpecifiers_2);
                if (lines_2.getLineLength(1) > options.wrapColumn) {
                    lines_2 = (0, lines_1.concat)([
                        (0, lines_1.fromString)(",\n").join(bracedSpecifiers_2).indent(options.tabWidth),
                        ",",
                    ]);
                }
                if (unbracedSpecifiers_2.length > 0) {
                    parts.push(", ");
                }
                if (lines_2.length > 1) {
                    parts.push("{\n", lines_2, "\n}");
                }
                else if (options.objectCurlySpacing) {
                    parts.push("{ ", lines_2, " }");
                }
                else {
                    parts.push("{", lines_2, "}");
                }
            }
        }
        else {
            parts.push(shouldPrintSpaces ? "{ " : "{", (0, lines_1.fromString)(", ").join(path.map(print, "specifiers")), shouldPrintSpaces ? " }" : "}");
        }
        if (decl.source) {
            parts.push(" from ", path.call(print, "source"), maybePrintImportAssertions(path, options, print));
        }
    }
    var lines = (0, lines_1.concat)(parts);
    if (lastNonSpaceCharacter(lines) !== ";" &&
        !(decl.declaration &&
            (decl.declaration.type === "FunctionDeclaration" ||
                decl.declaration.type === "ClassDeclaration" ||
                decl.declaration.type === "TSModuleDeclaration" ||
                decl.declaration.type === "TSInterfaceDeclaration" ||
                decl.declaration.type === "TSEnumDeclaration"))) {
        lines = (0, lines_1.concat)([lines, ";"]);
    }
    return lines;
}
function printFlowDeclaration(path, parts) {
    var parentExportDecl = util.getParentExportDeclaration(path);
    if (parentExportDecl) {
        assert_1.default.strictEqual(parentExportDecl.type, "DeclareExportDeclaration");
    }
    else {
        // If the parent node has type DeclareExportDeclaration, then it
        // will be responsible for printing the "declare" token. Otherwise
        // it needs to be printed with this non-exported declaration node.
        parts.unshift("declare ");
    }
    return (0, lines_1.concat)(parts);
}
function printVariance(path, print) {
    return path.call(function (variancePath) {
        var value = variancePath.getValue();
        if (value) {
            if (value === "plus") {
                return (0, lines_1.fromString)("+");
            }
            if (value === "minus") {
                return (0, lines_1.fromString)("-");
            }
            return print(variancePath);
        }
        return (0, lines_1.fromString)("");
    }, "variance");
}
function adjustClause(clause, options) {
    if (clause.length > 1)
        return (0, lines_1.concat)([" ", clause]);
    return (0, lines_1.concat)(["\n", maybeAddSemicolon(clause).indent(options.tabWidth)]);
}
function lastNonSpaceCharacter(lines) {
    var pos = lines.lastPos();
    do {
        var ch = lines.charAt(pos);
        if (/\S/.test(ch))
            return ch;
    } while (lines.prevPos(pos));
}
function endsWithBrace(lines) {
    return lastNonSpaceCharacter(lines) === "}";
}
function swapQuotes(str) {
    return str.replace(/['"]/g, function (m) { return (m === '"' ? "'" : '"'); });
}
function getPossibleRaw(node) {
    var value = types.getFieldValue(node, "value");
    var extra = types.getFieldValue(node, "extra");
    if (extra && typeof extra.raw === "string" && value == extra.rawValue) {
        return extra.raw;
    }
    if (node.type === "Literal") {
        var raw = node.raw;
        if (typeof raw === "string" && value == raw) {
            return raw;
        }
    }
}
function jsSafeStringify(str) {
    return JSON.stringify(str).replace(/[\u2028\u2029]/g, function (m) {
        return "\\u" + m.charCodeAt(0).toString(16);
    });
}
function nodeStr(str, options) {
    isString.assert(str);
    switch (options.quote) {
        case "auto": {
            var double = jsSafeStringify(str);
            var single = swapQuotes(jsSafeStringify(swapQuotes(str)));
            return double.length > single.length ? single : double;
        }
        case "single":
            return swapQuotes(jsSafeStringify(swapQuotes(str)));
        case "double":
        default:
            return jsSafeStringify(str);
    }
}
function maybeAddSemicolon(lines) {
    var eoc = lastNonSpaceCharacter(lines);
    if (!eoc || "\n};".indexOf(eoc) < 0)
        return (0, lines_1.concat)([lines, ";"]);
    return lines;
}


/***/ }),

/***/ 8704:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isTrailingCommaEnabled = exports.getParentExportDeclaration = exports.isExportDeclaration = exports.fixFaultyLocations = exports.getTrueLoc = exports.composeSourceMaps = exports.copyPos = exports.comparePos = exports.getUnionOfKeys = exports.getOption = exports.isBrowser = exports.getLineTerminator = void 0;
var tslib_1 = __nccwpck_require__(204);
var assert_1 = tslib_1.__importDefault(__nccwpck_require__(9491));
var types = tslib_1.__importStar(__nccwpck_require__(6587));
var n = types.namedTypes;
var source_map_1 = tslib_1.__importDefault(__nccwpck_require__(4390));
var SourceMapConsumer = source_map_1.default.SourceMapConsumer;
var SourceMapGenerator = source_map_1.default.SourceMapGenerator;
var hasOwn = Object.prototype.hasOwnProperty;
function getLineTerminator() {
    return isBrowser() ? "\n" : (__nccwpck_require__(2037).EOL) || "\n";
}
exports.getLineTerminator = getLineTerminator;
function isBrowser() {
    return (typeof window !== "undefined" && typeof window.document !== "undefined");
}
exports.isBrowser = isBrowser;
function getOption(options, key, defaultValue) {
    if (options && hasOwn.call(options, key)) {
        return options[key];
    }
    return defaultValue;
}
exports.getOption = getOption;
function getUnionOfKeys() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var result = {};
    var argc = args.length;
    for (var i = 0; i < argc; ++i) {
        var keys = Object.keys(args[i]);
        var keyCount = keys.length;
        for (var j = 0; j < keyCount; ++j) {
            result[keys[j]] = true;
        }
    }
    return result;
}
exports.getUnionOfKeys = getUnionOfKeys;
function comparePos(pos1, pos2) {
    return pos1.line - pos2.line || pos1.column - pos2.column;
}
exports.comparePos = comparePos;
function copyPos(pos) {
    return {
        line: pos.line,
        column: pos.column,
    };
}
exports.copyPos = copyPos;
function composeSourceMaps(formerMap, latterMap) {
    if (formerMap) {
        if (!latterMap) {
            return formerMap;
        }
    }
    else {
        return latterMap || null;
    }
    var smcFormer = new SourceMapConsumer(formerMap);
    var smcLatter = new SourceMapConsumer(latterMap);
    var smg = new SourceMapGenerator({
        file: latterMap.file,
        sourceRoot: latterMap.sourceRoot,
    });
    var sourcesToContents = {};
    smcLatter.eachMapping(function (mapping) {
        var origPos = smcFormer.originalPositionFor({
            line: mapping.originalLine,
            column: mapping.originalColumn,
        });
        var sourceName = origPos.source;
        if (sourceName === null) {
            return;
        }
        smg.addMapping({
            source: sourceName,
            original: copyPos(origPos),
            generated: {
                line: mapping.generatedLine,
                column: mapping.generatedColumn,
            },
            name: mapping.name,
        });
        var sourceContent = smcFormer.sourceContentFor(sourceName);
        if (sourceContent && !hasOwn.call(sourcesToContents, sourceName)) {
            sourcesToContents[sourceName] = sourceContent;
            smg.setSourceContent(sourceName, sourceContent);
        }
    });
    return smg.toJSON();
}
exports.composeSourceMaps = composeSourceMaps;
function getTrueLoc(node, lines) {
    // It's possible that node is newly-created (not parsed by Esprima),
    // in which case it probably won't have a .loc property (or an
    // .original property for that matter). That's fine; we'll just
    // pretty-print it as usual.
    if (!node.loc) {
        return null;
    }
    var result = {
        start: node.loc.start,
        end: node.loc.end,
    };
    function include(node) {
        expandLoc(result, node.loc);
    }
    // If the node is an export declaration and its .declaration has any
    // decorators, their locations might contribute to the true start/end
    // positions of the export declaration node.
    if (node.declaration &&
        node.declaration.decorators &&
        isExportDeclaration(node)) {
        node.declaration.decorators.forEach(include);
    }
    if (comparePos(result.start, result.end) < 0) {
        // Trim leading whitespace.
        result.start = copyPos(result.start);
        lines.skipSpaces(result.start, false, true);
        if (comparePos(result.start, result.end) < 0) {
            // Trim trailing whitespace, if the end location is not already the
            // same as the start location.
            result.end = copyPos(result.end);
            lines.skipSpaces(result.end, true, true);
        }
    }
    // If the node has any comments, their locations might contribute to
    // the true start/end positions of the node.
    if (node.comments) {
        node.comments.forEach(include);
    }
    return result;
}
exports.getTrueLoc = getTrueLoc;
function expandLoc(parentLoc, childLoc) {
    if (parentLoc && childLoc) {
        if (comparePos(childLoc.start, parentLoc.start) < 0) {
            parentLoc.start = childLoc.start;
        }
        if (comparePos(parentLoc.end, childLoc.end) < 0) {
            parentLoc.end = childLoc.end;
        }
    }
}
function fixFaultyLocations(node, lines) {
    var loc = node.loc;
    if (loc) {
        if (loc.start.line < 1) {
            loc.start.line = 1;
        }
        if (loc.end.line < 1) {
            loc.end.line = 1;
        }
    }
    if (node.type === "File") {
        // Babylon returns File nodes whose .loc.{start,end} do not include
        // leading or trailing whitespace.
        loc.start = lines.firstPos();
        loc.end = lines.lastPos();
    }
    fixForLoopHead(node, lines);
    fixTemplateLiteral(node, lines);
    if (loc && node.decorators) {
        // Expand the .loc of the node responsible for printing the decorators
        // (here, the decorated node) so that it includes node.decorators.
        node.decorators.forEach(function (decorator) {
            expandLoc(loc, decorator.loc);
        });
    }
    else if (node.declaration && isExportDeclaration(node)) {
        // Nullify .loc information for the child declaration so that we never
        // try to reprint it without also reprinting the export declaration.
        node.declaration.loc = null;
        // Expand the .loc of the node responsible for printing the decorators
        // (here, the export declaration) so that it includes node.decorators.
        var decorators = node.declaration.decorators;
        if (decorators) {
            decorators.forEach(function (decorator) {
                expandLoc(loc, decorator.loc);
            });
        }
    }
    else if ((n.MethodDefinition && n.MethodDefinition.check(node)) ||
        (n.Property.check(node) && (node.method || node.shorthand))) {
        // If the node is a MethodDefinition or a .method or .shorthand
        // Property, then the location information stored in
        // node.value.loc is very likely untrustworthy (just the {body}
        // part of a method, or nothing in the case of shorthand
        // properties), so we null out that information to prevent
        // accidental reuse of bogus source code during reprinting.
        node.value.loc = null;
        if (n.FunctionExpression.check(node.value)) {
            // FunctionExpression method values should be anonymous,
            // because their .id fields are ignored anyway.
            node.value.id = null;
        }
    }
    else if (node.type === "ObjectTypeProperty") {
        var loc_1 = node.loc;
        var end = loc_1 && loc_1.end;
        if (end) {
            end = copyPos(end);
            if (lines.prevPos(end) && lines.charAt(end) === ",") {
                // Some parsers accidentally include trailing commas in the
                // .loc.end information for ObjectTypeProperty nodes.
                if ((end = lines.skipSpaces(end, true, true))) {
                    loc_1.end = end;
                }
            }
        }
    }
}
exports.fixFaultyLocations = fixFaultyLocations;
function fixForLoopHead(node, lines) {
    if (node.type !== "ForStatement") {
        return;
    }
    function fix(child) {
        var loc = child && child.loc;
        var start = loc && loc.start;
        var end = loc && copyPos(loc.end);
        while (start && end && comparePos(start, end) < 0) {
            lines.prevPos(end);
            if (lines.charAt(end) === ";") {
                // Update child.loc.end to *exclude* the ';' character.
                loc.end.line = end.line;
                loc.end.column = end.column;
            }
            else {
                break;
            }
        }
    }
    fix(node.init);
    fix(node.test);
    fix(node.update);
}
function fixTemplateLiteral(node, lines) {
    if (node.type !== "TemplateLiteral") {
        return;
    }
    if (node.quasis.length === 0) {
        // If there are no quasi elements, then there is nothing to fix.
        return;
    }
    // node.loc is not present when using export default with a template literal
    if (node.loc) {
        // First we need to exclude the opening ` from the .loc of the first
        // quasi element, in case the parser accidentally decided to include it.
        var afterLeftBackTickPos = copyPos(node.loc.start);
        assert_1.default.strictEqual(lines.charAt(afterLeftBackTickPos), "`");
        assert_1.default.ok(lines.nextPos(afterLeftBackTickPos));
        var firstQuasi = node.quasis[0];
        if (comparePos(firstQuasi.loc.start, afterLeftBackTickPos) < 0) {
            firstQuasi.loc.start = afterLeftBackTickPos;
        }
        // Next we need to exclude the closing ` from the .loc of the last quasi
        // element, in case the parser accidentally decided to include it.
        var rightBackTickPos = copyPos(node.loc.end);
        assert_1.default.ok(lines.prevPos(rightBackTickPos));
        assert_1.default.strictEqual(lines.charAt(rightBackTickPos), "`");
        var lastQuasi = node.quasis[node.quasis.length - 1];
        if (comparePos(rightBackTickPos, lastQuasi.loc.end) < 0) {
            lastQuasi.loc.end = rightBackTickPos;
        }
    }
    // Now we need to exclude ${ and } characters from the .loc's of all
    // quasi elements, since some parsers accidentally include them.
    node.expressions.forEach(function (expr, i) {
        // Rewind from expr.loc.start over any whitespace and the ${ that
        // precedes the expression. The position of the $ should be the same
        // as the .loc.end of the preceding quasi element, but some parsers
        // accidentally include the ${ in the .loc of the quasi element.
        var dollarCurlyPos = lines.skipSpaces(expr.loc.start, true, false);
        if (lines.prevPos(dollarCurlyPos) &&
            lines.charAt(dollarCurlyPos) === "{" &&
            lines.prevPos(dollarCurlyPos) &&
            lines.charAt(dollarCurlyPos) === "$") {
            var quasiBefore = node.quasis[i];
            if (comparePos(dollarCurlyPos, quasiBefore.loc.end) < 0) {
                quasiBefore.loc.end = dollarCurlyPos;
            }
        }
        // Likewise, some parsers accidentally include the } that follows
        // the expression in the .loc of the following quasi element.
        var rightCurlyPos = lines.skipSpaces(expr.loc.end, false, false);
        if (lines.charAt(rightCurlyPos) === "}") {
            assert_1.default.ok(lines.nextPos(rightCurlyPos));
            // Now rightCurlyPos is technically the position just after the }.
            var quasiAfter = node.quasis[i + 1];
            if (comparePos(quasiAfter.loc.start, rightCurlyPos) < 0) {
                quasiAfter.loc.start = rightCurlyPos;
            }
        }
    });
}
function isExportDeclaration(node) {
    if (node)
        switch (node.type) {
            case "ExportDeclaration":
            case "ExportDefaultDeclaration":
            case "ExportDefaultSpecifier":
            case "DeclareExportDeclaration":
            case "ExportNamedDeclaration":
            case "ExportAllDeclaration":
                return true;
        }
    return false;
}
exports.isExportDeclaration = isExportDeclaration;
function getParentExportDeclaration(path) {
    var parentNode = path.getParentNode();
    if (path.getName() === "declaration" && isExportDeclaration(parentNode)) {
        return parentNode;
    }
    return null;
}
exports.getParentExportDeclaration = getParentExportDeclaration;
function isTrailingCommaEnabled(options, context) {
    var trailingComma = options.trailingComma;
    if (typeof trailingComma === "object") {
        return !!trailingComma[context];
    }
    return !!trailingComma;
}
exports.isTrailingCommaEnabled = isTrailingCommaEnabled;


/***/ }),

/***/ 9684:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.run = exports.prettyPrint = exports.print = exports.visit = exports.types = exports.parse = void 0;
var tslib_1 = __nccwpck_require__(204);
var fs_1 = tslib_1.__importDefault(__nccwpck_require__(7147));
var types = tslib_1.__importStar(__nccwpck_require__(6587));
exports.types = types;
var parser_1 = __nccwpck_require__(9502);
Object.defineProperty(exports, "parse", ({ enumerable: true, get: function () { return parser_1.parse; } }));
var printer_1 = __nccwpck_require__(4279);
/**
 * Traverse and potentially modify an abstract syntax tree using a
 * convenient visitor syntax:
 *
 *   recast.visit(ast, {
 *     names: [],
 *     visitIdentifier: function(path) {
 *       var node = path.value;
 *       this.visitor.names.push(node.name);
 *       this.traverse(path);
 *     }
 *   });
 */
var ast_types_1 = __nccwpck_require__(6587);
Object.defineProperty(exports, "visit", ({ enumerable: true, get: function () { return ast_types_1.visit; } }));
/**
 * Reprint a modified syntax tree using as much of the original source
 * code as possible.
 */
function print(node, options) {
    return new printer_1.Printer(options).print(node);
}
exports.print = print;
/**
 * Print without attempting to reuse any original source code.
 */
function prettyPrint(node, options) {
    return new printer_1.Printer(options).printGenerically(node);
}
exports.prettyPrint = prettyPrint;
/**
 * Convenient command-line interface (see e.g. example/add-braces).
 */
function run(transformer, options) {
    return runFile(process.argv[2], transformer, options);
}
exports.run = run;
function runFile(path, transformer, options) {
    fs_1.default.readFile(path, "utf-8", function (err, code) {
        if (err) {
            console.error(err);
            return;
        }
        runString(code, transformer, options);
    });
}
function defaultWriteback(output) {
    process.stdout.write(output);
}
function runString(code, transformer, options) {
    var writeback = (options && options.writeback) || defaultWriteback;
    transformer((0, parser_1.parse)(code, options), function (node) {
        writeback(print(node, options).code);
    });
}


/***/ }),

/***/ 2469:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parse = void 0;
// This module is suitable for passing as options.parser when calling
// recast.parse to process ECMAScript code with Esprima:
//
//   const ast = recast.parse(source, {
//     parser: require("recast/parsers/esprima")
//   });
//
var util_1 = __nccwpck_require__(8704);
function parse(source, options) {
    var comments = [];
    var ast = (__nccwpck_require__(2285).parse)(source, {
        loc: true,
        locations: true,
        comment: true,
        onComment: comments,
        range: (0, util_1.getOption)(options, "range", false),
        tolerant: (0, util_1.getOption)(options, "tolerant", true),
        tokens: true,
        jsx: (0, util_1.getOption)(options, "jsx", false),
        sourceType: (0, util_1.getOption)(options, "sourceType", "module"),
    });
    if (!Array.isArray(ast.comments)) {
        ast.comments = comments;
    }
    return ast;
}
exports.parse = parse;


/***/ }),

/***/ 9440:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {


const shebangRegex = __nccwpck_require__(6477);

module.exports = (string = '') => {
	const match = string.match(shebangRegex);

	if (!match) {
		return null;
	}

	const [path, argument] = match[0].replace(/#! ?/, '').split(' ');
	const binary = path.split('/').pop();

	if (binary === 'env') {
		return argument;
	}

	return argument ? `${binary} ${argument}` : binary;
};


/***/ }),

/***/ 6477:
/***/ ((module) => {


module.exports = /^#!(.*)/;


/***/ }),

/***/ 7305:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

// Note: since nyc uses this module to output coverage, any lines
// that are in the direct sync flow of nyc's outputCoverage are
// ignored, since we can never get coverage for them.
// grab a reference to node's real process object right away
var process = global.process

const processOk = function (process) {
  return process &&
    typeof process === 'object' &&
    typeof process.removeListener === 'function' &&
    typeof process.emit === 'function' &&
    typeof process.reallyExit === 'function' &&
    typeof process.listeners === 'function' &&
    typeof process.kill === 'function' &&
    typeof process.pid === 'number' &&
    typeof process.on === 'function'
}

// some kind of non-node environment, just no-op
/* istanbul ignore if */
if (!processOk(process)) {
  module.exports = function () {
    return function () {}
  }
} else {
  var assert = __nccwpck_require__(9491)
  var signals = __nccwpck_require__(3620)
  var isWin = /^win/i.test(process.platform)

  var EE = __nccwpck_require__(2361)
  /* istanbul ignore if */
  if (typeof EE !== 'function') {
    EE = EE.EventEmitter
  }

  var emitter
  if (process.__signal_exit_emitter__) {
    emitter = process.__signal_exit_emitter__
  } else {
    emitter = process.__signal_exit_emitter__ = new EE()
    emitter.count = 0
    emitter.emitted = {}
  }

  // Because this emitter is a global, we have to check to see if a
  // previous version of this library failed to enable infinite listeners.
  // I know what you're about to say.  But literally everything about
  // signal-exit is a compromise with evil.  Get used to it.
  if (!emitter.infinite) {
    emitter.setMaxListeners(Infinity)
    emitter.infinite = true
  }

  module.exports = function (cb, opts) {
    /* istanbul ignore if */
    if (!processOk(global.process)) {
      return function () {}
    }
    assert.equal(typeof cb, 'function', 'a callback must be provided for exit handler')

    if (loaded === false) {
      load()
    }

    var ev = 'exit'
    if (opts && opts.alwaysLast) {
      ev = 'afterexit'
    }

    var remove = function () {
      emitter.removeListener(ev, cb)
      if (emitter.listeners('exit').length === 0 &&
          emitter.listeners('afterexit').length === 0) {
        unload()
      }
    }
    emitter.on(ev, cb)

    return remove
  }

  var unload = function unload () {
    if (!loaded || !processOk(global.process)) {
      return
    }
    loaded = false

    signals.forEach(function (sig) {
      try {
        process.removeListener(sig, sigListeners[sig])
      } catch (er) {}
    })
    process.emit = originalProcessEmit
    process.reallyExit = originalProcessReallyExit
    emitter.count -= 1
  }
  module.exports.unload = unload

  var emit = function emit (event, code, signal) {
    /* istanbul ignore if */
    if (emitter.emitted[event]) {
      return
    }
    emitter.emitted[event] = true
    emitter.emit(event, code, signal)
  }

  // { <signal>: <listener fn>, ... }
  var sigListeners = {}
  signals.forEach(function (sig) {
    sigListeners[sig] = function listener () {
      /* istanbul ignore if */
      if (!processOk(global.process)) {
        return
      }
      // If there are no other listeners, an exit is coming!
      // Simplest way: remove us and then re-send the signal.
      // We know that this will kill the process, so we can
      // safely emit now.
      var listeners = process.listeners(sig)
      if (listeners.length === emitter.count) {
        unload()
        emit('exit', null, sig)
        /* istanbul ignore next */
        emit('afterexit', null, sig)
        /* istanbul ignore next */
        if (isWin && sig === 'SIGHUP') {
          // "SIGHUP" throws an `ENOSYS` error on Windows,
          // so use a supported signal instead
          sig = 'SIGINT'
        }
        /* istanbul ignore next */
        process.kill(process.pid, sig)
      }
    }
  })

  module.exports.signals = function () {
    return signals
  }

  var loaded = false

  var load = function load () {
    if (loaded || !processOk(global.process)) {
      return
    }
    loaded = true

    // This is the number of onSignalExit's that are in play.
    // It's important so that we can count the correct number of
    // listeners on signals, and don't wait for the other one to
    // handle it instead of us.
    emitter.count += 1

    signals = signals.filter(function (sig) {
      try {
        process.on(sig, sigListeners[sig])
        return true
      } catch (er) {
        return false
      }
    })

    process.emit = processEmit
    process.reallyExit = processReallyExit
  }
  module.exports.load = load

  var originalProcessReallyExit = process.reallyExit
  var processReallyExit = function processReallyExit (code) {
    /* istanbul ignore if */
    if (!processOk(global.process)) {
      return
    }
    process.exitCode = code || /* istanbul ignore next */ 0
    emit('exit', process.exitCode, null)
    /* istanbul ignore next */
    emit('afterexit', process.exitCode, null)
    /* istanbul ignore next */
    originalProcessReallyExit.call(process, process.exitCode)
  }

  var originalProcessEmit = process.emit
  var processEmit = function processEmit (ev, arg) {
    if (ev === 'exit' && processOk(global.process)) {
      /* istanbul ignore else */
      if (arg !== undefined) {
        process.exitCode = arg
      }
      var ret = originalProcessEmit.apply(this, arguments)
      /* istanbul ignore next */
      emit('exit', process.exitCode, null)
      /* istanbul ignore next */
      emit('afterexit', process.exitCode, null)
      /* istanbul ignore next */
      return ret
    } else {
      return originalProcessEmit.apply(this, arguments)
    }
  }
}


/***/ }),

/***/ 3620:
/***/ ((module) => {

// This is not the set of all possible signals.
//
// It IS, however, the set of all signals that trigger
// an exit on either Linux or BSD systems.  Linux is a
// superset of the signal names supported on BSD, and
// the unknown signals just fail to register, so we can
// catch that easily enough.
//
// Don't bother with SIGKILL.  It's uncatchable, which
// means that we can't fire any callbacks anyway.
//
// If a user does happen to register a handler on a non-
// fatal signal like SIGWINCH or something, and then
// exit, it'll end up firing `process.emit('exit')`, so
// the handler will be fired anyway.
//
// SIGBUS, SIGFPE, SIGSEGV and SIGILL, when not raised
// artificially, inherently leave the process in a
// state from which it is not safe to try and enter JS
// listeners.
module.exports = [
  'SIGABRT',
  'SIGALRM',
  'SIGHUP',
  'SIGINT',
  'SIGTERM'
]

if (process.platform !== 'win32') {
  module.exports.push(
    'SIGVTALRM',
    'SIGXCPU',
    'SIGXFSZ',
    'SIGUSR2',
    'SIGTRAP',
    'SIGSYS',
    'SIGQUIT',
    'SIGIOT'
    // should detect profiler and enable/disable accordingly.
    // see #21
    // 'SIGPROF'
  )
}

if (process.platform === 'linux') {
  module.exports.push(
    'SIGIO',
    'SIGPOLL',
    'SIGPWR',
    'SIGSTKFLT',
    'SIGUNUSED'
  )
}


/***/ }),

/***/ 5809:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = __nccwpck_require__(7218);
var has = Object.prototype.hasOwnProperty;
var hasNativeMap = typeof Map !== "undefined";

/**
 * A data structure which is a combination of an array and a set. Adding a new
 * member is O(1), testing for membership is O(1), and finding the index of an
 * element is O(1). Removing elements from the set is not supported. Only
 * strings are supported for membership.
 */
function ArraySet() {
  this._array = [];
  this._set = hasNativeMap ? new Map() : Object.create(null);
}

/**
 * Static method for creating ArraySet instances from an existing array.
 */
ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
  var set = new ArraySet();
  for (var i = 0, len = aArray.length; i < len; i++) {
    set.add(aArray[i], aAllowDuplicates);
  }
  return set;
};

/**
 * Return how many unique items are in this ArraySet. If duplicates have been
 * added, than those do not count towards the size.
 *
 * @returns Number
 */
ArraySet.prototype.size = function ArraySet_size() {
  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
};

/**
 * Add the given string to this set.
 *
 * @param String aStr
 */
ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
  var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
  var idx = this._array.length;
  if (!isDuplicate || aAllowDuplicates) {
    this._array.push(aStr);
  }
  if (!isDuplicate) {
    if (hasNativeMap) {
      this._set.set(aStr, idx);
    } else {
      this._set[sStr] = idx;
    }
  }
};

/**
 * Is the given string a member of this set?
 *
 * @param String aStr
 */
ArraySet.prototype.has = function ArraySet_has(aStr) {
  if (hasNativeMap) {
    return this._set.has(aStr);
  } else {
    var sStr = util.toSetString(aStr);
    return has.call(this._set, sStr);
  }
};

/**
 * What is the index of the given string in the array?
 *
 * @param String aStr
 */
ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
  if (hasNativeMap) {
    var idx = this._set.get(aStr);
    if (idx >= 0) {
        return idx;
    }
  } else {
    var sStr = util.toSetString(aStr);
    if (has.call(this._set, sStr)) {
      return this._set[sStr];
    }
  }

  throw new Error('"' + aStr + '" is not in the set.');
};

/**
 * What is the element at the given index?
 *
 * @param Number aIdx
 */
ArraySet.prototype.at = function ArraySet_at(aIdx) {
  if (aIdx >= 0 && aIdx < this._array.length) {
    return this._array[aIdx];
  }
  throw new Error('No element indexed by ' + aIdx);
};

/**
 * Returns the array representation of this set (which has the proper indices
 * indicated by indexOf). Note that this is a copy of the internal array used
 * for storing the members so that no one can mess with internal state.
 */
ArraySet.prototype.toArray = function ArraySet_toArray() {
  return this._array.slice();
};

exports.I = ArraySet;


/***/ }),

/***/ 3167:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 *
 * Based on the Base 64 VLQ implementation in Closure Compiler:
 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
 *
 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Google Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var base64 = __nccwpck_require__(1021);

// A single base 64 digit can contain 6 bits of data. For the base 64 variable
// length quantities we use in the source map spec, the first bit is the sign,
// the next four bits are the actual value, and the 6th bit is the
// continuation bit. The continuation bit tells us whether there are more
// digits in this value following this digit.
//
//   Continuation
//   |    Sign
//   |    |
//   V    V
//   101011

var VLQ_BASE_SHIFT = 5;

// binary: 100000
var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

// binary: 011111
var VLQ_BASE_MASK = VLQ_BASE - 1;

// binary: 100000
var VLQ_CONTINUATION_BIT = VLQ_BASE;

/**
 * Converts from a two-complement value to a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
 */
function toVLQSigned(aValue) {
  return aValue < 0
    ? ((-aValue) << 1) + 1
    : (aValue << 1) + 0;
}

/**
 * Converts to a two-complement value from a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
 */
function fromVLQSigned(aValue) {
  var isNegative = (aValue & 1) === 1;
  var shifted = aValue >> 1;
  return isNegative
    ? -shifted
    : shifted;
}

/**
 * Returns the base 64 VLQ encoded value.
 */
exports.encode = function base64VLQ_encode(aValue) {
  var encoded = "";
  var digit;

  var vlq = toVLQSigned(aValue);

  do {
    digit = vlq & VLQ_BASE_MASK;
    vlq >>>= VLQ_BASE_SHIFT;
    if (vlq > 0) {
      // There are still more digits in this value, so we must make sure the
      // continuation bit is marked.
      digit |= VLQ_CONTINUATION_BIT;
    }
    encoded += base64.encode(digit);
  } while (vlq > 0);

  return encoded;
};

/**
 * Decodes the next base 64 VLQ value from the given string and returns the
 * value and the rest of the string via the out parameter.
 */
exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
  var strLen = aStr.length;
  var result = 0;
  var shift = 0;
  var continuation, digit;

  do {
    if (aIndex >= strLen) {
      throw new Error("Expected more digits in base 64 VLQ value.");
    }

    digit = base64.decode(aStr.charCodeAt(aIndex++));
    if (digit === -1) {
      throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
    }

    continuation = !!(digit & VLQ_CONTINUATION_BIT);
    digit &= VLQ_BASE_MASK;
    result = result + (digit << shift);
    shift += VLQ_BASE_SHIFT;
  } while (continuation);

  aOutParam.value = fromVLQSigned(result);
  aOutParam.rest = aIndex;
};


/***/ }),

/***/ 1021:
/***/ ((__unused_webpack_module, exports) => {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

/**
 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
 */
exports.encode = function (number) {
  if (0 <= number && number < intToCharMap.length) {
    return intToCharMap[number];
  }
  throw new TypeError("Must be between 0 and 63: " + number);
};

/**
 * Decode a single base 64 character code digit to an integer. Returns -1 on
 * failure.
 */
exports.decode = function (charCode) {
  var bigA = 65;     // 'A'
  var bigZ = 90;     // 'Z'

  var littleA = 97;  // 'a'
  var littleZ = 122; // 'z'

  var zero = 48;     // '0'
  var nine = 57;     // '9'

  var plus = 43;     // '+'
  var slash = 47;    // '/'

  var littleOffset = 26;
  var numberOffset = 52;

  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
  if (bigA <= charCode && charCode <= bigZ) {
    return (charCode - bigA);
  }

  // 26 - 51: abcdefghijklmnopqrstuvwxyz
  if (littleA <= charCode && charCode <= littleZ) {
    return (charCode - littleA + littleOffset);
  }

  // 52 - 61: 0123456789
  if (zero <= charCode && charCode <= nine) {
    return (charCode - zero + numberOffset);
  }

  // 62: +
  if (charCode == plus) {
    return 62;
  }

  // 63: /
  if (charCode == slash) {
    return 63;
  }

  // Invalid base64 digit.
  return -1;
};


/***/ }),

/***/ 190:
/***/ ((__unused_webpack_module, exports) => {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

exports.GREATEST_LOWER_BOUND = 1;
exports.LEAST_UPPER_BOUND = 2;

/**
 * Recursive implementation of binary search.
 *
 * @param aLow Indices here and lower do not contain the needle.
 * @param aHigh Indices here and higher do not contain the needle.
 * @param aNeedle The element being searched for.
 * @param aHaystack The non-empty array being searched.
 * @param aCompare Function which takes two elements and returns -1, 0, or 1.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 */
function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
  // This function terminates when one of the following is true:
  //
  //   1. We find the exact element we are looking for.
  //
  //   2. We did not find the exact element, but we can return the index of
  //      the next-closest element.
  //
  //   3. We did not find the exact element, and there is no next-closest
  //      element than the one we are searching for, so we return -1.
  var mid = Math.floor((aHigh - aLow) / 2) + aLow;
  var cmp = aCompare(aNeedle, aHaystack[mid], true);
  if (cmp === 0) {
    // Found the element we are looking for.
    return mid;
  }
  else if (cmp > 0) {
    // Our needle is greater than aHaystack[mid].
    if (aHigh - mid > 1) {
      // The element is in the upper half.
      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
    }

    // The exact needle element was not found in this haystack. Determine if
    // we are in termination case (3) or (2) and return the appropriate thing.
    if (aBias == exports.LEAST_UPPER_BOUND) {
      return aHigh < aHaystack.length ? aHigh : -1;
    } else {
      return mid;
    }
  }
  else {
    // Our needle is less than aHaystack[mid].
    if (mid - aLow > 1) {
      // The element is in the lower half.
      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
    }

    // we are in termination case (3) or (2) and return the appropriate thing.
    if (aBias == exports.LEAST_UPPER_BOUND) {
      return mid;
    } else {
      return aLow < 0 ? -1 : aLow;
    }
  }
}

/**
 * This is an implementation of binary search which will always try and return
 * the index of the closest element if there is no exact hit. This is because
 * mappings between original and generated line/col pairs are single points,
 * and there is an implicit region between each of them, so a miss just means
 * that you aren't on the very start of a region.
 *
 * @param aNeedle The element you are looking for.
 * @param aHaystack The array that is being searched.
 * @param aCompare A function which takes the needle and an element in the
 *     array and returns -1, 0, or 1 depending on whether the needle is less
 *     than, equal to, or greater than the element, respectively.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
 */
exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
  if (aHaystack.length === 0) {
    return -1;
  }

  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);
  if (index < 0) {
    return -1;
  }

  // We have found either the exact element, or the next-closest element than
  // the one we are searching for. However, there may be more than one such
  // element. Make sure we always return the smallest of these.
  while (index - 1 >= 0) {
    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
      break;
    }
    --index;
  }

  return index;
};


/***/ }),

/***/ 7788:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2014 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = __nccwpck_require__(7218);

/**
 * Determine whether mappingB is after mappingA with respect to generated
 * position.
 */
function generatedPositionAfter(mappingA, mappingB) {
  // Optimized for most common case
  var lineA = mappingA.generatedLine;
  var lineB = mappingB.generatedLine;
  var columnA = mappingA.generatedColumn;
  var columnB = mappingB.generatedColumn;
  return lineB > lineA || lineB == lineA && columnB >= columnA ||
         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
}

/**
 * A data structure to provide a sorted view of accumulated mappings in a
 * performance conscious manner. It trades a neglibable overhead in general
 * case for a large speedup in case of mappings being added in order.
 */
function MappingList() {
  this._array = [];
  this._sorted = true;
  // Serves as infimum
  this._last = {generatedLine: -1, generatedColumn: 0};
}

/**
 * Iterate through internal items. This method takes the same arguments that
 * `Array.prototype.forEach` takes.
 *
 * NOTE: The order of the mappings is NOT guaranteed.
 */
MappingList.prototype.unsortedForEach =
  function MappingList_forEach(aCallback, aThisArg) {
    this._array.forEach(aCallback, aThisArg);
  };

/**
 * Add the given source mapping.
 *
 * @param Object aMapping
 */
MappingList.prototype.add = function MappingList_add(aMapping) {
  if (generatedPositionAfter(this._last, aMapping)) {
    this._last = aMapping;
    this._array.push(aMapping);
  } else {
    this._sorted = false;
    this._array.push(aMapping);
  }
};

/**
 * Returns the flat, sorted array of mappings. The mappings are sorted by
 * generated position.
 *
 * WARNING: This method returns internal data without copying, for
 * performance. The return value must NOT be mutated, and should be treated as
 * an immutable borrow. If you want to take ownership, you must make your own
 * copy.
 */
MappingList.prototype.toArray = function MappingList_toArray() {
  if (!this._sorted) {
    this._array.sort(util.compareByGeneratedPositionsInflated);
    this._sorted = true;
  }
  return this._array;
};

exports.H = MappingList;


/***/ }),

/***/ 2480:
/***/ ((__unused_webpack_module, exports) => {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

// It turns out that some (most?) JavaScript engines don't self-host
// `Array.prototype.sort`. This makes sense because C++ will likely remain
// faster than JS when doing raw CPU-intensive sorting. However, when using a
// custom comparator function, calling back and forth between the VM's C++ and
// JIT'd JS is rather slow *and* loses JIT type information, resulting in
// worse generated code for the comparator function than would be optimal. In
// fact, when sorting with a comparator, these costs outweigh the benefits of
// sorting in C++. By using our own JS-implemented Quick Sort (below), we get
// a ~3500ms mean speed-up in `bench/bench.html`.

/**
 * Swap the elements indexed by `x` and `y` in the array `ary`.
 *
 * @param {Array} ary
 *        The array.
 * @param {Number} x
 *        The index of the first item.
 * @param {Number} y
 *        The index of the second item.
 */
function swap(ary, x, y) {
  var temp = ary[x];
  ary[x] = ary[y];
  ary[y] = temp;
}

/**
 * Returns a random integer within the range `low .. high` inclusive.
 *
 * @param {Number} low
 *        The lower bound on the range.
 * @param {Number} high
 *        The upper bound on the range.
 */
function randomIntInRange(low, high) {
  return Math.round(low + (Math.random() * (high - low)));
}

/**
 * The Quick Sort algorithm.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 * @param {Number} p
 *        Start index of the array
 * @param {Number} r
 *        End index of the array
 */
function doQuickSort(ary, comparator, p, r) {
  // If our lower bound is less than our upper bound, we (1) partition the
  // array into two pieces and (2) recurse on each half. If it is not, this is
  // the empty array and our base case.

  if (p < r) {
    // (1) Partitioning.
    //
    // The partitioning chooses a pivot between `p` and `r` and moves all
    // elements that are less than or equal to the pivot to the before it, and
    // all the elements that are greater than it after it. The effect is that
    // once partition is done, the pivot is in the exact place it will be when
    // the array is put in sorted order, and it will not need to be moved
    // again. This runs in O(n) time.

    // Always choose a random pivot so that an input array which is reverse
    // sorted does not cause O(n^2) running time.
    var pivotIndex = randomIntInRange(p, r);
    var i = p - 1;

    swap(ary, pivotIndex, r);
    var pivot = ary[r];

    // Immediately after `j` is incremented in this loop, the following hold
    // true:
    //
    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
    //
    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
    for (var j = p; j < r; j++) {
      if (comparator(ary[j], pivot) <= 0) {
        i += 1;
        swap(ary, i, j);
      }
    }

    swap(ary, i + 1, j);
    var q = i + 1;

    // (2) Recurse on each half.

    doQuickSort(ary, comparator, p, q - 1);
    doQuickSort(ary, comparator, q + 1, r);
  }
}

/**
 * Sort the given array in-place with the given comparator function.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 */
exports.U = function (ary, comparator) {
  doQuickSort(ary, comparator, 0, ary.length - 1);
};


/***/ }),

/***/ 2498:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

var __webpack_unused_export__;
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = __nccwpck_require__(7218);
var binarySearch = __nccwpck_require__(190);
var ArraySet = (__nccwpck_require__(5809)/* .ArraySet */ .I);
var base64VLQ = __nccwpck_require__(3167);
var quickSort = (__nccwpck_require__(2480)/* .quickSort */ .U);

function SourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  return sourceMap.sections != null
    ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)
    : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
}

SourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {
  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
}

/**
 * The version of the source mapping spec that we are consuming.
 */
SourceMapConsumer.prototype._version = 3;

// `__generatedMappings` and `__originalMappings` are arrays that hold the
// parsed mapping coordinates from the source map's "mappings" attribute. They
// are lazily instantiated, accessed via the `_generatedMappings` and
// `_originalMappings` getters respectively, and we only parse the mappings
// and create these arrays once queried for a source location. We jump through
// these hoops because there can be many thousands of mappings, and parsing
// them is expensive, so we only want to do it if we must.
//
// Each object in the arrays is of the form:
//
//     {
//       generatedLine: The line number in the generated code,
//       generatedColumn: The column number in the generated code,
//       source: The path to the original source file that generated this
//               chunk of code,
//       originalLine: The line number in the original source that
//                     corresponds to this chunk of generated code,
//       originalColumn: The column number in the original source that
//                       corresponds to this chunk of generated code,
//       name: The name of the original symbol which generated this chunk of
//             code.
//     }
//
// All properties except for `generatedLine` and `generatedColumn` can be
// `null`.
//
// `_generatedMappings` is ordered by the generated positions.
//
// `_originalMappings` is ordered by the original positions.

SourceMapConsumer.prototype.__generatedMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
  configurable: true,
  enumerable: true,
  get: function () {
    if (!this.__generatedMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__generatedMappings;
  }
});

SourceMapConsumer.prototype.__originalMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
  configurable: true,
  enumerable: true,
  get: function () {
    if (!this.__originalMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__originalMappings;
  }
});

SourceMapConsumer.prototype._charIsMappingSeparator =
  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
    var c = aStr.charAt(index);
    return c === ";" || c === ",";
  };

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
SourceMapConsumer.prototype._parseMappings =
  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    throw new Error("Subclasses must implement _parseMappings");
  };

SourceMapConsumer.GENERATED_ORDER = 1;
SourceMapConsumer.ORIGINAL_ORDER = 2;

SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
SourceMapConsumer.LEAST_UPPER_BOUND = 2;

/**
 * Iterate over each mapping between an original source/line/column and a
 * generated line/column in this source map.
 *
 * @param Function aCallback
 *        The function that is called with each mapping.
 * @param Object aContext
 *        Optional. If specified, this object will be the value of `this` every
 *        time that `aCallback` is called.
 * @param aOrder
 *        Either `SourceMapConsumer.GENERATED_ORDER` or
 *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
 *        iterate over the mappings sorted by the generated file's line/column
 *        order or the original's source/line/column order, respectively. Defaults to
 *        `SourceMapConsumer.GENERATED_ORDER`.
 */
SourceMapConsumer.prototype.eachMapping =
  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
    var context = aContext || null;
    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

    var mappings;
    switch (order) {
    case SourceMapConsumer.GENERATED_ORDER:
      mappings = this._generatedMappings;
      break;
    case SourceMapConsumer.ORIGINAL_ORDER:
      mappings = this._originalMappings;
      break;
    default:
      throw new Error("Unknown order of iteration.");
    }

    var sourceRoot = this.sourceRoot;
    mappings.map(function (mapping) {
      var source = mapping.source === null ? null : this._sources.at(mapping.source);
      source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);
      return {
        source: source,
        generatedLine: mapping.generatedLine,
        generatedColumn: mapping.generatedColumn,
        originalLine: mapping.originalLine,
        originalColumn: mapping.originalColumn,
        name: mapping.name === null ? null : this._names.at(mapping.name)
      };
    }, this).forEach(aCallback, context);
  };

/**
 * Returns all generated line and column information for the original source,
 * line, and column provided. If no column is provided, returns all mappings
 * corresponding to a either the line we are searching for or the next
 * closest line that has any mappings. Otherwise, returns all mappings
 * corresponding to the given line and either the column we are searching for
 * or the next closest column that has any offsets.
 *
 * The only argument is an object with the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number is 1-based.
 *   - column: Optional. the column number in the original source.
 *    The column number is 0-based.
 *
 * and an array of objects is returned, each with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *    line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *    The column number is 0-based.
 */
SourceMapConsumer.prototype.allGeneratedPositionsFor =
  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
    var line = util.getArg(aArgs, 'line');

    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
    // returns the index of the closest mapping less than the needle. By
    // setting needle.originalColumn to 0, we thus find the last mapping for
    // the given line, provided such a mapping exists.
    var needle = {
      source: util.getArg(aArgs, 'source'),
      originalLine: line,
      originalColumn: util.getArg(aArgs, 'column', 0)
    };

    needle.source = this._findSourceIndex(needle.source);
    if (needle.source < 0) {
      return [];
    }

    var mappings = [];

    var index = this._findMapping(needle,
                                  this._originalMappings,
                                  "originalLine",
                                  "originalColumn",
                                  util.compareByOriginalPositions,
                                  binarySearch.LEAST_UPPER_BOUND);
    if (index >= 0) {
      var mapping = this._originalMappings[index];

      if (aArgs.column === undefined) {
        var originalLine = mapping.originalLine;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we found. Since
        // mappings are sorted, this is guaranteed to find all mappings for
        // the line we found.
        while (mapping && mapping.originalLine === originalLine) {
          mappings.push({
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          });

          mapping = this._originalMappings[++index];
        }
      } else {
        var originalColumn = mapping.originalColumn;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we were searching for.
        // Since mappings are sorted, this is guaranteed to find all mappings for
        // the line we are searching for.
        while (mapping &&
               mapping.originalLine === line &&
               mapping.originalColumn == originalColumn) {
          mappings.push({
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          });

          mapping = this._originalMappings[++index];
        }
      }
    }

    return mappings;
  };

exports.SourceMapConsumer = SourceMapConsumer;

/**
 * A BasicSourceMapConsumer instance represents a parsed source map which we can
 * query for information about the original file positions by giving it a file
 * position in the generated source.
 *
 * The first parameter is the raw source map (either as a JSON string, or
 * already parsed to an object). According to the spec, source maps have the
 * following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - sources: An array of URLs to the original source files.
 *   - names: An array of identifiers which can be referrenced by individual mappings.
 *   - sourceRoot: Optional. The URL root from which all sources are relative.
 *   - sourcesContent: Optional. An array of contents of the original source files.
 *   - mappings: A string of base64 VLQs which contain the actual mappings.
 *   - file: Optional. The generated file this source map is associated with.
 *
 * Here is an example source map, taken from the source map spec[0]:
 *
 *     {
 *       version : 3,
 *       file: "out.js",
 *       sourceRoot : "",
 *       sources: ["foo.js", "bar.js"],
 *       names: ["src", "maps", "are", "fun"],
 *       mappings: "AA,AB;;ABCDE;"
 *     }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
 */
function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  var version = util.getArg(sourceMap, 'version');
  var sources = util.getArg(sourceMap, 'sources');
  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
  // requires the array) to play nice here.
  var names = util.getArg(sourceMap, 'names', []);
  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
  var mappings = util.getArg(sourceMap, 'mappings');
  var file = util.getArg(sourceMap, 'file', null);

  // Once again, Sass deviates from the spec and supplies the version as a
  // string rather than a number, so we use loose equality checking here.
  if (version != this._version) {
    throw new Error('Unsupported version: ' + version);
  }

  if (sourceRoot) {
    sourceRoot = util.normalize(sourceRoot);
  }

  sources = sources
    .map(String)
    // Some source maps produce relative source paths like "./foo.js" instead of
    // "foo.js".  Normalize these first so that future comparisons will succeed.
    // See bugzil.la/1090768.
    .map(util.normalize)
    // Always ensure that absolute sources are internally stored relative to
    // the source root, if the source root is absolute. Not doing this would
    // be particularly problematic when the source root is a prefix of the
    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
    .map(function (source) {
      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)
        ? util.relative(sourceRoot, source)
        : source;
    });

  // Pass `true` below to allow duplicate names and sources. While source maps
  // are intended to be compressed and deduplicated, the TypeScript compiler
  // sometimes generates source maps with duplicates in them. See Github issue
  // #72 and bugzil.la/889492.
  this._names = ArraySet.fromArray(names.map(String), true);
  this._sources = ArraySet.fromArray(sources, true);

  this._absoluteSources = this._sources.toArray().map(function (s) {
    return util.computeSourceURL(sourceRoot, s, aSourceMapURL);
  });

  this.sourceRoot = sourceRoot;
  this.sourcesContent = sourcesContent;
  this._mappings = mappings;
  this._sourceMapURL = aSourceMapURL;
  this.file = file;
}

BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

/**
 * Utility function to find the index of a source.  Returns -1 if not
 * found.
 */
BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
  var relativeSource = aSource;
  if (this.sourceRoot != null) {
    relativeSource = util.relative(this.sourceRoot, relativeSource);
  }

  if (this._sources.has(relativeSource)) {
    return this._sources.indexOf(relativeSource);
  }

  // Maybe aSource is an absolute URL as returned by |sources|.  In
  // this case we can't simply undo the transform.
  var i;
  for (i = 0; i < this._absoluteSources.length; ++i) {
    if (this._absoluteSources[i] == aSource) {
      return i;
    }
  }

  return -1;
};

/**
 * Create a BasicSourceMapConsumer from a SourceMapGenerator.
 *
 * @param SourceMapGenerator aSourceMap
 *        The source map that will be consumed.
 * @param String aSourceMapURL
 *        The URL at which the source map can be found (optional)
 * @returns BasicSourceMapConsumer
 */
BasicSourceMapConsumer.fromSourceMap =
  function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
    var smc = Object.create(BasicSourceMapConsumer.prototype);

    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
    smc.sourceRoot = aSourceMap._sourceRoot;
    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
                                                            smc.sourceRoot);
    smc.file = aSourceMap._file;
    smc._sourceMapURL = aSourceMapURL;
    smc._absoluteSources = smc._sources.toArray().map(function (s) {
      return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
    });

    // Because we are modifying the entries (by converting string sources and
    // names to indices into the sources and names ArraySets), we have to make
    // a copy of the entry or else bad things happen. Shared mutable state
    // strikes again! See github issue #191.

    var generatedMappings = aSourceMap._mappings.toArray().slice();
    var destGeneratedMappings = smc.__generatedMappings = [];
    var destOriginalMappings = smc.__originalMappings = [];

    for (var i = 0, length = generatedMappings.length; i < length; i++) {
      var srcMapping = generatedMappings[i];
      var destMapping = new Mapping;
      destMapping.generatedLine = srcMapping.generatedLine;
      destMapping.generatedColumn = srcMapping.generatedColumn;

      if (srcMapping.source) {
        destMapping.source = sources.indexOf(srcMapping.source);
        destMapping.originalLine = srcMapping.originalLine;
        destMapping.originalColumn = srcMapping.originalColumn;

        if (srcMapping.name) {
          destMapping.name = names.indexOf(srcMapping.name);
        }

        destOriginalMappings.push(destMapping);
      }

      destGeneratedMappings.push(destMapping);
    }

    quickSort(smc.__originalMappings, util.compareByOriginalPositions);

    return smc;
  };

/**
 * The version of the source mapping spec that we are consuming.
 */
BasicSourceMapConsumer.prototype._version = 3;

/**
 * The list of original sources.
 */
Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
  get: function () {
    return this._absoluteSources.slice();
  }
});

/**
 * Provide the JIT with a nice shape / hidden class.
 */
function Mapping() {
  this.generatedLine = 0;
  this.generatedColumn = 0;
  this.source = null;
  this.originalLine = null;
  this.originalColumn = null;
  this.name = null;
}

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
BasicSourceMapConsumer.prototype._parseMappings =
  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    var generatedLine = 1;
    var previousGeneratedColumn = 0;
    var previousOriginalLine = 0;
    var previousOriginalColumn = 0;
    var previousSource = 0;
    var previousName = 0;
    var length = aStr.length;
    var index = 0;
    var cachedSegments = {};
    var temp = {};
    var originalMappings = [];
    var generatedMappings = [];
    var mapping, str, segment, end, value;

    while (index < length) {
      if (aStr.charAt(index) === ';') {
        generatedLine++;
        index++;
        previousGeneratedColumn = 0;
      }
      else if (aStr.charAt(index) === ',') {
        index++;
      }
      else {
        mapping = new Mapping();
        mapping.generatedLine = generatedLine;

        // Because each offset is encoded relative to the previous one,
        // many segments often have the same encoding. We can exploit this
        // fact by caching the parsed variable length fields of each segment,
        // allowing us to avoid a second parse if we encounter the same
        // segment again.
        for (end = index; end < length; end++) {
          if (this._charIsMappingSeparator(aStr, end)) {
            break;
          }
        }
        str = aStr.slice(index, end);

        segment = cachedSegments[str];
        if (segment) {
          index += str.length;
        } else {
          segment = [];
          while (index < end) {
            base64VLQ.decode(aStr, index, temp);
            value = temp.value;
            index = temp.rest;
            segment.push(value);
          }

          if (segment.length === 2) {
            throw new Error('Found a source, but no line and column');
          }

          if (segment.length === 3) {
            throw new Error('Found a source and line, but no column');
          }

          cachedSegments[str] = segment;
        }

        // Generated column.
        mapping.generatedColumn = previousGeneratedColumn + segment[0];
        previousGeneratedColumn = mapping.generatedColumn;

        if (segment.length > 1) {
          // Original source.
          mapping.source = previousSource + segment[1];
          previousSource += segment[1];

          // Original line.
          mapping.originalLine = previousOriginalLine + segment[2];
          previousOriginalLine = mapping.originalLine;
          // Lines are stored 0-based
          mapping.originalLine += 1;

          // Original column.
          mapping.originalColumn = previousOriginalColumn + segment[3];
          previousOriginalColumn = mapping.originalColumn;

          if (segment.length > 4) {
            // Original name.
            mapping.name = previousName + segment[4];
            previousName += segment[4];
          }
        }

        generatedMappings.push(mapping);
        if (typeof mapping.originalLine === 'number') {
          originalMappings.push(mapping);
        }
      }
    }

    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
    this.__generatedMappings = generatedMappings;

    quickSort(originalMappings, util.compareByOriginalPositions);
    this.__originalMappings = originalMappings;
  };

/**
 * Find the mapping that best matches the hypothetical "needle" mapping that
 * we are searching for in the given "haystack" of mappings.
 */
BasicSourceMapConsumer.prototype._findMapping =
  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
                                         aColumnName, aComparator, aBias) {
    // To return the position we are searching for, we must first find the
    // mapping for the given position and then return the opposite position it
    // points to. Because the mappings are sorted, we can use binary search to
    // find the best mapping.

    if (aNeedle[aLineName] <= 0) {
      throw new TypeError('Line must be greater than or equal to 1, got '
                          + aNeedle[aLineName]);
    }
    if (aNeedle[aColumnName] < 0) {
      throw new TypeError('Column must be greater than or equal to 0, got '
                          + aNeedle[aColumnName]);
    }

    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
  };

/**
 * Compute the last column for each generated mapping. The last column is
 * inclusive.
 */
BasicSourceMapConsumer.prototype.computeColumnSpans =
  function SourceMapConsumer_computeColumnSpans() {
    for (var index = 0; index < this._generatedMappings.length; ++index) {
      var mapping = this._generatedMappings[index];

      // Mappings do not contain a field for the last generated columnt. We
      // can come up with an optimistic estimate, however, by assuming that
      // mappings are contiguous (i.e. given two consecutive mappings, the
      // first mapping ends where the second one starts).
      if (index + 1 < this._generatedMappings.length) {
        var nextMapping = this._generatedMappings[index + 1];

        if (mapping.generatedLine === nextMapping.generatedLine) {
          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
          continue;
        }
      }

      // The last mapping for each line spans the entire line.
      mapping.lastGeneratedColumn = Infinity;
    }
  };

/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */
BasicSourceMapConsumer.prototype.originalPositionFor =
  function SourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util.getArg(aArgs, 'line'),
      generatedColumn: util.getArg(aArgs, 'column')
    };

    var index = this._findMapping(
      needle,
      this._generatedMappings,
      "generatedLine",
      "generatedColumn",
      util.compareByGeneratedPositionsDeflated,
      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
    );

    if (index >= 0) {
      var mapping = this._generatedMappings[index];

      if (mapping.generatedLine === needle.generatedLine) {
        var source = util.getArg(mapping, 'source', null);
        if (source !== null) {
          source = this._sources.at(source);
          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
        }
        var name = util.getArg(mapping, 'name', null);
        if (name !== null) {
          name = this._names.at(name);
        }
        return {
          source: source,
          line: util.getArg(mapping, 'originalLine', null),
          column: util.getArg(mapping, 'originalColumn', null),
          name: name
        };
      }
    }

    return {
      source: null,
      line: null,
      column: null,
      name: null
    };
  };

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
  function BasicSourceMapConsumer_hasContentsOfAllSources() {
    if (!this.sourcesContent) {
      return false;
    }
    return this.sourcesContent.length >= this._sources.size() &&
      !this.sourcesContent.some(function (sc) { return sc == null; });
  };

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
BasicSourceMapConsumer.prototype.sourceContentFor =
  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    if (!this.sourcesContent) {
      return null;
    }

    var index = this._findSourceIndex(aSource);
    if (index >= 0) {
      return this.sourcesContent[index];
    }

    var relativeSource = aSource;
    if (this.sourceRoot != null) {
      relativeSource = util.relative(this.sourceRoot, relativeSource);
    }

    var url;
    if (this.sourceRoot != null
        && (url = util.urlParse(this.sourceRoot))) {
      // XXX: file:// URIs and absolute paths lead to unexpected behavior for
      // many users. We can help them out when they expect file:// URIs to
      // behave like it would if they were running a local HTTP server. See
      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
      var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
      if (url.scheme == "file"
          && this._sources.has(fileUriAbsPath)) {
        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
      }

      if ((!url.path || url.path == "/")
          && this._sources.has("/" + relativeSource)) {
        return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
      }
    }

    // This function is used recursively from
    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
    // don't want to throw if we can't find the source - we just want to
    // return null, so we provide a flag to exit gracefully.
    if (nullOnMissing) {
      return null;
    }
    else {
      throw new Error('"' + relativeSource + '" is not in the SourceMap.');
    }
  };

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */
BasicSourceMapConsumer.prototype.generatedPositionFor =
  function SourceMapConsumer_generatedPositionFor(aArgs) {
    var source = util.getArg(aArgs, 'source');
    source = this._findSourceIndex(source);
    if (source < 0) {
      return {
        line: null,
        column: null,
        lastColumn: null
      };
    }

    var needle = {
      source: source,
      originalLine: util.getArg(aArgs, 'line'),
      originalColumn: util.getArg(aArgs, 'column')
    };

    var index = this._findMapping(
      needle,
      this._originalMappings,
      "originalLine",
      "originalColumn",
      util.compareByOriginalPositions,
      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
    );

    if (index >= 0) {
      var mapping = this._originalMappings[index];

      if (mapping.source === needle.source) {
        return {
          line: util.getArg(mapping, 'generatedLine', null),
          column: util.getArg(mapping, 'generatedColumn', null),
          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
        };
      }
    }

    return {
      line: null,
      column: null,
      lastColumn: null
    };
  };

__webpack_unused_export__ = BasicSourceMapConsumer;

/**
 * An IndexedSourceMapConsumer instance represents a parsed source map which
 * we can query for information. It differs from BasicSourceMapConsumer in
 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
 * input.
 *
 * The first parameter is a raw source map (either as a JSON string, or already
 * parsed to an object). According to the spec for indexed source maps, they
 * have the following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - file: Optional. The generated file this source map is associated with.
 *   - sections: A list of section definitions.
 *
 * Each value under the "sections" field has two fields:
 *   - offset: The offset into the original specified at which this section
 *       begins to apply, defined as an object with a "line" and "column"
 *       field.
 *   - map: A source map definition. This source map could also be indexed,
 *       but doesn't have to be.
 *
 * Instead of the "map" field, it's also possible to have a "url" field
 * specifying a URL to retrieve a source map from, but that's currently
 * unsupported.
 *
 * Here's an example source map, taken from the source map spec[0], but
 * modified to omit a section which uses the "url" field.
 *
 *  {
 *    version : 3,
 *    file: "app.js",
 *    sections: [{
 *      offset: {line:100, column:10},
 *      map: {
 *        version : 3,
 *        file: "section.js",
 *        sources: ["foo.js", "bar.js"],
 *        names: ["src", "maps", "are", "fun"],
 *        mappings: "AAAA,E;;ABCDE;"
 *      }
 *    }],
 *  }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
 */
function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  var version = util.getArg(sourceMap, 'version');
  var sections = util.getArg(sourceMap, 'sections');

  if (version != this._version) {
    throw new Error('Unsupported version: ' + version);
  }

  this._sources = new ArraySet();
  this._names = new ArraySet();

  var lastOffset = {
    line: -1,
    column: 0
  };
  this._sections = sections.map(function (s) {
    if (s.url) {
      // The url field will require support for asynchronicity.
      // See https://github.com/mozilla/source-map/issues/16
      throw new Error('Support for url field in sections not implemented.');
    }
    var offset = util.getArg(s, 'offset');
    var offsetLine = util.getArg(offset, 'line');
    var offsetColumn = util.getArg(offset, 'column');

    if (offsetLine < lastOffset.line ||
        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
      throw new Error('Section offsets must be ordered and non-overlapping.');
    }
    lastOffset = offset;

    return {
      generatedOffset: {
        // The offset fields are 0-based, but we use 1-based indices when
        // encoding/decoding from VLQ.
        generatedLine: offsetLine + 1,
        generatedColumn: offsetColumn + 1
      },
      consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)
    }
  });
}

IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

/**
 * The version of the source mapping spec that we are consuming.
 */
IndexedSourceMapConsumer.prototype._version = 3;

/**
 * The list of original sources.
 */
Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
  get: function () {
    var sources = [];
    for (var i = 0; i < this._sections.length; i++) {
      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
        sources.push(this._sections[i].consumer.sources[j]);
      }
    }
    return sources;
  }
});

/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */
IndexedSourceMapConsumer.prototype.originalPositionFor =
  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util.getArg(aArgs, 'line'),
      generatedColumn: util.getArg(aArgs, 'column')
    };

    // Find the section containing the generated position we're trying to map
    // to an original position.
    var sectionIndex = binarySearch.search(needle, this._sections,
      function(needle, section) {
        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
        if (cmp) {
          return cmp;
        }

        return (needle.generatedColumn -
                section.generatedOffset.generatedColumn);
      });
    var section = this._sections[sectionIndex];

    if (!section) {
      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    }

    return section.consumer.originalPositionFor({
      line: needle.generatedLine -
        (section.generatedOffset.generatedLine - 1),
      column: needle.generatedColumn -
        (section.generatedOffset.generatedLine === needle.generatedLine
         ? section.generatedOffset.generatedColumn - 1
         : 0),
      bias: aArgs.bias
    });
  };

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
  function IndexedSourceMapConsumer_hasContentsOfAllSources() {
    return this._sections.every(function (s) {
      return s.consumer.hasContentsOfAllSources();
    });
  };

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
IndexedSourceMapConsumer.prototype.sourceContentFor =
  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];

      var content = section.consumer.sourceContentFor(aSource, true);
      if (content) {
        return content;
      }
    }
    if (nullOnMissing) {
      return null;
    }
    else {
      throw new Error('"' + aSource + '" is not in the SourceMap.');
    }
  };

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based. 
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */
IndexedSourceMapConsumer.prototype.generatedPositionFor =
  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];

      // Only consider this section if the requested source is in the list of
      // sources of the consumer.
      if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {
        continue;
      }
      var generatedPosition = section.consumer.generatedPositionFor(aArgs);
      if (generatedPosition) {
        var ret = {
          line: generatedPosition.line +
            (section.generatedOffset.generatedLine - 1),
          column: generatedPosition.column +
            (section.generatedOffset.generatedLine === generatedPosition.line
             ? section.generatedOffset.generatedColumn - 1
             : 0)
        };
        return ret;
      }
    }

    return {
      line: null,
      column: null
    };
  };

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
IndexedSourceMapConsumer.prototype._parseMappings =
  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    this.__generatedMappings = [];
    this.__originalMappings = [];
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];
      var sectionMappings = section.consumer._generatedMappings;
      for (var j = 0; j < sectionMappings.length; j++) {
        var mapping = sectionMappings[j];

        var source = section.consumer._sources.at(mapping.source);
        source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
        this._sources.add(source);
        source = this._sources.indexOf(source);

        var name = null;
        if (mapping.name) {
          name = section.consumer._names.at(mapping.name);
          this._names.add(name);
          name = this._names.indexOf(name);
        }

        // The mappings coming from the consumer for the section have
        // generated positions relative to the start of the section, so we
        // need to offset them to be relative to the start of the concatenated
        // generated file.
        var adjustedMapping = {
          source: source,
          generatedLine: mapping.generatedLine +
            (section.generatedOffset.generatedLine - 1),
          generatedColumn: mapping.generatedColumn +
            (section.generatedOffset.generatedLine === mapping.generatedLine
            ? section.generatedOffset.generatedColumn - 1
            : 0),
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: name
        };

        this.__generatedMappings.push(adjustedMapping);
        if (typeof adjustedMapping.originalLine === 'number') {
          this.__originalMappings.push(adjustedMapping);
        }
      }
    }

    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
    quickSort(this.__originalMappings, util.compareByOriginalPositions);
  };

__webpack_unused_export__ = IndexedSourceMapConsumer;


/***/ }),

/***/ 4069:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var base64VLQ = __nccwpck_require__(3167);
var util = __nccwpck_require__(7218);
var ArraySet = (__nccwpck_require__(5809)/* .ArraySet */ .I);
var MappingList = (__nccwpck_require__(7788)/* .MappingList */ .H);

/**
 * An instance of the SourceMapGenerator represents a source map which is
 * being built incrementally. You may pass an object with the following
 * properties:
 *
 *   - file: The filename of the generated source.
 *   - sourceRoot: A root for all relative URLs in this source map.
 */
function SourceMapGenerator(aArgs) {
  if (!aArgs) {
    aArgs = {};
  }
  this._file = util.getArg(aArgs, 'file', null);
  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
  this._sources = new ArraySet();
  this._names = new ArraySet();
  this._mappings = new MappingList();
  this._sourcesContents = null;
}

SourceMapGenerator.prototype._version = 3;

/**
 * Creates a new SourceMapGenerator based on a SourceMapConsumer
 *
 * @param aSourceMapConsumer The SourceMap.
 */
SourceMapGenerator.fromSourceMap =
  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
    var sourceRoot = aSourceMapConsumer.sourceRoot;
    var generator = new SourceMapGenerator({
      file: aSourceMapConsumer.file,
      sourceRoot: sourceRoot
    });
    aSourceMapConsumer.eachMapping(function (mapping) {
      var newMapping = {
        generated: {
          line: mapping.generatedLine,
          column: mapping.generatedColumn
        }
      };

      if (mapping.source != null) {
        newMapping.source = mapping.source;
        if (sourceRoot != null) {
          newMapping.source = util.relative(sourceRoot, newMapping.source);
        }

        newMapping.original = {
          line: mapping.originalLine,
          column: mapping.originalColumn
        };

        if (mapping.name != null) {
          newMapping.name = mapping.name;
        }
      }

      generator.addMapping(newMapping);
    });
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var sourceRelative = sourceFile;
      if (sourceRoot !== null) {
        sourceRelative = util.relative(sourceRoot, sourceFile);
      }

      if (!generator._sources.has(sourceRelative)) {
        generator._sources.add(sourceRelative);
      }

      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        generator.setSourceContent(sourceFile, content);
      }
    });
    return generator;
  };

/**
 * Add a single mapping from original source line and column to the generated
 * source's line and column for this source map being created. The mapping
 * object should have the following properties:
 *
 *   - generated: An object with the generated line and column positions.
 *   - original: An object with the original line and column positions.
 *   - source: The original source file (relative to the sourceRoot).
 *   - name: An optional original token name for this mapping.
 */
SourceMapGenerator.prototype.addMapping =
  function SourceMapGenerator_addMapping(aArgs) {
    var generated = util.getArg(aArgs, 'generated');
    var original = util.getArg(aArgs, 'original', null);
    var source = util.getArg(aArgs, 'source', null);
    var name = util.getArg(aArgs, 'name', null);

    if (!this._skipValidation) {
      this._validateMapping(generated, original, source, name);
    }

    if (source != null) {
      source = String(source);
      if (!this._sources.has(source)) {
        this._sources.add(source);
      }
    }

    if (name != null) {
      name = String(name);
      if (!this._names.has(name)) {
        this._names.add(name);
      }
    }

    this._mappings.add({
      generatedLine: generated.line,
      generatedColumn: generated.column,
      originalLine: original != null && original.line,
      originalColumn: original != null && original.column,
      source: source,
      name: name
    });
  };

/**
 * Set the source content for a source file.
 */
SourceMapGenerator.prototype.setSourceContent =
  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
    var source = aSourceFile;
    if (this._sourceRoot != null) {
      source = util.relative(this._sourceRoot, source);
    }

    if (aSourceContent != null) {
      // Add the source content to the _sourcesContents map.
      // Create a new _sourcesContents map if the property is null.
      if (!this._sourcesContents) {
        this._sourcesContents = Object.create(null);
      }
      this._sourcesContents[util.toSetString(source)] = aSourceContent;
    } else if (this._sourcesContents) {
      // Remove the source file from the _sourcesContents map.
      // If the _sourcesContents map is empty, set the property to null.
      delete this._sourcesContents[util.toSetString(source)];
      if (Object.keys(this._sourcesContents).length === 0) {
        this._sourcesContents = null;
      }
    }
  };

/**
 * Applies the mappings of a sub-source-map for a specific source file to the
 * source map being generated. Each mapping to the supplied source file is
 * rewritten using the supplied source map. Note: The resolution for the
 * resulting mappings is the minimium of this map and the supplied map.
 *
 * @param aSourceMapConsumer The source map to be applied.
 * @param aSourceFile Optional. The filename of the source file.
 *        If omitted, SourceMapConsumer's file property will be used.
 * @param aSourceMapPath Optional. The dirname of the path to the source map
 *        to be applied. If relative, it is relative to the SourceMapConsumer.
 *        This parameter is needed when the two source maps aren't in the same
 *        directory, and the source map to be applied contains relative source
 *        paths. If so, those relative source paths need to be rewritten
 *        relative to the SourceMapGenerator.
 */
SourceMapGenerator.prototype.applySourceMap =
  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
    var sourceFile = aSourceFile;
    // If aSourceFile is omitted, we will use the file property of the SourceMap
    if (aSourceFile == null) {
      if (aSourceMapConsumer.file == null) {
        throw new Error(
          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
          'or the source map\'s "file" property. Both were omitted.'
        );
      }
      sourceFile = aSourceMapConsumer.file;
    }
    var sourceRoot = this._sourceRoot;
    // Make "sourceFile" relative if an absolute Url is passed.
    if (sourceRoot != null) {
      sourceFile = util.relative(sourceRoot, sourceFile);
    }
    // Applying the SourceMap can add and remove items from the sources and
    // the names array.
    var newSources = new ArraySet();
    var newNames = new ArraySet();

    // Find mappings for the "sourceFile"
    this._mappings.unsortedForEach(function (mapping) {
      if (mapping.source === sourceFile && mapping.originalLine != null) {
        // Check if it can be mapped by the source map, then update the mapping.
        var original = aSourceMapConsumer.originalPositionFor({
          line: mapping.originalLine,
          column: mapping.originalColumn
        });
        if (original.source != null) {
          // Copy mapping
          mapping.source = original.source;
          if (aSourceMapPath != null) {
            mapping.source = util.join(aSourceMapPath, mapping.source)
          }
          if (sourceRoot != null) {
            mapping.source = util.relative(sourceRoot, mapping.source);
          }
          mapping.originalLine = original.line;
          mapping.originalColumn = original.column;
          if (original.name != null) {
            mapping.name = original.name;
          }
        }
      }

      var source = mapping.source;
      if (source != null && !newSources.has(source)) {
        newSources.add(source);
      }

      var name = mapping.name;
      if (name != null && !newNames.has(name)) {
        newNames.add(name);
      }

    }, this);
    this._sources = newSources;
    this._names = newNames;

    // Copy sourcesContents of applied map.
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aSourceMapPath != null) {
          sourceFile = util.join(aSourceMapPath, sourceFile);
        }
        if (sourceRoot != null) {
          sourceFile = util.relative(sourceRoot, sourceFile);
        }
        this.setSourceContent(sourceFile, content);
      }
    }, this);
  };

/**
 * A mapping can have one of the three levels of data:
 *
 *   1. Just the generated position.
 *   2. The Generated position, original position, and original source.
 *   3. Generated and original position, original source, as well as a name
 *      token.
 *
 * To maintain consistency, we validate that any new mapping being added falls
 * in to one of these categories.
 */
SourceMapGenerator.prototype._validateMapping =
  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
                                              aName) {
    // When aOriginal is truthy but has empty values for .line and .column,
    // it is most likely a programmer error. In this case we throw a very
    // specific error message to try to guide them the right way.
    // For example: https://github.com/Polymer/polymer-bundler/pull/519
    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {
        throw new Error(
            'original.line and original.column are not numbers -- you probably meant to omit ' +
            'the original mapping entirely and only map the generated position. If so, pass ' +
            'null for the original mapping instead of an object with empty or null values.'
        );
    }

    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
        && aGenerated.line > 0 && aGenerated.column >= 0
        && !aOriginal && !aSource && !aName) {
      // Case 1.
      return;
    }
    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
             && aOriginal && 'line' in aOriginal && 'column' in aOriginal
             && aGenerated.line > 0 && aGenerated.column >= 0
             && aOriginal.line > 0 && aOriginal.column >= 0
             && aSource) {
      // Cases 2 and 3.
      return;
    }
    else {
      throw new Error('Invalid mapping: ' + JSON.stringify({
        generated: aGenerated,
        source: aSource,
        original: aOriginal,
        name: aName
      }));
    }
  };

/**
 * Serialize the accumulated mappings in to the stream of base 64 VLQs
 * specified by the source map format.
 */
SourceMapGenerator.prototype._serializeMappings =
  function SourceMapGenerator_serializeMappings() {
    var previousGeneratedColumn = 0;
    var previousGeneratedLine = 1;
    var previousOriginalColumn = 0;
    var previousOriginalLine = 0;
    var previousName = 0;
    var previousSource = 0;
    var result = '';
    var next;
    var mapping;
    var nameIdx;
    var sourceIdx;

    var mappings = this._mappings.toArray();
    for (var i = 0, len = mappings.length; i < len; i++) {
      mapping = mappings[i];
      next = ''

      if (mapping.generatedLine !== previousGeneratedLine) {
        previousGeneratedColumn = 0;
        while (mapping.generatedLine !== previousGeneratedLine) {
          next += ';';
          previousGeneratedLine++;
        }
      }
      else {
        if (i > 0) {
          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
            continue;
          }
          next += ',';
        }
      }

      next += base64VLQ.encode(mapping.generatedColumn
                                 - previousGeneratedColumn);
      previousGeneratedColumn = mapping.generatedColumn;

      if (mapping.source != null) {
        sourceIdx = this._sources.indexOf(mapping.source);
        next += base64VLQ.encode(sourceIdx - previousSource);
        previousSource = sourceIdx;

        // lines are stored 0-based in SourceMap spec version 3
        next += base64VLQ.encode(mapping.originalLine - 1
                                   - previousOriginalLine);
        previousOriginalLine = mapping.originalLine - 1;

        next += base64VLQ.encode(mapping.originalColumn
                                   - previousOriginalColumn);
        previousOriginalColumn = mapping.originalColumn;

        if (mapping.name != null) {
          nameIdx = this._names.indexOf(mapping.name);
          next += base64VLQ.encode(nameIdx - previousName);
          previousName = nameIdx;
        }
      }

      result += next;
    }

    return result;
  };

SourceMapGenerator.prototype._generateSourcesContent =
  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
    return aSources.map(function (source) {
      if (!this._sourcesContents) {
        return null;
      }
      if (aSourceRoot != null) {
        source = util.relative(aSourceRoot, source);
      }
      var key = util.toSetString(source);
      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
        ? this._sourcesContents[key]
        : null;
    }, this);
  };

/**
 * Externalize the source map.
 */
SourceMapGenerator.prototype.toJSON =
  function SourceMapGenerator_toJSON() {
    var map = {
      version: this._version,
      sources: this._sources.toArray(),
      names: this._names.toArray(),
      mappings: this._serializeMappings()
    };
    if (this._file != null) {
      map.file = this._file;
    }
    if (this._sourceRoot != null) {
      map.sourceRoot = this._sourceRoot;
    }
    if (this._sourcesContents) {
      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
    }

    return map;
  };

/**
 * Render the source map being generated to a string.
 */
SourceMapGenerator.prototype.toString =
  function SourceMapGenerator_toString() {
    return JSON.stringify(this.toJSON());
  };

exports.SourceMapGenerator = SourceMapGenerator;


/***/ }),

/***/ 6554:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var SourceMapGenerator = (__nccwpck_require__(4069).SourceMapGenerator);
var util = __nccwpck_require__(7218);

// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
// operating systems these days (capturing the result).
var REGEX_NEWLINE = /(\r?\n)/;

// Newline character code for charCodeAt() comparisons
var NEWLINE_CODE = 10;

// Private symbol for identifying `SourceNode`s when multiple versions of
// the source-map library are loaded. This MUST NOT CHANGE across
// versions!
var isSourceNode = "$$$isSourceNode$$$";

/**
 * SourceNodes provide a way to abstract over interpolating/concatenating
 * snippets of generated JavaScript source code while maintaining the line and
 * column information associated with the original source code.
 *
 * @param aLine The original line number.
 * @param aColumn The original column number.
 * @param aSource The original source's filename.
 * @param aChunks Optional. An array of strings which are snippets of
 *        generated JS, or other SourceNodes.
 * @param aName The original identifier.
 */
function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
  this.children = [];
  this.sourceContents = {};
  this.line = aLine == null ? null : aLine;
  this.column = aColumn == null ? null : aColumn;
  this.source = aSource == null ? null : aSource;
  this.name = aName == null ? null : aName;
  this[isSourceNode] = true;
  if (aChunks != null) this.add(aChunks);
}

/**
 * Creates a SourceNode from generated code and a SourceMapConsumer.
 *
 * @param aGeneratedCode The generated code
 * @param aSourceMapConsumer The SourceMap for the generated code
 * @param aRelativePath Optional. The path that relative sources in the
 *        SourceMapConsumer should be relative to.
 */
SourceNode.fromStringWithSourceMap =
  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
    // The SourceNode we want to fill with the generated code
    // and the SourceMap
    var node = new SourceNode();

    // All even indices of this array are one line of the generated code,
    // while all odd indices are the newlines between two adjacent lines
    // (since `REGEX_NEWLINE` captures its match).
    // Processed fragments are accessed by calling `shiftNextLine`.
    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
    var remainingLinesIndex = 0;
    var shiftNextLine = function() {
      var lineContents = getNextLine();
      // The last line of a file might not have a newline.
      var newLine = getNextLine() || "";
      return lineContents + newLine;

      function getNextLine() {
        return remainingLinesIndex < remainingLines.length ?
            remainingLines[remainingLinesIndex++] : undefined;
      }
    };

    // We need to remember the position of "remainingLines"
    var lastGeneratedLine = 1, lastGeneratedColumn = 0;

    // The generate SourceNodes we need a code range.
    // To extract it current and last mapping is used.
    // Here we store the last mapping.
    var lastMapping = null;

    aSourceMapConsumer.eachMapping(function (mapping) {
      if (lastMapping !== null) {
        // We add the code from "lastMapping" to "mapping":
        // First check if there is a new line in between.
        if (lastGeneratedLine < mapping.generatedLine) {
          // Associate first line with "lastMapping"
          addMappingWithCode(lastMapping, shiftNextLine());
          lastGeneratedLine++;
          lastGeneratedColumn = 0;
          // The remaining code is added without mapping
        } else {
          // There is no new line in between.
          // Associate the code between "lastGeneratedColumn" and
          // "mapping.generatedColumn" with "lastMapping"
          var nextLine = remainingLines[remainingLinesIndex] || '';
          var code = nextLine.substr(0, mapping.generatedColumn -
                                        lastGeneratedColumn);
          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -
                                              lastGeneratedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
          addMappingWithCode(lastMapping, code);
          // No more remaining code, continue
          lastMapping = mapping;
          return;
        }
      }
      // We add the generated code until the first mapping
      // to the SourceNode without any mapping.
      // Each line is added as separate string.
      while (lastGeneratedLine < mapping.generatedLine) {
        node.add(shiftNextLine());
        lastGeneratedLine++;
      }
      if (lastGeneratedColumn < mapping.generatedColumn) {
        var nextLine = remainingLines[remainingLinesIndex] || '';
        node.add(nextLine.substr(0, mapping.generatedColumn));
        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
        lastGeneratedColumn = mapping.generatedColumn;
      }
      lastMapping = mapping;
    }, this);
    // We have processed all mappings.
    if (remainingLinesIndex < remainingLines.length) {
      if (lastMapping) {
        // Associate the remaining code in the current line with "lastMapping"
        addMappingWithCode(lastMapping, shiftNextLine());
      }
      // and add the remaining lines without any mapping
      node.add(remainingLines.splice(remainingLinesIndex).join(""));
    }

    // Copy sourcesContent into SourceNode
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aRelativePath != null) {
          sourceFile = util.join(aRelativePath, sourceFile);
        }
        node.setSourceContent(sourceFile, content);
      }
    });

    return node;

    function addMappingWithCode(mapping, code) {
      if (mapping === null || mapping.source === undefined) {
        node.add(code);
      } else {
        var source = aRelativePath
          ? util.join(aRelativePath, mapping.source)
          : mapping.source;
        node.add(new SourceNode(mapping.originalLine,
                                mapping.originalColumn,
                                source,
                                code,
                                mapping.name));
      }
    }
  };

/**
 * Add a chunk of generated JS to this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
SourceNode.prototype.add = function SourceNode_add(aChunk) {
  if (Array.isArray(aChunk)) {
    aChunk.forEach(function (chunk) {
      this.add(chunk);
    }, this);
  }
  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    if (aChunk) {
      this.children.push(aChunk);
    }
  }
  else {
    throw new TypeError(
      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
    );
  }
  return this;
};

/**
 * Add a chunk of generated JS to the beginning of this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
  if (Array.isArray(aChunk)) {
    for (var i = aChunk.length-1; i >= 0; i--) {
      this.prepend(aChunk[i]);
    }
  }
  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    this.children.unshift(aChunk);
  }
  else {
    throw new TypeError(
      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
    );
  }
  return this;
};

/**
 * Walk over the tree of JS snippets in this node and its children. The
 * walking function is called once for each snippet of JS and is passed that
 * snippet and the its original associated source's line/column location.
 *
 * @param aFn The traversal function.
 */
SourceNode.prototype.walk = function SourceNode_walk(aFn) {
  var chunk;
  for (var i = 0, len = this.children.length; i < len; i++) {
    chunk = this.children[i];
    if (chunk[isSourceNode]) {
      chunk.walk(aFn);
    }
    else {
      if (chunk !== '') {
        aFn(chunk, { source: this.source,
                     line: this.line,
                     column: this.column,
                     name: this.name });
      }
    }
  }
};

/**
 * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
 * each of `this.children`.
 *
 * @param aSep The separator.
 */
SourceNode.prototype.join = function SourceNode_join(aSep) {
  var newChildren;
  var i;
  var len = this.children.length;
  if (len > 0) {
    newChildren = [];
    for (i = 0; i < len-1; i++) {
      newChildren.push(this.children[i]);
      newChildren.push(aSep);
    }
    newChildren.push(this.children[i]);
    this.children = newChildren;
  }
  return this;
};

/**
 * Call String.prototype.replace on the very right-most source snippet. Useful
 * for trimming whitespace from the end of a source node, etc.
 *
 * @param aPattern The pattern to replace.
 * @param aReplacement The thing to replace the pattern with.
 */
SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
  var lastChild = this.children[this.children.length - 1];
  if (lastChild[isSourceNode]) {
    lastChild.replaceRight(aPattern, aReplacement);
  }
  else if (typeof lastChild === 'string') {
    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
  }
  else {
    this.children.push(''.replace(aPattern, aReplacement));
  }
  return this;
};

/**
 * Set the source content for a source file. This will be added to the SourceMapGenerator
 * in the sourcesContent field.
 *
 * @param aSourceFile The filename of the source file
 * @param aSourceContent The content of the source file
 */
SourceNode.prototype.setSourceContent =
  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
  };

/**
 * Walk over the tree of SourceNodes. The walking function is called for each
 * source file content and is passed the filename and source content.
 *
 * @param aFn The traversal function.
 */
SourceNode.prototype.walkSourceContents =
  function SourceNode_walkSourceContents(aFn) {
    for (var i = 0, len = this.children.length; i < len; i++) {
      if (this.children[i][isSourceNode]) {
        this.children[i].walkSourceContents(aFn);
      }
    }

    var sources = Object.keys(this.sourceContents);
    for (var i = 0, len = sources.length; i < len; i++) {
      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
    }
  };

/**
 * Return the string representation of this source node. Walks over the tree
 * and concatenates all the various snippets together to one string.
 */
SourceNode.prototype.toString = function SourceNode_toString() {
  var str = "";
  this.walk(function (chunk) {
    str += chunk;
  });
  return str;
};

/**
 * Returns the string representation of this source node along with a source
 * map.
 */
SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
  var generated = {
    code: "",
    line: 1,
    column: 0
  };
  var map = new SourceMapGenerator(aArgs);
  var sourceMappingActive = false;
  var lastOriginalSource = null;
  var lastOriginalLine = null;
  var lastOriginalColumn = null;
  var lastOriginalName = null;
  this.walk(function (chunk, original) {
    generated.code += chunk;
    if (original.source !== null
        && original.line !== null
        && original.column !== null) {
      if(lastOriginalSource !== original.source
         || lastOriginalLine !== original.line
         || lastOriginalColumn !== original.column
         || lastOriginalName !== original.name) {
        map.addMapping({
          source: original.source,
          original: {
            line: original.line,
            column: original.column
          },
          generated: {
            line: generated.line,
            column: generated.column
          },
          name: original.name
        });
      }
      lastOriginalSource = original.source;
      lastOriginalLine = original.line;
      lastOriginalColumn = original.column;
      lastOriginalName = original.name;
      sourceMappingActive = true;
    } else if (sourceMappingActive) {
      map.addMapping({
        generated: {
          line: generated.line,
          column: generated.column
        }
      });
      lastOriginalSource = null;
      sourceMappingActive = false;
    }
    for (var idx = 0, length = chunk.length; idx < length; idx++) {
      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
        generated.line++;
        generated.column = 0;
        // Mappings end at eol
        if (idx + 1 === length) {
          lastOriginalSource = null;
          sourceMappingActive = false;
        } else if (sourceMappingActive) {
          map.addMapping({
            source: original.source,
            original: {
              line: original.line,
              column: original.column
            },
            generated: {
              line: generated.line,
              column: generated.column
            },
            name: original.name
          });
        }
      } else {
        generated.column++;
      }
    }
  });
  this.walkSourceContents(function (sourceFile, sourceContent) {
    map.setSourceContent(sourceFile, sourceContent);
  });

  return { code: generated.code, map: map };
};

exports.SourceNode = SourceNode;


/***/ }),

/***/ 7218:
/***/ ((__unused_webpack_module, exports) => {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

/**
 * This is a helper function for getting values from parameter/options
 * objects.
 *
 * @param args The object we are extracting values from
 * @param name The name of the property we are getting.
 * @param defaultValue An optional value to return if the property is missing
 * from the object. If this is not specified and the property is missing, an
 * error will be thrown.
 */
function getArg(aArgs, aName, aDefaultValue) {
  if (aName in aArgs) {
    return aArgs[aName];
  } else if (arguments.length === 3) {
    return aDefaultValue;
  } else {
    throw new Error('"' + aName + '" is a required argument.');
  }
}
exports.getArg = getArg;

var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
var dataUrlRegexp = /^data:.+\,.+$/;

function urlParse(aUrl) {
  var match = aUrl.match(urlRegexp);
  if (!match) {
    return null;
  }
  return {
    scheme: match[1],
    auth: match[2],
    host: match[3],
    port: match[4],
    path: match[5]
  };
}
exports.urlParse = urlParse;

function urlGenerate(aParsedUrl) {
  var url = '';
  if (aParsedUrl.scheme) {
    url += aParsedUrl.scheme + ':';
  }
  url += '//';
  if (aParsedUrl.auth) {
    url += aParsedUrl.auth + '@';
  }
  if (aParsedUrl.host) {
    url += aParsedUrl.host;
  }
  if (aParsedUrl.port) {
    url += ":" + aParsedUrl.port
  }
  if (aParsedUrl.path) {
    url += aParsedUrl.path;
  }
  return url;
}
exports.urlGenerate = urlGenerate;

/**
 * Normalizes a path, or the path portion of a URL:
 *
 * - Replaces consecutive slashes with one slash.
 * - Removes unnecessary '.' parts.
 * - Removes unnecessary '<dir>/..' parts.
 *
 * Based on code in the Node.js 'path' core module.
 *
 * @param aPath The path or url to normalize.
 */
function normalize(aPath) {
  var path = aPath;
  var url = urlParse(aPath);
  if (url) {
    if (!url.path) {
      return aPath;
    }
    path = url.path;
  }
  var isAbsolute = exports.isAbsolute(path);

  var parts = path.split(/\/+/);
  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
    part = parts[i];
    if (part === '.') {
      parts.splice(i, 1);
    } else if (part === '..') {
      up++;
    } else if (up > 0) {
      if (part === '') {
        // The first part is blank if the path is absolute. Trying to go
        // above the root is a no-op. Therefore we can remove all '..' parts
        // directly after the root.
        parts.splice(i + 1, up);
        up = 0;
      } else {
        parts.splice(i, 2);
        up--;
      }
    }
  }
  path = parts.join('/');

  if (path === '') {
    path = isAbsolute ? '/' : '.';
  }

  if (url) {
    url.path = path;
    return urlGenerate(url);
  }
  return path;
}
exports.normalize = normalize;

/**
 * Joins two paths/URLs.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be joined with the root.
 *
 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
 *   first.
 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
 *   is updated with the result and aRoot is returned. Otherwise the result
 *   is returned.
 *   - If aPath is absolute, the result is aPath.
 *   - Otherwise the two paths are joined with a slash.
 * - Joining for example 'http://' and 'www.example.com' is also supported.
 */
function join(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }
  if (aPath === "") {
    aPath = ".";
  }
  var aPathUrl = urlParse(aPath);
  var aRootUrl = urlParse(aRoot);
  if (aRootUrl) {
    aRoot = aRootUrl.path || '/';
  }

  // `join(foo, '//www.example.org')`
  if (aPathUrl && !aPathUrl.scheme) {
    if (aRootUrl) {
      aPathUrl.scheme = aRootUrl.scheme;
    }
    return urlGenerate(aPathUrl);
  }

  if (aPathUrl || aPath.match(dataUrlRegexp)) {
    return aPath;
  }

  // `join('http://', 'www.example.com')`
  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
    aRootUrl.host = aPath;
    return urlGenerate(aRootUrl);
  }

  var joined = aPath.charAt(0) === '/'
    ? aPath
    : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

  if (aRootUrl) {
    aRootUrl.path = joined;
    return urlGenerate(aRootUrl);
  }
  return joined;
}
exports.join = join;

exports.isAbsolute = function (aPath) {
  return aPath.charAt(0) === '/' || urlRegexp.test(aPath);
};

/**
 * Make a path relative to a URL or another path.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be made relative to aRoot.
 */
function relative(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }

  aRoot = aRoot.replace(/\/$/, '');

  // It is possible for the path to be above the root. In this case, simply
  // checking whether the root is a prefix of the path won't work. Instead, we
  // need to remove components from the root one by one, until either we find
  // a prefix that fits, or we run out of components to remove.
  var level = 0;
  while (aPath.indexOf(aRoot + '/') !== 0) {
    var index = aRoot.lastIndexOf("/");
    if (index < 0) {
      return aPath;
    }

    // If the only part of the root that is left is the scheme (i.e. http://,
    // file:///, etc.), one or more slashes (/), or simply nothing at all, we
    // have exhausted all components, so the path is not relative to the root.
    aRoot = aRoot.slice(0, index);
    if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
      return aPath;
    }

    ++level;
  }

  // Make sure we add a "../" for each component we removed from the root.
  return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
}
exports.relative = relative;

var supportsNullProto = (function () {
  var obj = Object.create(null);
  return !('__proto__' in obj);
}());

function identity (s) {
  return s;
}

/**
 * Because behavior goes wacky when you set `__proto__` on objects, we
 * have to prefix all the strings in our set with an arbitrary character.
 *
 * See https://github.com/mozilla/source-map/pull/31 and
 * https://github.com/mozilla/source-map/issues/30
 *
 * @param String aStr
 */
function toSetString(aStr) {
  if (isProtoString(aStr)) {
    return '$' + aStr;
  }

  return aStr;
}
exports.toSetString = supportsNullProto ? identity : toSetString;

function fromSetString(aStr) {
  if (isProtoString(aStr)) {
    return aStr.slice(1);
  }

  return aStr;
}
exports.fromSetString = supportsNullProto ? identity : fromSetString;

function isProtoString(s) {
  if (!s) {
    return false;
  }

  var length = s.length;

  if (length < 9 /* "__proto__".length */) {
    return false;
  }

  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
      s.charCodeAt(length - 2) !== 95  /* '_' */ ||
      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 4) !== 116 /* 't' */ ||
      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
      s.charCodeAt(length - 8) !== 95  /* '_' */ ||
      s.charCodeAt(length - 9) !== 95  /* '_' */) {
    return false;
  }

  for (var i = length - 10; i >= 0; i--) {
    if (s.charCodeAt(i) !== 36 /* '$' */) {
      return false;
    }
  }

  return true;
}

/**
 * Comparator between two mappings where the original positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same original source/line/column, but different generated
 * line and column the same. Useful when searching for a mapping with a
 * stubbed out mapping.
 */
function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
  var cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0 || onlyCompareOriginal) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByOriginalPositions = compareByOriginalPositions;

/**
 * Comparator between two mappings with deflated source and name indices where
 * the generated positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same generated line and column, but different
 * source/name/original line and column the same. Useful when searching for a
 * mapping with a stubbed out mapping.
 */
function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
  var cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0 || onlyCompareGenerated) {
    return cmp;
  }

  cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

function strcmp(aStr1, aStr2) {
  if (aStr1 === aStr2) {
    return 0;
  }

  if (aStr1 === null) {
    return 1; // aStr2 !== null
  }

  if (aStr2 === null) {
    return -1; // aStr1 !== null
  }

  if (aStr1 > aStr2) {
    return 1;
  }

  return -1;
}

/**
 * Comparator between two mappings with inflated source and name strings where
 * the generated positions are compared.
 */
function compareByGeneratedPositionsInflated(mappingA, mappingB) {
  var cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

/**
 * Strip any JSON XSSI avoidance prefix from the string (as documented
 * in the source maps specification), and then parse the string as
 * JSON.
 */
function parseSourceMapInput(str) {
  return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ''));
}
exports.parseSourceMapInput = parseSourceMapInput;

/**
 * Compute the URL of a source given the the source root, the source's
 * URL, and the source map's URL.
 */
function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
  sourceURL = sourceURL || '';

  if (sourceRoot) {
    // This follows what Chrome does.
    if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {
      sourceRoot += '/';
    }
    // The spec says:
    //   Line 4: An optional source root, useful for relocating source
    //   files on a server or removing repeated values in the
    //   “sources” entry.  This value is prepended to the individual
    //   entries in the “source” field.
    sourceURL = sourceRoot + sourceURL;
  }

  // Historically, SourceMapConsumer did not take the sourceMapURL as
  // a parameter.  This mode is still somewhat supported, which is why
  // this code block is conditional.  However, it's preferable to pass
  // the source map URL to SourceMapConsumer, so that this function
  // can implement the source URL resolution algorithm as outlined in
  // the spec.  This block is basically the equivalent of:
  //    new URL(sourceURL, sourceMapURL).toString()
  // ... except it avoids using URL, which wasn't available in the
  // older releases of node still supported by this library.
  //
  // The spec says:
  //   If the sources are not absolute URLs after prepending of the
  //   “sourceRoot”, the sources are resolved relative to the
  //   SourceMap (like resolving script src in a html document).
  if (sourceMapURL) {
    var parsed = urlParse(sourceMapURL);
    if (!parsed) {
      throw new Error("sourceMapURL could not be parsed");
    }
    if (parsed.path) {
      // Strip the last path component, but keep the "/".
      var index = parsed.path.lastIndexOf('/');
      if (index >= 0) {
        parsed.path = parsed.path.substring(0, index + 1);
      }
    }
    sourceURL = join(urlGenerate(parsed), sourceURL);
  }

  return normalize(sourceURL);
}
exports.computeSourceURL = computeSourceURL;


/***/ }),

/***/ 4390:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

/*
 * Copyright 2009-2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE.txt or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
exports.SourceMapGenerator = __nccwpck_require__(4069).SourceMapGenerator;
exports.SourceMapConsumer = __nccwpck_require__(2498).SourceMapConsumer;
exports.SourceNode = __nccwpck_require__(6554).SourceNode;


/***/ }),

/***/ 2227:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {


const os = __nccwpck_require__(2037);
const tty = __nccwpck_require__(6224);
const hasFlag = __nccwpck_require__(7415);

const {env} = process;

let forceColor;
if (hasFlag('no-color') ||
	hasFlag('no-colors') ||
	hasFlag('color=false') ||
	hasFlag('color=never')) {
	forceColor = 0;
} else if (hasFlag('color') ||
	hasFlag('colors') ||
	hasFlag('color=true') ||
	hasFlag('color=always')) {
	forceColor = 1;
}

if ('FORCE_COLOR' in env) {
	if (env.FORCE_COLOR === 'true') {
		forceColor = 1;
	} else if (env.FORCE_COLOR === 'false') {
		forceColor = 0;
	} else {
		forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
	}
}

function translateLevel(level) {
	if (level === 0) {
		return false;
	}

	return {
		level,
		hasBasic: true,
		has256: level >= 2,
		has16m: level >= 3
	};
}

function supportsColor(haveStream, streamIsTTY) {
	if (forceColor === 0) {
		return 0;
	}

	if (hasFlag('color=16m') ||
		hasFlag('color=full') ||
		hasFlag('color=truecolor')) {
		return 3;
	}

	if (hasFlag('color=256')) {
		return 2;
	}

	if (haveStream && !streamIsTTY && forceColor === undefined) {
		return 0;
	}

	const min = forceColor || 0;

	if (env.TERM === 'dumb') {
		return min;
	}

	if (process.platform === 'win32') {
		// Windows 10 build 10586 is the first Windows release that supports 256 colors.
		// Windows 10 build 14931 is the first release that supports 16m/TrueColor.
		const osRelease = os.release().split('.');
		if (
			Number(osRelease[0]) >= 10 &&
			Number(osRelease[2]) >= 10586
		) {
			return Number(osRelease[2]) >= 14931 ? 3 : 2;
		}

		return 1;
	}

	if ('CI' in env) {
		if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'GITHUB_ACTIONS', 'BUILDKITE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {
			return 1;
		}

		return min;
	}

	if ('TEAMCITY_VERSION' in env) {
		return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
	}

	if (env.COLORTERM === 'truecolor') {
		return 3;
	}

	if ('TERM_PROGRAM' in env) {
		const version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

		switch (env.TERM_PROGRAM) {
			case 'iTerm.app':
				return version >= 3 ? 3 : 2;
			case 'Apple_Terminal':
				return 2;
			// No default
		}
	}

	if (/-256(color)?$/i.test(env.TERM)) {
		return 2;
	}

	if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
		return 1;
	}

	if ('COLORTERM' in env) {
		return 1;
	}

	return min;
}

function getSupportLevel(stream) {
	const level = supportsColor(stream, stream && stream.isTTY);
	return translateLevel(level);
}

module.exports = {
	supportsColor: getSupportLevel,
	stdout: translateLevel(supportsColor(true, tty.isatty(1))),
	stderr: translateLevel(supportsColor(true, tty.isatty(2)))
};


/***/ }),

/***/ 204:
/***/ ((module) => {

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global global, define, Symbol, Reflect, Promise, SuppressedError */
var __extends;
var __assign;
var __rest;
var __decorate;
var __param;
var __esDecorate;
var __runInitializers;
var __propKey;
var __setFunctionName;
var __metadata;
var __awaiter;
var __generator;
var __exportStar;
var __values;
var __read;
var __spread;
var __spreadArrays;
var __spreadArray;
var __await;
var __asyncGenerator;
var __asyncDelegator;
var __asyncValues;
var __makeTemplateObject;
var __importStar;
var __importDefault;
var __classPrivateFieldGet;
var __classPrivateFieldSet;
var __classPrivateFieldIn;
var __createBinding;
var __addDisposableResource;
var __disposeResources;
(function (factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function (exports) { factory(createExporter(root, createExporter(exports))); });
    }
    else if ( true && typeof module.exports === "object") {
        factory(createExporter(root, createExporter(module.exports)));
    }
    else {
        factory(createExporter(root));
    }
    function createExporter(exports, previous) {
        if (exports !== root) {
            if (typeof Object.create === "function") {
                Object.defineProperty(exports, "__esModule", { value: true });
            }
            else {
                exports.__esModule = true;
            }
        }
        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };
    }
})
(function (exporter) {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };

    __extends = function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };

    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };

    __rest = function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    };

    __decorate = function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };

    __param = function (paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    };

    __esDecorate = function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
        function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
        var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
        var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
        var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
        var _, done = false;
        for (var i = decorators.length - 1; i >= 0; i--) {
            var context = {};
            for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
            for (var p in contextIn.access) context.access[p] = contextIn.access[p];
            context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
            var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
            if (kind === "accessor") {
                if (result === void 0) continue;
                if (result === null || typeof result !== "object") throw new TypeError("Object expected");
                if (_ = accept(result.get)) descriptor.get = _;
                if (_ = accept(result.set)) descriptor.set = _;
                if (_ = accept(result.init)) initializers.unshift(_);
            }
            else if (_ = accept(result)) {
                if (kind === "field") initializers.unshift(_);
                else descriptor[key] = _;
            }
        }
        if (target) Object.defineProperty(target, contextIn.name, descriptor);
        done = true;
    };

    __runInitializers = function (thisArg, initializers, value) {
        var useValue = arguments.length > 2;
        for (var i = 0; i < initializers.length; i++) {
            value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
        }
        return useValue ? value : void 0;
    };

    __propKey = function (x) {
        return typeof x === "symbol" ? x : "".concat(x);
    };

    __setFunctionName = function (f, name, prefix) {
        if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
        return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
    };

    __metadata = function (metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    };

    __awaiter = function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };

    __generator = function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (g && (g = 0, op[0] && (_ = 0)), _) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };

    __exportStar = function(m, o) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
    };

    __createBinding = Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
            desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    });

    __values = function (o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };

    __read = function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };

    /** @deprecated */
    __spread = function () {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    };

    /** @deprecated */
    __spreadArrays = function () {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    __spreadArray = function (to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    };

    __await = function (v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    };

    __asyncGenerator = function (thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    };

    __asyncDelegator = function (o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
    };

    __asyncValues = function (o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    };

    __makeTemplateObject = function (cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    var __setModuleDefault = Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    };

    __importStar = function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };

    __importDefault = function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };

    __classPrivateFieldGet = function (receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    __classPrivateFieldSet = function (receiver, state, value, kind, f) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    };

    __classPrivateFieldIn = function (state, receiver) {
        if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
    };

    __addDisposableResource = function (env, value, async) {
        if (value !== null && value !== void 0) {
            if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
            var dispose;
            if (async) {
                if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
                dispose = value[Symbol.asyncDispose];
            }
            if (dispose === void 0) {
                if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
                dispose = value[Symbol.dispose];
            }
            if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
            env.stack.push({ value: value, dispose: dispose, async: async });
        }
        else if (async) {
            env.stack.push({ async: true });
        }
        return value;
    };

    var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
        var e = new Error(message);
        return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };

    __disposeResources = function (env) {
        function fail(e) {
            env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
            env.hasError = true;
        }
        function next() {
            while (env.stack.length) {
                var rec = env.stack.pop();
                try {
                    var result = rec.dispose && rec.dispose.call(rec.value);
                    if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });
                }
                catch (e) {
                    fail(e);
                }
            }
            if (env.hasError) throw env.error;
        }
        return next();
    };

    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__esDecorate", __esDecorate);
    exporter("__runInitializers", __runInitializers);
    exporter("__propKey", __propKey);
    exporter("__setFunctionName", __setFunctionName);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__spreadArray", __spreadArray);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    exporter("__addDisposableResource", __addDisposableResource);
    exporter("__disposeResources", __disposeResources);
});


/***/ }),

/***/ 3623:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const isWindows = process.platform === 'win32' ||
    process.env.OSTYPE === 'cygwin' ||
    process.env.OSTYPE === 'msys'

const path = __nccwpck_require__(1017)
const COLON = isWindows ? ';' : ':'
const isexe = __nccwpck_require__(5930)

const getNotFoundError = (cmd) =>
  Object.assign(new Error(`not found: ${cmd}`), { code: 'ENOENT' })

const getPathInfo = (cmd, opt) => {
  const colon = opt.colon || COLON

  // If it has a slash, then we don't bother searching the pathenv.
  // just check the file itself, and that's it.
  const pathEnv = cmd.match(/\//) || isWindows && cmd.match(/\\/) ? ['']
    : (
      [
        // windows always checks the cwd first
        ...(isWindows ? [process.cwd()] : []),
        ...(opt.path || process.env.PATH ||
          /* istanbul ignore next: very unusual */ '').split(colon),
      ]
    )
  const pathExtExe = isWindows
    ? opt.pathExt || process.env.PATHEXT || '.EXE;.CMD;.BAT;.COM'
    : ''
  const pathExt = isWindows ? pathExtExe.split(colon) : ['']

  if (isWindows) {
    if (cmd.indexOf('.') !== -1 && pathExt[0] !== '')
      pathExt.unshift('')
  }

  return {
    pathEnv,
    pathExt,
    pathExtExe,
  }
}

const which = (cmd, opt, cb) => {
  if (typeof opt === 'function') {
    cb = opt
    opt = {}
  }
  if (!opt)
    opt = {}

  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt)
  const found = []

  const step = i => new Promise((resolve, reject) => {
    if (i === pathEnv.length)
      return opt.all && found.length ? resolve(found)
        : reject(getNotFoundError(cmd))

    const ppRaw = pathEnv[i]
    const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw

    const pCmd = path.join(pathPart, cmd)
    const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd
      : pCmd

    resolve(subStep(p, i, 0))
  })

  const subStep = (p, i, ii) => new Promise((resolve, reject) => {
    if (ii === pathExt.length)
      return resolve(step(i + 1))
    const ext = pathExt[ii]
    isexe(p + ext, { pathExt: pathExtExe }, (er, is) => {
      if (!er && is) {
        if (opt.all)
          found.push(p + ext)
        else
          return resolve(p + ext)
      }
      return resolve(subStep(p, i, ii + 1))
    })
  })

  return cb ? step(0).then(res => cb(null, res), cb) : step(0)
}

const whichSync = (cmd, opt) => {
  opt = opt || {}

  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt)
  const found = []

  for (let i = 0; i < pathEnv.length; i ++) {
    const ppRaw = pathEnv[i]
    const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw

    const pCmd = path.join(pathPart, cmd)
    const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd
      : pCmd

    for (let j = 0; j < pathExt.length; j ++) {
      const cur = p + pathExt[j]
      try {
        const is = isexe.sync(cur, { pathExt: pathExtExe })
        if (is) {
          if (opt.all)
            found.push(cur)
          else
            return cur
        }
      } catch (ex) {}
    }
  }

  if (opt.all && found.length)
    return found

  if (opt.nothrow)
    return null

  throw getNotFoundError(cmd)
}

module.exports = which
which.sync = whichSync


/***/ }),

/***/ 5065:
/***/ ((__unused_webpack_module, __webpack_exports__, __nccwpck_require__) => {


// EXPORTS
__nccwpck_require__.d(__webpack_exports__, {
  "G7": () => (/* binding */ CommandName),
  "Kb": () => (/* binding */ asCommandName),
  "Nl": () => (/* binding */ commandFor),
  "Jc": () => (/* binding */ summaries)
});

// UNUSED EXPORTS: isCommandName

;// CONCATENATED MODULE: external "node:fs"
const external_node_fs_namespaceObject = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:fs");
// EXTERNAL MODULE: ../node_modules/command-line-args/dist/index.js
var dist = __nccwpck_require__(7898);
var dist_default = /*#__PURE__*/__nccwpck_require__.n(dist);
// EXTERNAL MODULE: ./node_modules/cargo-messages/lib/index.cjs
var lib = __nccwpck_require__(3993);
;// CONCATENATED MODULE: ./node_modules/cargo-messages/lib/index.mjs


// EXTERNAL MODULE: ../node_modules/@neon-rs/manifest/lib/index.mjs
var manifest_lib = __nccwpck_require__(347);
// EXTERNAL MODULE: ../node_modules/@neon-rs/manifest/lib/platform.mjs
var lib_platform = __nccwpck_require__(8140);
// EXTERNAL MODULE: ../node_modules/@neon-rs/artifact/lib/index.cjs
var artifact_lib = __nccwpck_require__(8893);
;// CONCATENATED MODULE: ../node_modules/@neon-rs/artifact/lib/index.mjs


;// CONCATENATED MODULE: ./src/commands/dist.ts






// Starting around Rust 1.78 or 1.79, cargo will begin normalizing
// crate names in the JSON output, so to support both old and new
// versions of cargo, we need to compare against both variants.
//
// See: https://github.com/rust-lang/cargo/issues/13867
function normalize(crateName) {
    return crateName.replaceAll(/-/g, "_");
}
// FIXME: add options to infer crate name from manifests
// --package <path/to/package.json>
// --crate <path/to/Cargo.toml>
const OPTIONS = [
    { name: 'name', alias: 'n', type: String, defaultValue: null },
    { name: 'file', alias: 'f', type: String, defaultValue: null },
    { name: 'log', alias: 'l', type: String, defaultValue: null },
    { name: 'mount', alias: 'm', type: String, defaultValue: null },
    { name: 'manifest-path', type: String, defaultValue: null },
    { name: 'out', alias: 'o', type: String, defaultValue: null },
    { name: 'platform', alias: 'p', type: String, defaultValue: null },
    { name: 'debug', alias: 'd', type: Boolean, defaultValue: false },
    { name: 'verbose', alias: 'v', type: Boolean, defaultValue: false }
];
function createInputStream(file) {
    return file ? (0,external_node_fs_namespaceObject.createReadStream)(file) : process.stdin;
}
function basename(crateName) {
    return crateName.replace(/^@[^/]*\//, '');
}
function ensureDefined(str, msg) {
    if (str === undefined) {
        throw new Error(`${msg} is not defined`);
    }
    return str;
}
function parseOutputFile(debug, out, platform) {
    if (debug && out) {
        throw new Error("Options --debug and --out cannot both be enabled.");
    }
    else if (debug && platform) {
        throw new Error("Options --debug and --platform cannot both be enabled.");
    }
    else if (out && platform) {
        throw new Error("Options --out and --platform cannot both be enabled.");
    }
    const NEON_DIST_OUTPUT = process.env['NEON_DIST_OUTPUT'];
    const NEON_BUILD_PLATFORM = process.env['NEON_BUILD_PLATFORM'];
    if (platform || (!debug && NEON_BUILD_PLATFORM)) {
        const p = platform || NEON_BUILD_PLATFORM;
        (0,lib_platform/* assertIsNodePlatform */.or)(p);
        return manifest_lib/* LibraryManifest.load */.N.load().then(manifest => {
            const path = manifest.getPlatformOutputPath(p);
            if (!path) {
                throw new Error(`Platform ${p} not supported by this library.`);
            }
            return {
                path, option: 'platform'
            };
        });
    }
    else if (out || (!debug && NEON_DIST_OUTPUT)) {
        const path = out || NEON_DIST_OUTPUT;
        return Promise.resolve(path).then(path => ({ path, option: 'out' }));
    }
    else {
        return Promise.resolve({ path: 'index.node', option: 'debug' });
    }
}
class Dist {
    static summary() { return 'Generate a binary .node file from a cargo output log.'; }
    static syntax() { return 'neon dist [-n <name>] [-f <file>|[-l <log>] [-m <path>]] [-p <platform> | -d]'; }
    static options() {
        return [
            { name: '-n, --name', summary: 'Crate name. (Default: $npm_package_name)' },
            { name: '-f, --file <file>', summary: 'Build .node from dylib file <file>.' },
            { name: '-l, --log <log>', summary: 'Find dylib path from cargo messages <log>. (Default: stdin)' },
            {
                name: '-m, --mount <path>',
                summary: 'Mounted path of target directory in virtual filesystem. This is used to map paths from the log data back to their real paths, needed when tools such as cross-rs report messages from within a mounted Docker filesystem.'
            },
            { name: '--manifest-path <path>', summary: 'Real path to Cargo.toml. (Default: cargo behavior)' },
            { name: '-p, --platform <platform>', summary: 'Stage output file for caching to platform <platform>. (Default: $NEON_BUILD_PLATFORM or -d)' },
            { name: '-d, --debug', summary: 'Generate output file for debugging (./index.node)' },
            { name: '-v, --verbose', summary: 'Enable verbose logging. (Default: false)' }
        ];
    }
    static seeAlso() {
        return [
            { name: 'cargo messages', summary: '<https://doc.rust-lang.org/cargo/reference/external-tools.html>' },
            { name: 'cross-rs', summary: '<https://github.com/cross-rs/cross>' }
        ];
    }
    static extraSection() { }
    _log;
    _file;
    _mount;
    _manifestPath;
    _crateName;
    _normalizedCrateName;
    _out;
    _verbose;
    constructor(argv) {
        const options = dist_default()(OPTIONS, { argv });
        if (options.log && options.file) {
            throw new Error("Options --log and --file cannot both be enabled.");
        }
        if (options.file && options.mount) {
            throw new Error("Options --mount and --file cannot both be enabled.");
        }
        if (options['manifest-path'] && !options.mount) {
            throw new Error("Option --manifest-path requires option --mount to be provided.");
        }
        this._log = options.log ?? null;
        this._file = options.file ?? null;
        this._mount = options.mount;
        this._manifestPath = options['manifest-path'];
        this._crateName = options.name ||
            basename(ensureDefined(process.env['npm_package_name'], '$npm_package_name'));
        this._normalizedCrateName = normalize(this._crateName);
        this._out = parseOutputFile(options.debug, options.out, options.platform);
        this._verbose = !!options.verbose;
        this.log(`crate name = "${this._crateName}"`);
    }
    async findArtifact() {
        const reader = new lib.CargoReader(createInputStream(this._log), {
            mount: this._mount || undefined,
            manifestPath: this._manifestPath || undefined,
            verbose: this._verbose
        });
        let file = null;
        for await (const msg of reader) {
            if (!file && msg.isCompilerArtifact() && normalize(msg.crateName()) === this._normalizedCrateName) {
                file = msg.findFileByCrateType('cdylib');
            }
        }
        if (!file) {
            throw new Error(`No artifacts were generated for crate ${this._crateName}`);
        }
        return file;
    }
    log(msg) {
        if (this._verbose) {
            console.error("[neon dist] " + msg);
        }
    }
    async run() {
        const file = this._file || (await this.findArtifact());
        const { option, path } = await this._out;
        this.log(`output type = ${option}`);
        this.log(`output file = ${path}`);
        await (0,artifact_lib.copyArtifact)(file, path);
    }
}

;// CONCATENATED MODULE: external "node:buffer"
const external_node_buffer_namespaceObject = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:buffer");
// EXTERNAL MODULE: external "node:path"
var external_node_path_ = __nccwpck_require__(9411);
;// CONCATENATED MODULE: external "node:child_process"
const external_node_child_process_namespaceObject = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:child_process");
// EXTERNAL MODULE: external "node:process"
var external_node_process_ = __nccwpck_require__(7742);
// EXTERNAL MODULE: ../node_modules/cross-spawn/index.js
var cross_spawn = __nccwpck_require__(143);
;// CONCATENATED MODULE: ../node_modules/strip-final-newline/index.js
function stripFinalNewline(input) {
	const LF = typeof input === 'string' ? '\n' : '\n'.charCodeAt();
	const CR = typeof input === 'string' ? '\r' : '\r'.charCodeAt();

	if (input[input.length - 1] === LF) {
		input = input.slice(0, -1);
	}

	if (input[input.length - 1] === CR) {
		input = input.slice(0, -1);
	}

	return input;
}

;// CONCATENATED MODULE: external "node:url"
const external_node_url_namespaceObject = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:url");
;// CONCATENATED MODULE: ../node_modules/npm-run-path/node_modules/path-key/index.js
function pathKey(options = {}) {
	const {
		env = process.env,
		platform = process.platform
	} = options;

	if (platform !== 'win32') {
		return 'PATH';
	}

	return Object.keys(env).reverse().find(key => key.toUpperCase() === 'PATH') || 'Path';
}

;// CONCATENATED MODULE: ../node_modules/npm-run-path/index.js





function npmRunPath(options = {}) {
	const {
		cwd = external_node_process_.cwd(),
		path: path_ = external_node_process_.env[pathKey()],
		execPath = external_node_process_.execPath,
	} = options;

	let previous;
	const cwdString = cwd instanceof URL ? external_node_url_namespaceObject.fileURLToPath(cwd) : cwd;
	let cwdPath = external_node_path_.resolve(cwdString);
	const result = [];

	while (previous !== cwdPath) {
		result.push(external_node_path_.join(cwdPath, 'node_modules/.bin'));
		previous = cwdPath;
		cwdPath = external_node_path_.resolve(cwdPath, '..');
	}

	// Ensure the running `node` binary is used.
	result.push(external_node_path_.resolve(cwdString, execPath, '..'));

	return [...result, path_].join(external_node_path_.delimiter);
}

function npmRunPathEnv({env = external_node_process_.env, ...options} = {}) {
	env = {...env};

	const path = pathKey({env});
	options.path = env[path];
	env[path] = npmRunPath(options);

	return env;
}

;// CONCATENATED MODULE: ../node_modules/mimic-fn/index.js
const copyProperty = (to, from, property, ignoreNonConfigurable) => {
	// `Function#length` should reflect the parameters of `to` not `from` since we keep its body.
	// `Function#prototype` is non-writable and non-configurable so can never be modified.
	if (property === 'length' || property === 'prototype') {
		return;
	}

	// `Function#arguments` and `Function#caller` should not be copied. They were reported to be present in `Reflect.ownKeys` for some devices in React Native (#41), so we explicitly ignore them here.
	if (property === 'arguments' || property === 'caller') {
		return;
	}

	const toDescriptor = Object.getOwnPropertyDescriptor(to, property);
	const fromDescriptor = Object.getOwnPropertyDescriptor(from, property);

	if (!canCopyProperty(toDescriptor, fromDescriptor) && ignoreNonConfigurable) {
		return;
	}

	Object.defineProperty(to, property, fromDescriptor);
};

// `Object.defineProperty()` throws if the property exists, is not configurable and either:
// - one its descriptors is changed
// - it is non-writable and its value is changed
const canCopyProperty = function (toDescriptor, fromDescriptor) {
	return toDescriptor === undefined || toDescriptor.configurable || (
		toDescriptor.writable === fromDescriptor.writable &&
		toDescriptor.enumerable === fromDescriptor.enumerable &&
		toDescriptor.configurable === fromDescriptor.configurable &&
		(toDescriptor.writable || toDescriptor.value === fromDescriptor.value)
	);
};

const changePrototype = (to, from) => {
	const fromPrototype = Object.getPrototypeOf(from);
	if (fromPrototype === Object.getPrototypeOf(to)) {
		return;
	}

	Object.setPrototypeOf(to, fromPrototype);
};

const wrappedToString = (withName, fromBody) => `/* Wrapped ${withName}*/\n${fromBody}`;

const toStringDescriptor = Object.getOwnPropertyDescriptor(Function.prototype, 'toString');
const toStringName = Object.getOwnPropertyDescriptor(Function.prototype.toString, 'name');

// We call `from.toString()` early (not lazily) to ensure `from` can be garbage collected.
// We use `bind()` instead of a closure for the same reason.
// Calling `from.toString()` early also allows caching it in case `to.toString()` is called several times.
const changeToString = (to, from, name) => {
	const withName = name === '' ? '' : `with ${name.trim()}() `;
	const newToString = wrappedToString.bind(null, withName, from.toString());
	// Ensure `to.toString.toString` is non-enumerable and has the same `same`
	Object.defineProperty(newToString, 'name', toStringName);
	Object.defineProperty(to, 'toString', {...toStringDescriptor, value: newToString});
};

function mimicFunction(to, from, {ignoreNonConfigurable = false} = {}) {
	const {name} = to;

	for (const property of Reflect.ownKeys(from)) {
		copyProperty(to, from, property, ignoreNonConfigurable);
	}

	changePrototype(to, from);
	changeToString(to, from, name);

	return to;
}

;// CONCATENATED MODULE: ../node_modules/onetime/index.js


const calledFunctions = new WeakMap();

const onetime = (function_, options = {}) => {
	if (typeof function_ !== 'function') {
		throw new TypeError('Expected a function');
	}

	let returnValue;
	let callCount = 0;
	const functionName = function_.displayName || function_.name || '<anonymous>';

	const onetime = function (...arguments_) {
		calledFunctions.set(onetime, ++callCount);

		if (callCount === 1) {
			returnValue = function_.apply(this, arguments_);
			function_ = null;
		} else if (options.throw === true) {
			throw new Error(`Function \`${functionName}\` can only be called once`);
		}

		return returnValue;
	};

	mimicFunction(onetime, function_);
	calledFunctions.set(onetime, callCount);

	return onetime;
};

onetime.callCount = function_ => {
	if (!calledFunctions.has(function_)) {
		throw new Error(`The given function \`${function_.name}\` is not wrapped by the \`onetime\` package`);
	}

	return calledFunctions.get(function_);
};

/* harmony default export */ const node_modules_onetime = (onetime);

// EXTERNAL MODULE: external "node:os"
var external_node_os_ = __nccwpck_require__(612);
;// CONCATENATED MODULE: ../node_modules/human-signals/build/src/realtime.js

const getRealtimeSignals=()=>{
const length=SIGRTMAX-SIGRTMIN+1;
return Array.from({length},getRealtimeSignal);
};

const getRealtimeSignal=(value,index)=>({
name:`SIGRT${index+1}`,
number:SIGRTMIN+index,
action:"terminate",
description:"Application-specific signal (realtime)",
standard:"posix"
});

const SIGRTMIN=34;
const SIGRTMAX=64;
;// CONCATENATED MODULE: ../node_modules/human-signals/build/src/core.js


const SIGNALS=[
{
name:"SIGHUP",
number:1,
action:"terminate",
description:"Terminal closed",
standard:"posix"
},
{
name:"SIGINT",
number:2,
action:"terminate",
description:"User interruption with CTRL-C",
standard:"ansi"
},
{
name:"SIGQUIT",
number:3,
action:"core",
description:"User interruption with CTRL-\\",
standard:"posix"
},
{
name:"SIGILL",
number:4,
action:"core",
description:"Invalid machine instruction",
standard:"ansi"
},
{
name:"SIGTRAP",
number:5,
action:"core",
description:"Debugger breakpoint",
standard:"posix"
},
{
name:"SIGABRT",
number:6,
action:"core",
description:"Aborted",
standard:"ansi"
},
{
name:"SIGIOT",
number:6,
action:"core",
description:"Aborted",
standard:"bsd"
},
{
name:"SIGBUS",
number:7,
action:"core",
description:
"Bus error due to misaligned, non-existing address or paging error",
standard:"bsd"
},
{
name:"SIGEMT",
number:7,
action:"terminate",
description:"Command should be emulated but is not implemented",
standard:"other"
},
{
name:"SIGFPE",
number:8,
action:"core",
description:"Floating point arithmetic error",
standard:"ansi"
},
{
name:"SIGKILL",
number:9,
action:"terminate",
description:"Forced termination",
standard:"posix",
forced:true
},
{
name:"SIGUSR1",
number:10,
action:"terminate",
description:"Application-specific signal",
standard:"posix"
},
{
name:"SIGSEGV",
number:11,
action:"core",
description:"Segmentation fault",
standard:"ansi"
},
{
name:"SIGUSR2",
number:12,
action:"terminate",
description:"Application-specific signal",
standard:"posix"
},
{
name:"SIGPIPE",
number:13,
action:"terminate",
description:"Broken pipe or socket",
standard:"posix"
},
{
name:"SIGALRM",
number:14,
action:"terminate",
description:"Timeout or timer",
standard:"posix"
},
{
name:"SIGTERM",
number:15,
action:"terminate",
description:"Termination",
standard:"ansi"
},
{
name:"SIGSTKFLT",
number:16,
action:"terminate",
description:"Stack is empty or overflowed",
standard:"other"
},
{
name:"SIGCHLD",
number:17,
action:"ignore",
description:"Child process terminated, paused or unpaused",
standard:"posix"
},
{
name:"SIGCLD",
number:17,
action:"ignore",
description:"Child process terminated, paused or unpaused",
standard:"other"
},
{
name:"SIGCONT",
number:18,
action:"unpause",
description:"Unpaused",
standard:"posix",
forced:true
},
{
name:"SIGSTOP",
number:19,
action:"pause",
description:"Paused",
standard:"posix",
forced:true
},
{
name:"SIGTSTP",
number:20,
action:"pause",
description:"Paused using CTRL-Z or \"suspend\"",
standard:"posix"
},
{
name:"SIGTTIN",
number:21,
action:"pause",
description:"Background process cannot read terminal input",
standard:"posix"
},
{
name:"SIGBREAK",
number:21,
action:"terminate",
description:"User interruption with CTRL-BREAK",
standard:"other"
},
{
name:"SIGTTOU",
number:22,
action:"pause",
description:"Background process cannot write to terminal output",
standard:"posix"
},
{
name:"SIGURG",
number:23,
action:"ignore",
description:"Socket received out-of-band data",
standard:"bsd"
},
{
name:"SIGXCPU",
number:24,
action:"core",
description:"Process timed out",
standard:"bsd"
},
{
name:"SIGXFSZ",
number:25,
action:"core",
description:"File too big",
standard:"bsd"
},
{
name:"SIGVTALRM",
number:26,
action:"terminate",
description:"Timeout or timer",
standard:"bsd"
},
{
name:"SIGPROF",
number:27,
action:"terminate",
description:"Timeout or timer",
standard:"bsd"
},
{
name:"SIGWINCH",
number:28,
action:"ignore",
description:"Terminal window size changed",
standard:"bsd"
},
{
name:"SIGIO",
number:29,
action:"terminate",
description:"I/O is available",
standard:"other"
},
{
name:"SIGPOLL",
number:29,
action:"terminate",
description:"Watched event",
standard:"other"
},
{
name:"SIGINFO",
number:29,
action:"ignore",
description:"Request for process information",
standard:"other"
},
{
name:"SIGPWR",
number:30,
action:"terminate",
description:"Device running out of power",
standard:"systemv"
},
{
name:"SIGSYS",
number:31,
action:"core",
description:"Invalid system call",
standard:"other"
},
{
name:"SIGUNUSED",
number:31,
action:"terminate",
description:"Invalid system call",
standard:"other"
}];
;// CONCATENATED MODULE: ../node_modules/human-signals/build/src/signals.js







const getSignals=()=>{
const realtimeSignals=getRealtimeSignals();
const signals=[...SIGNALS,...realtimeSignals].map(normalizeSignal);
return signals;
};







const normalizeSignal=({
name,
number:defaultNumber,
description,
action,
forced=false,
standard
})=>{
const{
signals:{[name]:constantSignal}
}=external_node_os_.constants;
const supported=constantSignal!==undefined;
const number=supported?constantSignal:defaultNumber;
return{name,number,description,supported,action,forced,standard};
};
;// CONCATENATED MODULE: ../node_modules/human-signals/build/src/main.js







const getSignalsByName=()=>{
const signals=getSignals();
return Object.fromEntries(signals.map(getSignalByName));
};

const getSignalByName=({
name,
number,
description,
supported,
action,
forced,
standard
})=>[name,{name,number,description,supported,action,forced,standard}];

const signalsByName=getSignalsByName();




const getSignalsByNumber=()=>{
const signals=getSignals();
const length=SIGRTMAX+1;
const signalsA=Array.from({length},(value,number)=>
getSignalByNumber(number,signals));

return Object.assign({},...signalsA);
};

const getSignalByNumber=(number,signals)=>{
const signal=findSignalByNumber(number,signals);

if(signal===undefined){
return{};
}

const{name,description,supported,action,forced,standard}=signal;
return{
[number]:{
name,
number,
description,
supported,
action,
forced,
standard
}
};
};



const findSignalByNumber=(number,signals)=>{
const signal=signals.find(({name})=>external_node_os_.constants.signals[name]===number);

if(signal!==undefined){
return signal;
}

return signals.find((signalA)=>signalA.number===number);
};

const signalsByNumber=getSignalsByNumber();
;// CONCATENATED MODULE: ../node_modules/execa/lib/error.js


const getErrorPrefix = ({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled}) => {
	if (timedOut) {
		return `timed out after ${timeout} milliseconds`;
	}

	if (isCanceled) {
		return 'was canceled';
	}

	if (errorCode !== undefined) {
		return `failed with ${errorCode}`;
	}

	if (signal !== undefined) {
		return `was killed with ${signal} (${signalDescription})`;
	}

	if (exitCode !== undefined) {
		return `failed with exit code ${exitCode}`;
	}

	return 'failed';
};

const makeError = ({
	stdout,
	stderr,
	all,
	error,
	signal,
	exitCode,
	command,
	escapedCommand,
	timedOut,
	isCanceled,
	killed,
	parsed: {options: {timeout}},
}) => {
	// `signal` and `exitCode` emitted on `spawned.on('exit')` event can be `null`.
	// We normalize them to `undefined`
	exitCode = exitCode === null ? undefined : exitCode;
	signal = signal === null ? undefined : signal;
	const signalDescription = signal === undefined ? undefined : signalsByName[signal].description;

	const errorCode = error && error.code;

	const prefix = getErrorPrefix({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled});
	const execaMessage = `Command ${prefix}: ${command}`;
	const isError = Object.prototype.toString.call(error) === '[object Error]';
	const shortMessage = isError ? `${execaMessage}\n${error.message}` : execaMessage;
	const message = [shortMessage, stderr, stdout].filter(Boolean).join('\n');

	if (isError) {
		error.originalMessage = error.message;
		error.message = message;
	} else {
		error = new Error(message);
	}

	error.shortMessage = shortMessage;
	error.command = command;
	error.escapedCommand = escapedCommand;
	error.exitCode = exitCode;
	error.signal = signal;
	error.signalDescription = signalDescription;
	error.stdout = stdout;
	error.stderr = stderr;

	if (all !== undefined) {
		error.all = all;
	}

	if ('bufferedData' in error) {
		delete error.bufferedData;
	}

	error.failed = true;
	error.timedOut = Boolean(timedOut);
	error.isCanceled = isCanceled;
	error.killed = killed && !timedOut;

	return error;
};

;// CONCATENATED MODULE: ../node_modules/execa/lib/stdio.js
const aliases = ['stdin', 'stdout', 'stderr'];

const hasAlias = options => aliases.some(alias => options[alias] !== undefined);

const normalizeStdio = options => {
	if (!options) {
		return;
	}

	const {stdio} = options;

	if (stdio === undefined) {
		return aliases.map(alias => options[alias]);
	}

	if (hasAlias(options)) {
		throw new Error(`It's not possible to provide \`stdio\` in combination with one of ${aliases.map(alias => `\`${alias}\``).join(', ')}`);
	}

	if (typeof stdio === 'string') {
		return stdio;
	}

	if (!Array.isArray(stdio)) {
		throw new TypeError(`Expected \`stdio\` to be of type \`string\` or \`Array\`, got \`${typeof stdio}\``);
	}

	const length = Math.max(stdio.length, aliases.length);
	return Array.from({length}, (value, index) => stdio[index]);
};

// `ipc` is pushed unless it is already present
const stdio_normalizeStdioNode = options => {
	const stdio = normalizeStdio(options);

	if (stdio === 'ipc') {
		return 'ipc';
	}

	if (stdio === undefined || typeof stdio === 'string') {
		return [stdio, stdio, stdio, 'ipc'];
	}

	if (stdio.includes('ipc')) {
		return stdio;
	}

	return [...stdio, 'ipc'];
};

// EXTERNAL MODULE: ../node_modules/signal-exit/index.js
var signal_exit = __nccwpck_require__(7305);
;// CONCATENATED MODULE: ../node_modules/execa/lib/kill.js



const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;

// Monkey-patches `childProcess.kill()` to add `forceKillAfterTimeout` behavior
const spawnedKill = (kill, signal = 'SIGTERM', options = {}) => {
	const killResult = kill(signal);
	setKillTimeout(kill, signal, options, killResult);
	return killResult;
};

const setKillTimeout = (kill, signal, options, killResult) => {
	if (!shouldForceKill(signal, options, killResult)) {
		return;
	}

	const timeout = getForceKillAfterTimeout(options);
	const t = setTimeout(() => {
		kill('SIGKILL');
	}, timeout);

	// Guarded because there's no `.unref()` when `execa` is used in the renderer
	// process in Electron. This cannot be tested since we don't run tests in
	// Electron.
	// istanbul ignore else
	if (t.unref) {
		t.unref();
	}
};

const shouldForceKill = (signal, {forceKillAfterTimeout}, killResult) => isSigterm(signal) && forceKillAfterTimeout !== false && killResult;

const isSigterm = signal => signal === external_node_os_.constants.signals.SIGTERM
		|| (typeof signal === 'string' && signal.toUpperCase() === 'SIGTERM');

const getForceKillAfterTimeout = ({forceKillAfterTimeout = true}) => {
	if (forceKillAfterTimeout === true) {
		return DEFAULT_FORCE_KILL_TIMEOUT;
	}

	if (!Number.isFinite(forceKillAfterTimeout) || forceKillAfterTimeout < 0) {
		throw new TypeError(`Expected the \`forceKillAfterTimeout\` option to be a non-negative integer, got \`${forceKillAfterTimeout}\` (${typeof forceKillAfterTimeout})`);
	}

	return forceKillAfterTimeout;
};

// `childProcess.cancel()`
const spawnedCancel = (spawned, context) => {
	const killResult = spawned.kill();

	if (killResult) {
		context.isCanceled = true;
	}
};

const timeoutKill = (spawned, signal, reject) => {
	spawned.kill(signal);
	reject(Object.assign(new Error('Timed out'), {timedOut: true, signal}));
};

// `timeout` option handling
const setupTimeout = (spawned, {timeout, killSignal = 'SIGTERM'}, spawnedPromise) => {
	if (timeout === 0 || timeout === undefined) {
		return spawnedPromise;
	}

	let timeoutId;
	const timeoutPromise = new Promise((resolve, reject) => {
		timeoutId = setTimeout(() => {
			timeoutKill(spawned, killSignal, reject);
		}, timeout);
	});

	const safeSpawnedPromise = spawnedPromise.finally(() => {
		clearTimeout(timeoutId);
	});

	return Promise.race([timeoutPromise, safeSpawnedPromise]);
};

const validateTimeout = ({timeout}) => {
	if (timeout !== undefined && (!Number.isFinite(timeout) || timeout < 0)) {
		throw new TypeError(`Expected the \`timeout\` option to be a non-negative integer, got \`${timeout}\` (${typeof timeout})`);
	}
};

// `cleanup` option handling
const setExitHandler = async (spawned, {cleanup, detached}, timedPromise) => {
	if (!cleanup || detached) {
		return timedPromise;
	}

	const removeExitHandler = signal_exit(() => {
		spawned.kill();
	});

	return timedPromise.finally(() => {
		removeExitHandler();
	});
};

;// CONCATENATED MODULE: ../node_modules/is-stream/index.js
function isStream(stream) {
	return stream !== null
		&& typeof stream === 'object'
		&& typeof stream.pipe === 'function';
}

function isWritableStream(stream) {
	return isStream(stream)
		&& stream.writable !== false
		&& typeof stream._write === 'function'
		&& typeof stream._writableState === 'object';
}

function isReadableStream(stream) {
	return isStream(stream)
		&& stream.readable !== false
		&& typeof stream._read === 'function'
		&& typeof stream._readableState === 'object';
}

function isDuplexStream(stream) {
	return isWritableStream(stream)
		&& isReadableStream(stream);
}

function isTransformStream(stream) {
	return isDuplexStream(stream)
		&& typeof stream._transform === 'function';
}

;// CONCATENATED MODULE: ../node_modules/execa/lib/pipe.js




const isExecaChildProcess = target => target instanceof external_node_child_process_namespaceObject.ChildProcess && typeof target.then === 'function';

const pipeToTarget = (spawned, streamName, target) => {
	if (typeof target === 'string') {
		spawned[streamName].pipe((0,external_node_fs_namespaceObject.createWriteStream)(target));
		return spawned;
	}

	if (isWritableStream(target)) {
		spawned[streamName].pipe(target);
		return spawned;
	}

	if (!isExecaChildProcess(target)) {
		throw new TypeError('The second argument must be a string, a stream or an Execa child process.');
	}

	if (!isWritableStream(target.stdin)) {
		throw new TypeError('The target child process\'s stdin must be available.');
	}

	spawned[streamName].pipe(target.stdin);
	return target;
};

const addPipeMethods = spawned => {
	if (spawned.stdout !== null) {
		spawned.pipeStdout = pipeToTarget.bind(undefined, spawned, 'stdout');
	}

	if (spawned.stderr !== null) {
		spawned.pipeStderr = pipeToTarget.bind(undefined, spawned, 'stderr');
	}

	if (spawned.all !== undefined) {
		spawned.pipeAll = pipeToTarget.bind(undefined, spawned, 'all');
	}
};

// EXTERNAL MODULE: ../node_modules/get-stream/index.js
var get_stream = __nccwpck_require__(3565);
// EXTERNAL MODULE: ../node_modules/merge-stream/index.js
var merge_stream = __nccwpck_require__(1083);
;// CONCATENATED MODULE: ../node_modules/execa/lib/stream.js





const validateInputOptions = input => {
	if (input !== undefined) {
		throw new TypeError('The `input` and `inputFile` options cannot be both set.');
	}
};

const getInputSync = ({input, inputFile}) => {
	if (typeof inputFile !== 'string') {
		return input;
	}

	validateInputOptions(input);
	return (0,external_node_fs_namespaceObject.readFileSync)(inputFile);
};

// `input` and `inputFile` option in sync mode
const handleInputSync = options => {
	const input = getInputSync(options);

	if (isStream(input)) {
		throw new TypeError('The `input` option cannot be a stream in sync mode');
	}

	return input;
};

const getInput = ({input, inputFile}) => {
	if (typeof inputFile !== 'string') {
		return input;
	}

	validateInputOptions(input);
	return (0,external_node_fs_namespaceObject.createReadStream)(inputFile);
};

// `input` and `inputFile` option in async mode
const handleInput = (spawned, options) => {
	const input = getInput(options);

	if (input === undefined) {
		return;
	}

	if (isStream(input)) {
		input.pipe(spawned.stdin);
	} else {
		spawned.stdin.end(input);
	}
};

// `all` interleaves `stdout` and `stderr`
const makeAllStream = (spawned, {all}) => {
	if (!all || (!spawned.stdout && !spawned.stderr)) {
		return;
	}

	const mixed = merge_stream();

	if (spawned.stdout) {
		mixed.add(spawned.stdout);
	}

	if (spawned.stderr) {
		mixed.add(spawned.stderr);
	}

	return mixed;
};

// On failure, `result.stdout|stderr|all` should contain the currently buffered stream
const getBufferedData = async (stream, streamPromise) => {
	// When `buffer` is `false`, `streamPromise` is `undefined` and there is no buffered data to retrieve
	if (!stream || streamPromise === undefined) {
		return;
	}

	stream.destroy();

	try {
		return await streamPromise;
	} catch (error) {
		return error.bufferedData;
	}
};

const getStreamPromise = (stream, {encoding, buffer, maxBuffer}) => {
	if (!stream || !buffer) {
		return;
	}

	if (encoding) {
		return get_stream(stream, {encoding, maxBuffer});
	}

	return get_stream.buffer(stream, {maxBuffer});
};

// Retrieve result of child process: exit code, signal, error, streams (stdout/stderr/all)
const getSpawnedResult = async ({stdout, stderr, all}, {encoding, buffer, maxBuffer}, processDone) => {
	const stdoutPromise = getStreamPromise(stdout, {encoding, buffer, maxBuffer});
	const stderrPromise = getStreamPromise(stderr, {encoding, buffer, maxBuffer});
	const allPromise = getStreamPromise(all, {encoding, buffer, maxBuffer: maxBuffer * 2});

	try {
		return await Promise.all([processDone, stdoutPromise, stderrPromise, allPromise]);
	} catch (error) {
		return Promise.all([
			{error, signal: error.signal, timedOut: error.timedOut},
			getBufferedData(stdout, stdoutPromise),
			getBufferedData(stderr, stderrPromise),
			getBufferedData(all, allPromise),
		]);
	}
};

;// CONCATENATED MODULE: ../node_modules/execa/lib/promise.js
// eslint-disable-next-line unicorn/prefer-top-level-await
const nativePromisePrototype = (async () => {})().constructor.prototype;

const descriptors = ['then', 'catch', 'finally'].map(property => [
	property,
	Reflect.getOwnPropertyDescriptor(nativePromisePrototype, property),
]);

// The return value is a mixin of `childProcess` and `Promise`
const mergePromise = (spawned, promise) => {
	for (const [property, descriptor] of descriptors) {
		// Starting the main `promise` is deferred to avoid consuming streams
		const value = typeof promise === 'function'
			? (...args) => Reflect.apply(descriptor.value, promise(), args)
			: descriptor.value.bind(promise);

		Reflect.defineProperty(spawned, property, {...descriptor, value});
	}
};

// Use promises instead of `child_process` events
const getSpawnedPromise = spawned => new Promise((resolve, reject) => {
	spawned.on('exit', (exitCode, signal) => {
		resolve({exitCode, signal});
	});

	spawned.on('error', error => {
		reject(error);
	});

	if (spawned.stdin) {
		spawned.stdin.on('error', error => {
			reject(error);
		});
	}
});

;// CONCATENATED MODULE: ../node_modules/execa/lib/command.js



const normalizeArgs = (file, args = []) => {
	if (!Array.isArray(args)) {
		return [file];
	}

	return [file, ...args];
};

const NO_ESCAPE_REGEXP = /^[\w.-]+$/;
const DOUBLE_QUOTES_REGEXP = /"/g;

const escapeArg = arg => {
	if (typeof arg !== 'string' || NO_ESCAPE_REGEXP.test(arg)) {
		return arg;
	}

	return `"${arg.replace(DOUBLE_QUOTES_REGEXP, '\\"')}"`;
};

const joinCommand = (file, args) => normalizeArgs(file, args).join(' ');

const getEscapedCommand = (file, args) => normalizeArgs(file, args).map(arg => escapeArg(arg)).join(' ');

const SPACES_REGEXP = / +/g;

// Handle `execaCommand()`
const command_parseCommand = command => {
	const tokens = [];
	for (const token of command.trim().split(SPACES_REGEXP)) {
		// Allow spaces to be escaped by a backslash if not meant as a delimiter
		const previousToken = tokens[tokens.length - 1];
		if (previousToken && previousToken.endsWith('\\')) {
			// Merge previous token with current one
			tokens[tokens.length - 1] = `${previousToken.slice(0, -1)} ${token}`;
		} else {
			tokens.push(token);
		}
	}

	return tokens;
};

const parseExpression = expression => {
	const typeOfExpression = typeof expression;

	if (typeOfExpression === 'string') {
		return expression;
	}

	if (typeOfExpression === 'number') {
		return String(expression);
	}

	if (
		typeOfExpression === 'object'
		&& expression !== null
		&& !(expression instanceof external_node_child_process_namespaceObject.ChildProcess)
		&& 'stdout' in expression
	) {
		const typeOfStdout = typeof expression.stdout;

		if (typeOfStdout === 'string') {
			return expression.stdout;
		}

		if (external_node_buffer_namespaceObject.Buffer.isBuffer(expression.stdout)) {
			return expression.stdout.toString();
		}

		throw new TypeError(`Unexpected "${typeOfStdout}" stdout in template expression`);
	}

	throw new TypeError(`Unexpected "${typeOfExpression}" in template expression`);
};

const concatTokens = (tokens, nextTokens, isNew) => isNew || tokens.length === 0 || nextTokens.length === 0
	? [...tokens, ...nextTokens]
	: [
		...tokens.slice(0, -1),
		`${tokens[tokens.length - 1]}${nextTokens[0]}`,
		...nextTokens.slice(1),
	];

const parseTemplate = ({templates, expressions, tokens, index, template}) => {
	const templateString = template ?? templates.raw[index];
	const templateTokens = templateString.split(SPACES_REGEXP).filter(Boolean);
	const newTokens = concatTokens(
		tokens,
		templateTokens,
		templateString.startsWith(' '),
	);

	if (index === expressions.length) {
		return newTokens;
	}

	const expression = expressions[index];
	const expressionTokens = Array.isArray(expression)
		? expression.map(expression => parseExpression(expression))
		: [parseExpression(expression)];
	return concatTokens(
		newTokens,
		expressionTokens,
		templateString.endsWith(' '),
	);
};

const parseTemplates = (templates, expressions) => {
	let tokens = [];

	for (const [index, template] of templates.entries()) {
		tokens = parseTemplate({templates, expressions, tokens, index, template});
	}

	return tokens;
};


;// CONCATENATED MODULE: external "node:util"
const external_node_util_namespaceObject = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:util");
;// CONCATENATED MODULE: ../node_modules/execa/lib/verbose.js



const verboseDefault = (0,external_node_util_namespaceObject.debuglog)('execa').enabled;

const padField = (field, padding) => String(field).padStart(padding, '0');

const getTimestamp = () => {
	const date = new Date();
	return `${padField(date.getHours(), 2)}:${padField(date.getMinutes(), 2)}:${padField(date.getSeconds(), 2)}.${padField(date.getMilliseconds(), 3)}`;
};

const logCommand = (escapedCommand, {verbose}) => {
	if (!verbose) {
		return;
	}

	external_node_process_.stderr.write(`[${getTimestamp()}] ${escapedCommand}\n`);
};

;// CONCATENATED MODULE: ../node_modules/execa/index.js

















const DEFAULT_MAX_BUFFER = 1000 * 1000 * 100;

const getEnv = ({env: envOption, extendEnv, preferLocal, localDir, execPath}) => {
	const env = extendEnv ? {...external_node_process_.env, ...envOption} : envOption;

	if (preferLocal) {
		return npmRunPathEnv({env, cwd: localDir, execPath});
	}

	return env;
};

const handleArguments = (file, args, options = {}) => {
	const parsed = cross_spawn._parse(file, args, options);
	file = parsed.command;
	args = parsed.args;
	options = parsed.options;

	options = {
		maxBuffer: DEFAULT_MAX_BUFFER,
		buffer: true,
		stripFinalNewline: true,
		extendEnv: true,
		preferLocal: false,
		localDir: options.cwd || external_node_process_.cwd(),
		execPath: external_node_process_.execPath,
		encoding: 'utf8',
		reject: true,
		cleanup: true,
		all: false,
		windowsHide: true,
		verbose: verboseDefault,
		...options,
	};

	options.env = getEnv(options);

	options.stdio = normalizeStdio(options);

	if (external_node_process_.platform === 'win32' && external_node_path_.basename(file, '.exe') === 'cmd') {
		// #116
		args.unshift('/q');
	}

	return {file, args, options, parsed};
};

const handleOutput = (options, value, error) => {
	if (typeof value !== 'string' && !external_node_buffer_namespaceObject.Buffer.isBuffer(value)) {
		// When `execaSync()` errors, we normalize it to '' to mimic `execa()`
		return error === undefined ? undefined : '';
	}

	if (options.stripFinalNewline) {
		return stripFinalNewline(value);
	}

	return value;
};

function execa(file, args, options) {
	const parsed = handleArguments(file, args, options);
	const command = joinCommand(file, args);
	const escapedCommand = getEscapedCommand(file, args);
	logCommand(escapedCommand, parsed.options);

	validateTimeout(parsed.options);

	let spawned;
	try {
		spawned = external_node_child_process_namespaceObject.spawn(parsed.file, parsed.args, parsed.options);
	} catch (error) {
		// Ensure the returned error is always both a promise and a child process
		const dummySpawned = new external_node_child_process_namespaceObject.ChildProcess();
		const errorPromise = Promise.reject(makeError({
			error,
			stdout: '',
			stderr: '',
			all: '',
			command,
			escapedCommand,
			parsed,
			timedOut: false,
			isCanceled: false,
			killed: false,
		}));
		mergePromise(dummySpawned, errorPromise);
		return dummySpawned;
	}

	const spawnedPromise = getSpawnedPromise(spawned);
	const timedPromise = setupTimeout(spawned, parsed.options, spawnedPromise);
	const processDone = setExitHandler(spawned, parsed.options, timedPromise);

	const context = {isCanceled: false};

	spawned.kill = spawnedKill.bind(null, spawned.kill.bind(spawned));
	spawned.cancel = spawnedCancel.bind(null, spawned, context);

	const handlePromise = async () => {
		const [{error, exitCode, signal, timedOut}, stdoutResult, stderrResult, allResult] = await getSpawnedResult(spawned, parsed.options, processDone);
		const stdout = handleOutput(parsed.options, stdoutResult);
		const stderr = handleOutput(parsed.options, stderrResult);
		const all = handleOutput(parsed.options, allResult);

		if (error || exitCode !== 0 || signal !== null) {
			const returnedError = makeError({
				error,
				exitCode,
				signal,
				stdout,
				stderr,
				all,
				command,
				escapedCommand,
				parsed,
				timedOut,
				isCanceled: context.isCanceled || (parsed.options.signal ? parsed.options.signal.aborted : false),
				killed: spawned.killed,
			});

			if (!parsed.options.reject) {
				return returnedError;
			}

			throw returnedError;
		}

		return {
			command,
			escapedCommand,
			exitCode: 0,
			stdout,
			stderr,
			all,
			failed: false,
			timedOut: false,
			isCanceled: false,
			killed: false,
		};
	};

	const handlePromiseOnce = node_modules_onetime(handlePromise);

	handleInput(spawned, parsed.options);

	spawned.all = makeAllStream(spawned, parsed.options);

	addPipeMethods(spawned);
	mergePromise(spawned, handlePromiseOnce);
	return spawned;
}

function execaSync(file, args, options) {
	const parsed = handleArguments(file, args, options);
	const command = joinCommand(file, args);
	const escapedCommand = getEscapedCommand(file, args);
	logCommand(escapedCommand, parsed.options);

	const input = handleInputSync(parsed.options);

	let result;
	try {
		result = external_node_child_process_namespaceObject.spawnSync(parsed.file, parsed.args, {...parsed.options, input});
	} catch (error) {
		throw makeError({
			error,
			stdout: '',
			stderr: '',
			all: '',
			command,
			escapedCommand,
			parsed,
			timedOut: false,
			isCanceled: false,
			killed: false,
		});
	}

	const stdout = handleOutput(parsed.options, result.stdout, result.error);
	const stderr = handleOutput(parsed.options, result.stderr, result.error);

	if (result.error || result.status !== 0 || result.signal !== null) {
		const error = makeError({
			stdout,
			stderr,
			error: result.error,
			signal: result.signal,
			exitCode: result.status,
			command,
			escapedCommand,
			parsed,
			timedOut: result.error && result.error.code === 'ETIMEDOUT',
			isCanceled: false,
			killed: result.signal !== null,
		});

		if (!parsed.options.reject) {
			return error;
		}

		throw error;
	}

	return {
		command,
		escapedCommand,
		exitCode: 0,
		stdout,
		stderr,
		failed: false,
		timedOut: false,
		isCanceled: false,
		killed: false,
	};
}

const normalizeScriptStdin = ({input, inputFile, stdio}) => input === undefined && inputFile === undefined && stdio === undefined
	? {stdin: 'inherit'}
	: {};

const normalizeScriptOptions = (options = {}) => ({
	preferLocal: true,
	...normalizeScriptStdin(options),
	...options,
});

function create$(options) {
	function $(templatesOrOptions, ...expressions) {
		if (!Array.isArray(templatesOrOptions)) {
			return create$({...options, ...templatesOrOptions});
		}

		const [file, ...args] = parseTemplates(templatesOrOptions, expressions);
		return execa(file, args, normalizeScriptOptions(options));
	}

	$.sync = (templates, ...expressions) => {
		if (!Array.isArray(templates)) {
			throw new TypeError('Please use $(options).sync`command` instead of $.sync(options)`command`.');
		}

		const [file, ...args] = parseTemplates(templates, expressions);
		return execaSync(file, args, normalizeScriptOptions(options));
	};

	return $;
}

const $ = create$();

function execaCommand(command, options) {
	const [file, ...args] = parseCommand(command);
	return execa(file, args, options);
}

function execaCommandSync(command, options) {
	const [file, ...args] = parseCommand(command);
	return execaSync(file, args, options);
}

function execaNode(scriptPath, args, options = {}) {
	if (args && !Array.isArray(args) && typeof args === 'object') {
		options = args;
		args = [];
	}

	const stdio = normalizeStdioNode(options);
	const defaultExecArgv = process.execArgv.filter(arg => !arg.startsWith('--inspect'));

	const {
		nodePath = process.execPath,
		nodeOptions = defaultExecArgv,
	} = options;

	return execa(
		nodePath,
		[
			...nodeOptions,
			scriptPath,
			...(Array.isArray(args) ? args : []),
		],
		{
			...options,
			stdin: undefined,
			stdout: undefined,
			stderr: undefined,
			stdio,
			shell: false,
		},
	);
}

// EXTERNAL MODULE: external "node:fs/promises"
var promises_ = __nccwpck_require__(3977);
;// CONCATENATED MODULE: ./src/commands/bump.ts




const bump_OPTIONS = [
    { name: 'verbose', alias: 'v', type: Boolean, defaultValue: false },
    { name: 'dir', alias: 'd', type: String, defaultValue: null },
    { name: 'workspaces', type: Boolean, defaultValue: false },
    { name: 'bins', alias: 'b', type: String, defaultValue: null },
    { name: 'binaries', type: String, defaultValue: null }
];
async function subdirs(dir) {
    const entries = await promises_.readdir(dir);
    let dirs = [];
    for (const entry of entries) {
        if ((await promises_.stat(external_node_path_.join(dir, entry))).isDirectory()) {
            dirs.push(entry);
        }
    }
    return dirs;
}
class Bump {
    static summary() { return 'Portably bump package versions in a project tree.'; }
    static syntax() { return 'neon bump [-v] (-d <dir>|--workspaces|-b <dir>) [<version>|major|minor|patch]'; }
    static options() {
        return [
            { name: '-d, --dir <dir>', summary: 'Run `npm version <version>` in another directory.' },
            { name: '--workspaces', summary: 'Run `npm version --workspaces <version>` in the current directory.' },
            { name: '-b, --bins <dir>', summary: 'Run `npm version --force <version>` on all binary packages in <dir>.' },
            { name: '', summary: 'The --force parameter causes npm to ignore `os` and `cpu` constraints in the binary packages\' manifests that might not match the current system.' },
            { name: '<version>', summary: 'The new package version. (Default: $npm_package_version)' },
            { name: '-v, --verbose', summary: 'Enable verbose logging. (Default: false)' }
        ];
    }
    static seeAlso() {
        return [
            { name: 'npm version', summary: '<https://docs.npmjs.com/cli/commands/npm-version>' }
        ];
    }
    static extraSection() { }
    _verbose;
    _dir;
    _workspaces;
    _binaries;
    _version;
    constructor(argv) {
        const options = dist_default()(bump_OPTIONS, { argv, partial: true });
        this._verbose = options.verbose;
        this._dir = options.dir || null;
        this._workspaces = options.workspaces;
        this._binaries = options.bins || options.binaries || null;
        if ([this._dir, this._workspaces, this._binaries].filter(x => !!x).length > 1) {
            throw new Error("Only one of --dir, --workspaces, or --binaries can be specified.");
        }
        this._version = (!options._unknown || !options._unknown.length)
            ? process.env.npm_package_version
            : options[0];
    }
    log(msg) {
        if (this._verbose) {
            console.error("[neon bump] " + msg);
        }
    }
    async bumpDir(dir) {
        this.log(`CWD=${dir} npm version ${this._version}`);
        const result = await execa('npm', ['version', this._version], { cwd: dir, shell: true });
        if (result.exitCode !== 0) {
            console.error(result.stderr);
            process.exit(result.exitCode);
        }
    }
    async bumpWorkspaces() {
        this.log(`npm version --workspaces ${this._version}`);
        const result = await execa('npm', ['version', "--workspaces", this._version], { shell: true });
        if (result.exitCode !== 0) {
            console.error(result.stderr);
            process.exit(result.exitCode);
        }
    }
    async bumpBinaries(binaries) {
        const binariesPath = external_node_path_.join(...binaries.split('/'));
        const dirs = await subdirs(binariesPath);
        for (const dir of dirs) {
            const dirPath = external_node_path_.join(binariesPath, dir);
            this.log(`CWD=${dirPath} npm version --force ${this._version}`);
            const result = await execa('npm', ['version', "--force", this._version], { cwd: dirPath, shell: true });
            if (result.exitCode !== 0) {
                console.error(result.stderr);
                process.exit(result.exitCode);
            }
        }
    }
    async run() {
        if (this._dir) {
            await this.bumpDir(this._dir);
        }
        else if (this._workspaces) {
            await this.bumpWorkspaces();
        }
        else if (this._binaries) {
            await this.bumpBinaries(this._binaries);
        }
    }
}

;// CONCATENATED MODULE: ./src/target.ts


async function getCurrentTarget(log) {
    log(`rustc -vV`);
    const result = await execa("rustc", ["-vV"], { shell: true });
    if (result.exitCode !== 0) {
        throw new Error(`Could not determine current Rust target: ${result.stderr}`);
    }
    const hostLine = result.stdout.split(/\n/).find(line => line.startsWith('host:'));
    log(`found host line: ${hostLine}`);
    if (!hostLine) {
        throw new Error("Could not determine current Rust target (unexpected rustc output)");
    }
    const target = hostLine.replace(/^host:\s+/, '');
    log(`currentTarget result: "${target}"`);
    (0,lib_platform/* assertIsRustTarget */.sD)(target);
    return target;
}

;// CONCATENATED MODULE: ./src/commands/add.ts




function optionArray(option) {
    return option == null ? [] : [option];
}
const add_OPTIONS = [
    { name: 'os', type: String, defaultValue: null },
    { name: 'arch', type: String, defaultValue: null },
    { name: 'abi', type: String, defaultValue: null },
    { name: 'out-dir', alias: 'o', type: String, defaultValue: 'platforms' },
    { name: 'verbose', alias: 'v', type: Boolean, defaultValue: false }
];
class Add {
    static summary() { return 'Add a platform or platform preset to a Neon project.'; }
    static syntax() { return 'neon add [<p> | --os <a> --arch <b> [--abi <c>]] [-o <d>] [-b <f>]'; }
    static options() {
        return [
            { name: '<p>', summary: 'A Node platform or platform preset.' },
            {
                name: '',
                summary: 'This can be a specific Node platform or one of the Neon platform family presets described below. (Default: current platform)'
            },
            { name: '--os <a>', summary: 'Platform OS name. (Default: current OS)' },
            { name: '--arch <b>', summary: 'Platform architecture name. (Default: current arch)' },
            { name: '--abi <c>', summary: 'Platform ABI name. (Default: current ABI)' },
            { name: '-o, --out-dir <d>', summary: 'Output directory for platform template tree. (Default: ./platforms)' },
            { name: '-v, --verbose', summary: 'Enable verbose logging. (Default: false)' }
        ];
    }
    static seeAlso() { }
    static extraSection() {
        return {
            title: 'Platform Family Presets',
            details: [
                { name: 'linux', summary: 'Common desktop Linux platforms.' },
                { name: 'macos', summary: 'Common desktop macOS platforms.' },
                { name: 'windows', summary: 'Common desktop Windows platforms.' },
                { name: 'mobile', summary: 'Common mobile and tablet platforms.' },
                { name: 'desktop', summary: 'All common desktop platforms.' },
                { name: 'common', summary: 'All common platforms.' },
                { name: 'extended', summary: 'All supported platforms.' }
            ]
        };
    }
    _os;
    _arch;
    _abi;
    _platform;
    _outDir;
    _verbose;
    constructor(argv) {
        const options = dist_default()(add_OPTIONS, { argv, partial: true });
        this._os = options.os || null;
        this._arch = options.arch || null;
        this._abi = options.abi || null;
        this._outDir = options['out-dir'];
        this._verbose = !!options.verbose;
        if (options.os && !options.arch) {
            throw new Error("Option --os requires option --arch to be specified as well.");
        }
        if (!options.os && options.arch) {
            throw new Error("Option --arch requires option --os to be specified as well.");
        }
        if (options.abi && (!options.os || !options.arch)) {
            throw new Error("Option --abi requires both options --os and --arch to be specified as well.");
        }
        if (!options.os && !options.arch && !options.abi) {
            if (!options._unknown || options._unknown.length === 0) {
                throw new Error("No arguments found, expected platform or --os and --arch options.");
            }
            this._platform = options._unknown[0];
        }
        else {
            this._platform = `${options.os}-${options.arch}`;
            if (!!options.abi) {
                this._platform = `${this._platform}-${options.abi}`;
            }
        }
    }
    log(msg) {
        if (this._verbose) {
            console.error("[neon add] " + msg);
        }
    }
    async addPlatform(libManifest) {
        if (!this._platform) {
            this.log('adding default system platform');
            await libManifest.addRustTarget(await getCurrentTarget(msg => this.log(msg)));
        }
        else if ((0,lib_platform/* isRustTarget */.FZ)(this._platform)) {
            this.log(`adding Rust target ${this._platform}`);
            await libManifest.addRustTarget(this._platform);
        }
        else if ((0,lib_platform/* isNodePlatform */.bC)(this._platform)) {
            this.log(`adding Node platform ${this._platform}`);
            await libManifest.addNodePlatform(this._platform);
        }
        else if ((0,lib_platform/* isPlatformPreset */.Qm)(this._platform)) {
            await libManifest.addPlatformPreset(this._platform);
        }
        else {
            throw new Error(`unrecognized platform or preset ${this._platform}`);
        }
    }
    async run() {
        this.log(`reading package.json`);
        const libManifest = await manifest_lib/* LibraryManifest.load */.N.load();
        this.log(`manifest: ${libManifest.stringify()}`);
        await this.addPlatform(libManifest);
        if (libManifest.hasUnsavedChanges()) {
            libManifest.updatePlatforms();
            libManifest.saveChanges(msg => this.log(msg));
        }
    }
}

;// CONCATENATED MODULE: ./src/commands/update.ts


const update_OPTIONS = [
    { name: 'verbose', alias: 'v', type: Boolean, defaultValue: false }
];
class Update {
    static summary() { return 'Update configuration for all build platforms in package.json.'; }
    static syntax() { return 'neon update [-v]'; }
    static options() {
        return [
            { name: '-v, --verbose', summary: 'Enable verbose logging. (Default: false)' }
        ];
    }
    static seeAlso() { }
    static extraSection() { }
    _verbose;
    constructor(argv) {
        const options = dist_default()(update_OPTIONS, { argv });
        this._verbose = !!options.verbose;
    }
    log(msg) {
        if (this._verbose) {
            console.error("[neon update] " + msg);
        }
    }
    async run() {
        this.log(`reading package.json (CWD=${process.cwd()})`);
        const libManifest = await manifest_lib/* LibraryManifest.load */.N.load();
        const version = libManifest.version;
        this.log(`package.json before: ${libManifest.stringify()}`);
        this.log(`determined version: ${version}`);
        libManifest.updatePlatforms();
        if (libManifest.hasUnsavedChanges()) {
            libManifest.saveChanges(msg => this.log(msg));
        }
    }
}

;// CONCATENATED MODULE: ./src/commands/list-platforms.ts


const list_platforms_OPTIONS = [
    { name: 'verbose', alias: 'v', type: Boolean, defaultValue: false }
];
class ListPlatforms {
    static summary() { return 'Display the JSON target data for this project\'s platforms.'; }
    static syntax() { return 'neon list-platforms [-v]'; }
    static options() {
        return [
            { name: '-v, --verbose', summary: 'Enable verbose logging. (Default: false)' }
        ];
    }
    static seeAlso() { }
    static extraSection() { }
    _verbose;
    constructor(argv) {
        const options = dist_default()(list_platforms_OPTIONS, { argv });
        this._verbose = !!options.verbose;
    }
    log(msg) {
        if (this._verbose) {
            console.error("[neon list-platforms] " + msg);
        }
    }
    async run() {
        this.log(`reading package.json`);
        const libManifest = await manifest_lib/* LibraryManifest.load */.N.load();
        this.log(`manifest: ${libManifest.stringify()}`);
        const platforms = libManifest.allPlatforms();
        console.log(JSON.stringify(platforms, null, 2));
    }
}

// EXTERNAL MODULE: ./node_modules/@neon-rs/load/dist/index.js
var load_dist = __nccwpck_require__(8938);
;// CONCATENATED MODULE: ./src/commands/current-platform.ts


const current_platform_OPTIONS = [
    { name: 'json', type: Boolean, defaultValue: false },
    { name: 'verbose', alias: 'v', type: Boolean, defaultValue: false }
];
class CurrentPlatform {
    static summary() { return 'Display the current device\'s platform info.'; }
    static syntax() { return 'neon current-platform [--json] [-v]'; }
    static options() {
        return [
            { name: '--json', summary: 'Display platform info in JSON format. (Default: false)' },
            { name: '-v, --verbose', summary: 'Enable verbose logging. (Default: false)' }
        ];
    }
    static seeAlso() { }
    static extraSection() { }
    _json;
    _verbose;
    constructor(argv) {
        const options = dist_default()(current_platform_OPTIONS, { argv });
        this._json = options.json || false;
        this._verbose = !!options.verbose;
    }
    log(msg) {
        if (this._verbose) {
            console.error("[neon current-platform] " + msg);
        }
    }
    async run() {
        if (this._json) {
            const [os, arch, abi] = (0,load_dist/* currentPlatform */.ob)().split('-');
            const json = {
                os,
                arch,
                abi: abi || null
            };
            console.log(JSON.stringify(json, null, 2));
        }
        else {
            console.log((0,load_dist/* currentPlatform */.ob)());
        }
    }
}

;// CONCATENATED MODULE: ./src/commands/preset.ts


const preset_OPTIONS = [
    { name: 'pretty', alias: 'p', type: Boolean, defaultValue: true },
    { name: 'verbose', alias: 'v', type: Boolean, defaultValue: false }
];
class Preset {
    static summary() { return 'Display the JSON target data for a platform preset.'; }
    static syntax() { return 'neon preset [-v] <preset>'; }
    static options() {
        return [
            { name: '<preset>', summary: 'The target family preset to look up.' },
            { name: '-v, --verbose', summary: 'Enable verbose logging. (Default: false)' }
        ];
    }
    static seeAlso() { }
    static extraSection() { }
    _verbose;
    _preset;
    constructor(argv) {
        const options = dist_default()(preset_OPTIONS, { argv, partial: true });
        this._verbose = !!options.verbose;
        if (!options._unknown || options._unknown.length === 0) {
            throw new Error("Missing argument, expected <preset>");
        }
        if (options._unknown.length > 1) {
            throw new Error(`Unexpected argument ${options._unknown[1]}`);
        }
        (0,lib_platform/* assertIsPlatformPreset */.Zv)(options._unknown[0]);
        this._preset = options._unknown[0];
    }
    log(msg) {
        if (this._verbose) {
            console.error("[neon preset] " + msg);
        }
    }
    async run() {
        const map = (0,lib_platform/* expandPlatformPreset */.EY)(this._preset);
        console.log(JSON.stringify(map, null, 2));
    }
}

// EXTERNAL MODULE: ./src/provider.ts + 2 modules
var provider = __nccwpck_require__(545);
;// CONCATENATED MODULE: ./src/commands/ci.ts



const ci_OPTIONS = [
    { name: 'verbose', alias: 'v', type: Boolean, defaultValue: false }
];
class Ci {
    static summary() { return 'Display CI metadata for this project\'s platforms.'; }
    static syntax() { return 'neon ci [-v] <provider>'; }
    static options() {
        return [
            { name: '-v, --verbose', summary: 'Enable verbose logging. (Default: false)' },
            { name: '<provider>', summary: 'CI provider, which can be one of the supported providers listed below.' }
        ];
    }
    static seeAlso() {
        return [
            { name: 'GitHub Actions', summary: '<https://docs.github.com/actions>' }
        ];
    }
    static extraSection() {
        return {
            title: 'CI Providers',
            details: [
                { name: 'github', summary: 'GitHub Actions.' }
            ]
        };
    }
    _verbose;
    _provider;
    constructor(argv) {
        const options = dist_default()(ci_OPTIONS, { argv, partial: true });
        this._verbose = !!options.verbose;
        if (!options._unknown || options._unknown.length === 0) {
            throw new Error("No arguments found, expected <provider>.");
        }
        const providerName = (0,provider/* asProviderName */.tb)(options._unknown[0]);
        const providerCtor = (0,provider/* providerFor */.kq)(providerName);
        this._provider = new providerCtor();
    }
    log(msg) {
        if (this._verbose) {
            console.error("[neon ci] " + msg);
        }
    }
    async run() {
        this.log(`reading package.json`);
        const libManifest = await manifest_lib/* LibraryManifest.load */.N.load();
        this.log(`manifest: ${libManifest.stringify()}`);
        const platforms = libManifest.allPlatforms();
        const metadata = this._provider.metadata(platforms);
        console.log(JSON.stringify(metadata, null, 2));
    }
}

// EXTERNAL MODULE: ./src/print.ts + 26 modules
var print = __nccwpck_require__(9050);
// EXTERNAL MODULE: ./src/commands/show.ts + 4 modules
var show = __nccwpck_require__(6264);
;// CONCATENATED MODULE: ./src/commands/help.ts



class Help {
    static summary() { return 'Display help information about Neon.'; }
    static syntax() { return 'neon help <command>'; }
    static options() {
        return [
            { name: '<command>', summary: 'Command to display help information about.' }
        ];
    }
    static seeAlso() { }
    static extraSection() { }
    _name;
    _topic;
    constructor(argv) {
        this._name = argv.length > 0 ? asCommandName(argv[0]) : undefined;
        this._topic = undefined;
        if (this._name === CommandName.Show) {
            if (argv.length === 2) {
                this._topic = (0,show/* asTopic */.sY)(argv[1]);
            }
            if (argv.length > 2) {
                throw new Error(`Unexpected argument: ${argv[2]}`);
            }
        }
        else if (argv.length > 1) {
            throw new Error(`Unexpected argument: ${argv[1]}`);
        }
    }
    async run() {
        if (this._topic) {
            (0,print/* printShowTopicUsage */.v9)(this._topic);
        }
        else if (this._name) {
            (0,print/* printCommandUsage */.CZ)(this._name);
        }
        else {
            (0,print/* printMainUsage */.yY)();
        }
    }
}

;// CONCATENATED MODULE: ./src/command.ts










var CommandName;
(function (CommandName) {
    CommandName["Help"] = "help";
    CommandName["Dist"] = "dist";
    CommandName["Bump"] = "bump";
    CommandName["Add"] = "add";
    CommandName["Update"] = "update";
    CommandName["AddPlatform"] = "add-platform";
    CommandName["UpdatePlatforms"] = "update-platforms";
    CommandName["ListPlatforms"] = "list-platforms";
    CommandName["CurrentPlatform"] = "current-platform";
    CommandName["Preset"] = "preset";
    CommandName["Ci"] = "ci";
    CommandName["Show"] = "show";
})(CommandName || (CommandName = {}));
;
function isCommandName(s) {
    const keys = Object.values(CommandName);
    return keys.includes(s);
}
function asCommandName(name) {
    if (!isCommandName(name)) {
        throw new RangeError(`Command not recognized: ${name}`);
    }
    return name;
}
const COMMANDS = {
    [CommandName.Help]: Help,
    [CommandName.Dist]: Dist,
    [CommandName.Bump]: Bump,
    [CommandName.Add]: Add,
    [CommandName.Update]: Update,
    [CommandName.AddPlatform]: Add,
    [CommandName.UpdatePlatforms]: Update,
    [CommandName.ListPlatforms]: ListPlatforms,
    [CommandName.CurrentPlatform]: CurrentPlatform,
    [CommandName.Preset]: Preset,
    [CommandName.Ci]: Ci,
    [CommandName.Show]: show/* default */.ZP
};
function commandFor(name) {
    return COMMANDS[name];
}
function summaries() {
    return [
        { name: CommandName.Help, summary: Help.summary() },
        { name: CommandName.Dist, summary: Dist.summary() },
        { name: CommandName.Bump, summary: Bump.summary() },
        { name: CommandName.Add, summary: Add.summary() },
        { name: CommandName.Update, summary: Update.summary() },
        { name: CommandName.Show, summary: show/* default.summary */.ZP.summary() }
    ];
}


/***/ }),

/***/ 6264:
/***/ ((__unused_webpack_module, __webpack_exports__, __nccwpck_require__) => {


// EXPORTS
__nccwpck_require__.d(__webpack_exports__, {
  "sY": () => (/* binding */ asTopic),
  "ZP": () => (/* binding */ Show),
  "D8": () => (/* binding */ subcommandFor)
});

// UNUSED EXPORTS: Topic

// EXTERNAL MODULE: ../node_modules/command-line-args/dist/index.js
var dist = __nccwpck_require__(7898);
var dist_default = /*#__PURE__*/__nccwpck_require__.n(dist);
// EXTERNAL MODULE: ../node_modules/@neon-rs/manifest/lib/index.mjs
var lib = __nccwpck_require__(347);
;// CONCATENATED MODULE: ./src/commands/show/platforms.ts


const OPTIONS = [
    { name: 'verbose', alias: 'v', type: Boolean, defaultValue: false }
];
class Platforms {
    static summary() { return 'Display information about this project\'s supported platforms.'; }
    static syntax() { return 'neon show platforms [-v]'; }
    static options() {
        return [
            { name: '-v, --verbose', summary: 'Enable verbose logging. (Default: false)' }
        ];
    }
    static seeAlso() { }
    static extraSection() { }
    _verbose;
    constructor(argv) {
        const options = dist_default()(OPTIONS, { argv, partial: true });
        this._verbose = !!options.verbose;
    }
    log(msg) {
        if (this._verbose) {
            console.error("[neon show platforms] " + msg);
        }
    }
    async run() {
        this.log(`reading package.json`);
        const libManifest = await lib/* LibraryManifest.load */.N.load();
        this.log(`manifest: ${libManifest.stringify()}`);
        const platforms = libManifest.allPlatforms();
        console.log(JSON.stringify(platforms, null, 2));
    }
}

// EXTERNAL MODULE: ./src/provider.ts + 2 modules
var provider = __nccwpck_require__(545);
;// CONCATENATED MODULE: ./src/commands/show/ci.ts



const ci_OPTIONS = [
    { name: 'verbose', alias: 'v', type: Boolean, defaultValue: false }
];
class CI {
    static summary() { return 'Display CI metadata for this project\'s platforms.'; }
    static syntax() { return 'neon show ci [-v] <provider>'; }
    static options() {
        return [
            { name: '-v, --verbose', summary: 'Enable verbose logging. (Default: false)' },
            { name: '<provider>', summary: 'CI provider, which can be one of the supported providers listed below.' }
        ];
    }
    static seeAlso() {
        return [
            { name: 'GitHub Actions', summary: '<https://docs.github.com/actions>' }
        ];
    }
    static extraSection() {
        return {
            title: 'CI Providers',
            details: [
                { name: 'github', summary: 'GitHub Actions.' }
            ]
        };
    }
    _verbose;
    _provider;
    constructor(argv) {
        const options = dist_default()(ci_OPTIONS, { argv, partial: true });
        this._verbose = !!options.verbose;
        if (!options._unknown || options._unknown.length === 0) {
            throw new Error("No arguments found, expected <provider>.");
        }
        const providerName = (0,provider/* asProviderName */.tb)(options._unknown[0]);
        const providerCtor = (0,provider/* providerFor */.kq)(providerName);
        this._provider = new providerCtor();
    }
    log(msg) {
        if (this._verbose) {
            console.error("[neon show ci] " + msg);
        }
    }
    async run() {
        this.log(`reading package.json`);
        const libManifest = await lib/* LibraryManifest.load */.N.load();
        this.log(`manifest: ${libManifest.stringify()}`);
        const platforms = libManifest.allPlatforms();
        const metadata = this._provider.metadata(platforms);
        console.log(JSON.stringify(metadata, null, 2));
    }
}

// EXTERNAL MODULE: ../node_modules/@neon-rs/manifest/lib/platform.mjs
var platform = __nccwpck_require__(8140);
;// CONCATENATED MODULE: ./src/commands/show/preset.ts


const preset_OPTIONS = [
    { name: 'verbose', alias: 'v', type: Boolean, defaultValue: false }
];
class Preset {
    static summary() { return 'Display target information about a platform preset.'; }
    static syntax() { return 'neon show preset [-v] <preset>'; }
    static options() {
        return [
            { name: '-v, --verbose', summary: 'Enable verbose logging. (Default: false)' },
            { name: '<preset>', summary: 'The target family preset to look up.' },
        ];
    }
    static seeAlso() { }
    static extraSection() { }
    _json;
    _verbose;
    _preset;
    constructor(argv) {
        const options = dist_default()(preset_OPTIONS, { argv, partial: true });
        this._json = options.json || false;
        this._verbose = !!options.verbose;
        if (!options._unknown || options._unknown.length === 0) {
            throw new Error("Missing argument, expected <preset>");
        }
        if (options._unknown.length > 1) {
            throw new Error(`Unexpected argument ${options._unknown[1]}`);
        }
        (0,platform/* assertIsPlatformPreset */.Zv)(options._unknown[0]);
        this._preset = options._unknown[0];
    }
    log(msg) {
        if (this._verbose) {
            console.error("[neon show preset] " + msg);
        }
    }
    async run() {
        const map = (0,platform/* expandPlatformPreset */.EY)(this._preset);
        console.log(JSON.stringify(map, null, 2));
    }
}

// EXTERNAL MODULE: ./node_modules/@neon-rs/load/dist/index.js
var load_dist = __nccwpck_require__(8938);
;// CONCATENATED MODULE: ./src/commands/show/system.ts


const system_OPTIONS = [
    { name: 'json', type: Boolean, defaultValue: false },
    { name: 'verbose', alias: 'v', type: Boolean, defaultValue: false }
];
class System {
    static summary() { return 'Display information about the current system.'; }
    static syntax() { return 'neon show system [--json] [-v]'; }
    static options() {
        return [
            { name: '--json', summary: 'Display platform info in JSON format. (Default: false)' },
            { name: '-v, --verbose', summary: 'Enable verbose logging. (Default: false)' }
        ];
    }
    static seeAlso() { }
    static extraSection() { }
    _json;
    _verbose;
    constructor(argv) {
        const options = dist_default()(system_OPTIONS, { argv, partial: true });
        this._json = options.json || false;
        this._verbose = !!options.verbose;
    }
    log(msg) {
        if (this._verbose) {
            console.error("[neon show system] " + msg);
        }
    }
    async run() {
        if (this._json) {
            const [os, arch, abi] = (0,load_dist/* currentPlatform */.ob)().split('-');
            const json = {
                os,
                arch,
                abi: abi || null
            };
            console.log(JSON.stringify(json, null, 2));
        }
        else {
            console.log((0,load_dist/* currentPlatform */.ob)());
        }
    }
}

;// CONCATENATED MODULE: ./src/commands/show.ts





const show_OPTIONS = [
    { name: 'verbose', alias: 'v', type: Boolean, defaultValue: false }
];
var Topic;
(function (Topic) {
    Topic["PLATFORMS"] = "platforms";
    Topic["SYSTEM"] = "system";
    Topic["PRESET"] = "preset";
    Topic["CI"] = "ci";
})(Topic || (Topic = {}));
function subcommandFor(topic) {
    switch (topic) {
        case Topic.CI:
            return CI;
        case Topic.PLATFORMS:
            return Platforms;
        case Topic.PRESET:
            return Preset;
        case Topic.SYSTEM:
            return System;
    }
}
function isTopic(x) {
    return ['platforms', 'system', 'preset', 'ci'].includes(x);
}
function asTopic(x) {
    if (!isTopic(x)) {
        throw new RangeError(`expected <topic>, got ${x}`);
    }
    return x;
}
function assertIsTopic(x) {
    if (!isTopic(x)) {
        throw new RangeError(`expected <topic>, got ${x}`);
    }
}
class Show {
    static summary() { return 'Display information about the project or current system.'; }
    static syntax() { return 'neon show <topic>'; }
    static options() {
        return [
            { name: '<topic>', summary: 'The topic to display information about.' },
            { name: '', summary: 'Run `neon help show <topic>` for details about a topic.' }
        ];
    }
    static seeAlso() { }
    static extraSection() {
        return {
            title: 'Topics',
            details: [
                { name: 'ci', summary: 'CI metadata for this project\'s platforms.' },
                { name: 'platforms', summary: 'Information about this project\'s supported platforms.' },
                { name: 'preset', summary: 'Target information about a platform preset.' },
                { name: 'system', summary: 'Information about the current system.' }
            ]
        };
    }
    _topic;
    _argv;
    constructor(argv) {
        const options = dist_default()(show_OPTIONS, { argv, stopAtFirstUnknown: true, partial: true });
        if (!options._unknown || options._unknown.length === 0) {
            throw new Error("Missing argument, expected <topic>");
        }
        assertIsTopic(options._unknown[0]);
        this._topic = options._unknown[0];
        this._argv = options._unknown.slice(1);
    }
    subcommand() {
        switch (this._topic) {
            case Topic.PLATFORMS:
                return new Platforms(this._argv);
            case Topic.CI:
                return new CI(this._argv);
            case Topic.PRESET:
                return new Preset(this._argv);
            case Topic.SYSTEM:
                return new System(this._argv);
        }
    }
    async run() {
        await this.subcommand().run();
    }
}


/***/ }),

/***/ 8613:
/***/ ((module, __unused_webpack___webpack_exports__, __nccwpck_require__) => {

__nccwpck_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {
/* harmony import */ var command_line_commands__WEBPACK_IMPORTED_MODULE_0__ = __nccwpck_require__(5046);
/* harmony import */ var command_line_commands__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__nccwpck_require__.n(command_line_commands__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _print_js__WEBPACK_IMPORTED_MODULE_1__ = __nccwpck_require__(9050);
/* harmony import */ var _command_js__WEBPACK_IMPORTED_MODULE_2__ = __nccwpck_require__(5065);
/* harmony import */ var node_module__WEBPACK_IMPORTED_MODULE_3__ = __nccwpck_require__(2033);
/* harmony import */ var node_module__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__nccwpck_require__.n(node_module__WEBPACK_IMPORTED_MODULE_3__);




const absoluteRequire = (0,node_module__WEBPACK_IMPORTED_MODULE_3__.createRequire)(import.meta.url);
// When compiling with ncc, the default global `require` function does
// not know how to find the binary `@cargo-messages/*` modules, but the
// compiled result of `createRequire` does. So this replaces the global
// `require` with that one. This way when the `cargo-messages` loader
// module attempts to load the right binary module for the device, the
// call to `require` succeeds.
global['require'] = function (spec) {
    return absoluteRequire(spec);
};
class Cli {
    parse() {
        try {
            const { command, argv } = command_line_commands__WEBPACK_IMPORTED_MODULE_0___default()([null, ...Object.values(_command_js__WEBPACK_IMPORTED_MODULE_2__/* .CommandName */ .G7)]);
            if (!command) {
                (0,_print_js__WEBPACK_IMPORTED_MODULE_1__/* .printMainUsage */ .yY)();
                process.exit(0);
            }
            const ctor = (0,_command_js__WEBPACK_IMPORTED_MODULE_2__/* .commandFor */ .Nl)((0,_command_js__WEBPACK_IMPORTED_MODULE_2__/* .asCommandName */ .Kb)(command));
            return new ctor(argv);
        }
        catch (e) {
            (0,_print_js__WEBPACK_IMPORTED_MODULE_1__/* .printErrorWithUsage */ .Yv)(e);
            process.exit(1);
        }
    }
}
async function main() {
    const cli = new Cli();
    const command = cli.parse();
    try {
        await command.run();
    }
    catch (e) {
        (0,_print_js__WEBPACK_IMPORTED_MODULE_1__/* .printError */ .OS)(e);
        process.exit(1);
    }
}
await main();

__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } }, 1);

/***/ }),

/***/ 9050:
/***/ ((__unused_webpack_module, __webpack_exports__, __nccwpck_require__) => {


// EXPORTS
__nccwpck_require__.d(__webpack_exports__, {
  "CZ": () => (/* binding */ printCommandUsage),
  "OS": () => (/* binding */ printError),
  "Yv": () => (/* binding */ printErrorWithUsage),
  "yY": () => (/* binding */ printMainUsage),
  "v9": () => (/* binding */ printShowTopicUsage)
});

;// CONCATENATED MODULE: ../node_modules/command-line-usage/node_modules/array-back/index.js
/**
 * Takes any input and guarantees an array back.
 *
 * - Converts array-like objects (e.g. `arguments`, `Set`) to a real array.
 * - Converts `undefined` to an empty array.
 * - Converts any another other, singular value (including `null`, objects and iterables other than `Set`) into an array containing that value.
 * - Ignores input which is already an array.
 *
 * @module array-back
 * @example
 * > const arrayify = require('array-back')
 *
 * > arrayify(undefined)
 * []
 *
 * > arrayify(null)
 * [ null ]
 *
 * > arrayify(0)
 * [ 0 ]
 *
 * > arrayify([ 1, 2 ])
 * [ 1, 2 ]
 *
 * > arrayify(new Set([ 1, 2 ]))
 * [ 1, 2 ]
 *
 * > function f(){ return arrayify(arguments); }
 * > f(1,2,3)
 * [ 1, 2, 3 ]
 */

function isObject (input) {
  return typeof input === 'object' && input !== null
}

function isArrayLike (input) {
  return isObject(input) && typeof input.length === 'number'
}

/**
 * @param {*} - The input value to convert to an array
 * @returns {Array}
 * @alias module:array-back
 */
function arrayify (input) {
  if (Array.isArray(input)) {
    return input
  } else if (input === undefined) {
    return []
  } else if (isArrayLike(input) || input instanceof Set) {
    return Array.from(input)
  } else {
    return [input]
  }
}

/* harmony default export */ const array_back = (arrayify);

// EXTERNAL MODULE: ../node_modules/chalk-template/node_modules/chalk/source/index.js
var source = __nccwpck_require__(1486);
;// CONCATENATED MODULE: ../node_modules/chalk-template/index.js


// eslint-disable-next-line unicorn/better-regex
const TEMPLATE_REGEX = /(?:\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.))|(?:{(~)?(#?[\w:]+(?:\([^)]*\))?(?:\.#?[\w:]+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(})|((?:.|[\r\n\f])+?)/gi;
const STYLE_REGEX = /(?:^|\.)(?:(?:(\w+)(?:\(([^)]*)\))?)|(?:#(?=[:a-fA-F\d]{2,})([a-fA-F\d]{6})?(?::([a-fA-F\d]{6}))?))/g;
const STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
const ESCAPE_REGEX = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi;

const ESCAPES = new Map([
	['n', '\n'],
	['r', '\r'],
	['t', '\t'],
	['b', '\b'],
	['f', '\f'],
	['v', '\v'],
	['0', '\0'],
	['\\', '\\'],
	['e', '\u001B'],
	['a', '\u0007'],
]);

function chalk_template_unescape(c) {
	const u = c[0] === 'u';
	const bracket = c[1] === '{';

	if ((u && !bracket && c.length === 5) || (c[0] === 'x' && c.length === 3)) {
		return String.fromCharCode(Number.parseInt(c.slice(1), 16));
	}

	if (u && bracket) {
		return String.fromCodePoint(Number.parseInt(c.slice(2, -1), 16));
	}

	return ESCAPES.get(c) || c;
}

function parseArguments(name, arguments_) {
	const results = [];
	const chunks = arguments_.trim().split(/\s*,\s*/g);
	let matches;

	for (const chunk of chunks) {
		const number = Number(chunk);
		if (!Number.isNaN(number)) {
			results.push(number);
		} else if ((matches = chunk.match(STRING_REGEX))) {
			results.push(matches[2].replace(ESCAPE_REGEX, (_, escape, character) => escape ? chalk_template_unescape(escape) : character));
		} else {
			throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
		}
	}

	return results;
}

function parseHex(hex) {
	const n = Number.parseInt(hex, 16);
	return [
		// eslint-disable-next-line no-bitwise
		(n >> 16) & 0xFF,
		// eslint-disable-next-line no-bitwise
		(n >> 8) & 0xFF,
		// eslint-disable-next-line no-bitwise
		n & 0xFF,
	];
}

function parseStyle(style) {
	STYLE_REGEX.lastIndex = 0;

	const results = [];
	let matches;

	while ((matches = STYLE_REGEX.exec(style)) !== null) {
		const name = matches[1];

		if (matches[2]) {
			results.push([name, ...parseArguments(name, matches[2])]);
		} else if (matches[3] || matches[4]) {
			if (matches[3]) {
				results.push(['rgb', ...parseHex(matches[3])]);
			}

			if (matches[4]) {
				results.push(['bgRgb', ...parseHex(matches[4])]);
			}
		} else {
			results.push([name]);
		}
	}

	return results;
}

function buildStyle(styles) {
	const enabled = {};

	for (const layer of styles) {
		for (const style of layer.styles) {
			enabled[style[0]] = layer.inverse ? null : style.slice(1);
		}
	}

	let current = source;
	for (const [styleName, styles] of Object.entries(enabled)) {
		if (!Array.isArray(styles)) {
			continue;
		}

		if (!(styleName in current)) {
			throw new Error(`Unknown Chalk style: ${styleName}`);
		}

		current = styles.length > 0 ? current[styleName](...styles) : current[styleName];
	}

	return current;
}

function template(string) {
	const styles = [];
	const chunks = [];
	let chunk = [];

	// eslint-disable-next-line max-params
	string.replace(TEMPLATE_REGEX, (_, escapeCharacter, inverse, style, close, character) => {
		if (escapeCharacter) {
			chunk.push(chalk_template_unescape(escapeCharacter));
		} else if (style) {
			const string = chunk.join('');
			chunk = [];
			chunks.push(styles.length === 0 ? string : buildStyle(styles)(string));
			styles.push({inverse, styles: parseStyle(style)});
		} else if (close) {
			if (styles.length === 0) {
				throw new Error('Found extraneous } in Chalk template literal');
			}

			chunks.push(buildStyle(styles)(chunk.join('')));
			chunk = [];
			styles.pop();
		} else {
			chunk.push(character);
		}
	});

	chunks.push(chunk.join(''));

	if (styles.length > 0) {
		throw new Error(`Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? '' : 's'} (\`}\`)`);
	}

	return chunks.join('');
}

function chalkTemplate(firstString, ...arguments_) {
	if (!Array.isArray(firstString) || !Array.isArray(firstString.raw)) {
		// If chalkTemplate() was called by itself or with a string
		throw new TypeError('A tagged template literal must be provided');
	}

	const parts = [firstString.raw[0]];

	for (let index = 1; index < firstString.raw.length; index++) {
		parts.push(
			String(arguments_[index - 1]).replace(/[{}\\]/g, '\\$&'),
			String(firstString.raw[index]),
		);
	}

	return template(parts.join(''));
}

;// CONCATENATED MODULE: ../node_modules/command-line-usage/lib/chalk-format.js


function chalkFormat (str) {
  if (str) {
    str = str.replace(/`/g, '\\`')
    return chalkTemplate(Object.assign([], { raw: [str] }))
  } else {
    return ''
  }
}

/* harmony default export */ const chalk_format = (chalkFormat);

// EXTERNAL MODULE: external "os"
var external_os_ = __nccwpck_require__(2037);
;// CONCATENATED MODULE: ../node_modules/command-line-usage/lib/section.js




class Section {
  constructor () {
    this.lines = []
  }

  add (lines) {
    if (lines) {
      array_back(lines).forEach(line => this.lines.push(line))
    } else {
      this.lines.push('')
    }
  }

  toString () {
    return this.lines.join(external_os_.EOL)
  }

  header (text) {
    if (text) {
      this.add(chalk_format(`{bold ${text}}`))
      this.add()
    }
  }
}

/* harmony default export */ const section = (Section);

;// CONCATENATED MODULE: ../node_modules/table-layout/node_modules/array-back/index.js
/**
 * Takes any input and guarantees an array back.
 *
 * - Converts array-like objects (e.g. `arguments`, `Set`) to a real array.
 * - Converts `undefined` to an empty array.
 * - Converts any another other, singular value (including `null`, objects and iterables other than `Set`) into an array containing that value.
 * - Ignores input which is already an array.
 *
 * @module array-back
 * @example
 * > const arrayify = require('array-back')
 *
 * > arrayify(undefined)
 * []
 *
 * > arrayify(null)
 * [ null ]
 *
 * > arrayify(0)
 * [ 0 ]
 *
 * > arrayify([ 1, 2 ])
 * [ 1, 2 ]
 *
 * > arrayify(new Set([ 1, 2 ]))
 * [ 1, 2 ]
 *
 * > function f(){ return arrayify(arguments); }
 * > f(1,2,3)
 * [ 1, 2, 3 ]
 */

function array_back_isObject (input) {
  return typeof input === 'object' && input !== null
}

function array_back_isArrayLike (input) {
  return array_back_isObject(input) && typeof input.length === 'number'
}

/**
 * @param {*} - The input value to convert to an array
 * @returns {Array}
 * @alias module:array-back
 */
function array_back_arrayify (input) {
  if (Array.isArray(input)) {
    return input
  } else if (input === undefined) {
    return []
  } else if (array_back_isArrayLike(input) || input instanceof Set) {
    return Array.from(input)
  } else {
    return [input]
  }
}

/* harmony default export */ const node_modules_array_back = (array_back_arrayify);

;// CONCATENATED MODULE: ../node_modules/table-layout/lib/cell.js
const _value = new WeakMap()
const _column = new WeakMap()

class Cell {
  constructor (value, column) {
    this.value = value
    _column.set(this, column)
  }

  set value (val) {
    _value.set(this, val)
  }

  /**
  * Must return a string or object with a `.toString()` method.
  * @returns {string}
  */
  get value () {
    let cellValue = _value.get(this)
    const column = _column.get(this)
    if (column.get) {
      cellValue = column.get(cellValue)
    }
    if (cellValue === undefined) {
      cellValue = ''
    } else {
      cellValue = String(cellValue)
    }
    return cellValue
  }
}

/* harmony default export */ const lib_cell = (Cell);

;// CONCATENATED MODULE: ../node_modules/table-layout/lib/rows.js



/**
 * @module rows
 */

/**
≈ Each row is a map of column/cell pairs.
*/
class Rows {
  constructor (rows, columns) {
    this.list = []
    this.load(rows, columns)
  }

  load (rows, columns) {
    for (const row of node_modules_array_back(rows)) {
      const map = new Map(columns.list.map(column => [column, new lib_cell(row[column.name], column)]))
      this.list.push(map)
    }
  }
}

/* harmony default export */ const rows = (Rows);

;// CONCATENATED MODULE: ../node_modules/table-layout/node_modules/typical/index.js
/**
 * Isomorphic, functional type-checking for Javascript.
 * @module typical
 * @typicalname t
 * @example
 * import * as t from 'typical'
 * const allDefined = array.every(t.isDefined)
 */

/**
 * Returns true if input is a number (including infinity). It is a more reasonable alternative to `typeof n` which returns `number` for `NaN`.
 *
 * @param {*} n - The input to test
 * @returns {boolean} `true` if input is a number
 * @static
 * @example
 * > t.isNumber(0)
 * true
 * > t.isNumber(1)
 * true
 * > t.isNumber(1.1)
 * true
 * > t.isNumber(0xff)
 * true
 * > t.isNumber(0644)
 * true
 * > t.isNumber(6.2e5)
 * true
 * > t.isNumber(NaN)
 * false
 * > t.isNumber(Infinity)
 * true
 */
function isNumber (n) {
  return !isNaN(parseFloat(n))
}

/**
 * Returns true if input is a finite number. Identical to `isNumber` beside excluding infinity.
 *
 * @param {*} n - The input to test
 * @returns {boolean}
 * @static
 * @example
 * > t.isFiniteNumber(0)
 * true
 * > t.isFiniteNumber(1)
 * true
 * > t.isFiniteNumber(1.1)
 * true
 * > t.isFiniteNumber(0xff)
 * true
 * > t.isFiniteNumber(0644)
 * true
 * > t.isFiniteNumber(6.2e5)
 * true
 * > t.isFiniteNumber(NaN)
 * false
 * > t.isFiniteNumber(Infinity)
 * false
 */
function isFiniteNumber (n) {
  return !isNaN(parseFloat(n)) && isFinite(n)
}

/**
 * A plain object is a simple object literal, it is not an instance of a class. Returns true if the input `typeof` is `object` and directly decends from `Object`.
 *
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 * @example
 * > t.isPlainObject({ something: 'one' })
 * true
 * > t.isPlainObject(new Date())
 * false
 * > t.isPlainObject([ 0, 1 ])
 * false
 * > t.isPlainObject(/test/)
 * false
 * > t.isPlainObject(1)
 * false
 * > t.isPlainObject('one')
 * false
 * > t.isPlainObject(null)
 * false
 * > t.isPlainObject((function * () {})())
 * false
 * > t.isPlainObject(function * () {})
 * false
 */
function isPlainObject (input) {
  return input !== null && typeof input === 'object' && input.constructor === Object
}

/**
 * An array-like value has all the properties of an array yet is not an array instance. An example is the `arguments` object. Returns `true`` if the input value is an object, not `null`` and has a `length` property set with a numeric value.
 *
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 * @example
 * function sum(x, y){
 *   console.log(t.isArrayLike(arguments))
 *   // prints `true`
 * }
 */
function typical_isArrayLike (input) {
  return typical_isObject(input) && typeof input.length === 'number'
}

/**
 * Returns true if the typeof input is `'object'` but not null.
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 */
function typical_isObject (input) {
  return typeof input === 'object' && input !== null
}

/**
 * Returns true if the input value is defined.
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 */
function isDefined (input) {
  return typeof input !== 'undefined'
}

/**
 * Returns true if the input value is undefined.
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 */
function isUndefined (input) {
  return !isDefined(input)
}

/**
 * Returns true if the input value is null.
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 */
function isNull (input) {
  return input === null
}

/**
 * Returns true if the input value is not one of `undefined`, `null`, or `NaN`.
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 */
function isDefinedValue (input) {
  return isDefined(input) && !isNull(input) && !Number.isNaN(input)
}

/**
 * Returns true if the input value is an ES2015 `class`.
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 */
function isClass (input) {
  if (typeof input === 'function') {
    return /^class /.test(Function.prototype.toString.call(input))
  } else {
    return false
  }
}

/**
 * Returns true if the input is a string, number, symbol, boolean, null or undefined value.
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 */
function isPrimitive (input) {
  if (input === null) return true
  switch (typeof input) {
    case 'string':
    case 'number':
    case 'symbol':
    case 'undefined':
    case 'boolean':
      return true
    default:
      return false
  }
}

/**
 * Returns true if the input is a Promise.
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 */
function isPromise (input) {
  if (input) {
    const isPromise = isDefined(Promise) && input instanceof Promise
    const isThenable = input.then && typeof input.then === 'function'
    return !!(isPromise || isThenable)
  } else {
    return false
  }
}

/**
 * Returns true if the input is an iterable (`Map`, `Set`, `Array`, Generator etc.).
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 * @example
 * > t.isIterable('string')
 * true
 * > t.isIterable(new Map())
 * true
 * > t.isIterable([])
 * true
 * > t.isIterable((function * () {})())
 * true
 * > t.isIterable(Promise.resolve())
 * false
 * > t.isIterable(Promise)
 * false
 * > t.isIterable(true)
 * false
 * > t.isIterable({})
 * false
 * > t.isIterable(0)
 * false
 * > t.isIterable(1.1)
 * false
 * > t.isIterable(NaN)
 * false
 * > t.isIterable(Infinity)
 * false
 * > t.isIterable(function () {})
 * false
 * > t.isIterable(Date)
 * false
 * > t.isIterable()
 * false
 * > t.isIterable({ then: function () {} })
 * false
 */
function isIterable (input) {
  if (input === null || !isDefined(input)) {
    return false
  } else {
    return (
      typeof input[Symbol.iterator] === 'function' ||
      typeof input[Symbol.asyncIterator] === 'function'
    )
  }
}

/**
 * Returns true if the input value is a string. The equivalent of `typeof input === 'string'` for use in funcitonal contexts.
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 */
function isString (input) {
  return typeof input === 'string'
}

/**
 * Returns true if the input value is a function. The equivalent of `typeof input === 'function'` for use in funcitonal contexts.
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 */
function isFunction (input) {
  return typeof input === 'function'
}

/* harmony default export */ const typical = ({
  isNumber,
  isFiniteNumber,
  isPlainObject,
  isArrayLike: typical_isArrayLike,
  isObject: typical_isObject,
  isDefined,
  isUndefined,
  isNull,
  isDefinedValue,
  isClass,
  isPrimitive,
  isPromise,
  isIterable,
  isString,
  isFunction
});

;// CONCATENATED MODULE: ../node_modules/table-layout/lib/padding.js
/**
 * @module padding
 */

class Padding {
  constructor (padding) {
    this.left = padding.left
    this.right = padding.right
  }

  length () {
    return this.left.length + this.right.length
  }
}

/* harmony default export */ const lib_padding = (Padding);

;// CONCATENATED MODULE: ../node_modules/table-layout/lib/column.js



/**
 * @module column
 */

const _padding = new WeakMap()

// setting any column property which is a factor of the width should trigger autoSize()

/**
 * Represents the configuration and generatedWidth for a table column.
 */
class Column {
  constructor (column = {}) {
    this.name = column.name
    this.width = column.width
    this.maxWidth = column.maxWidth
    this.minWidth = column.minWidth
    this.noWrap = column.noWrap
    this.break = column.break
    this.contentWrappable = column.contentWrappable
    this.contentWidth = column.contentWidth
    this.minContentWidth = column.minContentWidth
    // this.get = column.get
    this.padding = column.padding || { left: ' ', right: ' ' }
    this.generatedWidth = null
  }

  set padding (padding) {
    _padding.set(this, new lib_padding(padding))
  }

  get padding () {
    return _padding.get(this)
  }

  /**
   * The width of the content (excluding padding) after being wrapped
   */
  get wrappedContentWidth () {
    return Math.max(this.generatedWidth - this.padding.length(), 0)
  }

  isResizable () {
    return !this.isFixed()
  }

  isFixed () {
    return typical.isDefined(this.width) || this.noWrap || !this.contentWrappable
  }

  generateWidth () {
    this.generatedWidth = this.width || (this.contentWidth + this.padding.length())
  }

  generateMinWidth () {
    this.minWidth = this.minContentWidth + this.padding.length()
  }
}

/* harmony default export */ const lib_column = (Column);

;// CONCATENATED MODULE: ../node_modules/table-layout/lib/columns.js




const _maxWidth = new WeakMap()

/**
 * @module columns
 */

class Columns {
  constructor (columns) {
    this.list = []
    for (const column of node_modules_array_back(columns)) {
      this.add(column)
    }
  }

  /**
   * sum of all generatedWidth fields
   * @return {number}
   */
  totalWidth () {
    return this.list.length
      ? this.list.map(col => col.generatedWidth).reduce((a, b) => a + b)
      : 0
  }

  totalFixedWidth () {
    return this.getFixed()
      .map(col => col.generatedWidth)
      .reduce((a, b) => a + b, 0)
  }

  get (columnName) {
    return this.list.find(column => column.name === columnName)
  }

  getResizable () {
    return this.list.filter(column => column.isResizable())
  }

  getFixed () {
    return this.list.filter(column => column.isFixed())
  }

  add (column) {
    const col = column instanceof lib_column ? column : new lib_column(column)
    this.list.push(col)
    return col
  }

  get maxWidth () {
    _maxWidth.get(this)
  }

  set maxWidth (val) {
    _maxWidth.set(this, val)
  }

  /**
   * sets `generatedWidth` for each column
   * @chainable
   */
  autoSize () {
    const maxWidth = _maxWidth.get(this)

    /* size */
    for (const column of this.list) {
      column.generateWidth()
      column.generateMinWidth()
    }

    /* adjust if user set a min or maxWidth */
    for (const column of this.list) {
      if (typical.isDefined(column.maxWidth) && column.generatedWidth > column.maxWidth) {
        column.generatedWidth = column.maxWidth
      }

      if (typical.isDefined(column.minWidth) && column.generatedWidth < column.minWidth) {
        column.generatedWidth = column.minWidth
      }
    }

    const width = {
      total: this.totalWidth(),
      view: maxWidth,
      diff: this.totalWidth() - maxWidth,
      totalFixed: this.totalFixedWidth(),
      totalResizable: Math.max(maxWidth - this.totalFixedWidth(), 0)
    }

    /* adjust if short of space */
    if (width.diff > 0) {
      /* share the available space between resizeable columns */
      const resizableColumns = this.getResizable()
      for (const column of resizableColumns) {
        column.generatedWidth = Math.floor(width.totalResizable / resizableColumns.length)
      }

      /* at this point, the generatedWidth should never end up bigger than the contentWidth */
      const grownColumns = this.list.filter(column => column.generatedWidth > column.contentWidth)
      const shrunkenColumns = this.list.filter(column => column.generatedWidth < column.contentWidth)
      let salvagedSpace = 0
      for (const column of grownColumns) {
        const currentGeneratedWidth = column.generatedWidth
        column.generateWidth()
        salvagedSpace += currentGeneratedWidth - column.generatedWidth
      }
      for (const column of shrunkenColumns) {
        column.generatedWidth += Math.floor(salvagedSpace / shrunkenColumns.length)
      }

    /* if, after autosizing, we still don't fit within maxWidth then give up */
    }

    return this
  }

  /**
   * Factory method returning all distinct columns from input
   * @param  {object[]} - input recordset
   * @return {module:columns}
   */
  static getColumns (rows) {
    const columns = new Columns()
    for (const row of node_modules_array_back(rows)) {
      for (const columnName in row) {
        let column = columns.get(columnName)
        if (!column) {
          /* The default column if not specified */
          column = columns.add({ name: columnName, contentWidth: 0, minContentWidth: 0 })
        }
      }
    }
    return columns
  }
}

/* harmony default export */ const columns = (Columns);

;// CONCATENATED MODULE: ../node_modules/wordwrapjs/index.js
/**
 * @module wordwrapjs
 */

/**
 * Wordwrap options.
 * @typedef {Object} WordwrapOptions
 * @property {number} [width=30] - The max column width in characters.
 * @property {boolean} [break=false] - If true, words exceeding the specified `width` will be forcefully broken
 * @property {boolean} [noTrim=false] - By default, each line output is trimmed. If `noTrim` is set, no line-trimming occurs - all whitespace from the input text is left in.
 * @property {string} [eol='\n'] - The end of line character to use. Defaults to `\n`.
 */

const re = {
  chunk: /[^\s-]+?-\b|\S+|\s+|\r\n?|\n/g,
  ansiEscapeSequence: /\u001b.*?m/g
}

/**
 * @alias module:wordwrapjs
 * @typicalname wordwrap
 */
class Wordwrap {
  /**
   * @param {string} text - The input text to wrap.
   * @param {module:wordwrapjs~WordwrapOptions} [options]
   */
  constructor (text = '', options = {}) {
    this._lines = String(text).split(/\r\n|\n/g)
    this.options = {
      eol: '\n',
      width: 30,
      ...options
    }
  }

  lines () {
    /* trim each line of the supplied text */
    return this._lines.map(trimLine, this)

      /* split each line into an array of chunks, else mark it empty */
      .map(line => line.match(re.chunk) || ['~~empty~~'])

      /* optionally, break each word on the line into pieces */
      .map(lineWords => this.options.break
        ? lineWords.map(breakWord, this)
        : lineWords
      )
      .map(lineWords => lineWords.flat())

      /* transforming the line of words to one or more new lines wrapped to size */
      .map(lineWords => {
        return lineWords
          .reduce((lines, word) => {
            const currentLine = lines[lines.length - 1]
            if (replaceAnsi(word).length + replaceAnsi(currentLine).length > this.options.width) {
              lines.push(word)
            } else {
              lines[lines.length - 1] += word
            }
            return lines
          }, [''])
      })
      .flat()

      /* trim the wrapped lines */
      .map(trimLine, this)

      /* filter out empty lines */
      .filter(line => line.trim())

      /* restore the user's original empty lines */
      .map(line => line.replace('~~empty~~', ''))
  }

  wrap () {
    return this.lines().join(this.options.eol)
  }

  toString () {
    return this.wrap()
  }

  /**
   * @param {string} text - the input text to wrap
   * @param {module:wordwrapjs~WordwrapOptions} [options]
   */
  static wrap (text, options) {
    const block = new this(text, options)
    return block.wrap()
  }

  /**
   * Wraps the input text, returning an array of strings (lines).
   * @param {string} text - input text
   * @param {module:wordwrapjs~WordwrapOptions} [options]
   */
  static lines (text, options) {
    const block = new this(text, options)
    return block.lines()
  }

  /**
   * Returns true if the input text would be wrapped if passed into `.wrap()`.
   * @param {string} text - input text
   * @return {boolean}
   */
  static isWrappable (text = '') {
    const matches = String(text).match(re.chunk)
    return matches ? matches.length > 1 : false
  }

  /**
   * Splits the input text into an array of words and whitespace.
   * @param {string} text - input text
   * @returns {string[]}
   */
  static getChunks (text) {
    return text.match(re.chunk) || []
  }
}

function trimLine (line) {
  return this.options.noTrim ? line : line.trim()
}

function replaceAnsi (string) {
  return string.replace(re.ansiEscapeSequence, '')
}

/**
 * break a word into several pieces
 * @param {string} word
 * @private
 */
function breakWord (word) {
  if (replaceAnsi(word).length > this.options.width) {
    const letters = word.split('')
    let piece
    const pieces = []
    while ((piece = letters.splice(0, this.options.width)).length) {
      pieces.push(piece.join(''))
    }
    return pieces
  } else {
    return word
  }
}

/* harmony default export */ const wordwrapjs = (Wordwrap);

// EXTERNAL MODULE: ../node_modules/lodash.assignwith/index.js
var lodash_assignwith = __nccwpck_require__(7256);
;// CONCATENATED MODULE: ../node_modules/@75lb/deep-merge/node_modules/typical/index.js
/**
 * Isomorphic, functional type-checking for Javascript.
 * @module typical
 * @typicalname t
 * @example
 * import * as t from 'typical'
 * const allDefined = array.every(t.isDefined)
 */

/**
 * Returns true if input is a number (including infinity). It is a more reasonable alternative to `typeof n` which returns `number` for `NaN`.
 *
 * @param {*} n - The input to test
 * @returns {boolean} `true` if input is a number
 * @static
 * @example
 * > t.isNumber(0)
 * true
 * > t.isNumber(1)
 * true
 * > t.isNumber(1.1)
 * true
 * > t.isNumber(0xff)
 * true
 * > t.isNumber(0644)
 * true
 * > t.isNumber(6.2e5)
 * true
 * > t.isNumber(NaN)
 * false
 * > t.isNumber(Infinity)
 * true
 */
function typical_isNumber (n) {
  return !isNaN(parseFloat(n))
}

/**
 * Returns true if input is a finite number. Identical to `isNumber` beside excluding infinity.
 *
 * @param {*} n - The input to test
 * @returns {boolean}
 * @static
 * @example
 * > t.isFiniteNumber(0)
 * true
 * > t.isFiniteNumber(1)
 * true
 * > t.isFiniteNumber(1.1)
 * true
 * > t.isFiniteNumber(0xff)
 * true
 * > t.isFiniteNumber(0644)
 * true
 * > t.isFiniteNumber(6.2e5)
 * true
 * > t.isFiniteNumber(NaN)
 * false
 * > t.isFiniteNumber(Infinity)
 * false
 */
function typical_isFiniteNumber (n) {
  return !isNaN(parseFloat(n)) && isFinite(n)
}

/**
 * A plain object is a simple object literal, it is not an instance of a class. Returns true if the input `typeof` is `object` and directly decends from `Object`.
 *
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 * @example
 * > t.isPlainObject({ something: 'one' })
 * true
 * > t.isPlainObject(new Date())
 * false
 * > t.isPlainObject([ 0, 1 ])
 * false
 * > t.isPlainObject(/test/)
 * false
 * > t.isPlainObject(1)
 * false
 * > t.isPlainObject('one')
 * false
 * > t.isPlainObject(null)
 * false
 * > t.isPlainObject((function * () {})())
 * false
 * > t.isPlainObject(function * () {})
 * false
 */
function typical_isPlainObject (input) {
  return input !== null && typeof input === 'object' && input.constructor === Object
}

/**
 * An array-like value has all the properties of an array yet is not an array instance. An example is the `arguments` object. Returns `true`` if the input value is an object, not `null`` and has a `length` property set with a numeric value.
 *
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 * @example
 * function sum(x, y){
 *   console.log(t.isArrayLike(arguments))
 *   // prints `true`
 * }
 */
function node_modules_typical_isArrayLike (input) {
  return node_modules_typical_isObject(input) && typeof input.length === 'number'
}

/**
 * Returns true if the typeof input is `'object'` but not null.
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 */
function node_modules_typical_isObject (input) {
  return typeof input === 'object' && input !== null
}

/**
 * Returns true if the input value is defined.
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 */
function typical_isDefined (input) {
  return typeof input !== 'undefined'
}

/**
 * Returns true if the input value is undefined.
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 */
function typical_isUndefined (input) {
  return !typical_isDefined(input)
}

/**
 * Returns true if the input value is null.
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 */
function typical_isNull (input) {
  return input === null
}

/**
 * Returns true if the input value is not one of `undefined`, `null`, or `NaN`.
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 */
function typical_isDefinedValue (input) {
  return typical_isDefined(input) && !typical_isNull(input) && !Number.isNaN(input)
}

/**
 * Returns true if the input value is an ES2015 `class`.
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 */
function typical_isClass (input) {
  if (typeof input === 'function') {
    return /^class /.test(Function.prototype.toString.call(input))
  } else {
    return false
  }
}

/**
 * Returns true if the input is a string, number, symbol, boolean, null or undefined value.
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 */
function typical_isPrimitive (input) {
  if (input === null) return true
  switch (typeof input) {
    case 'string':
    case 'number':
    case 'symbol':
    case 'undefined':
    case 'boolean':
      return true
    default:
      return false
  }
}

/**
 * Returns true if the input is a Promise.
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 */
function typical_isPromise (input) {
  if (input) {
    const isPromise = typical_isDefined(Promise) && input instanceof Promise
    const isThenable = input.then && typeof input.then === 'function'
    return !!(isPromise || isThenable)
  } else {
    return false
  }
}

/**
 * Returns true if the input is an iterable (`Map`, `Set`, `Array`, Generator etc.).
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 * @example
 * > t.isIterable('string')
 * true
 * > t.isIterable(new Map())
 * true
 * > t.isIterable([])
 * true
 * > t.isIterable((function * () {})())
 * true
 * > t.isIterable(Promise.resolve())
 * false
 * > t.isIterable(Promise)
 * false
 * > t.isIterable(true)
 * false
 * > t.isIterable({})
 * false
 * > t.isIterable(0)
 * false
 * > t.isIterable(1.1)
 * false
 * > t.isIterable(NaN)
 * false
 * > t.isIterable(Infinity)
 * false
 * > t.isIterable(function () {})
 * false
 * > t.isIterable(Date)
 * false
 * > t.isIterable()
 * false
 * > t.isIterable({ then: function () {} })
 * false
 */
function typical_isIterable (input) {
  if (input === null || !typical_isDefined(input)) {
    return false
  } else {
    return (
      typeof input[Symbol.iterator] === 'function' ||
      typeof input[Symbol.asyncIterator] === 'function'
    )
  }
}

/**
 * Returns true if the input value is a string. The equivalent of `typeof input === 'string'` for use in funcitonal contexts.
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 */
function typical_isString (input) {
  return typeof input === 'string'
}

/**
 * Returns true if the input value is a function. The equivalent of `typeof input === 'function'` for use in funcitonal contexts.
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 */
function typical_isFunction (input) {
  return typeof input === 'function'
}

/* harmony default export */ const node_modules_typical = ({
  isNumber: typical_isNumber,
  isFiniteNumber: typical_isFiniteNumber,
  isPlainObject: typical_isPlainObject,
  isArrayLike: node_modules_typical_isArrayLike,
  isObject: node_modules_typical_isObject,
  isDefined: typical_isDefined,
  isUndefined: typical_isUndefined,
  isNull: typical_isNull,
  isDefinedValue: typical_isDefinedValue,
  isClass: typical_isClass,
  isPrimitive: typical_isPrimitive,
  isPromise: typical_isPromise,
  isIterable: typical_isIterable,
  isString: typical_isString,
  isFunction: typical_isFunction
});

;// CONCATENATED MODULE: ../node_modules/@75lb/deep-merge/index.js



function customiser (previousValue, newValue, key, object, source) {
  /* deep merge plain objects */
  if (typical_isPlainObject(previousValue) && typical_isPlainObject(newValue)) {
    return lodash_assignwith(previousValue, newValue, customiser)
    /* overwrite arrays if the new array has items */
  } else if (Array.isArray(previousValue) && Array.isArray(newValue) && newValue.length) {
    return newValue
    /* ignore incoming arrays if empty */
  } else if (Array.isArray(newValue) && !newValue.length) {
    return previousValue
  } else if (!typical_isDefined(previousValue) && Array.isArray(newValue)) {
    return newValue
  }
}

function deepMerge (...args) {
  return lodash_assignwith(...args, customiser)
}

/* harmony default export */ const deep_merge = (deepMerge);

;// CONCATENATED MODULE: ../node_modules/table-layout/lib/ansi.js
/**
 * @module ansi
 */

const ansiEscapeSequence = /\u001b.*?m/g

function remove (input) {
  return input.replace(ansiEscapeSequence, '')
}

function has (input) {
  return ansiEscapeSequence.test(input)
}



;// CONCATENATED MODULE: ../node_modules/table-layout/lib/util.js




/**
 * Array of arrays in.. Returns the length of the longest one
 * @returns {number}
 * @private
 */
function getLongestArray (arrays) {
  const lengths = arrays.map(array => array.length)
  return Math.max(...lengths)
}

function padCell (cellValue, padding, width) {
  const ansiLength = cellValue.length - remove(cellValue).length
  cellValue = cellValue || ''
  return (padding.left || '') +
  cellValue.padEnd(width - padding.length() + ansiLength) + (padding.right || '')
}

function getLongestWord (line) {
  const words = wordwrapjs.getChunks(line)
  return words.reduce((max, word) => Math.max(word.length, max), 0)
}

function removeEmptyColumns (data) {
  const distinctColumnNames = data.reduce((columnNames, row) => {
    for (const key of Object.keys(row)) {
      if (!columnNames.includes(key)) {
        columnNames.push(key)
      }
    }
    return columnNames
  }, [])

  const emptyColumns = distinctColumnNames.filter(columnName => {
    const hasValue = data.some(row => {
      const value = row[columnName]
      return (typical.isDefined(value) && typeof value !== 'string') || (typeof value === 'string' && /\S+/.test(value))
    })
    return !hasValue
  })

  return data.map(row => {
    for (const emptyCol of emptyColumns) {
      delete row[emptyCol]
    }
    return row
  })
}

;// CONCATENATED MODULE: ../node_modules/table-layout/index.js









/**
 * @module table-layout
 */

/**
 * Recordset data in (array of objects), text table out.
 * @alias module:table-layout
 */
class Table {
  /**
   * @param {object[]} - input data
   * @param [options] {object} - optional settings
   * @param [options.maxWidth] {number} - maximum width of layout
   * @param [options.noWrap] {boolean} - disable wrapping on all columns
   * @param [options.noTrim] {boolean} - disable line-trimming
   * @param [options.break] {boolean} - enable word-breaking on all columns
   * @param [options.columns] {module:table-layout~columnOption} - array of column-specific options
   * @param [options.ignoreEmptyColumns] {boolean} - If set, empty columns or columns containing only whitespace are not rendered.
   * @param [options.padding] {object} - Padding values to set on each column. Per-column overrides can be set in the `options.columns` array.
   * @param [options.padding.left] {string} - Defaults to a single space.
   * @param [options.padding.right] {string} - Defaults to a single space.
   * @param [options.eol] {string} - EOL character used. Defaults to `\n`.
   * @alias module:table-layout
   */
  constructor (data, options = {}) {
    const defaults = {
      padding: {
        left: ' ',
        right: ' '
      },
      maxWidth: 80,
      columns: [],
      eol: '\n'
    }
    this.options = deep_merge(defaults, options)
    this.rows = null
    this.columns = null
    this.load(data)
  }

  /**
  * Set the input data to display. Must be an array of objects.
  * @param data {object[]}
  */
  load (data) {
    const options = this.options

    /* remove empty columns */
    if (options.ignoreEmptyColumns) {
      data = removeEmptyColumns(data)
    }

    /* Create columns.. also removes ansi characters and measures column content width */
    this.columns = columns.getColumns(data)

    /* load default column properties from options */
    this.columns.maxWidth = options.maxWidth
    for (const column of this.columns.list) {
      column.padding = options.padding
      column.noWrap = options.noWrap
      column.break = options.break
      if (options.break) {
        /* Force column to be wrappable */
        column.contentWrappable = true
      }
    }

    /* load column properties from options.columns */
    for (const optionColumn of options.columns) {
      const column = this.columns.get(optionColumn.name)
      if (column) {
        if (optionColumn.padding) {
          column.padding.left = optionColumn.padding.left
          column.padding.right = optionColumn.padding.right
        }
        column.width = optionColumn.width
        column.maxWidth = optionColumn.maxWidth
        column.minWidth = optionColumn.minWidth
        column.noWrap = optionColumn.noWrap
        column.break = optionColumn.break

        if (optionColumn.break) {
          /* Force column to be wrappable */
          column.contentWrappable = true
        }

        column.get = optionColumn.get
      }
    }

    for (const row of node_modules_array_back(data)) {
      for (const columnName in row) {
        const column = this.columns.get(columnName)

        /* Remove ansi characters from cell value before calculating widths */
        const cell = new lib_cell(row[columnName], column)
        let cellValue = cell.value
        if (has(cellValue)) {
          cellValue = remove(cellValue)
        }

        /* Update column content width if this if this cell is wider */
        if (cellValue.length > column.contentWidth) {
          column.contentWidth = cellValue.length
        }

        /* Update column minContentWidth if this cell has a longer word */
        const longestWord = getLongestWord(cellValue)
        if (longestWord > column.minContentWidth) {
          column.minContentWidth = longestWord
        }
        if (!column.contentWrappable) {
          column.contentWrappable = wordwrapjs.isWrappable(cellValue)
        }
      }
    }

    this.columns.autoSize()
    this.rows = new rows(data, this.columns)
    return this
  }

  getWrapped () {
    this.columns.autoSize()
    return this.rows.list.map(row => {
      const line = []
      for (const [column, cell] of row.entries()) {
        if (column.noWrap) {
          line.push(cell.value.split(/\r\n?|\n/))
        } else {
          line.push(wordwrapjs.lines(cell.value, {
            width: column.wrappedContentWidth,
            break: column.break,
            noTrim: this.options.noTrim
          }))
        }
      }
      return line
    })
  }

  getLines () {
    const wrappedLines = this.getWrapped()
    const lines = []
    wrappedLines.forEach(wrapped => {
      const mostLines = getLongestArray(wrapped)
      for (let i = 0; i < mostLines; i++) {
        const line = []
        wrapped.forEach(cell => {
          line.push(cell[i] || '')
        })
        lines.push(line)
      }
    })
    return lines
  }

  /**
   * Identical to `.toString()` with the exception that the result will be an array of lines, rather than a single, multi-line string.
   * @returns {string[]}
   */
  renderLines () {
    const lines = this.getLines()
    return lines.map(line => {
      return line.reduce((prev, cell, index) => {
        const column = this.columns.list[index]
        return prev + padCell(cell, column.padding, column.generatedWidth)
      }, '')
    })
  }

  /**
   * Returns the input data as a text table.
   * @returns {string}
   */
  toString () {
    return this.renderLines().join(this.options.eol) + this.options.eol
  }
}

/**
 * @typedef module:table-layout~columnOption
 * @property name {string} - column name, must match a property name in the input
 * @property [width] {number} - A specific column width. Supply either this or a min and/or max width.
 * @property [minWidth] {number} - column min width
 * @property [maxWidth] {number} - column max width
 * @property [nowrap] {boolean} - disable wrapping for this column
 * @property [break] {boolean} - enable word-breaking for this columns
 * @property [padding] {object} - padding options
 * @property [padding.left] {string} - a string to pad the left of each cell (default: `' '`)
 * @property [padding.right] {string} - a string to pad the right of each cell (default: `' '`)
 * @property [get] {function(cell)} - A getter function to return the cell value, the function receives the existing cell value. Signature: `function (cellValue) { // return the desired cell value }`
 */
/* harmony default export */ const table_layout = (Table);

;// CONCATENATED MODULE: ../node_modules/command-line-usage/node_modules/typical/index.js
/**
 * Isomorphic, functional type-checking for Javascript.
 * @module typical
 * @typicalname t
 * @example
 * import * as t from 'typical'
 * const allDefined = array.every(t.isDefined)
 */

/**
 * Returns true if input is a number (including infinity). It is a more reasonable alternative to `typeof n` which returns `number` for `NaN`.
 *
 * @param {*} n - The input to test
 * @returns {boolean} `true` if input is a number
 * @static
 * @example
 * > t.isNumber(0)
 * true
 * > t.isNumber(1)
 * true
 * > t.isNumber(1.1)
 * true
 * > t.isNumber(0xff)
 * true
 * > t.isNumber(0644)
 * true
 * > t.isNumber(6.2e5)
 * true
 * > t.isNumber(NaN)
 * false
 * > t.isNumber(Infinity)
 * true
 */
function node_modules_typical_isNumber (n) {
  return !isNaN(parseFloat(n))
}

/**
 * Returns true if input is a finite number. Identical to `isNumber` beside excluding infinity.
 *
 * @param {*} n - The input to test
 * @returns {boolean}
 * @static
 * @example
 * > t.isFiniteNumber(0)
 * true
 * > t.isFiniteNumber(1)
 * true
 * > t.isFiniteNumber(1.1)
 * true
 * > t.isFiniteNumber(0xff)
 * true
 * > t.isFiniteNumber(0644)
 * true
 * > t.isFiniteNumber(6.2e5)
 * true
 * > t.isFiniteNumber(NaN)
 * false
 * > t.isFiniteNumber(Infinity)
 * false
 */
function node_modules_typical_isFiniteNumber (n) {
  return !isNaN(parseFloat(n)) && isFinite(n)
}

/**
 * A plain object is a simple object literal, it is not an instance of a class. Returns true if the input `typeof` is `object` and directly decends from `Object`.
 *
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 * @example
 * > t.isPlainObject({ something: 'one' })
 * true
 * > t.isPlainObject(new Date())
 * false
 * > t.isPlainObject([ 0, 1 ])
 * false
 * > t.isPlainObject(/test/)
 * false
 * > t.isPlainObject(1)
 * false
 * > t.isPlainObject('one')
 * false
 * > t.isPlainObject(null)
 * false
 * > t.isPlainObject((function * () {})())
 * false
 * > t.isPlainObject(function * () {})
 * false
 */
function node_modules_typical_isPlainObject (input) {
  return input !== null && typeof input === 'object' && input.constructor === Object
}

/**
 * An array-like value has all the properties of an array yet is not an array instance. An example is the `arguments` object. Returns `true`` if the input value is an object, not `null`` and has a `length` property set with a numeric value.
 *
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 * @example
 * function sum(x, y){
 *   console.log(t.isArrayLike(arguments))
 *   // prints `true`
 * }
 */
function command_line_usage_node_modules_typical_isArrayLike (input) {
  return command_line_usage_node_modules_typical_isObject(input) && typeof input.length === 'number'
}

/**
 * Returns true if the typeof input is `'object'` but not null.
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 */
function command_line_usage_node_modules_typical_isObject (input) {
  return typeof input === 'object' && input !== null
}

/**
 * Returns true if the input value is defined.
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 */
function node_modules_typical_isDefined (input) {
  return typeof input !== 'undefined'
}

/**
 * Returns true if the input value is undefined.
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 */
function node_modules_typical_isUndefined (input) {
  return !node_modules_typical_isDefined(input)
}

/**
 * Returns true if the input value is null.
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 */
function node_modules_typical_isNull (input) {
  return input === null
}

/**
 * Returns true if the input value is not one of `undefined`, `null`, or `NaN`.
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 */
function node_modules_typical_isDefinedValue (input) {
  return node_modules_typical_isDefined(input) && !node_modules_typical_isNull(input) && !Number.isNaN(input)
}

/**
 * Returns true if the input value is an ES2015 `class`.
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 */
function node_modules_typical_isClass (input) {
  if (typeof input === 'function') {
    return /^class /.test(Function.prototype.toString.call(input))
  } else {
    return false
  }
}

/**
 * Returns true if the input is a string, number, symbol, boolean, null or undefined value.
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 */
function node_modules_typical_isPrimitive (input) {
  if (input === null) return true
  switch (typeof input) {
    case 'string':
    case 'number':
    case 'symbol':
    case 'undefined':
    case 'boolean':
      return true
    default:
      return false
  }
}

/**
 * Returns true if the input is a Promise.
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 */
function node_modules_typical_isPromise (input) {
  if (input) {
    const isPromise = node_modules_typical_isDefined(Promise) && input instanceof Promise
    const isThenable = input.then && typeof input.then === 'function'
    return !!(isPromise || isThenable)
  } else {
    return false
  }
}

/**
 * Returns true if the input is an iterable (`Map`, `Set`, `Array`, Generator etc.).
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 * @example
 * > t.isIterable('string')
 * true
 * > t.isIterable(new Map())
 * true
 * > t.isIterable([])
 * true
 * > t.isIterable((function * () {})())
 * true
 * > t.isIterable(Promise.resolve())
 * false
 * > t.isIterable(Promise)
 * false
 * > t.isIterable(true)
 * false
 * > t.isIterable({})
 * false
 * > t.isIterable(0)
 * false
 * > t.isIterable(1.1)
 * false
 * > t.isIterable(NaN)
 * false
 * > t.isIterable(Infinity)
 * false
 * > t.isIterable(function () {})
 * false
 * > t.isIterable(Date)
 * false
 * > t.isIterable()
 * false
 * > t.isIterable({ then: function () {} })
 * false
 */
function node_modules_typical_isIterable (input) {
  if (input === null || !node_modules_typical_isDefined(input)) {
    return false
  } else {
    return (
      typeof input[Symbol.iterator] === 'function' ||
      typeof input[Symbol.asyncIterator] === 'function'
    )
  }
}

/**
 * Returns true if the input value is a string. The equivalent of `typeof input === 'string'` for use in funcitonal contexts.
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 */
function node_modules_typical_isString (input) {
  return typeof input === 'string'
}

/**
 * Returns true if the input value is a function. The equivalent of `typeof input === 'function'` for use in funcitonal contexts.
 * @param {*} input - The input to test
 * @returns {boolean}
 * @static
 */
function node_modules_typical_isFunction (input) {
  return typeof input === 'function'
}

/* harmony default export */ const command_line_usage_node_modules_typical = ({
  isNumber: node_modules_typical_isNumber,
  isFiniteNumber: node_modules_typical_isFiniteNumber,
  isPlainObject: node_modules_typical_isPlainObject,
  isArrayLike: command_line_usage_node_modules_typical_isArrayLike,
  isObject: command_line_usage_node_modules_typical_isObject,
  isDefined: node_modules_typical_isDefined,
  isUndefined: node_modules_typical_isUndefined,
  isNull: node_modules_typical_isNull,
  isDefinedValue: node_modules_typical_isDefinedValue,
  isClass: node_modules_typical_isClass,
  isPrimitive: node_modules_typical_isPrimitive,
  isPromise: node_modules_typical_isPromise,
  isIterable: node_modules_typical_isIterable,
  isString: node_modules_typical_isString,
  isFunction: node_modules_typical_isFunction
});

;// CONCATENATED MODULE: ../node_modules/command-line-usage/lib/section/option-list.js






class OptionList extends section {
  constructor (data) {
    super()
    let definitions = array_back(data.optionList)
    const hide = array_back(data.hide)
    const groups = array_back(data.group)

    /* filter out hidden definitions */
    if (hide.length) {
      definitions = definitions.filter(definition => {
        return hide.indexOf(definition.name) === -1
      })
    }

    if (data.header) this.header(data.header)

    if (groups.length) {
      definitions = definitions.filter(def => {
        const noGroupMatch = groups.indexOf('_none') > -1 && !command_line_usage_node_modules_typical.isDefined(def.group)
        const groupMatch = intersect(array_back(def.group), groups)
        return (noGroupMatch || groupMatch) ? def : undefined
      })
    }

    const rows = definitions.map(def => {
      return {
        option: getOptionNames(def, data.reverseNameOrder),
        description: chalk_format(def.description)
      }
    })

    const tableOptions = data.tableOptions || {
      padding: { left: '  ', right: ' ' },
      columns: [
        { name: 'option', noWrap: true },
        { name: 'description', maxWidth: 80 }
      ]
    }
    const table = new table_layout(rows, tableOptions)
    this.add(table.renderLines())

    this.add()
  }
}

function getOptionNames (definition, reverseNameOrder) {
  let type = definition.type ? definition.type.name.toLowerCase() : 'string'
  const multiple = (definition.multiple || definition.lazyMultiple) ? '[]' : ''
  if (type) {
    type = type === 'boolean' ? '' : `{underline ${type}${multiple}}`
  }
  type = chalk_format(definition.typeLabel || type)

  let result = ''
  if (definition.alias) {
    if (definition.name) {
      if (reverseNameOrder) {
        result = chalk_format(`{bold --${definition.name}}, {bold -${definition.alias}} ${type}`)
      } else {
        result = chalk_format(`{bold -${definition.alias}}, {bold --${definition.name}} ${type}`)
      }
    } else {
      if (reverseNameOrder) {
        result = chalk_format(`{bold -${definition.alias}} ${type}`)
      } else {
        result = chalk_format(`{bold -${definition.alias}} ${type}`)
      }
    }
  } else {
    result = chalk_format(`{bold --${definition.name}} ${type}`)
  }
  return result
}

function intersect (arr1, arr2) {
  return arr1.some(function (item1) {
    return arr2.some(function (item2) {
      return item1 === item2
    })
  })
}

/* harmony default export */ const option_list = (OptionList);

/**
 * An OptionList section adds a table displaying the supplied option definitions.
 * @typedef module:command-line-usage~optionList
 * @property {string} [header] - The section header, always bold and underlined.
 * @property optionList {OptionDefinition[]} - An array of [option definition](https://github.com/75lb/command-line-args/blob/master/doc/option-definition.md) objects. In addition to the regular definition properties, command-line-usage will look for:
 *
 * - `description` - a string describing the option.
 * - `typeLabel` - a string to replace the default type string (e.g. `<string>`). It's often more useful to set a more descriptive type label, like `<ms>`, `<files>`, `<command>` etc.
 * @property {string|string[]} [group] - If specified, only options from this particular group will be printed. [Example](https://github.com/75lb/command-line-usage/blob/master/example/groups.js).
 * @property {string|string[]} [hide] - The names of one of more option definitions to hide from the option list. [Example](https://github.com/75lb/command-line-usage/blob/master/example/hide.js).
 * @property {boolean} [reverseNameOrder] - If true, the option alias will be displayed after the name, i.e. `--verbose, -v` instead of `-v, --verbose`).
 * @property {object} [tableOptions] - An options object suitable for passing into [table-layout](https://github.com/75lb/table-layout#table-). See [here for an example](https://github.com/75lb/command-line-usage/blob/master/example/option-list-options.js).
 *
 * @example
 * {
 *   header: 'Options',
 *   optionList: [
 *     {
 *       name: 'help',
 *       alias: 'h',
 *       description: 'Display this usage guide.'
 *     },
 *     {
 *       name: 'src',
 *       description: 'The input files to process',
 *       multiple: true,
 *       defaultOption: true,
 *       typeLabel: '{underline file} ...'
 *     },
 *     {
 *       name: 'timeout',
 *       description: 'Timeout value in ms.',
 *       alias: 't',
 *       typeLabel: '{underline ms}'
 *     }
 *   ]
 * }
 */

;// CONCATENATED MODULE: ../node_modules/command-line-usage/lib/section/content.js






class ContentSection extends section {
  constructor (section) {
    super()
    this.header(section.header)

    if (section.content) {
      /* add content without indentation or wrapping */
      if (section.raw) {
        const content = array_back(section.content).map(line => chalk_format(line))
        this.add(content)
      } else {
        this.add(getContentLines(section.content))
      }

      this.add()
    }
  }
}

function getContentLines (content) {
  const defaultPadding = { left: '  ', right: ' ' }

  if (content) {
    /* string content */
    if (command_line_usage_node_modules_typical.isString(content)) {
      const table = new table_layout({ column: chalk_format(content) }, {
        padding: defaultPadding,
        maxWidth: 80
      })
      return table.renderLines()

    /* array of strings */
    } else if (Array.isArray(content) && content.every(command_line_usage_node_modules_typical.isString)) {
      const rows = content.map(string => ({ column: chalk_format(string) }))
      const table = new table_layout(rows, {
        padding: defaultPadding,
        maxWidth: 80
      })
      return table.renderLines()

    /* array of objects (use table-layout) */
    } else if (Array.isArray(content) && content.every(command_line_usage_node_modules_typical.isPlainObject)) {
      const table = new table_layout(content.map(row => ansiFormatRow(row)), {
        padding: defaultPadding
      })
      return table.renderLines()

    /* { options: object, data: object[] } */
    } else if (command_line_usage_node_modules_typical.isPlainObject(content)) {
      if (!content.options || !content.data) {
        throw new Error('must have an "options" or "data" property\n' + JSON.stringify(content))
      }
      const options = Object.assign(
        { padding: defaultPadding },
        content.options
      )

      /* convert nowrap to noWrap to avoid breaking compatibility */
      if (options.columns) {
        options.columns = options.columns.map(column => {
          if (column.nowrap) {
            column.noWrap = column.nowrap
            delete column.nowrap
          }
          return column
        })
      }

      const table = new table_layout(
        content.data.map(row => ansiFormatRow(row)),
        options
      )
      return table.renderLines()
    } else {
      const message = `invalid input - 'content' must be a string, array of strings, or array of plain objects:\n\n${JSON.stringify(content)}`
      throw new Error(message)
    }
  }
}

function ansiFormatRow (row) {
  for (const key in row) {
    row[key] = chalk_format(row[key])
  }
  return row
}

/* harmony default export */ const content = (ContentSection);

/**
 * A Content section comprises a header and one or more lines of content.
 * @typedef module:command-line-usage~content
 * @property header {string} - The section header, always bold and underlined.
 * @property content {string|string[]|object[]} - Overloaded property, accepting data in one of four formats:
 *
 * 1. A single string (one line of text)
 * 2. An array of strings (multiple lines of text)
 * 3. An array of objects (recordset-style data). In this case, the data will be rendered in table format. The property names of each object are not important, so long as they are consistent throughout the array.
 * 4. An object with two properties - `data` and `options`. In this case, the data and options will be passed directly to the underlying [table layout](https://github.com/75lb/table-layout) module for rendering.
 *
 * @property raw {boolean} - Set to true to avoid indentation and wrapping. Useful for banners.
 * @example
 * Simple string of content. For ansi formatting, use [chalk template literal syntax](https://github.com/chalk/chalk#tagged-template-literal).
 * ```js
 * {
 *   header: 'A typical app',
 *   content: 'Generates something {rgb(255,200,0).italic very {underline.bgRed important}}.'
 * }
 * ```
 *
 * An array of strings is interpreted as lines, to be joined by the system newline character.
 * ```js
 * {
 *   header: 'A typical app',
 *   content: [
 *     'First line.',
 *     'Second line.'
 *   ]
 * }
 * ```
 *
 * An array of recordset-style objects are rendered in table layout.
 * ```js
 * {
 *   header: 'A typical app',
 *   content: [
 *     { colA: 'First row, first column.', colB: 'First row, second column.'},
 *     { colA: 'Second row, first column.', colB: 'Second row, second column.'}
 *   ]
 * }
 * ```
 *
 * An object with `data` and `options` properties will be passed directly to the underlying [table layout](https://github.com/75lb/table-layout) module for rendering.
 * ```js
 * {
 *   header: 'A typical app',
 *   content: {
 *     data: [
 *      { colA: 'First row, first column.', colB: 'First row, second column.'},
 *      { colA: 'Second row, first column.', colB: 'Second row, second column.'}
 *     ],
 *     options: {
 *       maxWidth: 60
 *     }
 *   }
 * }
 * ```
 */

;// CONCATENATED MODULE: ../node_modules/command-line-usage/index.js




/**
 * @module command-line-usage
 */

/**
 * Generates a usage guide suitable for a command-line app.
 * @param {Section|Section[]} - One or more section objects ({@link module:command-line-usage~content} or {@link module:command-line-usage~optionList}).
 * @returns {string}
 * @alias module:command-line-usage
 */
function commandLineUsage (sections) {
  sections = array_back(sections)
  if (sections.length) {
    const output = sections.map(section => {
      if (section.optionList) {
        return new option_list(section)
      } else {
        return new content(section)
      }
    })
    return '\n' + output.join('\n')
  } else {
    return ''
  }
}

/* harmony default export */ const command_line_usage = (commandLineUsage);

;// CONCATENATED MODULE: ../node_modules/chalk/source/vendor/ansi-styles/index.js
const ANSI_BACKGROUND_OFFSET = 10;

const wrapAnsi16 = (offset = 0) => code => `\u001B[${code + offset}m`;

const wrapAnsi256 = (offset = 0) => code => `\u001B[${38 + offset};5;${code}m`;

const wrapAnsi16m = (offset = 0) => (red, green, blue) => `\u001B[${38 + offset};2;${red};${green};${blue}m`;

const styles = {
	modifier: {
		reset: [0, 0],
		// 21 isn't widely supported and 22 does the same thing
		bold: [1, 22],
		dim: [2, 22],
		italic: [3, 23],
		underline: [4, 24],
		overline: [53, 55],
		inverse: [7, 27],
		hidden: [8, 28],
		strikethrough: [9, 29],
	},
	color: {
		black: [30, 39],
		red: [31, 39],
		green: [32, 39],
		yellow: [33, 39],
		blue: [34, 39],
		magenta: [35, 39],
		cyan: [36, 39],
		white: [37, 39],

		// Bright color
		blackBright: [90, 39],
		gray: [90, 39], // Alias of `blackBright`
		grey: [90, 39], // Alias of `blackBright`
		redBright: [91, 39],
		greenBright: [92, 39],
		yellowBright: [93, 39],
		blueBright: [94, 39],
		magentaBright: [95, 39],
		cyanBright: [96, 39],
		whiteBright: [97, 39],
	},
	bgColor: {
		bgBlack: [40, 49],
		bgRed: [41, 49],
		bgGreen: [42, 49],
		bgYellow: [43, 49],
		bgBlue: [44, 49],
		bgMagenta: [45, 49],
		bgCyan: [46, 49],
		bgWhite: [47, 49],

		// Bright color
		bgBlackBright: [100, 49],
		bgGray: [100, 49], // Alias of `bgBlackBright`
		bgGrey: [100, 49], // Alias of `bgBlackBright`
		bgRedBright: [101, 49],
		bgGreenBright: [102, 49],
		bgYellowBright: [103, 49],
		bgBlueBright: [104, 49],
		bgMagentaBright: [105, 49],
		bgCyanBright: [106, 49],
		bgWhiteBright: [107, 49],
	},
};

const modifierNames = Object.keys(styles.modifier);
const foregroundColorNames = Object.keys(styles.color);
const backgroundColorNames = Object.keys(styles.bgColor);
const colorNames = [...foregroundColorNames, ...backgroundColorNames];

function assembleStyles() {
	const codes = new Map();

	for (const [groupName, group] of Object.entries(styles)) {
		for (const [styleName, style] of Object.entries(group)) {
			styles[styleName] = {
				open: `\u001B[${style[0]}m`,
				close: `\u001B[${style[1]}m`,
			};

			group[styleName] = styles[styleName];

			codes.set(style[0], style[1]);
		}

		Object.defineProperty(styles, groupName, {
			value: group,
			enumerable: false,
		});
	}

	Object.defineProperty(styles, 'codes', {
		value: codes,
		enumerable: false,
	});

	styles.color.close = '\u001B[39m';
	styles.bgColor.close = '\u001B[49m';

	styles.color.ansi = wrapAnsi16();
	styles.color.ansi256 = wrapAnsi256();
	styles.color.ansi16m = wrapAnsi16m();
	styles.bgColor.ansi = wrapAnsi16(ANSI_BACKGROUND_OFFSET);
	styles.bgColor.ansi256 = wrapAnsi256(ANSI_BACKGROUND_OFFSET);
	styles.bgColor.ansi16m = wrapAnsi16m(ANSI_BACKGROUND_OFFSET);

	// From https://github.com/Qix-/color-convert/blob/3f0e0d4e92e235796ccb17f6e85c72094a651f49/conversions.js
	Object.defineProperties(styles, {
		rgbToAnsi256: {
			value(red, green, blue) {
				// We use the extended greyscale palette here, with the exception of
				// black and white. normal palette only has 4 greyscale shades.
				if (red === green && green === blue) {
					if (red < 8) {
						return 16;
					}

					if (red > 248) {
						return 231;
					}

					return Math.round(((red - 8) / 247) * 24) + 232;
				}

				return 16
					+ (36 * Math.round(red / 255 * 5))
					+ (6 * Math.round(green / 255 * 5))
					+ Math.round(blue / 255 * 5);
			},
			enumerable: false,
		},
		hexToRgb: {
			value(hex) {
				const matches = /[a-f\d]{6}|[a-f\d]{3}/i.exec(hex.toString(16));
				if (!matches) {
					return [0, 0, 0];
				}

				let [colorString] = matches;

				if (colorString.length === 3) {
					colorString = [...colorString].map(character => character + character).join('');
				}

				const integer = Number.parseInt(colorString, 16);

				return [
					/* eslint-disable no-bitwise */
					(integer >> 16) & 0xFF,
					(integer >> 8) & 0xFF,
					integer & 0xFF,
					/* eslint-enable no-bitwise */
				];
			},
			enumerable: false,
		},
		hexToAnsi256: {
			value: hex => styles.rgbToAnsi256(...styles.hexToRgb(hex)),
			enumerable: false,
		},
		ansi256ToAnsi: {
			value(code) {
				if (code < 8) {
					return 30 + code;
				}

				if (code < 16) {
					return 90 + (code - 8);
				}

				let red;
				let green;
				let blue;

				if (code >= 232) {
					red = (((code - 232) * 10) + 8) / 255;
					green = red;
					blue = red;
				} else {
					code -= 16;

					const remainder = code % 36;

					red = Math.floor(code / 36) / 5;
					green = Math.floor(remainder / 6) / 5;
					blue = (remainder % 6) / 5;
				}

				const value = Math.max(red, green, blue) * 2;

				if (value === 0) {
					return 30;
				}

				// eslint-disable-next-line no-bitwise
				let result = 30 + ((Math.round(blue) << 2) | (Math.round(green) << 1) | Math.round(red));

				if (value === 2) {
					result += 60;
				}

				return result;
			},
			enumerable: false,
		},
		rgbToAnsi: {
			value: (red, green, blue) => styles.ansi256ToAnsi(styles.rgbToAnsi256(red, green, blue)),
			enumerable: false,
		},
		hexToAnsi: {
			value: hex => styles.ansi256ToAnsi(styles.hexToAnsi256(hex)),
			enumerable: false,
		},
	});

	return styles;
}

const ansiStyles = assembleStyles();

/* harmony default export */ const ansi_styles = (ansiStyles);

// EXTERNAL MODULE: external "node:process"
var external_node_process_ = __nccwpck_require__(7742);
// EXTERNAL MODULE: external "node:os"
var external_node_os_ = __nccwpck_require__(612);
;// CONCATENATED MODULE: external "node:tty"
const external_node_tty_namespaceObject = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:tty");
;// CONCATENATED MODULE: ../node_modules/chalk/source/vendor/supports-color/index.js




// From: https://github.com/sindresorhus/has-flag/blob/main/index.js
/// function hasFlag(flag, argv = globalThis.Deno?.args ?? process.argv) {
function hasFlag(flag, argv = globalThis.Deno ? globalThis.Deno.args : external_node_process_.argv) {
	const prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');
	const position = argv.indexOf(prefix + flag);
	const terminatorPosition = argv.indexOf('--');
	return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
}

const {env} = external_node_process_;

let flagForceColor;
if (
	hasFlag('no-color')
	|| hasFlag('no-colors')
	|| hasFlag('color=false')
	|| hasFlag('color=never')
) {
	flagForceColor = 0;
} else if (
	hasFlag('color')
	|| hasFlag('colors')
	|| hasFlag('color=true')
	|| hasFlag('color=always')
) {
	flagForceColor = 1;
}

function envForceColor() {
	if ('FORCE_COLOR' in env) {
		if (env.FORCE_COLOR === 'true') {
			return 1;
		}

		if (env.FORCE_COLOR === 'false') {
			return 0;
		}

		return env.FORCE_COLOR.length === 0 ? 1 : Math.min(Number.parseInt(env.FORCE_COLOR, 10), 3);
	}
}

function translateLevel(level) {
	if (level === 0) {
		return false;
	}

	return {
		level,
		hasBasic: true,
		has256: level >= 2,
		has16m: level >= 3,
	};
}

function _supportsColor(haveStream, {streamIsTTY, sniffFlags = true} = {}) {
	const noFlagForceColor = envForceColor();
	if (noFlagForceColor !== undefined) {
		flagForceColor = noFlagForceColor;
	}

	const forceColor = sniffFlags ? flagForceColor : noFlagForceColor;

	if (forceColor === 0) {
		return 0;
	}

	if (sniffFlags) {
		if (hasFlag('color=16m')
			|| hasFlag('color=full')
			|| hasFlag('color=truecolor')) {
			return 3;
		}

		if (hasFlag('color=256')) {
			return 2;
		}
	}

	// Check for Azure DevOps pipelines.
	// Has to be above the `!streamIsTTY` check.
	if ('TF_BUILD' in env && 'AGENT_NAME' in env) {
		return 1;
	}

	if (haveStream && !streamIsTTY && forceColor === undefined) {
		return 0;
	}

	const min = forceColor || 0;

	if (env.TERM === 'dumb') {
		return min;
	}

	if (external_node_process_.platform === 'win32') {
		// Windows 10 build 10586 is the first Windows release that supports 256 colors.
		// Windows 10 build 14931 is the first release that supports 16m/TrueColor.
		const osRelease = external_node_os_.release().split('.');
		if (
			Number(osRelease[0]) >= 10
			&& Number(osRelease[2]) >= 10_586
		) {
			return Number(osRelease[2]) >= 14_931 ? 3 : 2;
		}

		return 1;
	}

	if ('CI' in env) {
		if ('GITHUB_ACTIONS' in env || 'GITEA_ACTIONS' in env) {
			return 3;
		}

		if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'BUILDKITE', 'DRONE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {
			return 1;
		}

		return min;
	}

	if ('TEAMCITY_VERSION' in env) {
		return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
	}

	if (env.COLORTERM === 'truecolor') {
		return 3;
	}

	if (env.TERM === 'xterm-kitty') {
		return 3;
	}

	if ('TERM_PROGRAM' in env) {
		const version = Number.parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

		switch (env.TERM_PROGRAM) {
			case 'iTerm.app': {
				return version >= 3 ? 3 : 2;
			}

			case 'Apple_Terminal': {
				return 2;
			}
			// No default
		}
	}

	if (/-256(color)?$/i.test(env.TERM)) {
		return 2;
	}

	if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
		return 1;
	}

	if ('COLORTERM' in env) {
		return 1;
	}

	return min;
}

function createSupportsColor(stream, options = {}) {
	const level = _supportsColor(stream, {
		streamIsTTY: stream && stream.isTTY,
		...options,
	});

	return translateLevel(level);
}

const supportsColor = {
	stdout: createSupportsColor({isTTY: external_node_tty_namespaceObject.isatty(1)}),
	stderr: createSupportsColor({isTTY: external_node_tty_namespaceObject.isatty(2)}),
};

/* harmony default export */ const supports_color = (supportsColor);

;// CONCATENATED MODULE: ../node_modules/chalk/source/utilities.js
// TODO: When targeting Node.js 16, use `String.prototype.replaceAll`.
function stringReplaceAll(string, substring, replacer) {
	let index = string.indexOf(substring);
	if (index === -1) {
		return string;
	}

	const substringLength = substring.length;
	let endIndex = 0;
	let returnValue = '';
	do {
		returnValue += string.slice(endIndex, index) + substring + replacer;
		endIndex = index + substringLength;
		index = string.indexOf(substring, endIndex);
	} while (index !== -1);

	returnValue += string.slice(endIndex);
	return returnValue;
}

function stringEncaseCRLFWithFirstIndex(string, prefix, postfix, index) {
	let endIndex = 0;
	let returnValue = '';
	do {
		const gotCR = string[index - 1] === '\r';
		returnValue += string.slice(endIndex, (gotCR ? index - 1 : index)) + prefix + (gotCR ? '\r\n' : '\n') + postfix;
		endIndex = index + 1;
		index = string.indexOf('\n', endIndex);
	} while (index !== -1);

	returnValue += string.slice(endIndex);
	return returnValue;
}

;// CONCATENATED MODULE: ../node_modules/chalk/source/index.js




const {stdout: stdoutColor, stderr: stderrColor} = supports_color;

const GENERATOR = Symbol('GENERATOR');
const STYLER = Symbol('STYLER');
const IS_EMPTY = Symbol('IS_EMPTY');

// `supportsColor.level` → `ansiStyles.color[name]` mapping
const levelMapping = [
	'ansi',
	'ansi',
	'ansi256',
	'ansi16m',
];

const source_styles = Object.create(null);

const applyOptions = (object, options = {}) => {
	if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {
		throw new Error('The `level` option should be an integer from 0 to 3');
	}

	// Detect level if not set manually
	const colorLevel = stdoutColor ? stdoutColor.level : 0;
	object.level = options.level === undefined ? colorLevel : options.level;
};

class Chalk {
	constructor(options) {
		// eslint-disable-next-line no-constructor-return
		return chalkFactory(options);
	}
}

const chalkFactory = options => {
	const chalk = (...strings) => strings.join(' ');
	applyOptions(chalk, options);

	Object.setPrototypeOf(chalk, createChalk.prototype);

	return chalk;
};

function createChalk(options) {
	return chalkFactory(options);
}

Object.setPrototypeOf(createChalk.prototype, Function.prototype);

for (const [styleName, style] of Object.entries(ansi_styles)) {
	source_styles[styleName] = {
		get() {
			const builder = createBuilder(this, createStyler(style.open, style.close, this[STYLER]), this[IS_EMPTY]);
			Object.defineProperty(this, styleName, {value: builder});
			return builder;
		},
	};
}

source_styles.visible = {
	get() {
		const builder = createBuilder(this, this[STYLER], true);
		Object.defineProperty(this, 'visible', {value: builder});
		return builder;
	},
};

const getModelAnsi = (model, level, type, ...arguments_) => {
	if (model === 'rgb') {
		if (level === 'ansi16m') {
			return ansi_styles[type].ansi16m(...arguments_);
		}

		if (level === 'ansi256') {
			return ansi_styles[type].ansi256(ansi_styles.rgbToAnsi256(...arguments_));
		}

		return ansi_styles[type].ansi(ansi_styles.rgbToAnsi(...arguments_));
	}

	if (model === 'hex') {
		return getModelAnsi('rgb', level, type, ...ansi_styles.hexToRgb(...arguments_));
	}

	return ansi_styles[type][model](...arguments_);
};

const usedModels = ['rgb', 'hex', 'ansi256'];

for (const model of usedModels) {
	source_styles[model] = {
		get() {
			const {level} = this;
			return function (...arguments_) {
				const styler = createStyler(getModelAnsi(model, levelMapping[level], 'color', ...arguments_), ansi_styles.color.close, this[STYLER]);
				return createBuilder(this, styler, this[IS_EMPTY]);
			};
		},
	};

	const bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);
	source_styles[bgModel] = {
		get() {
			const {level} = this;
			return function (...arguments_) {
				const styler = createStyler(getModelAnsi(model, levelMapping[level], 'bgColor', ...arguments_), ansi_styles.bgColor.close, this[STYLER]);
				return createBuilder(this, styler, this[IS_EMPTY]);
			};
		},
	};
}

const proto = Object.defineProperties(() => {}, {
	...source_styles,
	level: {
		enumerable: true,
		get() {
			return this[GENERATOR].level;
		},
		set(level) {
			this[GENERATOR].level = level;
		},
	},
});

const createStyler = (open, close, parent) => {
	let openAll;
	let closeAll;
	if (parent === undefined) {
		openAll = open;
		closeAll = close;
	} else {
		openAll = parent.openAll + open;
		closeAll = close + parent.closeAll;
	}

	return {
		open,
		close,
		openAll,
		closeAll,
		parent,
	};
};

const createBuilder = (self, _styler, _isEmpty) => {
	// Single argument is hot path, implicit coercion is faster than anything
	// eslint-disable-next-line no-implicit-coercion
	const builder = (...arguments_) => applyStyle(builder, (arguments_.length === 1) ? ('' + arguments_[0]) : arguments_.join(' '));

	// We alter the prototype because we must return a function, but there is
	// no way to create a function with a different prototype
	Object.setPrototypeOf(builder, proto);

	builder[GENERATOR] = self;
	builder[STYLER] = _styler;
	builder[IS_EMPTY] = _isEmpty;

	return builder;
};

const applyStyle = (self, string) => {
	if (self.level <= 0 || !string) {
		return self[IS_EMPTY] ? '' : string;
	}

	let styler = self[STYLER];

	if (styler === undefined) {
		return string;
	}

	const {openAll, closeAll} = styler;
	if (string.includes('\u001B')) {
		while (styler !== undefined) {
			// Replace any instances already present with a re-opening code
			// otherwise only the part of the string until said closing code
			// will be colored, and the rest will simply be 'plain'.
			string = stringReplaceAll(string, styler.close, styler.open);

			styler = styler.parent;
		}
	}

	// We can move both next actions out of loop, because remaining actions in loop won't have
	// any/visible effect on parts we add here. Close the styling before a linebreak and reopen
	// after next line to fix a bleed issue on macOS: https://github.com/chalk/chalk/pull/92
	const lfIndex = string.indexOf('\n');
	if (lfIndex !== -1) {
		string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
	}

	return openAll + string + closeAll;
};

Object.defineProperties(createChalk.prototype, source_styles);

const chalk = createChalk();
const chalkStderr = createChalk({level: stderrColor ? stderrColor.level : 0});





/* harmony default export */ const chalk_source = (chalk);

// EXTERNAL MODULE: ./src/command.ts + 36 modules
var command = __nccwpck_require__(5065);
// EXTERNAL MODULE: ./src/commands/show.ts + 4 modules
var show = __nccwpck_require__(6264);
;// CONCATENATED MODULE: ./src/print.ts




function pink(text) {
    return chalk_source.bold.hex('#e75480')(text);
}
function blue(text) {
    return chalk_source.bold.cyanBright(text);
}
function yellow(text) {
    return chalk_source.bold.yellowBright(text);
}
function green(text) {
    return chalk_source.bold.greenBright(text);
}
function purple(text) {
    return chalk_source.bold.magentaBright(text);
}
function commandUsage(name, command) {
    const sections = [
        {
            content: `${pink('neon ' + name)} - ${command.summary()}`,
            raw: true
        },
        {
            header: blue('Usage:'),
            content: `${blue('$')} ${command.syntax()}`
        },
        {
            header: yellow('Options:'),
            content: command.options()
        }
    ];
    const seeAlso = command.seeAlso();
    if (seeAlso) {
        sections.push({ header: green('See Also:'), content: seeAlso });
    }
    const extraSection = command.extraSection();
    if (extraSection) {
        sections.push({ header: purple(extraSection.title + ':'), content: extraSection.details });
    }
    return command_line_usage(sections).trimStart();
}
function mainUsage() {
    const sections = [
        {
            content: `${pink('neon')} - manage and distribute Neon projects`,
            raw: true
        },
        {
            header: blue('Usage:'),
            content: `${blue('$')} neon <command> <options>`
        },
        {
            header: yellow('Commands:'),
            content: (0,command/* summaries */.Jc)()
        }
    ];
    return command_line_usage(sections).trim();
}
function printShowTopicUsage(topic) {
    console.error(commandUsage("show " + topic, (0,show/* subcommandFor */.D8)(topic)));
}
function printCommandUsage(name) {
    console.error(commandUsage(name, (0,command/* commandFor */.Nl)(name)));
}
function printMainUsage() {
    console.error(mainUsage());
    console.error();
    console.error("See 'neon help <command>' for more information on a specific command.");
}
function printErrorWithUsage(e) {
    console.error(mainUsage());
    console.error();
    printError(e);
}
function printError(e) {
    console.error(chalk_source.bold.red("error:") + " " + ((e instanceof Error) ? e.message : String(e)));
}


/***/ }),

/***/ 545:
/***/ ((__unused_webpack_module, __webpack_exports__, __nccwpck_require__) => {


// EXPORTS
__nccwpck_require__.d(__webpack_exports__, {
  "tb": () => (/* binding */ asProviderName),
  "kq": () => (/* binding */ providerFor)
});

// UNUSED EXPORTS: ProviderName, isProviderName

;// CONCATENATED MODULE: ./data/github.json
const github_namespaceObject = JSON.parse('{"darwin-arm64":"macOS","darwin-x64":"macOS","ios-arm64":null,"ios-x64":null,"android-arm64":"Linux","android-arm-eabi":"Linux","android-ia32":null,"android-x64":"Linux","win32-arm64-msvc":"Windows","win32-ia32-gnu":null,"win32-ia32-msvc":null,"win32-x64-gnu":null,"win32-x64-msvc":"Windows","linux-arm64-gnu":"Linux","linux-arm64-musl":null,"linux-arm-gnueabihf":"Linux","linux-arm-musleabihf":null,"linux-ia32-gnu":null,"linux-ia32-musl":null,"linux-mips-gnu":null,"linux-mips-musl":null,"linux-mips64-gnuabi64":null,"linux-mips64-muslabi64":null,"linux-mips64el-gnuabi64":null,"linux-mips64el-muslabi64":null,"linux-mipsel-gnu":null,"linux-mipsel-musl":null,"linux-powerpc-gnu":null,"linux-powerpc64-gnu":null,"linux-powerpc64le-gnu":null,"linux-riscv64gc-gnu":null,"linux-s390x-gnu":null,"linux-sparc64-gnu":null,"linux-x64-gnu":"Linux","linux-x64-gnux32":null,"linux-x64-musl":null,"freebsd-ia32":null,"freebsd-x64":null}');
;// CONCATENATED MODULE: ./src/ci/github.ts

function sort(platforms) {
    const macOS = new Set();
    const Windows = new Set();
    const Linux = new Set();
    const unsupported = new Set();
    for (const platform of platforms) {
        switch (github_namespaceObject[platform]) {
            case 'macOS':
                macOS.add(platform);
                break;
            case 'Windows':
                Windows.add(platform);
                break;
            case 'Linux':
                Linux.add(platform);
                break;
            default:
                unsupported.add(platform);
                break;
        }
    }
    return {
        macOS: [...macOS],
        Windows: [...Windows],
        Linux: [...Linux],
        unsupported: [...unsupported]
    };
}
class GitHub {
    metadata(platforms) {
        return sort(Object.keys(platforms));
    }
}

;// CONCATENATED MODULE: ./src/provider.ts

var ProviderName;
(function (ProviderName) {
    ProviderName["GitHub"] = "github";
})(ProviderName || (ProviderName = {}));
;
const PROVIDERS = {
    [ProviderName.GitHub]: GitHub
};
function isProviderName(s) {
    const keys = Object.values(ProviderName);
    return keys.includes(s);
}
function asProviderName(name) {
    if (!isProviderName(name)) {
        throw new RangeError(`CI provider not recognized: ${name}`);
    }
    return name;
}
function providerFor(name) {
    return PROVIDERS[name];
}


/***/ }),

/***/ 1738:
/***/ ((module) => {

module.exports = eval("require")("@cargo-messages/android-arm-eabi");


/***/ }),

/***/ 4404:
/***/ ((module) => {

module.exports = eval("require")("@cargo-messages/darwin-arm64");


/***/ }),

/***/ 2990:
/***/ ((module) => {

module.exports = eval("require")("@cargo-messages/darwin-x64");


/***/ }),

/***/ 5379:
/***/ ((module) => {

module.exports = eval("require")("@cargo-messages/linux-arm-gnueabihf");


/***/ }),

/***/ 1713:
/***/ ((module) => {

module.exports = eval("require")("@cargo-messages/linux-arm64-gnu");


/***/ }),

/***/ 1316:
/***/ ((module) => {

module.exports = eval("require")("@cargo-messages/linux-x64-gnu");


/***/ }),

/***/ 7894:
/***/ ((module) => {

module.exports = eval("require")("@cargo-messages/win32-arm64-msvc");


/***/ }),

/***/ 1324:
/***/ ((module) => {

module.exports = eval("require")("@cargo-messages/win32-x64-msvc");


/***/ }),

/***/ 9491:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("assert");

/***/ }),

/***/ 4300:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("buffer");

/***/ }),

/***/ 2081:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("child_process");

/***/ }),

/***/ 2057:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("constants");

/***/ }),

/***/ 2361:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("events");

/***/ }),

/***/ 7147:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("fs");

/***/ }),

/***/ 3977:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:fs/promises");

/***/ }),

/***/ 2033:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:module");

/***/ }),

/***/ 612:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:os");

/***/ }),

/***/ 9411:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:path");

/***/ }),

/***/ 7742:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:process");

/***/ }),

/***/ 1747:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:readline");

/***/ }),

/***/ 2037:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("os");

/***/ }),

/***/ 1017:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("path");

/***/ }),

/***/ 2781:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("stream");

/***/ }),

/***/ 6224:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("tty");

/***/ }),

/***/ 3837:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("util");

/***/ }),

/***/ 6899:
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
class Position {
  constructor(line, col, index) {
    this.line = void 0;
    this.column = void 0;
    this.index = void 0;
    this.line = line;
    this.column = col;
    this.index = index;
  }
}
class SourceLocation {
  constructor(start, end) {
    this.start = void 0;
    this.end = void 0;
    this.filename = void 0;
    this.identifierName = void 0;
    this.start = start;
    this.end = end;
  }
}
function createPositionWithColumnOffset(position, columnOffset) {
  const {
    line,
    column,
    index
  } = position;
  return new Position(line, column + columnOffset, index + columnOffset);
}
const code = "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED";
var ModuleErrors = {
  ImportMetaOutsideModule: {
    message: `import.meta may appear only with 'sourceType: "module"'`,
    code
  },
  ImportOutsideModule: {
    message: `'import' and 'export' may appear only with 'sourceType: "module"'`,
    code
  }
};
const NodeDescriptions = {
  ArrayPattern: "array destructuring pattern",
  AssignmentExpression: "assignment expression",
  AssignmentPattern: "assignment expression",
  ArrowFunctionExpression: "arrow function expression",
  ConditionalExpression: "conditional expression",
  CatchClause: "catch clause",
  ForOfStatement: "for-of statement",
  ForInStatement: "for-in statement",
  ForStatement: "for-loop",
  FormalParameters: "function parameter list",
  Identifier: "identifier",
  ImportSpecifier: "import specifier",
  ImportDefaultSpecifier: "import default specifier",
  ImportNamespaceSpecifier: "import namespace specifier",
  ObjectPattern: "object destructuring pattern",
  ParenthesizedExpression: "parenthesized expression",
  RestElement: "rest element",
  UpdateExpression: {
    true: "prefix operation",
    false: "postfix operation"
  },
  VariableDeclarator: "variable declaration",
  YieldExpression: "yield expression"
};
const toNodeDescription = ({
  type,
  prefix
}) => type === "UpdateExpression" ? NodeDescriptions.UpdateExpression[String(prefix)] : NodeDescriptions[type];
var StandardErrors = {
  AccessorIsGenerator: ({
    kind
  }) => `A ${kind}ter cannot be a generator.`,
  ArgumentsInClass: "'arguments' is only allowed in functions and class methods.",
  AsyncFunctionInSingleStatementContext: "Async functions can only be declared at the top level or inside a block.",
  AwaitBindingIdentifier: "Can not use 'await' as identifier inside an async function.",
  AwaitBindingIdentifierInStaticBlock: "Can not use 'await' as identifier inside a static block.",
  AwaitExpressionFormalParameter: "'await' is not allowed in async function parameters.",
  AwaitUsingNotInAsyncContext: "'await using' is only allowed within async functions and at the top levels of modules.",
  AwaitNotInAsyncContext: "'await' is only allowed within async functions and at the top levels of modules.",
  AwaitNotInAsyncFunction: "'await' is only allowed within async functions.",
  BadGetterArity: "A 'get' accessor must not have any formal parameters.",
  BadSetterArity: "A 'set' accessor must have exactly one formal parameter.",
  BadSetterRestParameter: "A 'set' accessor function argument must not be a rest parameter.",
  ConstructorClassField: "Classes may not have a field named 'constructor'.",
  ConstructorClassPrivateField: "Classes may not have a private field named '#constructor'.",
  ConstructorIsAccessor: "Class constructor may not be an accessor.",
  ConstructorIsAsync: "Constructor can't be an async function.",
  ConstructorIsGenerator: "Constructor can't be a generator.",
  DeclarationMissingInitializer: ({
    kind
  }) => `Missing initializer in ${kind} declaration.`,
  DecoratorArgumentsOutsideParentheses: "Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.",
  DecoratorBeforeExport: "Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.",
  DecoratorsBeforeAfterExport: "Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.",
  DecoratorConstructor: "Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?",
  DecoratorExportClass: "Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.",
  DecoratorSemicolon: "Decorators must not be followed by a semicolon.",
  DecoratorStaticBlock: "Decorators can't be used with a static block.",
  DeferImportRequiresNamespace: 'Only `import defer * as x from "./module"` is valid.',
  DeletePrivateField: "Deleting a private field is not allowed.",
  DestructureNamedImport: "ES2015 named imports do not destructure. Use another statement for destructuring after the import.",
  DuplicateConstructor: "Duplicate constructor in the same class.",
  DuplicateDefaultExport: "Only one default export allowed per module.",
  DuplicateExport: ({
    exportName
  }) => `\`${exportName}\` has already been exported. Exported identifiers must be unique.`,
  DuplicateProto: "Redefinition of __proto__ property.",
  DuplicateRegExpFlags: "Duplicate regular expression flag.",
  DynamicImportPhaseRequiresImportExpressions: ({
    phase
  }) => `'import.${phase}(...)' can only be parsed when using the 'createImportExpressions' option.`,
  ElementAfterRest: "Rest element must be last element.",
  EscapedCharNotAnIdentifier: "Invalid Unicode escape.",
  ExportBindingIsString: ({
    localName,
    exportName
  }) => `A string literal cannot be used as an exported binding without \`from\`.\n- Did you mean \`export { '${localName}' as '${exportName}' } from 'some-module'\`?`,
  ExportDefaultFromAsIdentifier: "'from' is not allowed as an identifier after 'export default'.",
  ForInOfLoopInitializer: ({
    type
  }) => `'${type === "ForInStatement" ? "for-in" : "for-of"}' loop variable declaration may not have an initializer.`,
  ForInUsing: "For-in loop may not start with 'using' declaration.",
  ForOfAsync: "The left-hand side of a for-of loop may not be 'async'.",
  ForOfLet: "The left-hand side of a for-of loop may not start with 'let'.",
  GeneratorInSingleStatementContext: "Generators can only be declared at the top level or inside a block.",
  IllegalBreakContinue: ({
    type
  }) => `Unsyntactic ${type === "BreakStatement" ? "break" : "continue"}.`,
  IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list.",
  IllegalReturn: "'return' outside of function.",
  ImportAttributesUseAssert: "The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedAssertSyntax: true` option in the import attributes plugin to suppress this error.",
  ImportBindingIsString: ({
    importName
  }) => `A string literal cannot be used as an imported binding.\n- Did you mean \`import { "${importName}" as foo }\`?`,
  ImportCallArgumentTrailingComma: "Trailing comma is disallowed inside import(...) arguments.",
  ImportCallArity: ({
    maxArgumentCount
  }) => `\`import()\` requires exactly ${maxArgumentCount === 1 ? "one argument" : "one or two arguments"}.`,
  ImportCallNotNewExpression: "Cannot use new with import(...).",
  ImportCallSpreadArgument: "`...` is not allowed in `import()`.",
  ImportJSONBindingNotDefault: "A JSON module can only be imported with `default`.",
  ImportReflectionHasAssertion: "`import module x` cannot have assertions.",
  ImportReflectionNotBinding: 'Only `import module x from "./module"` is valid.',
  IncompatibleRegExpUVFlags: "The 'u' and 'v' regular expression flags cannot be enabled at the same time.",
  InvalidBigIntLiteral: "Invalid BigIntLiteral.",
  InvalidCodePoint: "Code point out of bounds.",
  InvalidCoverInitializedName: "Invalid shorthand property initializer.",
  InvalidDecimal: "Invalid decimal.",
  InvalidDigit: ({
    radix
  }) => `Expected number in radix ${radix}.`,
  InvalidEscapeSequence: "Bad character escape sequence.",
  InvalidEscapeSequenceTemplate: "Invalid escape sequence in template.",
  InvalidEscapedReservedWord: ({
    reservedWord
  }) => `Escape sequence in keyword ${reservedWord}.`,
  InvalidIdentifier: ({
    identifierName
  }) => `Invalid identifier ${identifierName}.`,
  InvalidLhs: ({
    ancestor
  }) => `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,
  InvalidLhsBinding: ({
    ancestor
  }) => `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,
  InvalidLhsOptionalChaining: ({
    ancestor
  }) => `Invalid optional chaining in the left-hand side of ${toNodeDescription(ancestor)}.`,
  InvalidNumber: "Invalid number.",
  InvalidOrMissingExponent: "Floating-point numbers require a valid exponent after the 'e'.",
  InvalidOrUnexpectedToken: ({
    unexpected
  }) => `Unexpected character '${unexpected}'.`,
  InvalidParenthesizedAssignment: "Invalid parenthesized assignment pattern.",
  InvalidPrivateFieldResolution: ({
    identifierName
  }) => `Private name #${identifierName} is not defined.`,
  InvalidPropertyBindingPattern: "Binding member expression.",
  InvalidRecordProperty: "Only properties and spread elements are allowed in record definitions.",
  InvalidRestAssignmentPattern: "Invalid rest operator's argument.",
  LabelRedeclaration: ({
    labelName
  }) => `Label '${labelName}' is already declared.`,
  LetInLexicalBinding: "'let' is disallowed as a lexically bound name.",
  LineTerminatorBeforeArrow: "No line break is allowed before '=>'.",
  MalformedRegExpFlags: "Invalid regular expression flag.",
  MissingClassName: "A class name is required.",
  MissingEqInAssignment: "Only '=' operator can be used for specifying default value.",
  MissingSemicolon: "Missing semicolon.",
  MissingPlugin: ({
    missingPlugin
  }) => `This experimental syntax requires enabling the parser plugin: ${missingPlugin.map(name => JSON.stringify(name)).join(", ")}.`,
  MissingOneOfPlugins: ({
    missingPlugin
  }) => `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin.map(name => JSON.stringify(name)).join(", ")}.`,
  MissingUnicodeEscape: "Expecting Unicode escape sequence \\uXXXX.",
  MixingCoalesceWithLogical: "Nullish coalescing operator(??) requires parens when mixing with logical operators.",
  ModuleAttributeDifferentFromType: "The only accepted module attribute is `type`.",
  ModuleAttributeInvalidValue: "Only string literals are allowed as module attribute values.",
  ModuleAttributesWithDuplicateKeys: ({
    key
  }) => `Duplicate key "${key}" is not allowed in module attributes.`,
  ModuleExportNameHasLoneSurrogate: ({
    surrogateCharCode
  }) => `An export name cannot include a lone surrogate, found '\\u${surrogateCharCode.toString(16)}'.`,
  ModuleExportUndefined: ({
    localName
  }) => `Export '${localName}' is not defined.`,
  MultipleDefaultsInSwitch: "Multiple default clauses.",
  NewlineAfterThrow: "Illegal newline after throw.",
  NoCatchOrFinally: "Missing catch or finally clause.",
  NumberIdentifier: "Identifier directly after number.",
  NumericSeparatorInEscapeSequence: "Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.",
  ObsoleteAwaitStar: "'await*' has been removed from the async functions proposal. Use Promise.all() instead.",
  OptionalChainingNoNew: "Constructors in/after an Optional Chain are not allowed.",
  OptionalChainingNoTemplate: "Tagged Template Literals are not allowed in optionalChain.",
  OverrideOnConstructor: "'override' modifier cannot appear on a constructor declaration.",
  ParamDupe: "Argument name clash.",
  PatternHasAccessor: "Object pattern can't contain getter or setter.",
  PatternHasMethod: "Object pattern can't contain methods.",
  PrivateInExpectedIn: ({
    identifierName
  }) => `Private names are only allowed in property accesses (\`obj.#${identifierName}\`) or in \`in\` expressions (\`#${identifierName} in obj\`).`,
  PrivateNameRedeclaration: ({
    identifierName
  }) => `Duplicate private name #${identifierName}.`,
  RecordExpressionBarIncorrectEndSyntaxType: "Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
  RecordExpressionBarIncorrectStartSyntaxType: "Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
  RecordExpressionHashIncorrectStartSyntaxType: "Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
  RecordNoProto: "'__proto__' is not allowed in Record expressions.",
  RestTrailingComma: "Unexpected trailing comma after rest element.",
  SloppyFunction: "In non-strict mode code, functions can only be declared at top level or inside a block.",
  SloppyFunctionAnnexB: "In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.",
  SourcePhaseImportRequiresDefault: 'Only `import source x from "./module"` is valid.',
  StaticPrototype: "Classes may not have static property named prototype.",
  SuperNotAllowed: "`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?",
  SuperPrivateField: "Private fields can't be accessed on super.",
  TrailingDecorator: "Decorators must be attached to a class element.",
  TupleExpressionBarIncorrectEndSyntaxType: "Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
  TupleExpressionBarIncorrectStartSyntaxType: "Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
  TupleExpressionHashIncorrectStartSyntaxType: "Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
  UnexpectedArgumentPlaceholder: "Unexpected argument placeholder.",
  UnexpectedAwaitAfterPipelineBody: 'Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.',
  UnexpectedDigitAfterHash: "Unexpected digit after hash token.",
  UnexpectedImportExport: "'import' and 'export' may only appear at the top level.",
  UnexpectedKeyword: ({
    keyword
  }) => `Unexpected keyword '${keyword}'.`,
  UnexpectedLeadingDecorator: "Leading decorators must be attached to a class declaration.",
  UnexpectedLexicalDeclaration: "Lexical declaration cannot appear in a single-statement context.",
  UnexpectedNewTarget: "`new.target` can only be used in functions or class properties.",
  UnexpectedNumericSeparator: "A numeric separator is only allowed between two digits.",
  UnexpectedPrivateField: "Unexpected private name.",
  UnexpectedReservedWord: ({
    reservedWord
  }) => `Unexpected reserved word '${reservedWord}'.`,
  UnexpectedSuper: "'super' is only allowed in object methods and classes.",
  UnexpectedToken: ({
    expected,
    unexpected
  }) => `Unexpected token${unexpected ? ` '${unexpected}'.` : ""}${expected ? `, expected "${expected}"` : ""}`,
  UnexpectedTokenUnaryExponentiation: "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.",
  UnexpectedUsingDeclaration: "Using declaration cannot appear in the top level when source type is `script`.",
  UnsupportedBind: "Binding should be performed on object property.",
  UnsupportedDecoratorExport: "A decorated export must export a class declaration.",
  UnsupportedDefaultExport: "Only expressions, functions or classes are allowed as the `default` export.",
  UnsupportedImport: "`import` can only be used in `import()` or `import.meta`.",
  UnsupportedMetaProperty: ({
    target,
    onlyValidPropertyName
  }) => `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,
  UnsupportedParameterDecorator: "Decorators cannot be used to decorate parameters.",
  UnsupportedPropertyDecorator: "Decorators cannot be used to decorate object literal properties.",
  UnsupportedSuper: "'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).",
  UnterminatedComment: "Unterminated comment.",
  UnterminatedRegExp: "Unterminated regular expression.",
  UnterminatedString: "Unterminated string constant.",
  UnterminatedTemplate: "Unterminated template.",
  UsingDeclarationHasBindingPattern: "Using declaration cannot have destructuring patterns.",
  VarRedeclaration: ({
    identifierName
  }) => `Identifier '${identifierName}' has already been declared.`,
  YieldBindingIdentifier: "Can not use 'yield' as identifier inside a generator.",
  YieldInParameter: "Yield expression is not allowed in formal parameters.",
  ZeroDigitNumericSeparator: "Numeric separator can not be used after leading 0."
};
var StrictModeErrors = {
  StrictDelete: "Deleting local variable in strict mode.",
  StrictEvalArguments: ({
    referenceName
  }) => `Assigning to '${referenceName}' in strict mode.`,
  StrictEvalArgumentsBinding: ({
    bindingName
  }) => `Binding '${bindingName}' in strict mode.`,
  StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block.",
  StrictNumericEscape: "The only valid numeric escape in strict mode is '\\0'.",
  StrictOctalLiteral: "Legacy octal literals are not allowed in strict mode.",
  StrictWith: "'with' in strict mode."
};
const UnparenthesizedPipeBodyDescriptions = new Set(["ArrowFunctionExpression", "AssignmentExpression", "ConditionalExpression", "YieldExpression"]);
var PipelineOperatorErrors = {
  PipeBodyIsTighter: "Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.",
  PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.',
  PipeTopicUnbound: "Topic reference is unbound; it must be inside a pipe body.",
  PipeTopicUnconfiguredToken: ({
    token
  }) => `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { "proposal": "hack", "topicToken": "${token}" }.`,
  PipeTopicUnused: "Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.",
  PipeUnparenthesizedBody: ({
    type
  }) => `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({
    type
  })}; please wrap it in parentheses.`,
  PipelineBodyNoArrow: 'Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.',
  PipelineBodySequenceExpression: "Pipeline body may not be a comma-separated sequence expression.",
  PipelineHeadSequenceExpression: "Pipeline head should not be a comma-separated sequence expression.",
  PipelineTopicUnused: "Pipeline is in topic style but does not use topic reference.",
  PrimaryTopicNotAllowed: "Topic reference was used in a lexical context without topic binding.",
  PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.'
};
const _excluded$1 = ["toMessage"],
  _excluded2$1 = ["message"];
function defineHidden(obj, key, value) {
  Object.defineProperty(obj, key, {
    enumerable: false,
    configurable: true,
    value
  });
}
function toParseErrorConstructor(_ref) {
  let {
      toMessage
    } = _ref,
    properties = _objectWithoutPropertiesLoose(_ref, _excluded$1);
  return function constructor({
    loc,
    details
  }) {
    const error = new SyntaxError();
    Object.assign(error, properties, {
      loc,
      pos: loc.index
    });
    if ("missingPlugin" in details) {
      Object.assign(error, {
        missingPlugin: details.missingPlugin
      });
    }
    defineHidden(error, "clone", function clone(overrides = {}) {
      var _overrides$loc;
      const {
        line,
        column,
        index
      } = (_overrides$loc = overrides.loc) != null ? _overrides$loc : loc;
      return constructor({
        loc: new Position(line, column, index),
        details: Object.assign({}, details, overrides.details)
      });
    });
    defineHidden(error, "details", details);
    Object.defineProperty(error, "message", {
      configurable: true,
      get() {
        const message = `${toMessage(details)} (${loc.line}:${loc.column})`;
        this.message = message;
        return message;
      },
      set(value) {
        Object.defineProperty(this, "message", {
          value,
          writable: true
        });
      }
    });
    return error;
  };
}
function ParseErrorEnum(argument, syntaxPlugin) {
  if (Array.isArray(argument)) {
    return parseErrorTemplates => ParseErrorEnum(parseErrorTemplates, argument[0]);
  }
  const ParseErrorConstructors = {};
  for (const reasonCode of Object.keys(argument)) {
    const template = argument[reasonCode];
    const _ref2 = typeof template === "string" ? {
        message: () => template
      } : typeof template === "function" ? {
        message: template
      } : template,
      {
        message
      } = _ref2,
      rest = _objectWithoutPropertiesLoose(_ref2, _excluded2$1);
    const toMessage = typeof message === "string" ? () => message : message;
    ParseErrorConstructors[reasonCode] = toParseErrorConstructor(Object.assign({
      code: "BABEL_PARSER_SYNTAX_ERROR",
      reasonCode,
      toMessage
    }, syntaxPlugin ? {
      syntaxPlugin
    } : {}, rest));
  }
  return ParseErrorConstructors;
}
const Errors = Object.assign({}, ParseErrorEnum(ModuleErrors), ParseErrorEnum(StandardErrors), ParseErrorEnum(StrictModeErrors), ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors));
const {
  defineProperty
} = Object;
const toUnenumerable = (object, key) => defineProperty(object, key, {
  enumerable: false,
  value: object[key]
});
function toESTreeLocation(node) {
  node.loc.start && toUnenumerable(node.loc.start, "index");
  node.loc.end && toUnenumerable(node.loc.end, "index");
  return node;
}
var estree = superClass => class ESTreeParserMixin extends superClass {
  parse() {
    const file = toESTreeLocation(super.parse());
    if (this.options.tokens) {
      file.tokens = file.tokens.map(toESTreeLocation);
    }
    return file;
  }
  parseRegExpLiteral({
    pattern,
    flags
  }) {
    let regex = null;
    try {
      regex = new RegExp(pattern, flags);
    } catch (e) {}
    const node = this.estreeParseLiteral(regex);
    node.regex = {
      pattern,
      flags
    };
    return node;
  }
  parseBigIntLiteral(value) {
    let bigInt;
    try {
      bigInt = BigInt(value);
    } catch (_unused) {
      bigInt = null;
    }
    const node = this.estreeParseLiteral(bigInt);
    node.bigint = String(node.value || value);
    return node;
  }
  parseDecimalLiteral(value) {
    const decimal = null;
    const node = this.estreeParseLiteral(decimal);
    node.decimal = String(node.value || value);
    return node;
  }
  estreeParseLiteral(value) {
    return this.parseLiteral(value, "Literal");
  }
  parseStringLiteral(value) {
    return this.estreeParseLiteral(value);
  }
  parseNumericLiteral(value) {
    return this.estreeParseLiteral(value);
  }
  parseNullLiteral() {
    return this.estreeParseLiteral(null);
  }
  parseBooleanLiteral(value) {
    return this.estreeParseLiteral(value);
  }
  directiveToStmt(directive) {
    const expression = directive.value;
    delete directive.value;
    expression.type = "Literal";
    expression.raw = expression.extra.raw;
    expression.value = expression.extra.expressionValue;
    const stmt = directive;
    stmt.type = "ExpressionStatement";
    stmt.expression = expression;
    stmt.directive = expression.extra.rawValue;
    delete expression.extra;
    return stmt;
  }
  initFunction(node, isAsync) {
    super.initFunction(node, isAsync);
    node.expression = false;
  }
  checkDeclaration(node) {
    if (node != null && this.isObjectProperty(node)) {
      this.checkDeclaration(node.value);
    } else {
      super.checkDeclaration(node);
    }
  }
  getObjectOrClassMethodParams(method) {
    return method.value.params;
  }
  isValidDirective(stmt) {
    var _stmt$expression$extr;
    return stmt.type === "ExpressionStatement" && stmt.expression.type === "Literal" && typeof stmt.expression.value === "string" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);
  }
  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
    super.parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse);
    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));
    node.body = directiveStatements.concat(node.body);
    delete node.directives;
  }
  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true);
    if (method.typeParameters) {
      method.value.typeParameters = method.typeParameters;
      delete method.typeParameters;
    }
    classBody.body.push(method);
  }
  parsePrivateName() {
    const node = super.parsePrivateName();
    {
      if (!this.getPluginOption("estree", "classFeatures")) {
        return node;
      }
    }
    return this.convertPrivateNameToPrivateIdentifier(node);
  }
  convertPrivateNameToPrivateIdentifier(node) {
    const name = super.getPrivateNameSV(node);
    node = node;
    delete node.id;
    node.name = name;
    node.type = "PrivateIdentifier";
    return node;
  }
  isPrivateName(node) {
    {
      if (!this.getPluginOption("estree", "classFeatures")) {
        return super.isPrivateName(node);
      }
    }
    return node.type === "PrivateIdentifier";
  }
  getPrivateNameSV(node) {
    {
      if (!this.getPluginOption("estree", "classFeatures")) {
        return super.getPrivateNameSV(node);
      }
    }
    return node.name;
  }
  parseLiteral(value, type) {
    const node = super.parseLiteral(value, type);
    node.raw = node.extra.raw;
    delete node.extra;
    return node;
  }
  parseFunctionBody(node, allowExpression, isMethod = false) {
    super.parseFunctionBody(node, allowExpression, isMethod);
    node.expression = node.body.type !== "BlockStatement";
  }
  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
    let funcNode = this.startNode();
    funcNode.kind = node.kind;
    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);
    funcNode.type = "FunctionExpression";
    delete funcNode.kind;
    node.value = funcNode;
    if (type === "ClassPrivateMethod") {
      node.computed = false;
    }
    return this.finishNode(node, "MethodDefinition");
  }
  parseClassProperty(...args) {
    const propertyNode = super.parseClassProperty(...args);
    {
      if (!this.getPluginOption("estree", "classFeatures")) {
        return propertyNode;
      }
    }
    propertyNode.type = "PropertyDefinition";
    return propertyNode;
  }
  parseClassPrivateProperty(...args) {
    const propertyNode = super.parseClassPrivateProperty(...args);
    {
      if (!this.getPluginOption("estree", "classFeatures")) {
        return propertyNode;
      }
    }
    propertyNode.type = "PropertyDefinition";
    propertyNode.computed = false;
    return propertyNode;
  }
  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);
    if (node) {
      node.type = "Property";
      if (node.kind === "method") {
        node.kind = "init";
      }
      node.shorthand = false;
    }
    return node;
  }
  parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {
    const node = super.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);
    if (node) {
      node.kind = "init";
      node.type = "Property";
    }
    return node;
  }
  isValidLVal(type, isUnparenthesizedInAssign, binding) {
    return type === "Property" ? "value" : super.isValidLVal(type, isUnparenthesizedInAssign, binding);
  }
  isAssignable(node, isBinding) {
    if (node != null && this.isObjectProperty(node)) {
      return this.isAssignable(node.value, isBinding);
    }
    return super.isAssignable(node, isBinding);
  }
  toAssignable(node, isLHS = false) {
    if (node != null && this.isObjectProperty(node)) {
      const {
        key,
        value
      } = node;
      if (this.isPrivateName(key)) {
        this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);
      }
      this.toAssignable(value, isLHS);
    } else {
      super.toAssignable(node, isLHS);
    }
  }
  toAssignableObjectExpressionProp(prop, isLast, isLHS) {
    if (prop.kind === "get" || prop.kind === "set") {
      this.raise(Errors.PatternHasAccessor, {
        at: prop.key
      });
    } else if (prop.method) {
      this.raise(Errors.PatternHasMethod, {
        at: prop.key
      });
    } else {
      super.toAssignableObjectExpressionProp(prop, isLast, isLHS);
    }
  }
  finishCallExpression(unfinished, optional) {
    const node = super.finishCallExpression(unfinished, optional);
    if (node.callee.type === "Import") {
      node.type = "ImportExpression";
      node.source = node.arguments[0];
      if (this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions")) {
        var _node$arguments$, _node$arguments$2;
        node.options = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;
        node.attributes = (_node$arguments$2 = node.arguments[1]) != null ? _node$arguments$2 : null;
      }
      delete node.arguments;
      delete node.callee;
    }
    return node;
  }
  toReferencedArguments(node) {
    if (node.type === "ImportExpression") {
      return;
    }
    super.toReferencedArguments(node);
  }
  parseExport(unfinished, decorators) {
    const exportStartLoc = this.state.lastTokStartLoc;
    const node = super.parseExport(unfinished, decorators);
    switch (node.type) {
      case "ExportAllDeclaration":
        node.exported = null;
        break;
      case "ExportNamedDeclaration":
        if (node.specifiers.length === 1 && node.specifiers[0].type === "ExportNamespaceSpecifier") {
          node.type = "ExportAllDeclaration";
          node.exported = node.specifiers[0].exported;
          delete node.specifiers;
        }
      case "ExportDefaultDeclaration":
        {
          var _declaration$decorato;
          const {
            declaration
          } = node;
          if ((declaration == null ? void 0 : declaration.type) === "ClassDeclaration" && ((_declaration$decorato = declaration.decorators) == null ? void 0 : _declaration$decorato.length) > 0 && declaration.start === node.start) {
            this.resetStartLocation(node, exportStartLoc);
          }
        }
        break;
    }
    return node;
  }
  parseSubscript(base, startLoc, noCalls, state) {
    const node = super.parseSubscript(base, startLoc, noCalls, state);
    if (state.optionalChainMember) {
      if (node.type === "OptionalMemberExpression" || node.type === "OptionalCallExpression") {
        node.type = node.type.substring(8);
      }
      if (state.stop) {
        const chain = this.startNodeAtNode(node);
        chain.expression = node;
        return this.finishNode(chain, "ChainExpression");
      }
    } else if (node.type === "MemberExpression" || node.type === "CallExpression") {
      node.optional = false;
    }
    return node;
  }
  isOptionalMemberExpression(node) {
    if (node.type === "ChainExpression") {
      return node.expression.type === "MemberExpression";
    }
    return super.isOptionalMemberExpression(node);
  }
  hasPropertyAsPrivateName(node) {
    if (node.type === "ChainExpression") {
      node = node.expression;
    }
    return super.hasPropertyAsPrivateName(node);
  }
  isObjectProperty(node) {
    return node.type === "Property" && node.kind === "init" && !node.method;
  }
  isObjectMethod(node) {
    return node.method || node.kind === "get" || node.kind === "set";
  }
  finishNodeAt(node, type, endLoc) {
    return toESTreeLocation(super.finishNodeAt(node, type, endLoc));
  }
  resetStartLocation(node, startLoc) {
    super.resetStartLocation(node, startLoc);
    toESTreeLocation(node);
  }
  resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
    super.resetEndLocation(node, endLoc);
    toESTreeLocation(node);
  }
};
class TokContext {
  constructor(token, preserveSpace) {
    this.token = void 0;
    this.preserveSpace = void 0;
    this.token = token;
    this.preserveSpace = !!preserveSpace;
  }
}
const types = {
  brace: new TokContext("{"),
  j_oTag: new TokContext("<tag"),
  j_cTag: new TokContext("</tag"),
  j_expr: new TokContext("<tag>...</tag>", true)
};
{
  types.template = new TokContext("`", true);
}
const beforeExpr = true;
const startsExpr = true;
const isLoop = true;
const isAssign = true;
const prefix = true;
const postfix = true;
class ExportedTokenType {
  constructor(label, conf = {}) {
    this.label = void 0;
    this.keyword = void 0;
    this.beforeExpr = void 0;
    this.startsExpr = void 0;
    this.rightAssociative = void 0;
    this.isLoop = void 0;
    this.isAssign = void 0;
    this.prefix = void 0;
    this.postfix = void 0;
    this.binop = void 0;
    this.label = label;
    this.keyword = conf.keyword;
    this.beforeExpr = !!conf.beforeExpr;
    this.startsExpr = !!conf.startsExpr;
    this.rightAssociative = !!conf.rightAssociative;
    this.isLoop = !!conf.isLoop;
    this.isAssign = !!conf.isAssign;
    this.prefix = !!conf.prefix;
    this.postfix = !!conf.postfix;
    this.binop = conf.binop != null ? conf.binop : null;
    {
      this.updateContext = null;
    }
  }
}
const keywords$1 = new Map();
function createKeyword(name, options = {}) {
  options.keyword = name;
  const token = createToken(name, options);
  keywords$1.set(name, token);
  return token;
}
function createBinop(name, binop) {
  return createToken(name, {
    beforeExpr,
    binop
  });
}
let tokenTypeCounter = -1;
const tokenTypes = [];
const tokenLabels = [];
const tokenBinops = [];
const tokenBeforeExprs = [];
const tokenStartsExprs = [];
const tokenPrefixes = [];
function createToken(name, options = {}) {
  var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;
  ++tokenTypeCounter;
  tokenLabels.push(name);
  tokenBinops.push((_options$binop = options.binop) != null ? _options$binop : -1);
  tokenBeforeExprs.push((_options$beforeExpr = options.beforeExpr) != null ? _options$beforeExpr : false);
  tokenStartsExprs.push((_options$startsExpr = options.startsExpr) != null ? _options$startsExpr : false);
  tokenPrefixes.push((_options$prefix = options.prefix) != null ? _options$prefix : false);
  tokenTypes.push(new ExportedTokenType(name, options));
  return tokenTypeCounter;
}
function createKeywordLike(name, options = {}) {
  var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;
  ++tokenTypeCounter;
  keywords$1.set(name, tokenTypeCounter);
  tokenLabels.push(name);
  tokenBinops.push((_options$binop2 = options.binop) != null ? _options$binop2 : -1);
  tokenBeforeExprs.push((_options$beforeExpr2 = options.beforeExpr) != null ? _options$beforeExpr2 : false);
  tokenStartsExprs.push((_options$startsExpr2 = options.startsExpr) != null ? _options$startsExpr2 : false);
  tokenPrefixes.push((_options$prefix2 = options.prefix) != null ? _options$prefix2 : false);
  tokenTypes.push(new ExportedTokenType("name", options));
  return tokenTypeCounter;
}
const tt = {
  bracketL: createToken("[", {
    beforeExpr,
    startsExpr
  }),
  bracketHashL: createToken("#[", {
    beforeExpr,
    startsExpr
  }),
  bracketBarL: createToken("[|", {
    beforeExpr,
    startsExpr
  }),
  bracketR: createToken("]"),
  bracketBarR: createToken("|]"),
  braceL: createToken("{", {
    beforeExpr,
    startsExpr
  }),
  braceBarL: createToken("{|", {
    beforeExpr,
    startsExpr
  }),
  braceHashL: createToken("#{", {
    beforeExpr,
    startsExpr
  }),
  braceR: createToken("}"),
  braceBarR: createToken("|}"),
  parenL: createToken("(", {
    beforeExpr,
    startsExpr
  }),
  parenR: createToken(")"),
  comma: createToken(",", {
    beforeExpr
  }),
  semi: createToken(";", {
    beforeExpr
  }),
  colon: createToken(":", {
    beforeExpr
  }),
  doubleColon: createToken("::", {
    beforeExpr
  }),
  dot: createToken("."),
  question: createToken("?", {
    beforeExpr
  }),
  questionDot: createToken("?."),
  arrow: createToken("=>", {
    beforeExpr
  }),
  template: createToken("template"),
  ellipsis: createToken("...", {
    beforeExpr
  }),
  backQuote: createToken("`", {
    startsExpr
  }),
  dollarBraceL: createToken("${", {
    beforeExpr,
    startsExpr
  }),
  templateTail: createToken("...`", {
    startsExpr
  }),
  templateNonTail: createToken("...${", {
    beforeExpr,
    startsExpr
  }),
  at: createToken("@"),
  hash: createToken("#", {
    startsExpr
  }),
  interpreterDirective: createToken("#!..."),
  eq: createToken("=", {
    beforeExpr,
    isAssign
  }),
  assign: createToken("_=", {
    beforeExpr,
    isAssign
  }),
  slashAssign: createToken("_=", {
    beforeExpr,
    isAssign
  }),
  xorAssign: createToken("_=", {
    beforeExpr,
    isAssign
  }),
  moduloAssign: createToken("_=", {
    beforeExpr,
    isAssign
  }),
  incDec: createToken("++/--", {
    prefix,
    postfix,
    startsExpr
  }),
  bang: createToken("!", {
    beforeExpr,
    prefix,
    startsExpr
  }),
  tilde: createToken("~", {
    beforeExpr,
    prefix,
    startsExpr
  }),
  doubleCaret: createToken("^^", {
    startsExpr
  }),
  doubleAt: createToken("@@", {
    startsExpr
  }),
  pipeline: createBinop("|>", 0),
  nullishCoalescing: createBinop("??", 1),
  logicalOR: createBinop("||", 1),
  logicalAND: createBinop("&&", 2),
  bitwiseOR: createBinop("|", 3),
  bitwiseXOR: createBinop("^", 4),
  bitwiseAND: createBinop("&", 5),
  equality: createBinop("==/!=/===/!==", 6),
  lt: createBinop("</>/<=/>=", 7),
  gt: createBinop("</>/<=/>=", 7),
  relational: createBinop("</>/<=/>=", 7),
  bitShift: createBinop("<</>>/>>>", 8),
  bitShiftL: createBinop("<</>>/>>>", 8),
  bitShiftR: createBinop("<</>>/>>>", 8),
  plusMin: createToken("+/-", {
    beforeExpr,
    binop: 9,
    prefix,
    startsExpr
  }),
  modulo: createToken("%", {
    binop: 10,
    startsExpr
  }),
  star: createToken("*", {
    binop: 10
  }),
  slash: createBinop("/", 10),
  exponent: createToken("**", {
    beforeExpr,
    binop: 11,
    rightAssociative: true
  }),
  _in: createKeyword("in", {
    beforeExpr,
    binop: 7
  }),
  _instanceof: createKeyword("instanceof", {
    beforeExpr,
    binop: 7
  }),
  _break: createKeyword("break"),
  _case: createKeyword("case", {
    beforeExpr
  }),
  _catch: createKeyword("catch"),
  _continue: createKeyword("continue"),
  _debugger: createKeyword("debugger"),
  _default: createKeyword("default", {
    beforeExpr
  }),
  _else: createKeyword("else", {
    beforeExpr
  }),
  _finally: createKeyword("finally"),
  _function: createKeyword("function", {
    startsExpr
  }),
  _if: createKeyword("if"),
  _return: createKeyword("return", {
    beforeExpr
  }),
  _switch: createKeyword("switch"),
  _throw: createKeyword("throw", {
    beforeExpr,
    prefix,
    startsExpr
  }),
  _try: createKeyword("try"),
  _var: createKeyword("var"),
  _const: createKeyword("const"),
  _with: createKeyword("with"),
  _new: createKeyword("new", {
    beforeExpr,
    startsExpr
  }),
  _this: createKeyword("this", {
    startsExpr
  }),
  _super: createKeyword("super", {
    startsExpr
  }),
  _class: createKeyword("class", {
    startsExpr
  }),
  _extends: createKeyword("extends", {
    beforeExpr
  }),
  _export: createKeyword("export"),
  _import: createKeyword("import", {
    startsExpr
  }),
  _null: createKeyword("null", {
    startsExpr
  }),
  _true: createKeyword("true", {
    startsExpr
  }),
  _false: createKeyword("false", {
    startsExpr
  }),
  _typeof: createKeyword("typeof", {
    beforeExpr,
    prefix,
    startsExpr
  }),
  _void: createKeyword("void", {
    beforeExpr,
    prefix,
    startsExpr
  }),
  _delete: createKeyword("delete", {
    beforeExpr,
    prefix,
    startsExpr
  }),
  _do: createKeyword("do", {
    isLoop,
    beforeExpr
  }),
  _for: createKeyword("for", {
    isLoop
  }),
  _while: createKeyword("while", {
    isLoop
  }),
  _as: createKeywordLike("as", {
    startsExpr
  }),
  _assert: createKeywordLike("assert", {
    startsExpr
  }),
  _async: createKeywordLike("async", {
    startsExpr
  }),
  _await: createKeywordLike("await", {
    startsExpr
  }),
  _defer: createKeywordLike("defer", {
    startsExpr
  }),
  _from: createKeywordLike("from", {
    startsExpr
  }),
  _get: createKeywordLike("get", {
    startsExpr
  }),
  _let: createKeywordLike("let", {
    startsExpr
  }),
  _meta: createKeywordLike("meta", {
    startsExpr
  }),
  _of: createKeywordLike("of", {
    startsExpr
  }),
  _sent: createKeywordLike("sent", {
    startsExpr
  }),
  _set: createKeywordLike("set", {
    startsExpr
  }),
  _source: createKeywordLike("source", {
    startsExpr
  }),
  _static: createKeywordLike("static", {
    startsExpr
  }),
  _using: createKeywordLike("using", {
    startsExpr
  }),
  _yield: createKeywordLike("yield", {
    startsExpr
  }),
  _asserts: createKeywordLike("asserts", {
    startsExpr
  }),
  _checks: createKeywordLike("checks", {
    startsExpr
  }),
  _exports: createKeywordLike("exports", {
    startsExpr
  }),
  _global: createKeywordLike("global", {
    startsExpr
  }),
  _implements: createKeywordLike("implements", {
    startsExpr
  }),
  _intrinsic: createKeywordLike("intrinsic", {
    startsExpr
  }),
  _infer: createKeywordLike("infer", {
    startsExpr
  }),
  _is: createKeywordLike("is", {
    startsExpr
  }),
  _mixins: createKeywordLike("mixins", {
    startsExpr
  }),
  _proto: createKeywordLike("proto", {
    startsExpr
  }),
  _require: createKeywordLike("require", {
    startsExpr
  }),
  _satisfies: createKeywordLike("satisfies", {
    startsExpr
  }),
  _keyof: createKeywordLike("keyof", {
    startsExpr
  }),
  _readonly: createKeywordLike("readonly", {
    startsExpr
  }),
  _unique: createKeywordLike("unique", {
    startsExpr
  }),
  _abstract: createKeywordLike("abstract", {
    startsExpr
  }),
  _declare: createKeywordLike("declare", {
    startsExpr
  }),
  _enum: createKeywordLike("enum", {
    startsExpr
  }),
  _module: createKeywordLike("module", {
    startsExpr
  }),
  _namespace: createKeywordLike("namespace", {
    startsExpr
  }),
  _interface: createKeywordLike("interface", {
    startsExpr
  }),
  _type: createKeywordLike("type", {
    startsExpr
  }),
  _opaque: createKeywordLike("opaque", {
    startsExpr
  }),
  name: createToken("name", {
    startsExpr
  }),
  string: createToken("string", {
    startsExpr
  }),
  num: createToken("num", {
    startsExpr
  }),
  bigint: createToken("bigint", {
    startsExpr
  }),
  decimal: createToken("decimal", {
    startsExpr
  }),
  regexp: createToken("regexp", {
    startsExpr
  }),
  privateName: createToken("#name", {
    startsExpr
  }),
  eof: createToken("eof"),
  jsxName: createToken("jsxName"),
  jsxText: createToken("jsxText", {
    beforeExpr: true
  }),
  jsxTagStart: createToken("jsxTagStart", {
    startsExpr: true
  }),
  jsxTagEnd: createToken("jsxTagEnd"),
  placeholder: createToken("%%", {
    startsExpr: true
  })
};
function tokenIsIdentifier(token) {
  return token >= 93 && token <= 132;
}
function tokenKeywordOrIdentifierIsKeyword(token) {
  return token <= 92;
}
function tokenIsKeywordOrIdentifier(token) {
  return token >= 58 && token <= 132;
}
function tokenIsLiteralPropertyName(token) {
  return token >= 58 && token <= 136;
}
function tokenComesBeforeExpression(token) {
  return tokenBeforeExprs[token];
}
function tokenCanStartExpression(token) {
  return tokenStartsExprs[token];
}
function tokenIsAssignment(token) {
  return token >= 29 && token <= 33;
}
function tokenIsFlowInterfaceOrTypeOrOpaque(token) {
  return token >= 129 && token <= 131;
}
function tokenIsLoop(token) {
  return token >= 90 && token <= 92;
}
function tokenIsKeyword(token) {
  return token >= 58 && token <= 92;
}
function tokenIsOperator(token) {
  return token >= 39 && token <= 59;
}
function tokenIsPostfix(token) {
  return token === 34;
}
function tokenIsPrefix(token) {
  return tokenPrefixes[token];
}
function tokenIsTSTypeOperator(token) {
  return token >= 121 && token <= 123;
}
function tokenIsTSDeclarationStart(token) {
  return token >= 124 && token <= 130;
}
function tokenLabelName(token) {
  return tokenLabels[token];
}
function tokenOperatorPrecedence(token) {
  return tokenBinops[token];
}
function tokenIsRightAssociative(token) {
  return token === 57;
}
function tokenIsTemplate(token) {
  return token >= 24 && token <= 25;
}
function getExportedToken(token) {
  return tokenTypes[token];
}
{
  tokenTypes[8].updateContext = context => {
    context.pop();
  };
  tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = context => {
    context.push(types.brace);
  };
  tokenTypes[22].updateContext = context => {
    if (context[context.length - 1] === types.template) {
      context.pop();
    } else {
      context.push(types.template);
    }
  };
  tokenTypes[142].updateContext = context => {
    context.push(types.j_expr, types.j_oTag);
  };
}
let nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0560-\u0588\u05d0-\u05ea\u05ef-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u0860-\u086a\u0870-\u0887\u0889-\u088e\u08a0-\u08c9\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u09fc\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c5d\u0c60\u0c61\u0c80\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cdd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d04-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d54-\u0d56\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e86-\u0e8a\u0e8c-\u0ea3\u0ea5\u0ea7-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u1711\u171f-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1878\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4c\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1c80-\u1c88\u1c90-\u1cba\u1cbd-\u1cbf\u1ce9-\u1cec\u1cee-\u1cf3\u1cf5\u1cf6\u1cfa\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312f\u3131-\u318e\u31a0-\u31bf\u31f0-\u31ff\u3400-\u4dbf\u4e00-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7ca\ua7d0\ua7d1\ua7d3\ua7d5-\ua7d9\ua7f2-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua8fe\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab69\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
let nonASCIIidentifierChars = "\u200c\u200d\xb7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u07fd\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u0898-\u089f\u08ca-\u08e1\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u09fe\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0afa-\u0aff\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b55-\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c04\u0c3c\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0cf3\u0d00-\u0d03\u0d3b\u0d3c\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d81-\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0ebc\u0ec8-\u0ece\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u180f-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1abf-\u1ace\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf4\u1cf7-\u1cf9\u1dc0-\u1dff\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\u30fb\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua82c\ua880\ua881\ua8b4-\ua8c5\ua8d0-\ua8d9\ua8e0-\ua8f1\ua8ff-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f\uff65";
const nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
const nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
const astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191];
const astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
function isInAstralSet(code, set) {
  let pos = 0x10000;
  for (let i = 0, length = set.length; i < length; i += 2) {
    pos += set[i];
    if (pos > code) return false;
    pos += set[i + 1];
    if (pos >= code) return true;
  }
  return false;
}
function isIdentifierStart(code) {
  if (code < 65) return code === 36;
  if (code <= 90) return true;
  if (code < 97) return code === 95;
  if (code <= 122) return true;
  if (code <= 0xffff) {
    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
  }
  return isInAstralSet(code, astralIdentifierStartCodes);
}
function isIdentifierChar(code) {
  if (code < 48) return code === 36;
  if (code < 58) return true;
  if (code < 65) return false;
  if (code <= 90) return true;
  if (code < 97) return code === 95;
  if (code <= 122) return true;
  if (code <= 0xffff) {
    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
  }
  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
}
const reservedWords = {
  keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"],
  strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
  strictBind: ["eval", "arguments"]
};
const keywords = new Set(reservedWords.keyword);
const reservedWordsStrictSet = new Set(reservedWords.strict);
const reservedWordsStrictBindSet = new Set(reservedWords.strictBind);
function isReservedWord(word, inModule) {
  return inModule && word === "await" || word === "enum";
}
function isStrictReservedWord(word, inModule) {
  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
}
function isStrictBindOnlyReservedWord(word) {
  return reservedWordsStrictBindSet.has(word);
}
function isStrictBindReservedWord(word, inModule) {
  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
}
function isKeyword(word) {
  return keywords.has(word);
}
function isIteratorStart(current, next, next2) {
  return current === 64 && next === 64 && isIdentifierStart(next2);
}
const reservedWordLikeSet = new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield", "eval", "arguments", "enum", "await"]);
function canBeReservedWord(word) {
  return reservedWordLikeSet.has(word);
}
class Scope {
  constructor(flags) {
    this.var = new Set();
    this.lexical = new Set();
    this.functions = new Set();
    this.flags = flags;
  }
}
class ScopeHandler {
  constructor(parser, inModule) {
    this.parser = void 0;
    this.scopeStack = [];
    this.inModule = void 0;
    this.undefinedExports = new Map();
    this.parser = parser;
    this.inModule = inModule;
  }
  get inTopLevel() {
    return (this.currentScope().flags & 1) > 0;
  }
  get inFunction() {
    return (this.currentVarScopeFlags() & 2) > 0;
  }
  get allowSuper() {
    return (this.currentThisScopeFlags() & 16) > 0;
  }
  get allowDirectSuper() {
    return (this.currentThisScopeFlags() & 32) > 0;
  }
  get inClass() {
    return (this.currentThisScopeFlags() & 64) > 0;
  }
  get inClassAndNotInNonArrowFunction() {
    const flags = this.currentThisScopeFlags();
    return (flags & 64) > 0 && (flags & 2) === 0;
  }
  get inStaticBlock() {
    for (let i = this.scopeStack.length - 1;; i--) {
      const {
        flags
      } = this.scopeStack[i];
      if (flags & 128) {
        return true;
      }
      if (flags & (387 | 64)) {
        return false;
      }
    }
  }
  get inNonArrowFunction() {
    return (this.currentThisScopeFlags() & 2) > 0;
  }
  get treatFunctionsAsVar() {
    return this.treatFunctionsAsVarInScope(this.currentScope());
  }
  createScope(flags) {
    return new Scope(flags);
  }
  enter(flags) {
    this.scopeStack.push(this.createScope(flags));
  }
  exit() {
    const scope = this.scopeStack.pop();
    return scope.flags;
  }
  treatFunctionsAsVarInScope(scope) {
    return !!(scope.flags & (2 | 128) || !this.parser.inModule && scope.flags & 1);
  }
  declareName(name, bindingType, loc) {
    let scope = this.currentScope();
    if (bindingType & 8 || bindingType & 16) {
      this.checkRedeclarationInScope(scope, name, bindingType, loc);
      if (bindingType & 16) {
        scope.functions.add(name);
      } else {
        scope.lexical.add(name);
      }
      if (bindingType & 8) {
        this.maybeExportDefined(scope, name);
      }
    } else if (bindingType & 4) {
      for (let i = this.scopeStack.length - 1; i >= 0; --i) {
        scope = this.scopeStack[i];
        this.checkRedeclarationInScope(scope, name, bindingType, loc);
        scope.var.add(name);
        this.maybeExportDefined(scope, name);
        if (scope.flags & 387) break;
      }
    }
    if (this.parser.inModule && scope.flags & 1) {
      this.undefinedExports.delete(name);
    }
  }
  maybeExportDefined(scope, name) {
    if (this.parser.inModule && scope.flags & 1) {
      this.undefinedExports.delete(name);
    }
  }
  checkRedeclarationInScope(scope, name, bindingType, loc) {
    if (this.isRedeclaredInScope(scope, name, bindingType)) {
      this.parser.raise(Errors.VarRedeclaration, {
        at: loc,
        identifierName: name
      });
    }
  }
  isRedeclaredInScope(scope, name, bindingType) {
    if (!(bindingType & 1)) return false;
    if (bindingType & 8) {
      return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);
    }
    if (bindingType & 16) {
      return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);
    }
    return scope.lexical.has(name) && !(scope.flags & 8 && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);
  }
  checkLocalExport(id) {
    const {
      name
    } = id;
    const topLevelScope = this.scopeStack[0];
    if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {
      this.undefinedExports.set(name, id.loc.start);
    }
  }
  currentScope() {
    return this.scopeStack[this.scopeStack.length - 1];
  }
  currentVarScopeFlags() {
    for (let i = this.scopeStack.length - 1;; i--) {
      const {
        flags
      } = this.scopeStack[i];
      if (flags & 387) {
        return flags;
      }
    }
  }
  currentThisScopeFlags() {
    for (let i = this.scopeStack.length - 1;; i--) {
      const {
        flags
      } = this.scopeStack[i];
      if (flags & (387 | 64) && !(flags & 4)) {
        return flags;
      }
    }
  }
}
class FlowScope extends Scope {
  constructor(...args) {
    super(...args);
    this.declareFunctions = new Set();
  }
}
class FlowScopeHandler extends ScopeHandler {
  createScope(flags) {
    return new FlowScope(flags);
  }
  declareName(name, bindingType, loc) {
    const scope = this.currentScope();
    if (bindingType & 2048) {
      this.checkRedeclarationInScope(scope, name, bindingType, loc);
      this.maybeExportDefined(scope, name);
      scope.declareFunctions.add(name);
      return;
    }
    super.declareName(name, bindingType, loc);
  }
  isRedeclaredInScope(scope, name, bindingType) {
    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;
    if (bindingType & 2048) {
      return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));
    }
    return false;
  }
  checkLocalExport(id) {
    if (!this.scopeStack[0].declareFunctions.has(id.name)) {
      super.checkLocalExport(id);
    }
  }
}
class BaseParser {
  constructor() {
    this.sawUnambiguousESM = false;
    this.ambiguousScriptDifferentAst = false;
  }
  hasPlugin(pluginConfig) {
    if (typeof pluginConfig === "string") {
      return this.plugins.has(pluginConfig);
    } else {
      const [pluginName, pluginOptions] = pluginConfig;
      if (!this.hasPlugin(pluginName)) {
        return false;
      }
      const actualOptions = this.plugins.get(pluginName);
      for (const key of Object.keys(pluginOptions)) {
        if ((actualOptions == null ? void 0 : actualOptions[key]) !== pluginOptions[key]) {
          return false;
        }
      }
      return true;
    }
  }
  getPluginOption(plugin, name) {
    var _this$plugins$get;
    return (_this$plugins$get = this.plugins.get(plugin)) == null ? void 0 : _this$plugins$get[name];
  }
}
function setTrailingComments(node, comments) {
  if (node.trailingComments === undefined) {
    node.trailingComments = comments;
  } else {
    node.trailingComments.unshift(...comments);
  }
}
function setLeadingComments(node, comments) {
  if (node.leadingComments === undefined) {
    node.leadingComments = comments;
  } else {
    node.leadingComments.unshift(...comments);
  }
}
function setInnerComments(node, comments) {
  if (node.innerComments === undefined) {
    node.innerComments = comments;
  } else {
    node.innerComments.unshift(...comments);
  }
}
function adjustInnerComments(node, elements, commentWS) {
  let lastElement = null;
  let i = elements.length;
  while (lastElement === null && i > 0) {
    lastElement = elements[--i];
  }
  if (lastElement === null || lastElement.start > commentWS.start) {
    setInnerComments(node, commentWS.comments);
  } else {
    setTrailingComments(lastElement, commentWS.comments);
  }
}
class CommentsParser extends BaseParser {
  addComment(comment) {
    if (this.filename) comment.loc.filename = this.filename;
    this.state.comments.push(comment);
  }
  processComment(node) {
    const {
      commentStack
    } = this.state;
    const commentStackLength = commentStack.length;
    if (commentStackLength === 0) return;
    let i = commentStackLength - 1;
    const lastCommentWS = commentStack[i];
    if (lastCommentWS.start === node.end) {
      lastCommentWS.leadingNode = node;
      i--;
    }
    const {
      start: nodeStart
    } = node;
    for (; i >= 0; i--) {
      const commentWS = commentStack[i];
      const commentEnd = commentWS.end;
      if (commentEnd > nodeStart) {
        commentWS.containingNode = node;
        this.finalizeComment(commentWS);
        commentStack.splice(i, 1);
      } else {
        if (commentEnd === nodeStart) {
          commentWS.trailingNode = node;
        }
        break;
      }
    }
  }
  finalizeComment(commentWS) {
    const {
      comments
    } = commentWS;
    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {
      if (commentWS.leadingNode !== null) {
        setTrailingComments(commentWS.leadingNode, comments);
      }
      if (commentWS.trailingNode !== null) {
        setLeadingComments(commentWS.trailingNode, comments);
      }
    } else {
      const {
        containingNode: node,
        start: commentStart
      } = commentWS;
      if (this.input.charCodeAt(commentStart - 1) === 44) {
        switch (node.type) {
          case "ObjectExpression":
          case "ObjectPattern":
          case "RecordExpression":
            adjustInnerComments(node, node.properties, commentWS);
            break;
          case "CallExpression":
          case "OptionalCallExpression":
            adjustInnerComments(node, node.arguments, commentWS);
            break;
          case "FunctionDeclaration":
          case "FunctionExpression":
          case "ArrowFunctionExpression":
          case "ObjectMethod":
          case "ClassMethod":
          case "ClassPrivateMethod":
            adjustInnerComments(node, node.params, commentWS);
            break;
          case "ArrayExpression":
          case "ArrayPattern":
          case "TupleExpression":
            adjustInnerComments(node, node.elements, commentWS);
            break;
          case "ExportNamedDeclaration":
          case "ImportDeclaration":
            adjustInnerComments(node, node.specifiers, commentWS);
            break;
          default:
            {
              setInnerComments(node, comments);
            }
        }
      } else {
        setInnerComments(node, comments);
      }
    }
  }
  finalizeRemainingComments() {
    const {
      commentStack
    } = this.state;
    for (let i = commentStack.length - 1; i >= 0; i--) {
      this.finalizeComment(commentStack[i]);
    }
    this.state.commentStack = [];
  }
  resetPreviousNodeTrailingComments(node) {
    const {
      commentStack
    } = this.state;
    const {
      length
    } = commentStack;
    if (length === 0) return;
    const commentWS = commentStack[length - 1];
    if (commentWS.leadingNode === node) {
      commentWS.leadingNode = null;
    }
  }
  resetPreviousIdentifierLeadingComments(node) {
    const {
      commentStack
    } = this.state;
    const {
      length
    } = commentStack;
    if (length === 0) return;
    if (commentStack[length - 1].trailingNode === node) {
      commentStack[length - 1].trailingNode = null;
    } else if (length >= 2 && commentStack[length - 2].trailingNode === node) {
      commentStack[length - 2].trailingNode = null;
    }
  }
  takeSurroundingComments(node, start, end) {
    const {
      commentStack
    } = this.state;
    const commentStackLength = commentStack.length;
    if (commentStackLength === 0) return;
    let i = commentStackLength - 1;
    for (; i >= 0; i--) {
      const commentWS = commentStack[i];
      const commentEnd = commentWS.end;
      const commentStart = commentWS.start;
      if (commentStart === end) {
        commentWS.leadingNode = node;
      } else if (commentEnd === start) {
        commentWS.trailingNode = node;
      } else if (commentEnd < start) {
        break;
      }
    }
  }
}
const lineBreak = /\r\n?|[\n\u2028\u2029]/;
const lineBreakG = new RegExp(lineBreak.source, "g");
function isNewLine(code) {
  switch (code) {
    case 10:
    case 13:
    case 8232:
    case 8233:
      return true;
    default:
      return false;
  }
}
const skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
const skipWhiteSpaceInLine = /(?:[^\S\n\r\u2028\u2029]|\/\/.*|\/\*.*?\*\/)*/g;
const skipWhiteSpaceToLineBreak = new RegExp("(?=(" + skipWhiteSpaceInLine.source + "))\\1" + /(?=[\n\r\u2028\u2029]|\/\*(?!.*?\*\/)|$)/.source, "y");
function isWhitespace(code) {
  switch (code) {
    case 0x0009:
    case 0x000b:
    case 0x000c:
    case 32:
    case 160:
    case 5760:
    case 0x2000:
    case 0x2001:
    case 0x2002:
    case 0x2003:
    case 0x2004:
    case 0x2005:
    case 0x2006:
    case 0x2007:
    case 0x2008:
    case 0x2009:
    case 0x200a:
    case 0x202f:
    case 0x205f:
    case 0x3000:
    case 0xfeff:
      return true;
    default:
      return false;
  }
}
class State {
  constructor() {
    this.strict = void 0;
    this.curLine = void 0;
    this.lineStart = void 0;
    this.startLoc = void 0;
    this.endLoc = void 0;
    this.errors = [];
    this.potentialArrowAt = -1;
    this.noArrowAt = [];
    this.noArrowParamsConversionAt = [];
    this.maybeInArrowParameters = false;
    this.inType = false;
    this.noAnonFunctionType = false;
    this.hasFlowComment = false;
    this.isAmbientContext = false;
    this.inAbstractClass = false;
    this.inDisallowConditionalTypesContext = false;
    this.topicContext = {
      maxNumOfResolvableTopics: 0,
      maxTopicIndex: null
    };
    this.soloAwait = false;
    this.inFSharpPipelineDirectBody = false;
    this.labels = [];
    this.comments = [];
    this.commentStack = [];
    this.pos = 0;
    this.type = 139;
    this.value = null;
    this.start = 0;
    this.end = 0;
    this.lastTokEndLoc = null;
    this.lastTokStartLoc = null;
    this.lastTokStart = 0;
    this.context = [types.brace];
    this.canStartJSXElement = true;
    this.containsEsc = false;
    this.firstInvalidTemplateEscapePos = null;
    this.strictErrors = new Map();
    this.tokensLength = 0;
  }
  init({
    strictMode,
    sourceType,
    startLine,
    startColumn
  }) {
    this.strict = strictMode === false ? false : strictMode === true ? true : sourceType === "module";
    this.curLine = startLine;
    this.lineStart = -startColumn;
    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);
  }
  curPosition() {
    return new Position(this.curLine, this.pos - this.lineStart, this.pos);
  }
  clone(skipArrays) {
    const state = new State();
    const keys = Object.keys(this);
    for (let i = 0, length = keys.length; i < length; i++) {
      const key = keys[i];
      let val = this[key];
      if (!skipArrays && Array.isArray(val)) {
        val = val.slice();
      }
      state[key] = val;
    }
    return state;
  }
}
var _isDigit = function isDigit(code) {
  return code >= 48 && code <= 57;
};
const forbiddenNumericSeparatorSiblings = {
  decBinOct: new Set([46, 66, 69, 79, 95, 98, 101, 111]),
  hex: new Set([46, 88, 95, 120])
};
const isAllowedNumericSeparatorSibling = {
  bin: ch => ch === 48 || ch === 49,
  oct: ch => ch >= 48 && ch <= 55,
  dec: ch => ch >= 48 && ch <= 57,
  hex: ch => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102
};
function readStringContents(type, input, pos, lineStart, curLine, errors) {
  const initialPos = pos;
  const initialLineStart = lineStart;
  const initialCurLine = curLine;
  let out = "";
  let firstInvalidLoc = null;
  let chunkStart = pos;
  const {
    length
  } = input;
  for (;;) {
    if (pos >= length) {
      errors.unterminated(initialPos, initialLineStart, initialCurLine);
      out += input.slice(chunkStart, pos);
      break;
    }
    const ch = input.charCodeAt(pos);
    if (isStringEnd(type, ch, input, pos)) {
      out += input.slice(chunkStart, pos);
      break;
    }
    if (ch === 92) {
      out += input.slice(chunkStart, pos);
      const res = readEscapedChar(input, pos, lineStart, curLine, type === "template", errors);
      if (res.ch === null && !firstInvalidLoc) {
        firstInvalidLoc = {
          pos,
          lineStart,
          curLine
        };
      } else {
        out += res.ch;
      }
      ({
        pos,
        lineStart,
        curLine
      } = res);
      chunkStart = pos;
    } else if (ch === 8232 || ch === 8233) {
      ++pos;
      ++curLine;
      lineStart = pos;
    } else if (ch === 10 || ch === 13) {
      if (type === "template") {
        out += input.slice(chunkStart, pos) + "\n";
        ++pos;
        if (ch === 13 && input.charCodeAt(pos) === 10) {
          ++pos;
        }
        ++curLine;
        chunkStart = lineStart = pos;
      } else {
        errors.unterminated(initialPos, initialLineStart, initialCurLine);
      }
    } else {
      ++pos;
    }
  }
  return {
    pos,
    str: out,
    firstInvalidLoc,
    lineStart,
    curLine,
    containsInvalid: !!firstInvalidLoc
  };
}
function isStringEnd(type, ch, input, pos) {
  if (type === "template") {
    return ch === 96 || ch === 36 && input.charCodeAt(pos + 1) === 123;
  }
  return ch === (type === "double" ? 34 : 39);
}
function readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {
  const throwOnInvalid = !inTemplate;
  pos++;
  const res = ch => ({
    pos,
    ch,
    lineStart,
    curLine
  });
  const ch = input.charCodeAt(pos++);
  switch (ch) {
    case 110:
      return res("\n");
    case 114:
      return res("\r");
    case 120:
      {
        let code;
        ({
          code,
          pos
        } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors));
        return res(code === null ? null : String.fromCharCode(code));
      }
    case 117:
      {
        let code;
        ({
          code,
          pos
        } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors));
        return res(code === null ? null : String.fromCodePoint(code));
      }
    case 116:
      return res("\t");
    case 98:
      return res("\b");
    case 118:
      return res("\u000b");
    case 102:
      return res("\f");
    case 13:
      if (input.charCodeAt(pos) === 10) {
        ++pos;
      }
    case 10:
      lineStart = pos;
      ++curLine;
    case 8232:
    case 8233:
      return res("");
    case 56:
    case 57:
      if (inTemplate) {
        return res(null);
      } else {
        errors.strictNumericEscape(pos - 1, lineStart, curLine);
      }
    default:
      if (ch >= 48 && ch <= 55) {
        const startPos = pos - 1;
        const match = input.slice(startPos, pos + 2).match(/^[0-7]+/);
        let octalStr = match[0];
        let octal = parseInt(octalStr, 8);
        if (octal > 255) {
          octalStr = octalStr.slice(0, -1);
          octal = parseInt(octalStr, 8);
        }
        pos += octalStr.length - 1;
        const next = input.charCodeAt(pos);
        if (octalStr !== "0" || next === 56 || next === 57) {
          if (inTemplate) {
            return res(null);
          } else {
            errors.strictNumericEscape(startPos, lineStart, curLine);
          }
        }
        return res(String.fromCharCode(octal));
      }
      return res(String.fromCharCode(ch));
  }
}
function readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {
  const initialPos = pos;
  let n;
  ({
    n,
    pos
  } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors, !throwOnInvalid));
  if (n === null) {
    if (throwOnInvalid) {
      errors.invalidEscapeSequence(initialPos, lineStart, curLine);
    } else {
      pos = initialPos - 1;
    }
  }
  return {
    code: n,
    pos
  };
}
function readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors, bailOnError) {
  const start = pos;
  const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;
  const isAllowedSibling = radix === 16 ? isAllowedNumericSeparatorSibling.hex : radix === 10 ? isAllowedNumericSeparatorSibling.dec : radix === 8 ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;
  let invalid = false;
  let total = 0;
  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {
    const code = input.charCodeAt(pos);
    let val;
    if (code === 95 && allowNumSeparator !== "bail") {
      const prev = input.charCodeAt(pos - 1);
      const next = input.charCodeAt(pos + 1);
      if (!allowNumSeparator) {
        if (bailOnError) return {
          n: null,
          pos
        };
        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);
      } else if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {
        if (bailOnError) return {
          n: null,
          pos
        };
        errors.unexpectedNumericSeparator(pos, lineStart, curLine);
      }
      ++pos;
      continue;
    }
    if (code >= 97) {
      val = code - 97 + 10;
    } else if (code >= 65) {
      val = code - 65 + 10;
    } else if (_isDigit(code)) {
      val = code - 48;
    } else {
      val = Infinity;
    }
    if (val >= radix) {
      if (val <= 9 && bailOnError) {
        return {
          n: null,
          pos
        };
      } else if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix)) {
        val = 0;
      } else if (forceLen) {
        val = 0;
        invalid = true;
      } else {
        break;
      }
    }
    ++pos;
    total = total * radix + val;
  }
  if (pos === start || len != null && pos - start !== len || invalid) {
    return {
      n: null,
      pos
    };
  }
  return {
    n: total,
    pos
  };
}
function readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {
  const ch = input.charCodeAt(pos);
  let code;
  if (ch === 123) {
    ++pos;
    ({
      code,
      pos
    } = readHexChar(input, pos, lineStart, curLine, input.indexOf("}", pos) - pos, true, throwOnInvalid, errors));
    ++pos;
    if (code !== null && code > 0x10ffff) {
      if (throwOnInvalid) {
        errors.invalidCodePoint(pos, lineStart, curLine);
      } else {
        return {
          code: null,
          pos
        };
      }
    }
  } else {
    ({
      code,
      pos
    } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));
  }
  return {
    code,
    pos
  };
}
const _excluded = ["at"],
  _excluded2 = ["at"];
function buildPosition(pos, lineStart, curLine) {
  return new Position(curLine, pos - lineStart, pos);
}
const VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100, 118]);
class Token {
  constructor(state) {
    this.type = state.type;
    this.value = state.value;
    this.start = state.start;
    this.end = state.end;
    this.loc = new SourceLocation(state.startLoc, state.endLoc);
  }
}
class Tokenizer extends CommentsParser {
  constructor(options, input) {
    super();
    this.isLookahead = void 0;
    this.tokens = [];
    this.errorHandlers_readInt = {
      invalidDigit: (pos, lineStart, curLine, radix) => {
        if (!this.options.errorRecovery) return false;
        this.raise(Errors.InvalidDigit, {
          at: buildPosition(pos, lineStart, curLine),
          radix
        });
        return true;
      },
      numericSeparatorInEscapeSequence: this.errorBuilder(Errors.NumericSeparatorInEscapeSequence),
      unexpectedNumericSeparator: this.errorBuilder(Errors.UnexpectedNumericSeparator)
    };
    this.errorHandlers_readCodePoint = Object.assign({}, this.errorHandlers_readInt, {
      invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),
      invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint)
    });
    this.errorHandlers_readStringContents_string = Object.assign({}, this.errorHandlers_readCodePoint, {
      strictNumericEscape: (pos, lineStart, curLine) => {
        this.recordStrictModeErrors(Errors.StrictNumericEscape, {
          at: buildPosition(pos, lineStart, curLine)
        });
      },
      unterminated: (pos, lineStart, curLine) => {
        throw this.raise(Errors.UnterminatedString, {
          at: buildPosition(pos - 1, lineStart, curLine)
        });
      }
    });
    this.errorHandlers_readStringContents_template = Object.assign({}, this.errorHandlers_readCodePoint, {
      strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),
      unterminated: (pos, lineStart, curLine) => {
        throw this.raise(Errors.UnterminatedTemplate, {
          at: buildPosition(pos, lineStart, curLine)
        });
      }
    });
    this.state = new State();
    this.state.init(options);
    this.input = input;
    this.length = input.length;
    this.isLookahead = false;
  }
  pushToken(token) {
    this.tokens.length = this.state.tokensLength;
    this.tokens.push(token);
    ++this.state.tokensLength;
  }
  next() {
    this.checkKeywordEscapes();
    if (this.options.tokens) {
      this.pushToken(new Token(this.state));
    }
    this.state.lastTokStart = this.state.start;
    this.state.lastTokEndLoc = this.state.endLoc;
    this.state.lastTokStartLoc = this.state.startLoc;
    this.nextToken();
  }
  eat(type) {
    if (this.match(type)) {
      this.next();
      return true;
    } else {
      return false;
    }
  }
  match(type) {
    return this.state.type === type;
  }
  createLookaheadState(state) {
    return {
      pos: state.pos,
      value: null,
      type: state.type,
      start: state.start,
      end: state.end,
      context: [this.curContext()],
      inType: state.inType,
      startLoc: state.startLoc,
      lastTokEndLoc: state.lastTokEndLoc,
      curLine: state.curLine,
      lineStart: state.lineStart,
      curPosition: state.curPosition
    };
  }
  lookahead() {
    const old = this.state;
    this.state = this.createLookaheadState(old);
    this.isLookahead = true;
    this.nextToken();
    this.isLookahead = false;
    const curr = this.state;
    this.state = old;
    return curr;
  }
  nextTokenStart() {
    return this.nextTokenStartSince(this.state.pos);
  }
  nextTokenStartSince(pos) {
    skipWhiteSpace.lastIndex = pos;
    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;
  }
  lookaheadCharCode() {
    return this.input.charCodeAt(this.nextTokenStart());
  }
  nextTokenInLineStart() {
    return this.nextTokenInLineStartSince(this.state.pos);
  }
  nextTokenInLineStartSince(pos) {
    skipWhiteSpaceInLine.lastIndex = pos;
    return skipWhiteSpaceInLine.test(this.input) ? skipWhiteSpaceInLine.lastIndex : pos;
  }
  lookaheadInLineCharCode() {
    return this.input.charCodeAt(this.nextTokenInLineStart());
  }
  codePointAtPos(pos) {
    let cp = this.input.charCodeAt(pos);
    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {
      const trail = this.input.charCodeAt(pos);
      if ((trail & 0xfc00) === 0xdc00) {
        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);
      }
    }
    return cp;
  }
  setStrict(strict) {
    this.state.strict = strict;
    if (strict) {
      this.state.strictErrors.forEach(([toParseError, at]) => this.raise(toParseError, {
        at
      }));
      this.state.strictErrors.clear();
    }
  }
  curContext() {
    return this.state.context[this.state.context.length - 1];
  }
  nextToken() {
    this.skipSpace();
    this.state.start = this.state.pos;
    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();
    if (this.state.pos >= this.length) {
      this.finishToken(139);
      return;
    }
    this.getTokenFromCode(this.codePointAtPos(this.state.pos));
  }
  skipBlockComment(commentEnd) {
    let startLoc;
    if (!this.isLookahead) startLoc = this.state.curPosition();
    const start = this.state.pos;
    const end = this.input.indexOf(commentEnd, start + 2);
    if (end === -1) {
      throw this.raise(Errors.UnterminatedComment, {
        at: this.state.curPosition()
      });
    }
    this.state.pos = end + commentEnd.length;
    lineBreakG.lastIndex = start + 2;
    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {
      ++this.state.curLine;
      this.state.lineStart = lineBreakG.lastIndex;
    }
    if (this.isLookahead) return;
    const comment = {
      type: "CommentBlock",
      value: this.input.slice(start + 2, end),
      start,
      end: end + commentEnd.length,
      loc: new SourceLocation(startLoc, this.state.curPosition())
    };
    if (this.options.tokens) this.pushToken(comment);
    return comment;
  }
  skipLineComment(startSkip) {
    const start = this.state.pos;
    let startLoc;
    if (!this.isLookahead) startLoc = this.state.curPosition();
    let ch = this.input.charCodeAt(this.state.pos += startSkip);
    if (this.state.pos < this.length) {
      while (!isNewLine(ch) && ++this.state.pos < this.length) {
        ch = this.input.charCodeAt(this.state.pos);
      }
    }
    if (this.isLookahead) return;
    const end = this.state.pos;
    const value = this.input.slice(start + startSkip, end);
    const comment = {
      type: "CommentLine",
      value,
      start,
      end,
      loc: new SourceLocation(startLoc, this.state.curPosition())
    };
    if (this.options.tokens) this.pushToken(comment);
    return comment;
  }
  skipSpace() {
    const spaceStart = this.state.pos;
    const comments = [];
    loop: while (this.state.pos < this.length) {
      const ch = this.input.charCodeAt(this.state.pos);
      switch (ch) {
        case 32:
        case 160:
        case 9:
          ++this.state.pos;
          break;
        case 13:
          if (this.input.charCodeAt(this.state.pos + 1) === 10) {
            ++this.state.pos;
          }
        case 10:
        case 8232:
        case 8233:
          ++this.state.pos;
          ++this.state.curLine;
          this.state.lineStart = this.state.pos;
          break;
        case 47:
          switch (this.input.charCodeAt(this.state.pos + 1)) {
            case 42:
              {
                const comment = this.skipBlockComment("*/");
                if (comment !== undefined) {
                  this.addComment(comment);
                  if (this.options.attachComment) comments.push(comment);
                }
                break;
              }
            case 47:
              {
                const comment = this.skipLineComment(2);
                if (comment !== undefined) {
                  this.addComment(comment);
                  if (this.options.attachComment) comments.push(comment);
                }
                break;
              }
            default:
              break loop;
          }
          break;
        default:
          if (isWhitespace(ch)) {
            ++this.state.pos;
          } else if (ch === 45 && !this.inModule && this.options.annexB) {
            const pos = this.state.pos;
            if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {
              const comment = this.skipLineComment(3);
              if (comment !== undefined) {
                this.addComment(comment);
                if (this.options.attachComment) comments.push(comment);
              }
            } else {
              break loop;
            }
          } else if (ch === 60 && !this.inModule && this.options.annexB) {
            const pos = this.state.pos;
            if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {
              const comment = this.skipLineComment(4);
              if (comment !== undefined) {
                this.addComment(comment);
                if (this.options.attachComment) comments.push(comment);
              }
            } else {
              break loop;
            }
          } else {
            break loop;
          }
      }
    }
    if (comments.length > 0) {
      const end = this.state.pos;
      const commentWhitespace = {
        start: spaceStart,
        end,
        comments,
        leadingNode: null,
        trailingNode: null,
        containingNode: null
      };
      this.state.commentStack.push(commentWhitespace);
    }
  }
  finishToken(type, val) {
    this.state.end = this.state.pos;
    this.state.endLoc = this.state.curPosition();
    const prevType = this.state.type;
    this.state.type = type;
    this.state.value = val;
    if (!this.isLookahead) {
      this.updateContext(prevType);
    }
  }
  replaceToken(type) {
    this.state.type = type;
    this.updateContext();
  }
  readToken_numberSign() {
    if (this.state.pos === 0 && this.readToken_interpreter()) {
      return;
    }
    const nextPos = this.state.pos + 1;
    const next = this.codePointAtPos(nextPos);
    if (next >= 48 && next <= 57) {
      throw this.raise(Errors.UnexpectedDigitAfterHash, {
        at: this.state.curPosition()
      });
    }
    if (next === 123 || next === 91 && this.hasPlugin("recordAndTuple")) {
      this.expectPlugin("recordAndTuple");
      if (this.getPluginOption("recordAndTuple", "syntaxType") === "bar") {
        throw this.raise(next === 123 ? Errors.RecordExpressionHashIncorrectStartSyntaxType : Errors.TupleExpressionHashIncorrectStartSyntaxType, {
          at: this.state.curPosition()
        });
      }
      this.state.pos += 2;
      if (next === 123) {
        this.finishToken(7);
      } else {
        this.finishToken(1);
      }
    } else if (isIdentifierStart(next)) {
      ++this.state.pos;
      this.finishToken(138, this.readWord1(next));
    } else if (next === 92) {
      ++this.state.pos;
      this.finishToken(138, this.readWord1());
    } else {
      this.finishOp(27, 1);
    }
  }
  readToken_dot() {
    const next = this.input.charCodeAt(this.state.pos + 1);
    if (next >= 48 && next <= 57) {
      this.readNumber(true);
      return;
    }
    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {
      this.state.pos += 3;
      this.finishToken(21);
    } else {
      ++this.state.pos;
      this.finishToken(16);
    }
  }
  readToken_slash() {
    const next = this.input.charCodeAt(this.state.pos + 1);
    if (next === 61) {
      this.finishOp(31, 2);
    } else {
      this.finishOp(56, 1);
    }
  }
  readToken_interpreter() {
    if (this.state.pos !== 0 || this.length < 2) return false;
    let ch = this.input.charCodeAt(this.state.pos + 1);
    if (ch !== 33) return false;
    const start = this.state.pos;
    this.state.pos += 1;
    while (!isNewLine(ch) && ++this.state.pos < this.length) {
      ch = this.input.charCodeAt(this.state.pos);
    }
    const value = this.input.slice(start + 2, this.state.pos);
    this.finishToken(28, value);
    return true;
  }
  readToken_mult_modulo(code) {
    let type = code === 42 ? 55 : 54;
    let width = 1;
    let next = this.input.charCodeAt(this.state.pos + 1);
    if (code === 42 && next === 42) {
      width++;
      next = this.input.charCodeAt(this.state.pos + 2);
      type = 57;
    }
    if (next === 61 && !this.state.inType) {
      width++;
      type = code === 37 ? 33 : 30;
    }
    this.finishOp(type, width);
  }
  readToken_pipe_amp(code) {
    const next = this.input.charCodeAt(this.state.pos + 1);
    if (next === code) {
      if (this.input.charCodeAt(this.state.pos + 2) === 61) {
        this.finishOp(30, 3);
      } else {
        this.finishOp(code === 124 ? 41 : 42, 2);
      }
      return;
    }
    if (code === 124) {
      if (next === 62) {
        this.finishOp(39, 2);
        return;
      }
      if (this.hasPlugin("recordAndTuple") && next === 125) {
        if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {
            at: this.state.curPosition()
          });
        }
        this.state.pos += 2;
        this.finishToken(9);
        return;
      }
      if (this.hasPlugin("recordAndTuple") && next === 93) {
        if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {
            at: this.state.curPosition()
          });
        }
        this.state.pos += 2;
        this.finishToken(4);
        return;
      }
    }
    if (next === 61) {
      this.finishOp(30, 2);
      return;
    }
    this.finishOp(code === 124 ? 43 : 45, 1);
  }
  readToken_caret() {
    const next = this.input.charCodeAt(this.state.pos + 1);
    if (next === 61 && !this.state.inType) {
      this.finishOp(32, 2);
    } else if (next === 94 && this.hasPlugin(["pipelineOperator", {
      proposal: "hack",
      topicToken: "^^"
    }])) {
      this.finishOp(37, 2);
      const lookaheadCh = this.input.codePointAt(this.state.pos);
      if (lookaheadCh === 94) {
        this.unexpected();
      }
    } else {
      this.finishOp(44, 1);
    }
  }
  readToken_atSign() {
    const next = this.input.charCodeAt(this.state.pos + 1);
    if (next === 64 && this.hasPlugin(["pipelineOperator", {
      proposal: "hack",
      topicToken: "@@"
    }])) {
      this.finishOp(38, 2);
    } else {
      this.finishOp(26, 1);
    }
  }
  readToken_plus_min(code) {
    const next = this.input.charCodeAt(this.state.pos + 1);
    if (next === code) {
      this.finishOp(34, 2);
      return;
    }
    if (next === 61) {
      this.finishOp(30, 2);
    } else {
      this.finishOp(53, 1);
    }
  }
  readToken_lt() {
    const {
      pos
    } = this.state;
    const next = this.input.charCodeAt(pos + 1);
    if (next === 60) {
      if (this.input.charCodeAt(pos + 2) === 61) {
        this.finishOp(30, 3);
        return;
      }
      this.finishOp(51, 2);
      return;
    }
    if (next === 61) {
      this.finishOp(49, 2);
      return;
    }
    this.finishOp(47, 1);
  }
  readToken_gt() {
    const {
      pos
    } = this.state;
    const next = this.input.charCodeAt(pos + 1);
    if (next === 62) {
      const size = this.input.charCodeAt(pos + 2) === 62 ? 3 : 2;
      if (this.input.charCodeAt(pos + size) === 61) {
        this.finishOp(30, size + 1);
        return;
      }
      this.finishOp(52, size);
      return;
    }
    if (next === 61) {
      this.finishOp(49, 2);
      return;
    }
    this.finishOp(48, 1);
  }
  readToken_eq_excl(code) {
    const next = this.input.charCodeAt(this.state.pos + 1);
    if (next === 61) {
      this.finishOp(46, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
      return;
    }
    if (code === 61 && next === 62) {
      this.state.pos += 2;
      this.finishToken(19);
      return;
    }
    this.finishOp(code === 61 ? 29 : 35, 1);
  }
  readToken_question() {
    const next = this.input.charCodeAt(this.state.pos + 1);
    const next2 = this.input.charCodeAt(this.state.pos + 2);
    if (next === 63) {
      if (next2 === 61) {
        this.finishOp(30, 3);
      } else {
        this.finishOp(40, 2);
      }
    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {
      this.state.pos += 2;
      this.finishToken(18);
    } else {
      ++this.state.pos;
      this.finishToken(17);
    }
  }
  getTokenFromCode(code) {
    switch (code) {
      case 46:
        this.readToken_dot();
        return;
      case 40:
        ++this.state.pos;
        this.finishToken(10);
        return;
      case 41:
        ++this.state.pos;
        this.finishToken(11);
        return;
      case 59:
        ++this.state.pos;
        this.finishToken(13);
        return;
      case 44:
        ++this.state.pos;
        this.finishToken(12);
        return;
      case 91:
        if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
          if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
            throw this.raise(Errors.TupleExpressionBarIncorrectStartSyntaxType, {
              at: this.state.curPosition()
            });
          }
          this.state.pos += 2;
          this.finishToken(2);
        } else {
          ++this.state.pos;
          this.finishToken(0);
        }
        return;
      case 93:
        ++this.state.pos;
        this.finishToken(3);
        return;
      case 123:
        if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
          if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
            throw this.raise(Errors.RecordExpressionBarIncorrectStartSyntaxType, {
              at: this.state.curPosition()
            });
          }
          this.state.pos += 2;
          this.finishToken(6);
        } else {
          ++this.state.pos;
          this.finishToken(5);
        }
        return;
      case 125:
        ++this.state.pos;
        this.finishToken(8);
        return;
      case 58:
        if (this.hasPlugin("functionBind") && this.input.charCodeAt(this.state.pos + 1) === 58) {
          this.finishOp(15, 2);
        } else {
          ++this.state.pos;
          this.finishToken(14);
        }
        return;
      case 63:
        this.readToken_question();
        return;
      case 96:
        this.readTemplateToken();
        return;
      case 48:
        {
          const next = this.input.charCodeAt(this.state.pos + 1);
          if (next === 120 || next === 88) {
            this.readRadixNumber(16);
            return;
          }
          if (next === 111 || next === 79) {
            this.readRadixNumber(8);
            return;
          }
          if (next === 98 || next === 66) {
            this.readRadixNumber(2);
            return;
          }
        }
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
        this.readNumber(false);
        return;
      case 34:
      case 39:
        this.readString(code);
        return;
      case 47:
        this.readToken_slash();
        return;
      case 37:
      case 42:
        this.readToken_mult_modulo(code);
        return;
      case 124:
      case 38:
        this.readToken_pipe_amp(code);
        return;
      case 94:
        this.readToken_caret();
        return;
      case 43:
      case 45:
        this.readToken_plus_min(code);
        return;
      case 60:
        this.readToken_lt();
        return;
      case 62:
        this.readToken_gt();
        return;
      case 61:
      case 33:
        this.readToken_eq_excl(code);
        return;
      case 126:
        this.finishOp(36, 1);
        return;
      case 64:
        this.readToken_atSign();
        return;
      case 35:
        this.readToken_numberSign();
        return;
      case 92:
        this.readWord();
        return;
      default:
        if (isIdentifierStart(code)) {
          this.readWord(code);
          return;
        }
    }
    throw this.raise(Errors.InvalidOrUnexpectedToken, {
      at: this.state.curPosition(),
      unexpected: String.fromCodePoint(code)
    });
  }
  finishOp(type, size) {
    const str = this.input.slice(this.state.pos, this.state.pos + size);
    this.state.pos += size;
    this.finishToken(type, str);
  }
  readRegexp() {
    const startLoc = this.state.startLoc;
    const start = this.state.start + 1;
    let escaped, inClass;
    let {
      pos
    } = this.state;
    for (;; ++pos) {
      if (pos >= this.length) {
        throw this.raise(Errors.UnterminatedRegExp, {
          at: createPositionWithColumnOffset(startLoc, 1)
        });
      }
      const ch = this.input.charCodeAt(pos);
      if (isNewLine(ch)) {
        throw this.raise(Errors.UnterminatedRegExp, {
          at: createPositionWithColumnOffset(startLoc, 1)
        });
      }
      if (escaped) {
        escaped = false;
      } else {
        if (ch === 91) {
          inClass = true;
        } else if (ch === 93 && inClass) {
          inClass = false;
        } else if (ch === 47 && !inClass) {
          break;
        }
        escaped = ch === 92;
      }
    }
    const content = this.input.slice(start, pos);
    ++pos;
    let mods = "";
    const nextPos = () => createPositionWithColumnOffset(startLoc, pos + 2 - start);
    while (pos < this.length) {
      const cp = this.codePointAtPos(pos);
      const char = String.fromCharCode(cp);
      if (VALID_REGEX_FLAGS.has(cp)) {
        if (cp === 118) {
          if (mods.includes("u")) {
            this.raise(Errors.IncompatibleRegExpUVFlags, {
              at: nextPos()
            });
          }
        } else if (cp === 117) {
          if (mods.includes("v")) {
            this.raise(Errors.IncompatibleRegExpUVFlags, {
              at: nextPos()
            });
          }
        }
        if (mods.includes(char)) {
          this.raise(Errors.DuplicateRegExpFlags, {
            at: nextPos()
          });
        }
      } else if (isIdentifierChar(cp) || cp === 92) {
        this.raise(Errors.MalformedRegExpFlags, {
          at: nextPos()
        });
      } else {
        break;
      }
      ++pos;
      mods += char;
    }
    this.state.pos = pos;
    this.finishToken(137, {
      pattern: content,
      flags: mods
    });
  }
  readInt(radix, len, forceLen = false, allowNumSeparator = true) {
    const {
      n,
      pos
    } = readInt(this.input, this.state.pos, this.state.lineStart, this.state.curLine, radix, len, forceLen, allowNumSeparator, this.errorHandlers_readInt, false);
    this.state.pos = pos;
    return n;
  }
  readRadixNumber(radix) {
    const startLoc = this.state.curPosition();
    let isBigInt = false;
    this.state.pos += 2;
    const val = this.readInt(radix);
    if (val == null) {
      this.raise(Errors.InvalidDigit, {
        at: createPositionWithColumnOffset(startLoc, 2),
        radix
      });
    }
    const next = this.input.charCodeAt(this.state.pos);
    if (next === 110) {
      ++this.state.pos;
      isBigInt = true;
    } else if (next === 109) {
      throw this.raise(Errors.InvalidDecimal, {
        at: startLoc
      });
    }
    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {
      throw this.raise(Errors.NumberIdentifier, {
        at: this.state.curPosition()
      });
    }
    if (isBigInt) {
      const str = this.input.slice(startLoc.index, this.state.pos).replace(/[_n]/g, "");
      this.finishToken(135, str);
      return;
    }
    this.finishToken(134, val);
  }
  readNumber(startsWithDot) {
    const start = this.state.pos;
    const startLoc = this.state.curPosition();
    let isFloat = false;
    let isBigInt = false;
    let isDecimal = false;
    let hasExponent = false;
    let isOctal = false;
    if (!startsWithDot && this.readInt(10) === null) {
      this.raise(Errors.InvalidNumber, {
        at: this.state.curPosition()
      });
    }
    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;
    if (hasLeadingZero) {
      const integer = this.input.slice(start, this.state.pos);
      this.recordStrictModeErrors(Errors.StrictOctalLiteral, {
        at: startLoc
      });
      if (!this.state.strict) {
        const underscorePos = integer.indexOf("_");
        if (underscorePos > 0) {
          this.raise(Errors.ZeroDigitNumericSeparator, {
            at: createPositionWithColumnOffset(startLoc, underscorePos)
          });
        }
      }
      isOctal = hasLeadingZero && !/[89]/.test(integer);
    }
    let next = this.input.charCodeAt(this.state.pos);
    if (next === 46 && !isOctal) {
      ++this.state.pos;
      this.readInt(10);
      isFloat = true;
      next = this.input.charCodeAt(this.state.pos);
    }
    if ((next === 69 || next === 101) && !isOctal) {
      next = this.input.charCodeAt(++this.state.pos);
      if (next === 43 || next === 45) {
        ++this.state.pos;
      }
      if (this.readInt(10) === null) {
        this.raise(Errors.InvalidOrMissingExponent, {
          at: startLoc
        });
      }
      isFloat = true;
      hasExponent = true;
      next = this.input.charCodeAt(this.state.pos);
    }
    if (next === 110) {
      if (isFloat || hasLeadingZero) {
        this.raise(Errors.InvalidBigIntLiteral, {
          at: startLoc
        });
      }
      ++this.state.pos;
      isBigInt = true;
    }
    if (next === 109) {
      this.expectPlugin("decimal", this.state.curPosition());
      if (hasExponent || hasLeadingZero) {
        this.raise(Errors.InvalidDecimal, {
          at: startLoc
        });
      }
      ++this.state.pos;
      isDecimal = true;
    }
    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {
      throw this.raise(Errors.NumberIdentifier, {
        at: this.state.curPosition()
      });
    }
    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, "");
    if (isBigInt) {
      this.finishToken(135, str);
      return;
    }
    if (isDecimal) {
      this.finishToken(136, str);
      return;
    }
    const val = isOctal ? parseInt(str, 8) : parseFloat(str);
    this.finishToken(134, val);
  }
  readCodePoint(throwOnInvalid) {
    const {
      code,
      pos
    } = readCodePoint(this.input, this.state.pos, this.state.lineStart, this.state.curLine, throwOnInvalid, this.errorHandlers_readCodePoint);
    this.state.pos = pos;
    return code;
  }
  readString(quote) {
    const {
      str,
      pos,
      curLine,
      lineStart
    } = readStringContents(quote === 34 ? "double" : "single", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_string);
    this.state.pos = pos + 1;
    this.state.lineStart = lineStart;
    this.state.curLine = curLine;
    this.finishToken(133, str);
  }
  readTemplateContinuation() {
    if (!this.match(8)) {
      this.unexpected(null, 8);
    }
    this.state.pos--;
    this.readTemplateToken();
  }
  readTemplateToken() {
    const opening = this.input[this.state.pos];
    const {
      str,
      firstInvalidLoc,
      pos,
      curLine,
      lineStart
    } = readStringContents("template", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_template);
    this.state.pos = pos + 1;
    this.state.lineStart = lineStart;
    this.state.curLine = curLine;
    if (firstInvalidLoc) {
      this.state.firstInvalidTemplateEscapePos = new Position(firstInvalidLoc.curLine, firstInvalidLoc.pos - firstInvalidLoc.lineStart, firstInvalidLoc.pos);
    }
    if (this.input.codePointAt(pos) === 96) {
      this.finishToken(24, firstInvalidLoc ? null : opening + str + "`");
    } else {
      this.state.pos++;
      this.finishToken(25, firstInvalidLoc ? null : opening + str + "${");
    }
  }
  recordStrictModeErrors(toParseError, {
    at
  }) {
    const index = at.index;
    if (this.state.strict && !this.state.strictErrors.has(index)) {
      this.raise(toParseError, {
        at
      });
    } else {
      this.state.strictErrors.set(index, [toParseError, at]);
    }
  }
  readWord1(firstCode) {
    this.state.containsEsc = false;
    let word = "";
    const start = this.state.pos;
    let chunkStart = this.state.pos;
    if (firstCode !== undefined) {
      this.state.pos += firstCode <= 0xffff ? 1 : 2;
    }
    while (this.state.pos < this.length) {
      const ch = this.codePointAtPos(this.state.pos);
      if (isIdentifierChar(ch)) {
        this.state.pos += ch <= 0xffff ? 1 : 2;
      } else if (ch === 92) {
        this.state.containsEsc = true;
        word += this.input.slice(chunkStart, this.state.pos);
        const escStart = this.state.curPosition();
        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;
        if (this.input.charCodeAt(++this.state.pos) !== 117) {
          this.raise(Errors.MissingUnicodeEscape, {
            at: this.state.curPosition()
          });
          chunkStart = this.state.pos - 1;
          continue;
        }
        ++this.state.pos;
        const esc = this.readCodePoint(true);
        if (esc !== null) {
          if (!identifierCheck(esc)) {
            this.raise(Errors.EscapedCharNotAnIdentifier, {
              at: escStart
            });
          }
          word += String.fromCodePoint(esc);
        }
        chunkStart = this.state.pos;
      } else {
        break;
      }
    }
    return word + this.input.slice(chunkStart, this.state.pos);
  }
  readWord(firstCode) {
    const word = this.readWord1(firstCode);
    const type = keywords$1.get(word);
    if (type !== undefined) {
      this.finishToken(type, tokenLabelName(type));
    } else {
      this.finishToken(132, word);
    }
  }
  checkKeywordEscapes() {
    const {
      type
    } = this.state;
    if (tokenIsKeyword(type) && this.state.containsEsc) {
      this.raise(Errors.InvalidEscapedReservedWord, {
        at: this.state.startLoc,
        reservedWord: tokenLabelName(type)
      });
    }
  }
  raise(toParseError, raiseProperties) {
    const {
        at
      } = raiseProperties,
      details = _objectWithoutPropertiesLoose(raiseProperties, _excluded);
    const loc = at instanceof Position ? at : at.loc.start;
    const error = toParseError({
      loc,
      details
    });
    if (!this.options.errorRecovery) throw error;
    if (!this.isLookahead) this.state.errors.push(error);
    return error;
  }
  raiseOverwrite(toParseError, raiseProperties) {
    const {
        at
      } = raiseProperties,
      details = _objectWithoutPropertiesLoose(raiseProperties, _excluded2);
    const loc = at instanceof Position ? at : at.loc.start;
    const pos = loc.index;
    const errors = this.state.errors;
    for (let i = errors.length - 1; i >= 0; i--) {
      const error = errors[i];
      if (error.loc.index === pos) {
        return errors[i] = toParseError({
          loc,
          details
        });
      }
      if (error.loc.index < pos) break;
    }
    return this.raise(toParseError, raiseProperties);
  }
  updateContext(prevType) {}
  unexpected(loc, type) {
    throw this.raise(Errors.UnexpectedToken, {
      expected: type ? tokenLabelName(type) : null,
      at: loc != null ? loc : this.state.startLoc
    });
  }
  expectPlugin(pluginName, loc) {
    if (this.hasPlugin(pluginName)) {
      return true;
    }
    throw this.raise(Errors.MissingPlugin, {
      at: loc != null ? loc : this.state.startLoc,
      missingPlugin: [pluginName]
    });
  }
  expectOnePlugin(pluginNames) {
    if (!pluginNames.some(name => this.hasPlugin(name))) {
      throw this.raise(Errors.MissingOneOfPlugins, {
        at: this.state.startLoc,
        missingPlugin: pluginNames
      });
    }
  }
  errorBuilder(error) {
    return (pos, lineStart, curLine) => {
      this.raise(error, {
        at: buildPosition(pos, lineStart, curLine)
      });
    };
  }
}
class ClassScope {
  constructor() {
    this.privateNames = new Set();
    this.loneAccessors = new Map();
    this.undefinedPrivateNames = new Map();
  }
}
class ClassScopeHandler {
  constructor(parser) {
    this.parser = void 0;
    this.stack = [];
    this.undefinedPrivateNames = new Map();
    this.parser = parser;
  }
  current() {
    return this.stack[this.stack.length - 1];
  }
  enter() {
    this.stack.push(new ClassScope());
  }
  exit() {
    const oldClassScope = this.stack.pop();
    const current = this.current();
    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {
      if (current) {
        if (!current.undefinedPrivateNames.has(name)) {
          current.undefinedPrivateNames.set(name, loc);
        }
      } else {
        this.parser.raise(Errors.InvalidPrivateFieldResolution, {
          at: loc,
          identifierName: name
        });
      }
    }
  }
  declarePrivateName(name, elementType, loc) {
    const {
      privateNames,
      loneAccessors,
      undefinedPrivateNames
    } = this.current();
    let redefined = privateNames.has(name);
    if (elementType & 3) {
      const accessor = redefined && loneAccessors.get(name);
      if (accessor) {
        const oldStatic = accessor & 4;
        const newStatic = elementType & 4;
        const oldKind = accessor & 3;
        const newKind = elementType & 3;
        redefined = oldKind === newKind || oldStatic !== newStatic;
        if (!redefined) loneAccessors.delete(name);
      } else if (!redefined) {
        loneAccessors.set(name, elementType);
      }
    }
    if (redefined) {
      this.parser.raise(Errors.PrivateNameRedeclaration, {
        at: loc,
        identifierName: name
      });
    }
    privateNames.add(name);
    undefinedPrivateNames.delete(name);
  }
  usePrivateName(name, loc) {
    let classScope;
    for (classScope of this.stack) {
      if (classScope.privateNames.has(name)) return;
    }
    if (classScope) {
      classScope.undefinedPrivateNames.set(name, loc);
    } else {
      this.parser.raise(Errors.InvalidPrivateFieldResolution, {
        at: loc,
        identifierName: name
      });
    }
  }
}
class ExpressionScope {
  constructor(type = 0) {
    this.type = type;
  }
  canBeArrowParameterDeclaration() {
    return this.type === 2 || this.type === 1;
  }
  isCertainlyParameterDeclaration() {
    return this.type === 3;
  }
}
class ArrowHeadParsingScope extends ExpressionScope {
  constructor(type) {
    super(type);
    this.declarationErrors = new Map();
  }
  recordDeclarationError(ParsingErrorClass, {
    at
  }) {
    const index = at.index;
    this.declarationErrors.set(index, [ParsingErrorClass, at]);
  }
  clearDeclarationError(index) {
    this.declarationErrors.delete(index);
  }
  iterateErrors(iterator) {
    this.declarationErrors.forEach(iterator);
  }
}
class ExpressionScopeHandler {
  constructor(parser) {
    this.parser = void 0;
    this.stack = [new ExpressionScope()];
    this.parser = parser;
  }
  enter(scope) {
    this.stack.push(scope);
  }
  exit() {
    this.stack.pop();
  }
  recordParameterInitializerError(toParseError, {
    at: node
  }) {
    const origin = {
      at: node.loc.start
    };
    const {
      stack
    } = this;
    let i = stack.length - 1;
    let scope = stack[i];
    while (!scope.isCertainlyParameterDeclaration()) {
      if (scope.canBeArrowParameterDeclaration()) {
        scope.recordDeclarationError(toParseError, origin);
      } else {
        return;
      }
      scope = stack[--i];
    }
    this.parser.raise(toParseError, origin);
  }
  recordArrowParameterBindingError(error, {
    at: node
  }) {
    const {
      stack
    } = this;
    const scope = stack[stack.length - 1];
    const origin = {
      at: node.loc.start
    };
    if (scope.isCertainlyParameterDeclaration()) {
      this.parser.raise(error, origin);
    } else if (scope.canBeArrowParameterDeclaration()) {
      scope.recordDeclarationError(error, origin);
    } else {
      return;
    }
  }
  recordAsyncArrowParametersError({
    at
  }) {
    const {
      stack
    } = this;
    let i = stack.length - 1;
    let scope = stack[i];
    while (scope.canBeArrowParameterDeclaration()) {
      if (scope.type === 2) {
        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, {
          at
        });
      }
      scope = stack[--i];
    }
  }
  validateAsPattern() {
    const {
      stack
    } = this;
    const currentScope = stack[stack.length - 1];
    if (!currentScope.canBeArrowParameterDeclaration()) return;
    currentScope.iterateErrors(([toParseError, loc]) => {
      this.parser.raise(toParseError, {
        at: loc
      });
      let i = stack.length - 2;
      let scope = stack[i];
      while (scope.canBeArrowParameterDeclaration()) {
        scope.clearDeclarationError(loc.index);
        scope = stack[--i];
      }
    });
  }
}
function newParameterDeclarationScope() {
  return new ExpressionScope(3);
}
function newArrowHeadScope() {
  return new ArrowHeadParsingScope(1);
}
function newAsyncArrowScope() {
  return new ArrowHeadParsingScope(2);
}
function newExpressionScope() {
  return new ExpressionScope();
}
class ProductionParameterHandler {
  constructor() {
    this.stacks = [];
  }
  enter(flags) {
    this.stacks.push(flags);
  }
  exit() {
    this.stacks.pop();
  }
  currentFlags() {
    return this.stacks[this.stacks.length - 1];
  }
  get hasAwait() {
    return (this.currentFlags() & 2) > 0;
  }
  get hasYield() {
    return (this.currentFlags() & 1) > 0;
  }
  get hasReturn() {
    return (this.currentFlags() & 4) > 0;
  }
  get hasIn() {
    return (this.currentFlags() & 8) > 0;
  }
}
function functionFlags(isAsync, isGenerator) {
  return (isAsync ? 2 : 0) | (isGenerator ? 1 : 0);
}
class UtilParser extends Tokenizer {
  addExtra(node, key, value, enumerable = true) {
    if (!node) return;
    const extra = node.extra = node.extra || {};
    if (enumerable) {
      extra[key] = value;
    } else {
      Object.defineProperty(extra, key, {
        enumerable,
        value
      });
    }
  }
  isContextual(token) {
    return this.state.type === token && !this.state.containsEsc;
  }
  isUnparsedContextual(nameStart, name) {
    const nameEnd = nameStart + name.length;
    if (this.input.slice(nameStart, nameEnd) === name) {
      const nextCh = this.input.charCodeAt(nameEnd);
      return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);
    }
    return false;
  }
  isLookaheadContextual(name) {
    const next = this.nextTokenStart();
    return this.isUnparsedContextual(next, name);
  }
  eatContextual(token) {
    if (this.isContextual(token)) {
      this.next();
      return true;
    }
    return false;
  }
  expectContextual(token, toParseError) {
    if (!this.eatContextual(token)) {
      if (toParseError != null) {
        throw this.raise(toParseError, {
          at: this.state.startLoc
        });
      }
      this.unexpected(null, token);
    }
  }
  canInsertSemicolon() {
    return this.match(139) || this.match(8) || this.hasPrecedingLineBreak();
  }
  hasPrecedingLineBreak() {
    return lineBreak.test(this.input.slice(this.state.lastTokEndLoc.index, this.state.start));
  }
  hasFollowingLineBreak() {
    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;
    return skipWhiteSpaceToLineBreak.test(this.input);
  }
  isLineTerminator() {
    return this.eat(13) || this.canInsertSemicolon();
  }
  semicolon(allowAsi = true) {
    if (allowAsi ? this.isLineTerminator() : this.eat(13)) return;
    this.raise(Errors.MissingSemicolon, {
      at: this.state.lastTokEndLoc
    });
  }
  expect(type, loc) {
    this.eat(type) || this.unexpected(loc, type);
  }
  tryParse(fn, oldState = this.state.clone()) {
    const abortSignal = {
      node: null
    };
    try {
      const node = fn((node = null) => {
        abortSignal.node = node;
        throw abortSignal;
      });
      if (this.state.errors.length > oldState.errors.length) {
        const failState = this.state;
        this.state = oldState;
        this.state.tokensLength = failState.tokensLength;
        return {
          node,
          error: failState.errors[oldState.errors.length],
          thrown: false,
          aborted: false,
          failState
        };
      }
      return {
        node,
        error: null,
        thrown: false,
        aborted: false,
        failState: null
      };
    } catch (error) {
      const failState = this.state;
      this.state = oldState;
      if (error instanceof SyntaxError) {
        return {
          node: null,
          error,
          thrown: true,
          aborted: false,
          failState
        };
      }
      if (error === abortSignal) {
        return {
          node: abortSignal.node,
          error: null,
          thrown: false,
          aborted: true,
          failState
        };
      }
      throw error;
    }
  }
  checkExpressionErrors(refExpressionErrors, andThrow) {
    if (!refExpressionErrors) return false;
    const {
      shorthandAssignLoc,
      doubleProtoLoc,
      privateKeyLoc,
      optionalParametersLoc
    } = refExpressionErrors;
    const hasErrors = !!shorthandAssignLoc || !!doubleProtoLoc || !!optionalParametersLoc || !!privateKeyLoc;
    if (!andThrow) {
      return hasErrors;
    }
    if (shorthandAssignLoc != null) {
      this.raise(Errors.InvalidCoverInitializedName, {
        at: shorthandAssignLoc
      });
    }
    if (doubleProtoLoc != null) {
      this.raise(Errors.DuplicateProto, {
        at: doubleProtoLoc
      });
    }
    if (privateKeyLoc != null) {
      this.raise(Errors.UnexpectedPrivateField, {
        at: privateKeyLoc
      });
    }
    if (optionalParametersLoc != null) {
      this.unexpected(optionalParametersLoc);
    }
  }
  isLiteralPropertyName() {
    return tokenIsLiteralPropertyName(this.state.type);
  }
  isPrivateName(node) {
    return node.type === "PrivateName";
  }
  getPrivateNameSV(node) {
    return node.id.name;
  }
  hasPropertyAsPrivateName(node) {
    return (node.type === "MemberExpression" || node.type === "OptionalMemberExpression") && this.isPrivateName(node.property);
  }
  isObjectProperty(node) {
    return node.type === "ObjectProperty";
  }
  isObjectMethod(node) {
    return node.type === "ObjectMethod";
  }
  initializeScopes(inModule = this.options.sourceType === "module") {
    const oldLabels = this.state.labels;
    this.state.labels = [];
    const oldExportedIdentifiers = this.exportedIdentifiers;
    this.exportedIdentifiers = new Set();
    const oldInModule = this.inModule;
    this.inModule = inModule;
    const oldScope = this.scope;
    const ScopeHandler = this.getScopeHandler();
    this.scope = new ScopeHandler(this, inModule);
    const oldProdParam = this.prodParam;
    this.prodParam = new ProductionParameterHandler();
    const oldClassScope = this.classScope;
    this.classScope = new ClassScopeHandler(this);
    const oldExpressionScope = this.expressionScope;
    this.expressionScope = new ExpressionScopeHandler(this);
    return () => {
      this.state.labels = oldLabels;
      this.exportedIdentifiers = oldExportedIdentifiers;
      this.inModule = oldInModule;
      this.scope = oldScope;
      this.prodParam = oldProdParam;
      this.classScope = oldClassScope;
      this.expressionScope = oldExpressionScope;
    };
  }
  enterInitialScopes() {
    let paramFlags = 0;
    if (this.inModule) {
      paramFlags |= 2;
    }
    this.scope.enter(1);
    this.prodParam.enter(paramFlags);
  }
  checkDestructuringPrivate(refExpressionErrors) {
    const {
      privateKeyLoc
    } = refExpressionErrors;
    if (privateKeyLoc !== null) {
      this.expectPlugin("destructuringPrivate", privateKeyLoc);
    }
  }
}
class ExpressionErrors {
  constructor() {
    this.shorthandAssignLoc = null;
    this.doubleProtoLoc = null;
    this.privateKeyLoc = null;
    this.optionalParametersLoc = null;
  }
}
class Node {
  constructor(parser, pos, loc) {
    this.type = "";
    this.start = pos;
    this.end = 0;
    this.loc = new SourceLocation(loc);
    if (parser != null && parser.options.ranges) this.range = [pos, 0];
    if (parser != null && parser.filename) this.loc.filename = parser.filename;
  }
}
const NodePrototype = Node.prototype;
{
  NodePrototype.__clone = function () {
    const newNode = new Node(undefined, this.start, this.loc.start);
    const keys = Object.keys(this);
    for (let i = 0, length = keys.length; i < length; i++) {
      const key = keys[i];
      if (key !== "leadingComments" && key !== "trailingComments" && key !== "innerComments") {
        newNode[key] = this[key];
      }
    }
    return newNode;
  };
}
function clonePlaceholder(node) {
  return cloneIdentifier(node);
}
function cloneIdentifier(node) {
  const {
    type,
    start,
    end,
    loc,
    range,
    extra,
    name
  } = node;
  const cloned = Object.create(NodePrototype);
  cloned.type = type;
  cloned.start = start;
  cloned.end = end;
  cloned.loc = loc;
  cloned.range = range;
  cloned.extra = extra;
  cloned.name = name;
  if (type === "Placeholder") {
    cloned.expectedNode = node.expectedNode;
  }
  return cloned;
}
function cloneStringLiteral(node) {
  const {
    type,
    start,
    end,
    loc,
    range,
    extra
  } = node;
  if (type === "Placeholder") {
    return clonePlaceholder(node);
  }
  const cloned = Object.create(NodePrototype);
  cloned.type = type;
  cloned.start = start;
  cloned.end = end;
  cloned.loc = loc;
  cloned.range = range;
  if (node.raw !== undefined) {
    cloned.raw = node.raw;
  } else {
    cloned.extra = extra;
  }
  cloned.value = node.value;
  return cloned;
}
class NodeUtils extends UtilParser {
  startNode() {
    return new Node(this, this.state.start, this.state.startLoc);
  }
  startNodeAt(loc) {
    return new Node(this, loc.index, loc);
  }
  startNodeAtNode(type) {
    return this.startNodeAt(type.loc.start);
  }
  finishNode(node, type) {
    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);
  }
  finishNodeAt(node, type, endLoc) {
    node.type = type;
    node.end = endLoc.index;
    node.loc.end = endLoc;
    if (this.options.ranges) node.range[1] = endLoc.index;
    if (this.options.attachComment) this.processComment(node);
    return node;
  }
  resetStartLocation(node, startLoc) {
    node.start = startLoc.index;
    node.loc.start = startLoc;
    if (this.options.ranges) node.range[0] = startLoc.index;
  }
  resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
    node.end = endLoc.index;
    node.loc.end = endLoc;
    if (this.options.ranges) node.range[1] = endLoc.index;
  }
  resetStartLocationFromNode(node, locationNode) {
    this.resetStartLocation(node, locationNode.loc.start);
  }
}
const reservedTypes = new Set(["_", "any", "bool", "boolean", "empty", "extends", "false", "interface", "mixed", "null", "number", "static", "string", "true", "typeof", "void"]);
const FlowErrors = ParseErrorEnum`flow`({
  AmbiguousConditionalArrow: "Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.",
  AmbiguousDeclareModuleKind: "Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.",
  AssignReservedType: ({
    reservedType
  }) => `Cannot overwrite reserved type ${reservedType}.`,
  DeclareClassElement: "The `declare` modifier can only appear on class fields.",
  DeclareClassFieldInitializer: "Initializers are not allowed in fields with the `declare` modifier.",
  DuplicateDeclareModuleExports: "Duplicate `declare module.exports` statement.",
  EnumBooleanMemberNotInitialized: ({
    memberName,
    enumName
  }) => `Boolean enum members need to be initialized. Use either \`${memberName} = true,\` or \`${memberName} = false,\` in enum \`${enumName}\`.`,
  EnumDuplicateMemberName: ({
    memberName,
    enumName
  }) => `Enum member names need to be unique, but the name \`${memberName}\` has already been used before in enum \`${enumName}\`.`,
  EnumInconsistentMemberValues: ({
    enumName
  }) => `Enum \`${enumName}\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,
  EnumInvalidExplicitType: ({
    invalidEnumType,
    enumName
  }) => `Enum type \`${invalidEnumType}\` is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`,
  EnumInvalidExplicitTypeUnknownSupplied: ({
    enumName
  }) => `Supplied enum type is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`,
  EnumInvalidMemberInitializerPrimaryType: ({
    enumName,
    memberName,
    explicitType
  }) => `Enum \`${enumName}\` has type \`${explicitType}\`, so the initializer of \`${memberName}\` needs to be a ${explicitType} literal.`,
  EnumInvalidMemberInitializerSymbolType: ({
    enumName,
    memberName
  }) => `Symbol enum members cannot be initialized. Use \`${memberName},\` in enum \`${enumName}\`.`,
  EnumInvalidMemberInitializerUnknownType: ({
    enumName,
    memberName
  }) => `The enum member initializer for \`${memberName}\` needs to be a literal (either a boolean, number, or string) in enum \`${enumName}\`.`,
  EnumInvalidMemberName: ({
    enumName,
    memberName,
    suggestion
  }) => `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \`${memberName}\`, consider using \`${suggestion}\`, in enum \`${enumName}\`.`,
  EnumNumberMemberNotInitialized: ({
    enumName,
    memberName
  }) => `Number enum members need to be initialized, e.g. \`${memberName} = 1\` in enum \`${enumName}\`.`,
  EnumStringMemberInconsistentlyInitialized: ({
    enumName
  }) => `String enum members need to consistently either all use initializers, or use no initializers, in enum \`${enumName}\`.`,
  GetterMayNotHaveThisParam: "A getter cannot have a `this` parameter.",
  ImportReflectionHasImportType: "An `import module` declaration can not use `type` or `typeof` keyword.",
  ImportTypeShorthandOnlyInPureImport: "The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.",
  InexactInsideExact: "Explicit inexact syntax cannot appear inside an explicit exact object type.",
  InexactInsideNonObject: "Explicit inexact syntax cannot appear in class or interface definitions.",
  InexactVariance: "Explicit inexact syntax cannot have variance.",
  InvalidNonTypeImportInDeclareModule: "Imports within a `declare module` body must always be `import type` or `import typeof`.",
  MissingTypeParamDefault: "Type parameter declaration needs a default, since a preceding type parameter declaration has a default.",
  NestedDeclareModule: "`declare module` cannot be used inside another `declare module`.",
  NestedFlowComment: "Cannot have a flow comment inside another flow comment.",
  PatternIsOptional: Object.assign({
    message: "A binding pattern parameter cannot be optional in an implementation signature."
  }, {
    reasonCode: "OptionalBindingPattern"
  }),
  SetterMayNotHaveThisParam: "A setter cannot have a `this` parameter.",
  SpreadVariance: "Spread properties cannot have variance.",
  ThisParamAnnotationRequired: "A type annotation is required for the `this` parameter.",
  ThisParamBannedInConstructor: "Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.",
  ThisParamMayNotBeOptional: "The `this` parameter cannot be optional.",
  ThisParamMustBeFirst: "The `this` parameter must be the first function parameter.",
  ThisParamNoDefault: "The `this` parameter may not have a default value.",
  TypeBeforeInitializer: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
  TypeCastInPattern: "The type cast expression is expected to be wrapped with parenthesis.",
  UnexpectedExplicitInexactInObject: "Explicit inexact syntax must appear at the end of an inexact object.",
  UnexpectedReservedType: ({
    reservedType
  }) => `Unexpected reserved type ${reservedType}.`,
  UnexpectedReservedUnderscore: "`_` is only allowed as a type argument to call or new.",
  UnexpectedSpaceBetweenModuloChecks: "Spaces between `%` and `checks` are not allowed here.",
  UnexpectedSpreadType: "Spread operator cannot appear in class or interface definitions.",
  UnexpectedSubtractionOperand: 'Unexpected token, expected "number" or "bigint".',
  UnexpectedTokenAfterTypeParameter: "Expected an arrow function after this type parameter declaration.",
  UnexpectedTypeParameterBeforeAsyncArrowFunction: "Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.",
  UnsupportedDeclareExportKind: ({
    unsupportedExportKind,
    suggestion
  }) => `\`declare export ${unsupportedExportKind}\` is not supported. Use \`${suggestion}\` instead.`,
  UnsupportedStatementInDeclareModule: "Only declares and type imports are allowed inside declare module.",
  UnterminatedFlowComment: "Unterminated flow-comment."
});
function isEsModuleType(bodyElement) {
  return bodyElement.type === "DeclareExportAllDeclaration" || bodyElement.type === "DeclareExportDeclaration" && (!bodyElement.declaration || bodyElement.declaration.type !== "TypeAlias" && bodyElement.declaration.type !== "InterfaceDeclaration");
}
function hasTypeImportKind(node) {
  return node.importKind === "type" || node.importKind === "typeof";
}
const exportSuggestions = {
  const: "declare export var",
  let: "declare export var",
  type: "export type",
  interface: "export interface"
};
function partition(list, test) {
  const list1 = [];
  const list2 = [];
  for (let i = 0; i < list.length; i++) {
    (test(list[i], i, list) ? list1 : list2).push(list[i]);
  }
  return [list1, list2];
}
const FLOW_PRAGMA_REGEX = /\*?\s*@((?:no)?flow)\b/;
var flow = superClass => class FlowParserMixin extends superClass {
  constructor(...args) {
    super(...args);
    this.flowPragma = undefined;
  }
  getScopeHandler() {
    return FlowScopeHandler;
  }
  shouldParseTypes() {
    return this.getPluginOption("flow", "all") || this.flowPragma === "flow";
  }
  shouldParseEnums() {
    return !!this.getPluginOption("flow", "enums");
  }
  finishToken(type, val) {
    if (type !== 133 && type !== 13 && type !== 28) {
      if (this.flowPragma === undefined) {
        this.flowPragma = null;
      }
    }
    super.finishToken(type, val);
  }
  addComment(comment) {
    if (this.flowPragma === undefined) {
      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);
      if (!matches) ;else if (matches[1] === "flow") {
        this.flowPragma = "flow";
      } else if (matches[1] === "noflow") {
        this.flowPragma = "noflow";
      } else {
        throw new Error("Unexpected flow pragma");
      }
    }
    super.addComment(comment);
  }
  flowParseTypeInitialiser(tok) {
    const oldInType = this.state.inType;
    this.state.inType = true;
    this.expect(tok || 14);
    const type = this.flowParseType();
    this.state.inType = oldInType;
    return type;
  }
  flowParsePredicate() {
    const node = this.startNode();
    const moduloLoc = this.state.startLoc;
    this.next();
    this.expectContextual(110);
    if (this.state.lastTokStart > moduloLoc.index + 1) {
      this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {
        at: moduloLoc
      });
    }
    if (this.eat(10)) {
      node.value = super.parseExpression();
      this.expect(11);
      return this.finishNode(node, "DeclaredPredicate");
    } else {
      return this.finishNode(node, "InferredPredicate");
    }
  }
  flowParseTypeAndPredicateInitialiser() {
    const oldInType = this.state.inType;
    this.state.inType = true;
    this.expect(14);
    let type = null;
    let predicate = null;
    if (this.match(54)) {
      this.state.inType = oldInType;
      predicate = this.flowParsePredicate();
    } else {
      type = this.flowParseType();
      this.state.inType = oldInType;
      if (this.match(54)) {
        predicate = this.flowParsePredicate();
      }
    }
    return [type, predicate];
  }
  flowParseDeclareClass(node) {
    this.next();
    this.flowParseInterfaceish(node, true);
    return this.finishNode(node, "DeclareClass");
  }
  flowParseDeclareFunction(node) {
    this.next();
    const id = node.id = this.parseIdentifier();
    const typeNode = this.startNode();
    const typeContainer = this.startNode();
    if (this.match(47)) {
      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();
    } else {
      typeNode.typeParameters = null;
    }
    this.expect(10);
    const tmp = this.flowParseFunctionTypeParams();
    typeNode.params = tmp.params;
    typeNode.rest = tmp.rest;
    typeNode.this = tmp._this;
    this.expect(11);
    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
    typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation");
    id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation");
    this.resetEndLocation(id);
    this.semicolon();
    this.scope.declareName(node.id.name, 2048, node.id.loc.start);
    return this.finishNode(node, "DeclareFunction");
  }
  flowParseDeclare(node, insideModule) {
    if (this.match(80)) {
      return this.flowParseDeclareClass(node);
    } else if (this.match(68)) {
      return this.flowParseDeclareFunction(node);
    } else if (this.match(74)) {
      return this.flowParseDeclareVariable(node);
    } else if (this.eatContextual(127)) {
      if (this.match(16)) {
        return this.flowParseDeclareModuleExports(node);
      } else {
        if (insideModule) {
          this.raise(FlowErrors.NestedDeclareModule, {
            at: this.state.lastTokStartLoc
          });
        }
        return this.flowParseDeclareModule(node);
      }
    } else if (this.isContextual(130)) {
      return this.flowParseDeclareTypeAlias(node);
    } else if (this.isContextual(131)) {
      return this.flowParseDeclareOpaqueType(node);
    } else if (this.isContextual(129)) {
      return this.flowParseDeclareInterface(node);
    } else if (this.match(82)) {
      return this.flowParseDeclareExportDeclaration(node, insideModule);
    } else {
      this.unexpected();
    }
  }
  flowParseDeclareVariable(node) {
    this.next();
    node.id = this.flowParseTypeAnnotatableIdentifier(true);
    this.scope.declareName(node.id.name, 5, node.id.loc.start);
    this.semicolon();
    return this.finishNode(node, "DeclareVariable");
  }
  flowParseDeclareModule(node) {
    this.scope.enter(0);
    if (this.match(133)) {
      node.id = super.parseExprAtom();
    } else {
      node.id = this.parseIdentifier();
    }
    const bodyNode = node.body = this.startNode();
    const body = bodyNode.body = [];
    this.expect(5);
    while (!this.match(8)) {
      let bodyNode = this.startNode();
      if (this.match(83)) {
        this.next();
        if (!this.isContextual(130) && !this.match(87)) {
          this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {
            at: this.state.lastTokStartLoc
          });
        }
        super.parseImport(bodyNode);
      } else {
        this.expectContextual(125, FlowErrors.UnsupportedStatementInDeclareModule);
        bodyNode = this.flowParseDeclare(bodyNode, true);
      }
      body.push(bodyNode);
    }
    this.scope.exit();
    this.expect(8);
    this.finishNode(bodyNode, "BlockStatement");
    let kind = null;
    let hasModuleExport = false;
    body.forEach(bodyElement => {
      if (isEsModuleType(bodyElement)) {
        if (kind === "CommonJS") {
          this.raise(FlowErrors.AmbiguousDeclareModuleKind, {
            at: bodyElement
          });
        }
        kind = "ES";
      } else if (bodyElement.type === "DeclareModuleExports") {
        if (hasModuleExport) {
          this.raise(FlowErrors.DuplicateDeclareModuleExports, {
            at: bodyElement
          });
        }
        if (kind === "ES") {
          this.raise(FlowErrors.AmbiguousDeclareModuleKind, {
            at: bodyElement
          });
        }
        kind = "CommonJS";
        hasModuleExport = true;
      }
    });
    node.kind = kind || "CommonJS";
    return this.finishNode(node, "DeclareModule");
  }
  flowParseDeclareExportDeclaration(node, insideModule) {
    this.expect(82);
    if (this.eat(65)) {
      if (this.match(68) || this.match(80)) {
        node.declaration = this.flowParseDeclare(this.startNode());
      } else {
        node.declaration = this.flowParseType();
        this.semicolon();
      }
      node.default = true;
      return this.finishNode(node, "DeclareExportDeclaration");
    } else {
      if (this.match(75) || this.isLet() || (this.isContextual(130) || this.isContextual(129)) && !insideModule) {
        const label = this.state.value;
        throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {
          at: this.state.startLoc,
          unsupportedExportKind: label,
          suggestion: exportSuggestions[label]
        });
      }
      if (this.match(74) || this.match(68) || this.match(80) || this.isContextual(131)) {
        node.declaration = this.flowParseDeclare(this.startNode());
        node.default = false;
        return this.finishNode(node, "DeclareExportDeclaration");
      } else if (this.match(55) || this.match(5) || this.isContextual(129) || this.isContextual(130) || this.isContextual(131)) {
        node = this.parseExport(node, null);
        if (node.type === "ExportNamedDeclaration") {
          node.type = "ExportDeclaration";
          node.default = false;
          delete node.exportKind;
        }
        node.type = "Declare" + node.type;
        return node;
      }
    }
    this.unexpected();
  }
  flowParseDeclareModuleExports(node) {
    this.next();
    this.expectContextual(111);
    node.typeAnnotation = this.flowParseTypeAnnotation();
    this.semicolon();
    return this.finishNode(node, "DeclareModuleExports");
  }
  flowParseDeclareTypeAlias(node) {
    this.next();
    const finished = this.flowParseTypeAlias(node);
    finished.type = "DeclareTypeAlias";
    return finished;
  }
  flowParseDeclareOpaqueType(node) {
    this.next();
    const finished = this.flowParseOpaqueType(node, true);
    finished.type = "DeclareOpaqueType";
    return finished;
  }
  flowParseDeclareInterface(node) {
    this.next();
    this.flowParseInterfaceish(node, false);
    return this.finishNode(node, "DeclareInterface");
  }
  flowParseInterfaceish(node, isClass) {
    node.id = this.flowParseRestrictedIdentifier(!isClass, true);
    this.scope.declareName(node.id.name, isClass ? 17 : 8201, node.id.loc.start);
    if (this.match(47)) {
      node.typeParameters = this.flowParseTypeParameterDeclaration();
    } else {
      node.typeParameters = null;
    }
    node.extends = [];
    if (this.eat(81)) {
      do {
        node.extends.push(this.flowParseInterfaceExtends());
      } while (!isClass && this.eat(12));
    }
    if (isClass) {
      node.implements = [];
      node.mixins = [];
      if (this.eatContextual(117)) {
        do {
          node.mixins.push(this.flowParseInterfaceExtends());
        } while (this.eat(12));
      }
      if (this.eatContextual(113)) {
        do {
          node.implements.push(this.flowParseInterfaceExtends());
        } while (this.eat(12));
      }
    }
    node.body = this.flowParseObjectType({
      allowStatic: isClass,
      allowExact: false,
      allowSpread: false,
      allowProto: isClass,
      allowInexact: false
    });
  }
  flowParseInterfaceExtends() {
    const node = this.startNode();
    node.id = this.flowParseQualifiedTypeIdentifier();
    if (this.match(47)) {
      node.typeParameters = this.flowParseTypeParameterInstantiation();
    } else {
      node.typeParameters = null;
    }
    return this.finishNode(node, "InterfaceExtends");
  }
  flowParseInterface(node) {
    this.flowParseInterfaceish(node, false);
    return this.finishNode(node, "InterfaceDeclaration");
  }
  checkNotUnderscore(word) {
    if (word === "_") {
      this.raise(FlowErrors.UnexpectedReservedUnderscore, {
        at: this.state.startLoc
      });
    }
  }
  checkReservedType(word, startLoc, declaration) {
    if (!reservedTypes.has(word)) return;
    this.raise(declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, {
      at: startLoc,
      reservedType: word
    });
  }
  flowParseRestrictedIdentifier(liberal, declaration) {
    this.checkReservedType(this.state.value, this.state.startLoc, declaration);
    return this.parseIdentifier(liberal);
  }
  flowParseTypeAlias(node) {
    node.id = this.flowParseRestrictedIdentifier(false, true);
    this.scope.declareName(node.id.name, 8201, node.id.loc.start);
    if (this.match(47)) {
      node.typeParameters = this.flowParseTypeParameterDeclaration();
    } else {
      node.typeParameters = null;
    }
    node.right = this.flowParseTypeInitialiser(29);
    this.semicolon();
    return this.finishNode(node, "TypeAlias");
  }
  flowParseOpaqueType(node, declare) {
    this.expectContextual(130);
    node.id = this.flowParseRestrictedIdentifier(true, true);
    this.scope.declareName(node.id.name, 8201, node.id.loc.start);
    if (this.match(47)) {
      node.typeParameters = this.flowParseTypeParameterDeclaration();
    } else {
      node.typeParameters = null;
    }
    node.supertype = null;
    if (this.match(14)) {
      node.supertype = this.flowParseTypeInitialiser(14);
    }
    node.impltype = null;
    if (!declare) {
      node.impltype = this.flowParseTypeInitialiser(29);
    }
    this.semicolon();
    return this.finishNode(node, "OpaqueType");
  }
  flowParseTypeParameter(requireDefault = false) {
    const nodeStartLoc = this.state.startLoc;
    const node = this.startNode();
    const variance = this.flowParseVariance();
    const ident = this.flowParseTypeAnnotatableIdentifier();
    node.name = ident.name;
    node.variance = variance;
    node.bound = ident.typeAnnotation;
    if (this.match(29)) {
      this.eat(29);
      node.default = this.flowParseType();
    } else {
      if (requireDefault) {
        this.raise(FlowErrors.MissingTypeParamDefault, {
          at: nodeStartLoc
        });
      }
    }
    return this.finishNode(node, "TypeParameter");
  }
  flowParseTypeParameterDeclaration() {
    const oldInType = this.state.inType;
    const node = this.startNode();
    node.params = [];
    this.state.inType = true;
    if (this.match(47) || this.match(142)) {
      this.next();
    } else {
      this.unexpected();
    }
    let defaultRequired = false;
    do {
      const typeParameter = this.flowParseTypeParameter(defaultRequired);
      node.params.push(typeParameter);
      if (typeParameter.default) {
        defaultRequired = true;
      }
      if (!this.match(48)) {
        this.expect(12);
      }
    } while (!this.match(48));
    this.expect(48);
    this.state.inType = oldInType;
    return this.finishNode(node, "TypeParameterDeclaration");
  }
  flowParseTypeParameterInstantiation() {
    const node = this.startNode();
    const oldInType = this.state.inType;
    node.params = [];
    this.state.inType = true;
    this.expect(47);
    const oldNoAnonFunctionType = this.state.noAnonFunctionType;
    this.state.noAnonFunctionType = false;
    while (!this.match(48)) {
      node.params.push(this.flowParseType());
      if (!this.match(48)) {
        this.expect(12);
      }
    }
    this.state.noAnonFunctionType = oldNoAnonFunctionType;
    this.expect(48);
    this.state.inType = oldInType;
    return this.finishNode(node, "TypeParameterInstantiation");
  }
  flowParseTypeParameterInstantiationCallOrNew() {
    const node = this.startNode();
    const oldInType = this.state.inType;
    node.params = [];
    this.state.inType = true;
    this.expect(47);
    while (!this.match(48)) {
      node.params.push(this.flowParseTypeOrImplicitInstantiation());
      if (!this.match(48)) {
        this.expect(12);
      }
    }
    this.expect(48);
    this.state.inType = oldInType;
    return this.finishNode(node, "TypeParameterInstantiation");
  }
  flowParseInterfaceType() {
    const node = this.startNode();
    this.expectContextual(129);
    node.extends = [];
    if (this.eat(81)) {
      do {
        node.extends.push(this.flowParseInterfaceExtends());
      } while (this.eat(12));
    }
    node.body = this.flowParseObjectType({
      allowStatic: false,
      allowExact: false,
      allowSpread: false,
      allowProto: false,
      allowInexact: false
    });
    return this.finishNode(node, "InterfaceTypeAnnotation");
  }
  flowParseObjectPropertyKey() {
    return this.match(134) || this.match(133) ? super.parseExprAtom() : this.parseIdentifier(true);
  }
  flowParseObjectTypeIndexer(node, isStatic, variance) {
    node.static = isStatic;
    if (this.lookahead().type === 14) {
      node.id = this.flowParseObjectPropertyKey();
      node.key = this.flowParseTypeInitialiser();
    } else {
      node.id = null;
      node.key = this.flowParseType();
    }
    this.expect(3);
    node.value = this.flowParseTypeInitialiser();
    node.variance = variance;
    return this.finishNode(node, "ObjectTypeIndexer");
  }
  flowParseObjectTypeInternalSlot(node, isStatic) {
    node.static = isStatic;
    node.id = this.flowParseObjectPropertyKey();
    this.expect(3);
    this.expect(3);
    if (this.match(47) || this.match(10)) {
      node.method = true;
      node.optional = false;
      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start));
    } else {
      node.method = false;
      if (this.eat(17)) {
        node.optional = true;
      }
      node.value = this.flowParseTypeInitialiser();
    }
    return this.finishNode(node, "ObjectTypeInternalSlot");
  }
  flowParseObjectTypeMethodish(node) {
    node.params = [];
    node.rest = null;
    node.typeParameters = null;
    node.this = null;
    if (this.match(47)) {
      node.typeParameters = this.flowParseTypeParameterDeclaration();
    }
    this.expect(10);
    if (this.match(78)) {
      node.this = this.flowParseFunctionTypeParam(true);
      node.this.name = null;
      if (!this.match(11)) {
        this.expect(12);
      }
    }
    while (!this.match(11) && !this.match(21)) {
      node.params.push(this.flowParseFunctionTypeParam(false));
      if (!this.match(11)) {
        this.expect(12);
      }
    }
    if (this.eat(21)) {
      node.rest = this.flowParseFunctionTypeParam(false);
    }
    this.expect(11);
    node.returnType = this.flowParseTypeInitialiser();
    return this.finishNode(node, "FunctionTypeAnnotation");
  }
  flowParseObjectTypeCallProperty(node, isStatic) {
    const valueNode = this.startNode();
    node.static = isStatic;
    node.value = this.flowParseObjectTypeMethodish(valueNode);
    return this.finishNode(node, "ObjectTypeCallProperty");
  }
  flowParseObjectType({
    allowStatic,
    allowExact,
    allowSpread,
    allowProto,
    allowInexact
  }) {
    const oldInType = this.state.inType;
    this.state.inType = true;
    const nodeStart = this.startNode();
    nodeStart.callProperties = [];
    nodeStart.properties = [];
    nodeStart.indexers = [];
    nodeStart.internalSlots = [];
    let endDelim;
    let exact;
    let inexact = false;
    if (allowExact && this.match(6)) {
      this.expect(6);
      endDelim = 9;
      exact = true;
    } else {
      this.expect(5);
      endDelim = 8;
      exact = false;
    }
    nodeStart.exact = exact;
    while (!this.match(endDelim)) {
      let isStatic = false;
      let protoStartLoc = null;
      let inexactStartLoc = null;
      const node = this.startNode();
      if (allowProto && this.isContextual(118)) {
        const lookahead = this.lookahead();
        if (lookahead.type !== 14 && lookahead.type !== 17) {
          this.next();
          protoStartLoc = this.state.startLoc;
          allowStatic = false;
        }
      }
      if (allowStatic && this.isContextual(106)) {
        const lookahead = this.lookahead();
        if (lookahead.type !== 14 && lookahead.type !== 17) {
          this.next();
          isStatic = true;
        }
      }
      const variance = this.flowParseVariance();
      if (this.eat(0)) {
        if (protoStartLoc != null) {
          this.unexpected(protoStartLoc);
        }
        if (this.eat(0)) {
          if (variance) {
            this.unexpected(variance.loc.start);
          }
          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));
        } else {
          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));
        }
      } else if (this.match(10) || this.match(47)) {
        if (protoStartLoc != null) {
          this.unexpected(protoStartLoc);
        }
        if (variance) {
          this.unexpected(variance.loc.start);
        }
        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));
      } else {
        let kind = "init";
        if (this.isContextual(99) || this.isContextual(104)) {
          const lookahead = this.lookahead();
          if (tokenIsLiteralPropertyName(lookahead.type)) {
            kind = this.state.value;
            this.next();
          }
        }
        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);
        if (propOrInexact === null) {
          inexact = true;
          inexactStartLoc = this.state.lastTokStartLoc;
        } else {
          nodeStart.properties.push(propOrInexact);
        }
      }
      this.flowObjectTypeSemicolon();
      if (inexactStartLoc && !this.match(8) && !this.match(9)) {
        this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {
          at: inexactStartLoc
        });
      }
    }
    this.expect(endDelim);
    if (allowSpread) {
      nodeStart.inexact = inexact;
    }
    const out = this.finishNode(nodeStart, "ObjectTypeAnnotation");
    this.state.inType = oldInType;
    return out;
  }
  flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact) {
    if (this.eat(21)) {
      const isInexactToken = this.match(12) || this.match(13) || this.match(8) || this.match(9);
      if (isInexactToken) {
        if (!allowSpread) {
          this.raise(FlowErrors.InexactInsideNonObject, {
            at: this.state.lastTokStartLoc
          });
        } else if (!allowInexact) {
          this.raise(FlowErrors.InexactInsideExact, {
            at: this.state.lastTokStartLoc
          });
        }
        if (variance) {
          this.raise(FlowErrors.InexactVariance, {
            at: variance
          });
        }
        return null;
      }
      if (!allowSpread) {
        this.raise(FlowErrors.UnexpectedSpreadType, {
          at: this.state.lastTokStartLoc
        });
      }
      if (protoStartLoc != null) {
        this.unexpected(protoStartLoc);
      }
      if (variance) {
        this.raise(FlowErrors.SpreadVariance, {
          at: variance
        });
      }
      node.argument = this.flowParseType();
      return this.finishNode(node, "ObjectTypeSpreadProperty");
    } else {
      node.key = this.flowParseObjectPropertyKey();
      node.static = isStatic;
      node.proto = protoStartLoc != null;
      node.kind = kind;
      let optional = false;
      if (this.match(47) || this.match(10)) {
        node.method = true;
        if (protoStartLoc != null) {
          this.unexpected(protoStartLoc);
        }
        if (variance) {
          this.unexpected(variance.loc.start);
        }
        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start));
        if (kind === "get" || kind === "set") {
          this.flowCheckGetterSetterParams(node);
        }
        if (!allowSpread && node.key.name === "constructor" && node.value.this) {
          this.raise(FlowErrors.ThisParamBannedInConstructor, {
            at: node.value.this
          });
        }
      } else {
        if (kind !== "init") this.unexpected();
        node.method = false;
        if (this.eat(17)) {
          optional = true;
        }
        node.value = this.flowParseTypeInitialiser();
        node.variance = variance;
      }
      node.optional = optional;
      return this.finishNode(node, "ObjectTypeProperty");
    }
  }
  flowCheckGetterSetterParams(property) {
    const paramCount = property.kind === "get" ? 0 : 1;
    const length = property.value.params.length + (property.value.rest ? 1 : 0);
    if (property.value.this) {
      this.raise(property.kind === "get" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam, {
        at: property.value.this
      });
    }
    if (length !== paramCount) {
      this.raise(property.kind === "get" ? Errors.BadGetterArity : Errors.BadSetterArity, {
        at: property
      });
    }
    if (property.kind === "set" && property.value.rest) {
      this.raise(Errors.BadSetterRestParameter, {
        at: property
      });
    }
  }
  flowObjectTypeSemicolon() {
    if (!this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9)) {
      this.unexpected();
    }
  }
  flowParseQualifiedTypeIdentifier(startLoc, id) {
    var _startLoc;
    (_startLoc = startLoc) != null ? _startLoc : startLoc = this.state.startLoc;
    let node = id || this.flowParseRestrictedIdentifier(true);
    while (this.eat(16)) {
      const node2 = this.startNodeAt(startLoc);
      node2.qualification = node;
      node2.id = this.flowParseRestrictedIdentifier(true);
      node = this.finishNode(node2, "QualifiedTypeIdentifier");
    }
    return node;
  }
  flowParseGenericType(startLoc, id) {
    const node = this.startNodeAt(startLoc);
    node.typeParameters = null;
    node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);
    if (this.match(47)) {
      node.typeParameters = this.flowParseTypeParameterInstantiation();
    }
    return this.finishNode(node, "GenericTypeAnnotation");
  }
  flowParseTypeofType() {
    const node = this.startNode();
    this.expect(87);
    node.argument = this.flowParsePrimaryType();
    return this.finishNode(node, "TypeofTypeAnnotation");
  }
  flowParseTupleType() {
    const node = this.startNode();
    node.types = [];
    this.expect(0);
    while (this.state.pos < this.length && !this.match(3)) {
      node.types.push(this.flowParseType());
      if (this.match(3)) break;
      this.expect(12);
    }
    this.expect(3);
    return this.finishNode(node, "TupleTypeAnnotation");
  }
  flowParseFunctionTypeParam(first) {
    let name = null;
    let optional = false;
    let typeAnnotation = null;
    const node = this.startNode();
    const lh = this.lookahead();
    const isThis = this.state.type === 78;
    if (lh.type === 14 || lh.type === 17) {
      if (isThis && !first) {
        this.raise(FlowErrors.ThisParamMustBeFirst, {
          at: node
        });
      }
      name = this.parseIdentifier(isThis);
      if (this.eat(17)) {
        optional = true;
        if (isThis) {
          this.raise(FlowErrors.ThisParamMayNotBeOptional, {
            at: node
          });
        }
      }
      typeAnnotation = this.flowParseTypeInitialiser();
    } else {
      typeAnnotation = this.flowParseType();
    }
    node.name = name;
    node.optional = optional;
    node.typeAnnotation = typeAnnotation;
    return this.finishNode(node, "FunctionTypeParam");
  }
  reinterpretTypeAsFunctionTypeParam(type) {
    const node = this.startNodeAt(type.loc.start);
    node.name = null;
    node.optional = false;
    node.typeAnnotation = type;
    return this.finishNode(node, "FunctionTypeParam");
  }
  flowParseFunctionTypeParams(params = []) {
    let rest = null;
    let _this = null;
    if (this.match(78)) {
      _this = this.flowParseFunctionTypeParam(true);
      _this.name = null;
      if (!this.match(11)) {
        this.expect(12);
      }
    }
    while (!this.match(11) && !this.match(21)) {
      params.push(this.flowParseFunctionTypeParam(false));
      if (!this.match(11)) {
        this.expect(12);
      }
    }
    if (this.eat(21)) {
      rest = this.flowParseFunctionTypeParam(false);
    }
    return {
      params,
      rest,
      _this
    };
  }
  flowIdentToTypeAnnotation(startLoc, node, id) {
    switch (id.name) {
      case "any":
        return this.finishNode(node, "AnyTypeAnnotation");
      case "bool":
      case "boolean":
        return this.finishNode(node, "BooleanTypeAnnotation");
      case "mixed":
        return this.finishNode(node, "MixedTypeAnnotation");
      case "empty":
        return this.finishNode(node, "EmptyTypeAnnotation");
      case "number":
        return this.finishNode(node, "NumberTypeAnnotation");
      case "string":
        return this.finishNode(node, "StringTypeAnnotation");
      case "symbol":
        return this.finishNode(node, "SymbolTypeAnnotation");
      default:
        this.checkNotUnderscore(id.name);
        return this.flowParseGenericType(startLoc, id);
    }
  }
  flowParsePrimaryType() {
    const startLoc = this.state.startLoc;
    const node = this.startNode();
    let tmp;
    let type;
    let isGroupedType = false;
    const oldNoAnonFunctionType = this.state.noAnonFunctionType;
    switch (this.state.type) {
      case 5:
        return this.flowParseObjectType({
          allowStatic: false,
          allowExact: false,
          allowSpread: true,
          allowProto: false,
          allowInexact: true
        });
      case 6:
        return this.flowParseObjectType({
          allowStatic: false,
          allowExact: true,
          allowSpread: true,
          allowProto: false,
          allowInexact: false
        });
      case 0:
        this.state.noAnonFunctionType = false;
        type = this.flowParseTupleType();
        this.state.noAnonFunctionType = oldNoAnonFunctionType;
        return type;
      case 47:
        node.typeParameters = this.flowParseTypeParameterDeclaration();
        this.expect(10);
        tmp = this.flowParseFunctionTypeParams();
        node.params = tmp.params;
        node.rest = tmp.rest;
        node.this = tmp._this;
        this.expect(11);
        this.expect(19);
        node.returnType = this.flowParseType();
        return this.finishNode(node, "FunctionTypeAnnotation");
      case 10:
        this.next();
        if (!this.match(11) && !this.match(21)) {
          if (tokenIsIdentifier(this.state.type) || this.match(78)) {
            const token = this.lookahead().type;
            isGroupedType = token !== 17 && token !== 14;
          } else {
            isGroupedType = true;
          }
        }
        if (isGroupedType) {
          this.state.noAnonFunctionType = false;
          type = this.flowParseType();
          this.state.noAnonFunctionType = oldNoAnonFunctionType;
          if (this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) {
            this.expect(11);
            return type;
          } else {
            this.eat(12);
          }
        }
        if (type) {
          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);
        } else {
          tmp = this.flowParseFunctionTypeParams();
        }
        node.params = tmp.params;
        node.rest = tmp.rest;
        node.this = tmp._this;
        this.expect(11);
        this.expect(19);
        node.returnType = this.flowParseType();
        node.typeParameters = null;
        return this.finishNode(node, "FunctionTypeAnnotation");
      case 133:
        return this.parseLiteral(this.state.value, "StringLiteralTypeAnnotation");
      case 85:
      case 86:
        node.value = this.match(85);
        this.next();
        return this.finishNode(node, "BooleanLiteralTypeAnnotation");
      case 53:
        if (this.state.value === "-") {
          this.next();
          if (this.match(134)) {
            return this.parseLiteralAtNode(-this.state.value, "NumberLiteralTypeAnnotation", node);
          }
          if (this.match(135)) {
            return this.parseLiteralAtNode(-this.state.value, "BigIntLiteralTypeAnnotation", node);
          }
          throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {
            at: this.state.startLoc
          });
        }
        this.unexpected();
        return;
      case 134:
        return this.parseLiteral(this.state.value, "NumberLiteralTypeAnnotation");
      case 135:
        return this.parseLiteral(this.state.value, "BigIntLiteralTypeAnnotation");
      case 88:
        this.next();
        return this.finishNode(node, "VoidTypeAnnotation");
      case 84:
        this.next();
        return this.finishNode(node, "NullLiteralTypeAnnotation");
      case 78:
        this.next();
        return this.finishNode(node, "ThisTypeAnnotation");
      case 55:
        this.next();
        return this.finishNode(node, "ExistsTypeAnnotation");
      case 87:
        return this.flowParseTypeofType();
      default:
        if (tokenIsKeyword(this.state.type)) {
          const label = tokenLabelName(this.state.type);
          this.next();
          return super.createIdentifier(node, label);
        } else if (tokenIsIdentifier(this.state.type)) {
          if (this.isContextual(129)) {
            return this.flowParseInterfaceType();
          }
          return this.flowIdentToTypeAnnotation(startLoc, node, this.parseIdentifier());
        }
    }
    this.unexpected();
  }
  flowParsePostfixType() {
    const startLoc = this.state.startLoc;
    let type = this.flowParsePrimaryType();
    let seenOptionalIndexedAccess = false;
    while ((this.match(0) || this.match(18)) && !this.canInsertSemicolon()) {
      const node = this.startNodeAt(startLoc);
      const optional = this.eat(18);
      seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;
      this.expect(0);
      if (!optional && this.match(3)) {
        node.elementType = type;
        this.next();
        type = this.finishNode(node, "ArrayTypeAnnotation");
      } else {
        node.objectType = type;
        node.indexType = this.flowParseType();
        this.expect(3);
        if (seenOptionalIndexedAccess) {
          node.optional = optional;
          type = this.finishNode(node, "OptionalIndexedAccessType");
        } else {
          type = this.finishNode(node, "IndexedAccessType");
        }
      }
    }
    return type;
  }
  flowParsePrefixType() {
    const node = this.startNode();
    if (this.eat(17)) {
      node.typeAnnotation = this.flowParsePrefixType();
      return this.finishNode(node, "NullableTypeAnnotation");
    } else {
      return this.flowParsePostfixType();
    }
  }
  flowParseAnonFunctionWithoutParens() {
    const param = this.flowParsePrefixType();
    if (!this.state.noAnonFunctionType && this.eat(19)) {
      const node = this.startNodeAt(param.loc.start);
      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];
      node.rest = null;
      node.this = null;
      node.returnType = this.flowParseType();
      node.typeParameters = null;
      return this.finishNode(node, "FunctionTypeAnnotation");
    }
    return param;
  }
  flowParseIntersectionType() {
    const node = this.startNode();
    this.eat(45);
    const type = this.flowParseAnonFunctionWithoutParens();
    node.types = [type];
    while (this.eat(45)) {
      node.types.push(this.flowParseAnonFunctionWithoutParens());
    }
    return node.types.length === 1 ? type : this.finishNode(node, "IntersectionTypeAnnotation");
  }
  flowParseUnionType() {
    const node = this.startNode();
    this.eat(43);
    const type = this.flowParseIntersectionType();
    node.types = [type];
    while (this.eat(43)) {
      node.types.push(this.flowParseIntersectionType());
    }
    return node.types.length === 1 ? type : this.finishNode(node, "UnionTypeAnnotation");
  }
  flowParseType() {
    const oldInType = this.state.inType;
    this.state.inType = true;
    const type = this.flowParseUnionType();
    this.state.inType = oldInType;
    return type;
  }
  flowParseTypeOrImplicitInstantiation() {
    if (this.state.type === 132 && this.state.value === "_") {
      const startLoc = this.state.startLoc;
      const node = this.parseIdentifier();
      return this.flowParseGenericType(startLoc, node);
    } else {
      return this.flowParseType();
    }
  }
  flowParseTypeAnnotation() {
    const node = this.startNode();
    node.typeAnnotation = this.flowParseTypeInitialiser();
    return this.finishNode(node, "TypeAnnotation");
  }
  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {
    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();
    if (this.match(14)) {
      ident.typeAnnotation = this.flowParseTypeAnnotation();
      this.resetEndLocation(ident);
    }
    return ident;
  }
  typeCastToParameter(node) {
    node.expression.typeAnnotation = node.typeAnnotation;
    this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);
    return node.expression;
  }
  flowParseVariance() {
    let variance = null;
    if (this.match(53)) {
      variance = this.startNode();
      if (this.state.value === "+") {
        variance.kind = "plus";
      } else {
        variance.kind = "minus";
      }
      this.next();
      return this.finishNode(variance, "Variance");
    }
    return variance;
  }
  parseFunctionBody(node, allowExpressionBody, isMethod = false) {
    if (allowExpressionBody) {
      this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));
      return;
    }
    super.parseFunctionBody(node, false, isMethod);
  }
  parseFunctionBodyAndFinish(node, type, isMethod = false) {
    if (this.match(14)) {
      const typeNode = this.startNode();
      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, "TypeAnnotation") : null;
    }
    return super.parseFunctionBodyAndFinish(node, type, isMethod);
  }
  parseStatementLike(flags) {
    if (this.state.strict && this.isContextual(129)) {
      const lookahead = this.lookahead();
      if (tokenIsKeywordOrIdentifier(lookahead.type)) {
        const node = this.startNode();
        this.next();
        return this.flowParseInterface(node);
      }
    } else if (this.shouldParseEnums() && this.isContextual(126)) {
      const node = this.startNode();
      this.next();
      return this.flowParseEnumDeclaration(node);
    }
    const stmt = super.parseStatementLike(flags);
    if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {
      this.flowPragma = null;
    }
    return stmt;
  }
  parseExpressionStatement(node, expr, decorators) {
    if (expr.type === "Identifier") {
      if (expr.name === "declare") {
        if (this.match(80) || tokenIsIdentifier(this.state.type) || this.match(68) || this.match(74) || this.match(82)) {
          return this.flowParseDeclare(node);
        }
      } else if (tokenIsIdentifier(this.state.type)) {
        if (expr.name === "interface") {
          return this.flowParseInterface(node);
        } else if (expr.name === "type") {
          return this.flowParseTypeAlias(node);
        } else if (expr.name === "opaque") {
          return this.flowParseOpaqueType(node, false);
        }
      }
    }
    return super.parseExpressionStatement(node, expr, decorators);
  }
  shouldParseExportDeclaration() {
    const {
      type
    } = this.state;
    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 126) {
      return !this.state.containsEsc;
    }
    return super.shouldParseExportDeclaration();
  }
  isExportDefaultSpecifier() {
    const {
      type
    } = this.state;
    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 126) {
      return this.state.containsEsc;
    }
    return super.isExportDefaultSpecifier();
  }
  parseExportDefaultExpression() {
    if (this.shouldParseEnums() && this.isContextual(126)) {
      const node = this.startNode();
      this.next();
      return this.flowParseEnumDeclaration(node);
    }
    return super.parseExportDefaultExpression();
  }
  parseConditional(expr, startLoc, refExpressionErrors) {
    if (!this.match(17)) return expr;
    if (this.state.maybeInArrowParameters) {
      const nextCh = this.lookaheadCharCode();
      if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {
        this.setOptionalParametersError(refExpressionErrors);
        return expr;
      }
    }
    this.expect(17);
    const state = this.state.clone();
    const originalNoArrowAt = this.state.noArrowAt;
    const node = this.startNodeAt(startLoc);
    let {
      consequent,
      failed
    } = this.tryParseConditionalConsequent();
    let [valid, invalid] = this.getArrowLikeExpressions(consequent);
    if (failed || invalid.length > 0) {
      const noArrowAt = [...originalNoArrowAt];
      if (invalid.length > 0) {
        this.state = state;
        this.state.noArrowAt = noArrowAt;
        for (let i = 0; i < invalid.length; i++) {
          noArrowAt.push(invalid[i].start);
        }
        ({
          consequent,
          failed
        } = this.tryParseConditionalConsequent());
        [valid, invalid] = this.getArrowLikeExpressions(consequent);
      }
      if (failed && valid.length > 1) {
        this.raise(FlowErrors.AmbiguousConditionalArrow, {
          at: state.startLoc
        });
      }
      if (failed && valid.length === 1) {
        this.state = state;
        noArrowAt.push(valid[0].start);
        this.state.noArrowAt = noArrowAt;
        ({
          consequent,
          failed
        } = this.tryParseConditionalConsequent());
      }
    }
    this.getArrowLikeExpressions(consequent, true);
    this.state.noArrowAt = originalNoArrowAt;
    this.expect(14);
    node.test = expr;
    node.consequent = consequent;
    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined));
    return this.finishNode(node, "ConditionalExpression");
  }
  tryParseConditionalConsequent() {
    this.state.noArrowParamsConversionAt.push(this.state.start);
    const consequent = this.parseMaybeAssignAllowIn();
    const failed = !this.match(14);
    this.state.noArrowParamsConversionAt.pop();
    return {
      consequent,
      failed
    };
  }
  getArrowLikeExpressions(node, disallowInvalid) {
    const stack = [node];
    const arrows = [];
    while (stack.length !== 0) {
      const node = stack.pop();
      if (node.type === "ArrowFunctionExpression") {
        if (node.typeParameters || !node.returnType) {
          this.finishArrowValidation(node);
        } else {
          arrows.push(node);
        }
        stack.push(node.body);
      } else if (node.type === "ConditionalExpression") {
        stack.push(node.consequent);
        stack.push(node.alternate);
      }
    }
    if (disallowInvalid) {
      arrows.forEach(node => this.finishArrowValidation(node));
      return [arrows, []];
    }
    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));
  }
  finishArrowValidation(node) {
    var _node$extra;
    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingCommaLoc, false);
    this.scope.enter(2 | 4);
    super.checkParams(node, false, true);
    this.scope.exit();
  }
  forwardNoArrowParamsConversionAt(node, parse) {
    let result;
    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {
      this.state.noArrowParamsConversionAt.push(this.state.start);
      result = parse();
      this.state.noArrowParamsConversionAt.pop();
    } else {
      result = parse();
    }
    return result;
  }
  parseParenItem(node, startLoc) {
    node = super.parseParenItem(node, startLoc);
    if (this.eat(17)) {
      node.optional = true;
      this.resetEndLocation(node);
    }
    if (this.match(14)) {
      const typeCastNode = this.startNodeAt(startLoc);
      typeCastNode.expression = node;
      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();
      return this.finishNode(typeCastNode, "TypeCastExpression");
    }
    return node;
  }
  assertModuleNodeAllowed(node) {
    if (node.type === "ImportDeclaration" && (node.importKind === "type" || node.importKind === "typeof") || node.type === "ExportNamedDeclaration" && node.exportKind === "type" || node.type === "ExportAllDeclaration" && node.exportKind === "type") {
      return;
    }
    super.assertModuleNodeAllowed(node);
  }
  parseExportDeclaration(node) {
    if (this.isContextual(130)) {
      node.exportKind = "type";
      const declarationNode = this.startNode();
      this.next();
      if (this.match(5)) {
        node.specifiers = this.parseExportSpecifiers(true);
        super.parseExportFrom(node);
        return null;
      } else {
        return this.flowParseTypeAlias(declarationNode);
      }
    } else if (this.isContextual(131)) {
      node.exportKind = "type";
      const declarationNode = this.startNode();
      this.next();
      return this.flowParseOpaqueType(declarationNode, false);
    } else if (this.isContextual(129)) {
      node.exportKind = "type";
      const declarationNode = this.startNode();
      this.next();
      return this.flowParseInterface(declarationNode);
    } else if (this.shouldParseEnums() && this.isContextual(126)) {
      node.exportKind = "value";
      const declarationNode = this.startNode();
      this.next();
      return this.flowParseEnumDeclaration(declarationNode);
    } else {
      return super.parseExportDeclaration(node);
    }
  }
  eatExportStar(node) {
    if (super.eatExportStar(node)) return true;
    if (this.isContextual(130) && this.lookahead().type === 55) {
      node.exportKind = "type";
      this.next();
      this.next();
      return true;
    }
    return false;
  }
  maybeParseExportNamespaceSpecifier(node) {
    const {
      startLoc
    } = this.state;
    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);
    if (hasNamespace && node.exportKind === "type") {
      this.unexpected(startLoc);
    }
    return hasNamespace;
  }
  parseClassId(node, isStatement, optionalId) {
    super.parseClassId(node, isStatement, optionalId);
    if (this.match(47)) {
      node.typeParameters = this.flowParseTypeParameterDeclaration();
    }
  }
  parseClassMember(classBody, member, state) {
    const {
      startLoc
    } = this.state;
    if (this.isContextual(125)) {
      if (super.parseClassMemberFromModifier(classBody, member)) {
        return;
      }
      member.declare = true;
    }
    super.parseClassMember(classBody, member, state);
    if (member.declare) {
      if (member.type !== "ClassProperty" && member.type !== "ClassPrivateProperty" && member.type !== "PropertyDefinition") {
        this.raise(FlowErrors.DeclareClassElement, {
          at: startLoc
        });
      } else if (member.value) {
        this.raise(FlowErrors.DeclareClassFieldInitializer, {
          at: member.value
        });
      }
    }
  }
  isIterator(word) {
    return word === "iterator" || word === "asyncIterator";
  }
  readIterator() {
    const word = super.readWord1();
    const fullWord = "@@" + word;
    if (!this.isIterator(word) || !this.state.inType) {
      this.raise(Errors.InvalidIdentifier, {
        at: this.state.curPosition(),
        identifierName: fullWord
      });
    }
    this.finishToken(132, fullWord);
  }
  getTokenFromCode(code) {
    const next = this.input.charCodeAt(this.state.pos + 1);
    if (code === 123 && next === 124) {
      this.finishOp(6, 2);
    } else if (this.state.inType && (code === 62 || code === 60)) {
      this.finishOp(code === 62 ? 48 : 47, 1);
    } else if (this.state.inType && code === 63) {
      if (next === 46) {
        this.finishOp(18, 2);
      } else {
        this.finishOp(17, 1);
      }
    } else if (isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))) {
      this.state.pos += 2;
      this.readIterator();
    } else {
      super.getTokenFromCode(code);
    }
  }
  isAssignable(node, isBinding) {
    if (node.type === "TypeCastExpression") {
      return this.isAssignable(node.expression, isBinding);
    } else {
      return super.isAssignable(node, isBinding);
    }
  }
  toAssignable(node, isLHS = false) {
    if (!isLHS && node.type === "AssignmentExpression" && node.left.type === "TypeCastExpression") {
      node.left = this.typeCastToParameter(node.left);
    }
    super.toAssignable(node, isLHS);
  }
  toAssignableList(exprList, trailingCommaLoc, isLHS) {
    for (let i = 0; i < exprList.length; i++) {
      const expr = exprList[i];
      if ((expr == null ? void 0 : expr.type) === "TypeCastExpression") {
        exprList[i] = this.typeCastToParameter(expr);
      }
    }
    super.toAssignableList(exprList, trailingCommaLoc, isLHS);
  }
  toReferencedList(exprList, isParenthesizedExpr) {
    for (let i = 0; i < exprList.length; i++) {
      var _expr$extra;
      const expr = exprList[i];
      if (expr && expr.type === "TypeCastExpression" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {
        this.raise(FlowErrors.TypeCastInPattern, {
          at: expr.typeAnnotation
        });
      }
    }
    return exprList;
  }
  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
    if (canBePattern && !this.state.maybeInArrowParameters) {
      this.toReferencedList(node.elements);
    }
    return node;
  }
  isValidLVal(type, isParenthesized, binding) {
    return type === "TypeCastExpression" || super.isValidLVal(type, isParenthesized, binding);
  }
  parseClassProperty(node) {
    if (this.match(14)) {
      node.typeAnnotation = this.flowParseTypeAnnotation();
    }
    return super.parseClassProperty(node);
  }
  parseClassPrivateProperty(node) {
    if (this.match(14)) {
      node.typeAnnotation = this.flowParseTypeAnnotation();
    }
    return super.parseClassPrivateProperty(node);
  }
  isClassMethod() {
    return this.match(47) || super.isClassMethod();
  }
  isClassProperty() {
    return this.match(14) || super.isClassProperty();
  }
  isNonstaticConstructor(method) {
    return !this.match(14) && super.isNonstaticConstructor(method);
  }
  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
    if (method.variance) {
      this.unexpected(method.variance.loc.start);
    }
    delete method.variance;
    if (this.match(47)) {
      method.typeParameters = this.flowParseTypeParameterDeclaration();
    }
    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
    if (method.params && isConstructor) {
      const params = method.params;
      if (params.length > 0 && this.isThisParam(params[0])) {
        this.raise(FlowErrors.ThisParamBannedInConstructor, {
          at: method
        });
      }
    } else if (method.type === "MethodDefinition" && isConstructor && method.value.params) {
      const params = method.value.params;
      if (params.length > 0 && this.isThisParam(params[0])) {
        this.raise(FlowErrors.ThisParamBannedInConstructor, {
          at: method
        });
      }
    }
  }
  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
    if (method.variance) {
      this.unexpected(method.variance.loc.start);
    }
    delete method.variance;
    if (this.match(47)) {
      method.typeParameters = this.flowParseTypeParameterDeclaration();
    }
    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
  }
  parseClassSuper(node) {
    super.parseClassSuper(node);
    if (node.superClass && this.match(47)) {
      node.superTypeParameters = this.flowParseTypeParameterInstantiation();
    }
    if (this.isContextual(113)) {
      this.next();
      const implemented = node.implements = [];
      do {
        const node = this.startNode();
        node.id = this.flowParseRestrictedIdentifier(true);
        if (this.match(47)) {
          node.typeParameters = this.flowParseTypeParameterInstantiation();
        } else {
          node.typeParameters = null;
        }
        implemented.push(this.finishNode(node, "ClassImplements"));
      } while (this.eat(12));
    }
  }
  checkGetterSetterParams(method) {
    super.checkGetterSetterParams(method);
    const params = this.getObjectOrClassMethodParams(method);
    if (params.length > 0) {
      const param = params[0];
      if (this.isThisParam(param) && method.kind === "get") {
        this.raise(FlowErrors.GetterMayNotHaveThisParam, {
          at: param
        });
      } else if (this.isThisParam(param)) {
        this.raise(FlowErrors.SetterMayNotHaveThisParam, {
          at: param
        });
      }
    }
  }
  parsePropertyNamePrefixOperator(node) {
    node.variance = this.flowParseVariance();
  }
  parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
    if (prop.variance) {
      this.unexpected(prop.variance.loc.start);
    }
    delete prop.variance;
    let typeParameters;
    if (this.match(47) && !isAccessor) {
      typeParameters = this.flowParseTypeParameterDeclaration();
      if (!this.match(10)) this.unexpected();
    }
    const result = super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
    if (typeParameters) {
      (result.value || result).typeParameters = typeParameters;
    }
    return result;
  }
  parseAssignableListItemTypes(param) {
    if (this.eat(17)) {
      if (param.type !== "Identifier") {
        this.raise(FlowErrors.PatternIsOptional, {
          at: param
        });
      }
      if (this.isThisParam(param)) {
        this.raise(FlowErrors.ThisParamMayNotBeOptional, {
          at: param
        });
      }
      param.optional = true;
    }
    if (this.match(14)) {
      param.typeAnnotation = this.flowParseTypeAnnotation();
    } else if (this.isThisParam(param)) {
      this.raise(FlowErrors.ThisParamAnnotationRequired, {
        at: param
      });
    }
    if (this.match(29) && this.isThisParam(param)) {
      this.raise(FlowErrors.ThisParamNoDefault, {
        at: param
      });
    }
    this.resetEndLocation(param);
    return param;
  }
  parseMaybeDefault(startLoc, left) {
    const node = super.parseMaybeDefault(startLoc, left);
    if (node.type === "AssignmentPattern" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {
      this.raise(FlowErrors.TypeBeforeInitializer, {
        at: node.typeAnnotation
      });
    }
    return node;
  }
  checkImportReflection(node) {
    super.checkImportReflection(node);
    if (node.module && node.importKind !== "value") {
      this.raise(FlowErrors.ImportReflectionHasImportType, {
        at: node.specifiers[0].loc.start
      });
    }
  }
  parseImportSpecifierLocal(node, specifier, type) {
    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();
    node.specifiers.push(this.finishImportSpecifier(specifier, type));
  }
  isPotentialImportPhase(isExport) {
    if (super.isPotentialImportPhase(isExport)) return true;
    if (this.isContextual(130)) {
      if (!isExport) return true;
      const ch = this.lookaheadCharCode();
      return ch === 123 || ch === 42;
    }
    return !isExport && this.isContextual(87);
  }
  applyImportPhase(node, isExport, phase, loc) {
    super.applyImportPhase(node, isExport, phase, loc);
    if (isExport) {
      if (!phase && this.match(65)) {
        return;
      }
      node.exportKind = phase === "type" ? phase : "value";
    } else {
      if (phase === "type" && this.match(55)) this.unexpected();
      node.importKind = phase === "type" || phase === "typeof" ? phase : "value";
    }
  }
  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
    const firstIdent = specifier.imported;
    let specifierTypeKind = null;
    if (firstIdent.type === "Identifier") {
      if (firstIdent.name === "type") {
        specifierTypeKind = "type";
      } else if (firstIdent.name === "typeof") {
        specifierTypeKind = "typeof";
      }
    }
    let isBinding = false;
    if (this.isContextual(93) && !this.isLookaheadContextual("as")) {
      const as_ident = this.parseIdentifier(true);
      if (specifierTypeKind !== null && !tokenIsKeywordOrIdentifier(this.state.type)) {
        specifier.imported = as_ident;
        specifier.importKind = specifierTypeKind;
        specifier.local = cloneIdentifier(as_ident);
      } else {
        specifier.imported = firstIdent;
        specifier.importKind = null;
        specifier.local = this.parseIdentifier();
      }
    } else {
      if (specifierTypeKind !== null && tokenIsKeywordOrIdentifier(this.state.type)) {
        specifier.imported = this.parseIdentifier(true);
        specifier.importKind = specifierTypeKind;
      } else {
        if (importedIsString) {
          throw this.raise(Errors.ImportBindingIsString, {
            at: specifier,
            importName: firstIdent.value
          });
        }
        specifier.imported = firstIdent;
        specifier.importKind = null;
      }
      if (this.eatContextual(93)) {
        specifier.local = this.parseIdentifier();
      } else {
        isBinding = true;
        specifier.local = cloneIdentifier(specifier.imported);
      }
    }
    const specifierIsTypeImport = hasTypeImportKind(specifier);
    if (isInTypeOnlyImport && specifierIsTypeImport) {
      this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {
        at: specifier
      });
    }
    if (isInTypeOnlyImport || specifierIsTypeImport) {
      this.checkReservedType(specifier.local.name, specifier.local.loc.start, true);
    }
    if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {
      this.checkReservedWord(specifier.local.name, specifier.loc.start, true, true);
    }
    return this.finishImportSpecifier(specifier, "ImportSpecifier");
  }
  parseBindingAtom() {
    switch (this.state.type) {
      case 78:
        return this.parseIdentifier(true);
      default:
        return super.parseBindingAtom();
    }
  }
  parseFunctionParams(node, isConstructor) {
    const kind = node.kind;
    if (kind !== "get" && kind !== "set" && this.match(47)) {
      node.typeParameters = this.flowParseTypeParameterDeclaration();
    }
    super.parseFunctionParams(node, isConstructor);
  }
  parseVarId(decl, kind) {
    super.parseVarId(decl, kind);
    if (this.match(14)) {
      decl.id.typeAnnotation = this.flowParseTypeAnnotation();
      this.resetEndLocation(decl.id);
    }
  }
  parseAsyncArrowFromCallExpression(node, call) {
    if (this.match(14)) {
      const oldNoAnonFunctionType = this.state.noAnonFunctionType;
      this.state.noAnonFunctionType = true;
      node.returnType = this.flowParseTypeAnnotation();
      this.state.noAnonFunctionType = oldNoAnonFunctionType;
    }
    return super.parseAsyncArrowFromCallExpression(node, call);
  }
  shouldParseAsyncArrow() {
    return this.match(14) || super.shouldParseAsyncArrow();
  }
  parseMaybeAssign(refExpressionErrors, afterLeftParse) {
    var _jsx;
    let state = null;
    let jsx;
    if (this.hasPlugin("jsx") && (this.match(142) || this.match(47))) {
      state = this.state.clone();
      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);
      if (!jsx.error) return jsx.node;
      const {
        context
      } = this.state;
      const currentContext = context[context.length - 1];
      if (currentContext === types.j_oTag || currentContext === types.j_expr) {
        context.pop();
      }
    }
    if ((_jsx = jsx) != null && _jsx.error || this.match(47)) {
      var _jsx2, _jsx3;
      state = state || this.state.clone();
      let typeParameters;
      const arrow = this.tryParse(abort => {
        var _arrowExpression$extr;
        typeParameters = this.flowParseTypeParameterDeclaration();
        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {
          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
          this.resetStartLocationFromNode(result, typeParameters);
          return result;
        });
        if ((_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) abort();
        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);
        if (expr.type !== "ArrowFunctionExpression") abort();
        expr.typeParameters = typeParameters;
        this.resetStartLocationFromNode(expr, typeParameters);
        return arrowExpression;
      }, state);
      let arrowExpression = null;
      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === "ArrowFunctionExpression") {
        if (!arrow.error && !arrow.aborted) {
          if (arrow.node.async) {
            this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction, {
              at: typeParameters
            });
          }
          return arrow.node;
        }
        arrowExpression = arrow.node;
      }
      if ((_jsx2 = jsx) != null && _jsx2.node) {
        this.state = jsx.failState;
        return jsx.node;
      }
      if (arrowExpression) {
        this.state = arrow.failState;
        return arrowExpression;
      }
      if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;
      if (arrow.thrown) throw arrow.error;
      throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {
        at: typeParameters
      });
    }
    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
  }
  parseArrow(node) {
    if (this.match(14)) {
      const result = this.tryParse(() => {
        const oldNoAnonFunctionType = this.state.noAnonFunctionType;
        this.state.noAnonFunctionType = true;
        const typeNode = this.startNode();
        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
        this.state.noAnonFunctionType = oldNoAnonFunctionType;
        if (this.canInsertSemicolon()) this.unexpected();
        if (!this.match(19)) this.unexpected();
        return typeNode;
      });
      if (result.thrown) return null;
      if (result.error) this.state = result.failState;
      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, "TypeAnnotation") : null;
    }
    return super.parseArrow(node);
  }
  shouldParseArrow(params) {
    return this.match(14) || super.shouldParseArrow(params);
  }
  setArrowFunctionParameters(node, params) {
    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {
      node.params = params;
    } else {
      super.setArrowFunctionParameters(node, params);
    }
  }
  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {
      return;
    }
    for (let i = 0; i < node.params.length; i++) {
      if (this.isThisParam(node.params[i]) && i > 0) {
        this.raise(FlowErrors.ThisParamMustBeFirst, {
          at: node.params[i]
        });
      }
    }
    super.checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged);
  }
  parseParenAndDistinguishExpression(canBeArrow) {
    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);
  }
  parseSubscripts(base, startLoc, noCalls) {
    if (base.type === "Identifier" && base.name === "async" && this.state.noArrowAt.indexOf(startLoc.index) !== -1) {
      this.next();
      const node = this.startNodeAt(startLoc);
      node.callee = base;
      node.arguments = super.parseCallExpressionArguments(11, false);
      base = this.finishNode(node, "CallExpression");
    } else if (base.type === "Identifier" && base.name === "async" && this.match(47)) {
      const state = this.state.clone();
      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(), state);
      if (!arrow.error && !arrow.aborted) return arrow.node;
      const result = this.tryParse(() => super.parseSubscripts(base, startLoc, noCalls), state);
      if (result.node && !result.error) return result.node;
      if (arrow.node) {
        this.state = arrow.failState;
        return arrow.node;
      }
      if (result.node) {
        this.state = result.failState;
        return result.node;
      }
      throw arrow.error || result.error;
    }
    return super.parseSubscripts(base, startLoc, noCalls);
  }
  parseSubscript(base, startLoc, noCalls, subscriptState) {
    if (this.match(18) && this.isLookaheadToken_lt()) {
      subscriptState.optionalChainMember = true;
      if (noCalls) {
        subscriptState.stop = true;
        return base;
      }
      this.next();
      const node = this.startNodeAt(startLoc);
      node.callee = base;
      node.typeArguments = this.flowParseTypeParameterInstantiation();
      this.expect(10);
      node.arguments = this.parseCallExpressionArguments(11, false);
      node.optional = true;
      return this.finishCallExpression(node, true);
    } else if (!noCalls && this.shouldParseTypes() && this.match(47)) {
      const node = this.startNodeAt(startLoc);
      node.callee = base;
      const result = this.tryParse(() => {
        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();
        this.expect(10);
        node.arguments = super.parseCallExpressionArguments(11, false);
        if (subscriptState.optionalChainMember) {
          node.optional = false;
        }
        return this.finishCallExpression(node, subscriptState.optionalChainMember);
      });
      if (result.node) {
        if (result.error) this.state = result.failState;
        return result.node;
      }
    }
    return super.parseSubscript(base, startLoc, noCalls, subscriptState);
  }
  parseNewCallee(node) {
    super.parseNewCallee(node);
    let targs = null;
    if (this.shouldParseTypes() && this.match(47)) {
      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;
    }
    node.typeArguments = targs;
  }
  parseAsyncArrowWithTypeParameters(startLoc) {
    const node = this.startNodeAt(startLoc);
    this.parseFunctionParams(node, false);
    if (!this.parseArrow(node)) return;
    return super.parseArrowExpression(node, undefined, true);
  }
  readToken_mult_modulo(code) {
    const next = this.input.charCodeAt(this.state.pos + 1);
    if (code === 42 && next === 47 && this.state.hasFlowComment) {
      this.state.hasFlowComment = false;
      this.state.pos += 2;
      this.nextToken();
      return;
    }
    super.readToken_mult_modulo(code);
  }
  readToken_pipe_amp(code) {
    const next = this.input.charCodeAt(this.state.pos + 1);
    if (code === 124 && next === 125) {
      this.finishOp(9, 2);
      return;
    }
    super.readToken_pipe_amp(code);
  }
  parseTopLevel(file, program) {
    const fileNode = super.parseTopLevel(file, program);
    if (this.state.hasFlowComment) {
      this.raise(FlowErrors.UnterminatedFlowComment, {
        at: this.state.curPosition()
      });
    }
    return fileNode;
  }
  skipBlockComment() {
    if (this.hasPlugin("flowComments") && this.skipFlowComment()) {
      if (this.state.hasFlowComment) {
        throw this.raise(FlowErrors.NestedFlowComment, {
          at: this.state.startLoc
        });
      }
      this.hasFlowCommentCompletion();
      const commentSkip = this.skipFlowComment();
      if (commentSkip) {
        this.state.pos += commentSkip;
        this.state.hasFlowComment = true;
      }
      return;
    }
    return super.skipBlockComment(this.state.hasFlowComment ? "*-/" : "*/");
  }
  skipFlowComment() {
    const {
      pos
    } = this.state;
    let shiftToFirstNonWhiteSpace = 2;
    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {
      shiftToFirstNonWhiteSpace++;
    }
    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);
    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);
    if (ch2 === 58 && ch3 === 58) {
      return shiftToFirstNonWhiteSpace + 2;
    }
    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === "flow-include") {
      return shiftToFirstNonWhiteSpace + 12;
    }
    if (ch2 === 58 && ch3 !== 58) {
      return shiftToFirstNonWhiteSpace;
    }
    return false;
  }
  hasFlowCommentCompletion() {
    const end = this.input.indexOf("*/", this.state.pos);
    if (end === -1) {
      throw this.raise(Errors.UnterminatedComment, {
        at: this.state.curPosition()
      });
    }
  }
  flowEnumErrorBooleanMemberNotInitialized(loc, {
    enumName,
    memberName
  }) {
    this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {
      at: loc,
      memberName,
      enumName
    });
  }
  flowEnumErrorInvalidMemberInitializer(loc, enumContext) {
    return this.raise(!enumContext.explicitType ? FlowErrors.EnumInvalidMemberInitializerUnknownType : enumContext.explicitType === "symbol" ? FlowErrors.EnumInvalidMemberInitializerSymbolType : FlowErrors.EnumInvalidMemberInitializerPrimaryType, Object.assign({
      at: loc
    }, enumContext));
  }
  flowEnumErrorNumberMemberNotInitialized(loc, {
    enumName,
    memberName
  }) {
    this.raise(FlowErrors.EnumNumberMemberNotInitialized, {
      at: loc,
      enumName,
      memberName
    });
  }
  flowEnumErrorStringMemberInconsistentlyInitialized(node, {
    enumName
  }) {
    this.raise(FlowErrors.EnumStringMemberInconsistentlyInitialized, {
      at: node,
      enumName
    });
  }
  flowEnumMemberInit() {
    const startLoc = this.state.startLoc;
    const endOfInit = () => this.match(12) || this.match(8);
    switch (this.state.type) {
      case 134:
        {
          const literal = this.parseNumericLiteral(this.state.value);
          if (endOfInit()) {
            return {
              type: "number",
              loc: literal.loc.start,
              value: literal
            };
          }
          return {
            type: "invalid",
            loc: startLoc
          };
        }
      case 133:
        {
          const literal = this.parseStringLiteral(this.state.value);
          if (endOfInit()) {
            return {
              type: "string",
              loc: literal.loc.start,
              value: literal
            };
          }
          return {
            type: "invalid",
            loc: startLoc
          };
        }
      case 85:
      case 86:
        {
          const literal = this.parseBooleanLiteral(this.match(85));
          if (endOfInit()) {
            return {
              type: "boolean",
              loc: literal.loc.start,
              value: literal
            };
          }
          return {
            type: "invalid",
            loc: startLoc
          };
        }
      default:
        return {
          type: "invalid",
          loc: startLoc
        };
    }
  }
  flowEnumMemberRaw() {
    const loc = this.state.startLoc;
    const id = this.parseIdentifier(true);
    const init = this.eat(29) ? this.flowEnumMemberInit() : {
      type: "none",
      loc
    };
    return {
      id,
      init
    };
  }
  flowEnumCheckExplicitTypeMismatch(loc, context, expectedType) {
    const {
      explicitType
    } = context;
    if (explicitType === null) {
      return;
    }
    if (explicitType !== expectedType) {
      this.flowEnumErrorInvalidMemberInitializer(loc, context);
    }
  }
  flowEnumMembers({
    enumName,
    explicitType
  }) {
    const seenNames = new Set();
    const members = {
      booleanMembers: [],
      numberMembers: [],
      stringMembers: [],
      defaultedMembers: []
    };
    let hasUnknownMembers = false;
    while (!this.match(8)) {
      if (this.eat(21)) {
        hasUnknownMembers = true;
        break;
      }
      const memberNode = this.startNode();
      const {
        id,
        init
      } = this.flowEnumMemberRaw();
      const memberName = id.name;
      if (memberName === "") {
        continue;
      }
      if (/^[a-z]/.test(memberName)) {
        this.raise(FlowErrors.EnumInvalidMemberName, {
          at: id,
          memberName,
          suggestion: memberName[0].toUpperCase() + memberName.slice(1),
          enumName
        });
      }
      if (seenNames.has(memberName)) {
        this.raise(FlowErrors.EnumDuplicateMemberName, {
          at: id,
          memberName,
          enumName
        });
      }
      seenNames.add(memberName);
      const context = {
        enumName,
        explicitType,
        memberName
      };
      memberNode.id = id;
      switch (init.type) {
        case "boolean":
          {
            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "boolean");
            memberNode.init = init.value;
            members.booleanMembers.push(this.finishNode(memberNode, "EnumBooleanMember"));
            break;
          }
        case "number":
          {
            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "number");
            memberNode.init = init.value;
            members.numberMembers.push(this.finishNode(memberNode, "EnumNumberMember"));
            break;
          }
        case "string":
          {
            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "string");
            memberNode.init = init.value;
            members.stringMembers.push(this.finishNode(memberNode, "EnumStringMember"));
            break;
          }
        case "invalid":
          {
            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);
          }
        case "none":
          {
            switch (explicitType) {
              case "boolean":
                this.flowEnumErrorBooleanMemberNotInitialized(init.loc, context);
                break;
              case "number":
                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);
                break;
              default:
                members.defaultedMembers.push(this.finishNode(memberNode, "EnumDefaultedMember"));
            }
          }
      }
      if (!this.match(8)) {
        this.expect(12);
      }
    }
    return {
      members,
      hasUnknownMembers
    };
  }
  flowEnumStringMembers(initializedMembers, defaultedMembers, {
    enumName
  }) {
    if (initializedMembers.length === 0) {
      return defaultedMembers;
    } else if (defaultedMembers.length === 0) {
      return initializedMembers;
    } else if (defaultedMembers.length > initializedMembers.length) {
      for (const member of initializedMembers) {
        this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {
          enumName
        });
      }
      return defaultedMembers;
    } else {
      for (const member of defaultedMembers) {
        this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {
          enumName
        });
      }
      return initializedMembers;
    }
  }
  flowEnumParseExplicitType({
    enumName
  }) {
    if (!this.eatContextual(102)) return null;
    if (!tokenIsIdentifier(this.state.type)) {
      throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, {
        at: this.state.startLoc,
        enumName
      });
    }
    const {
      value
    } = this.state;
    this.next();
    if (value !== "boolean" && value !== "number" && value !== "string" && value !== "symbol") {
      this.raise(FlowErrors.EnumInvalidExplicitType, {
        at: this.state.startLoc,
        enumName,
        invalidEnumType: value
      });
    }
    return value;
  }
  flowEnumBody(node, id) {
    const enumName = id.name;
    const nameLoc = id.loc.start;
    const explicitType = this.flowEnumParseExplicitType({
      enumName
    });
    this.expect(5);
    const {
      members,
      hasUnknownMembers
    } = this.flowEnumMembers({
      enumName,
      explicitType
    });
    node.hasUnknownMembers = hasUnknownMembers;
    switch (explicitType) {
      case "boolean":
        node.explicitType = true;
        node.members = members.booleanMembers;
        this.expect(8);
        return this.finishNode(node, "EnumBooleanBody");
      case "number":
        node.explicitType = true;
        node.members = members.numberMembers;
        this.expect(8);
        return this.finishNode(node, "EnumNumberBody");
      case "string":
        node.explicitType = true;
        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {
          enumName
        });
        this.expect(8);
        return this.finishNode(node, "EnumStringBody");
      case "symbol":
        node.members = members.defaultedMembers;
        this.expect(8);
        return this.finishNode(node, "EnumSymbolBody");
      default:
        {
          const empty = () => {
            node.members = [];
            this.expect(8);
            return this.finishNode(node, "EnumStringBody");
          };
          node.explicitType = false;
          const boolsLen = members.booleanMembers.length;
          const numsLen = members.numberMembers.length;
          const strsLen = members.stringMembers.length;
          const defaultedLen = members.defaultedMembers.length;
          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {
            return empty();
          } else if (!boolsLen && !numsLen) {
            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {
              enumName
            });
            this.expect(8);
            return this.finishNode(node, "EnumStringBody");
          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {
            for (const member of members.defaultedMembers) {
              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {
                enumName,
                memberName: member.id.name
              });
            }
            node.members = members.booleanMembers;
            this.expect(8);
            return this.finishNode(node, "EnumBooleanBody");
          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {
            for (const member of members.defaultedMembers) {
              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {
                enumName,
                memberName: member.id.name
              });
            }
            node.members = members.numberMembers;
            this.expect(8);
            return this.finishNode(node, "EnumNumberBody");
          } else {
            this.raise(FlowErrors.EnumInconsistentMemberValues, {
              at: nameLoc,
              enumName
            });
            return empty();
          }
        }
    }
  }
  flowParseEnumDeclaration(node) {
    const id = this.parseIdentifier();
    node.id = id;
    node.body = this.flowEnumBody(this.startNode(), id);
    return this.finishNode(node, "EnumDeclaration");
  }
  isLookaheadToken_lt() {
    const next = this.nextTokenStart();
    if (this.input.charCodeAt(next) === 60) {
      const afterNext = this.input.charCodeAt(next + 1);
      return afterNext !== 60 && afterNext !== 61;
    }
    return false;
  }
  maybeUnwrapTypeCastExpression(node) {
    return node.type === "TypeCastExpression" ? node.expression : node;
  }
};
const entities = {
  __proto__: null,
  quot: "\u0022",
  amp: "&",
  apos: "\u0027",
  lt: "<",
  gt: ">",
  nbsp: "\u00A0",
  iexcl: "\u00A1",
  cent: "\u00A2",
  pound: "\u00A3",
  curren: "\u00A4",
  yen: "\u00A5",
  brvbar: "\u00A6",
  sect: "\u00A7",
  uml: "\u00A8",
  copy: "\u00A9",
  ordf: "\u00AA",
  laquo: "\u00AB",
  not: "\u00AC",
  shy: "\u00AD",
  reg: "\u00AE",
  macr: "\u00AF",
  deg: "\u00B0",
  plusmn: "\u00B1",
  sup2: "\u00B2",
  sup3: "\u00B3",
  acute: "\u00B4",
  micro: "\u00B5",
  para: "\u00B6",
  middot: "\u00B7",
  cedil: "\u00B8",
  sup1: "\u00B9",
  ordm: "\u00BA",
  raquo: "\u00BB",
  frac14: "\u00BC",
  frac12: "\u00BD",
  frac34: "\u00BE",
  iquest: "\u00BF",
  Agrave: "\u00C0",
  Aacute: "\u00C1",
  Acirc: "\u00C2",
  Atilde: "\u00C3",
  Auml: "\u00C4",
  Aring: "\u00C5",
  AElig: "\u00C6",
  Ccedil: "\u00C7",
  Egrave: "\u00C8",
  Eacute: "\u00C9",
  Ecirc: "\u00CA",
  Euml: "\u00CB",
  Igrave: "\u00CC",
  Iacute: "\u00CD",
  Icirc: "\u00CE",
  Iuml: "\u00CF",
  ETH: "\u00D0",
  Ntilde: "\u00D1",
  Ograve: "\u00D2",
  Oacute: "\u00D3",
  Ocirc: "\u00D4",
  Otilde: "\u00D5",
  Ouml: "\u00D6",
  times: "\u00D7",
  Oslash: "\u00D8",
  Ugrave: "\u00D9",
  Uacute: "\u00DA",
  Ucirc: "\u00DB",
  Uuml: "\u00DC",
  Yacute: "\u00DD",
  THORN: "\u00DE",
  szlig: "\u00DF",
  agrave: "\u00E0",
  aacute: "\u00E1",
  acirc: "\u00E2",
  atilde: "\u00E3",
  auml: "\u00E4",
  aring: "\u00E5",
  aelig: "\u00E6",
  ccedil: "\u00E7",
  egrave: "\u00E8",
  eacute: "\u00E9",
  ecirc: "\u00EA",
  euml: "\u00EB",
  igrave: "\u00EC",
  iacute: "\u00ED",
  icirc: "\u00EE",
  iuml: "\u00EF",
  eth: "\u00F0",
  ntilde: "\u00F1",
  ograve: "\u00F2",
  oacute: "\u00F3",
  ocirc: "\u00F4",
  otilde: "\u00F5",
  ouml: "\u00F6",
  divide: "\u00F7",
  oslash: "\u00F8",
  ugrave: "\u00F9",
  uacute: "\u00FA",
  ucirc: "\u00FB",
  uuml: "\u00FC",
  yacute: "\u00FD",
  thorn: "\u00FE",
  yuml: "\u00FF",
  OElig: "\u0152",
  oelig: "\u0153",
  Scaron: "\u0160",
  scaron: "\u0161",
  Yuml: "\u0178",
  fnof: "\u0192",
  circ: "\u02C6",
  tilde: "\u02DC",
  Alpha: "\u0391",
  Beta: "\u0392",
  Gamma: "\u0393",
  Delta: "\u0394",
  Epsilon: "\u0395",
  Zeta: "\u0396",
  Eta: "\u0397",
  Theta: "\u0398",
  Iota: "\u0399",
  Kappa: "\u039A",
  Lambda: "\u039B",
  Mu: "\u039C",
  Nu: "\u039D",
  Xi: "\u039E",
  Omicron: "\u039F",
  Pi: "\u03A0",
  Rho: "\u03A1",
  Sigma: "\u03A3",
  Tau: "\u03A4",
  Upsilon: "\u03A5",
  Phi: "\u03A6",
  Chi: "\u03A7",
  Psi: "\u03A8",
  Omega: "\u03A9",
  alpha: "\u03B1",
  beta: "\u03B2",
  gamma: "\u03B3",
  delta: "\u03B4",
  epsilon: "\u03B5",
  zeta: "\u03B6",
  eta: "\u03B7",
  theta: "\u03B8",
  iota: "\u03B9",
  kappa: "\u03BA",
  lambda: "\u03BB",
  mu: "\u03BC",
  nu: "\u03BD",
  xi: "\u03BE",
  omicron: "\u03BF",
  pi: "\u03C0",
  rho: "\u03C1",
  sigmaf: "\u03C2",
  sigma: "\u03C3",
  tau: "\u03C4",
  upsilon: "\u03C5",
  phi: "\u03C6",
  chi: "\u03C7",
  psi: "\u03C8",
  omega: "\u03C9",
  thetasym: "\u03D1",
  upsih: "\u03D2",
  piv: "\u03D6",
  ensp: "\u2002",
  emsp: "\u2003",
  thinsp: "\u2009",
  zwnj: "\u200C",
  zwj: "\u200D",
  lrm: "\u200E",
  rlm: "\u200F",
  ndash: "\u2013",
  mdash: "\u2014",
  lsquo: "\u2018",
  rsquo: "\u2019",
  sbquo: "\u201A",
  ldquo: "\u201C",
  rdquo: "\u201D",
  bdquo: "\u201E",
  dagger: "\u2020",
  Dagger: "\u2021",
  bull: "\u2022",
  hellip: "\u2026",
  permil: "\u2030",
  prime: "\u2032",
  Prime: "\u2033",
  lsaquo: "\u2039",
  rsaquo: "\u203A",
  oline: "\u203E",
  frasl: "\u2044",
  euro: "\u20AC",
  image: "\u2111",
  weierp: "\u2118",
  real: "\u211C",
  trade: "\u2122",
  alefsym: "\u2135",
  larr: "\u2190",
  uarr: "\u2191",
  rarr: "\u2192",
  darr: "\u2193",
  harr: "\u2194",
  crarr: "\u21B5",
  lArr: "\u21D0",
  uArr: "\u21D1",
  rArr: "\u21D2",
  dArr: "\u21D3",
  hArr: "\u21D4",
  forall: "\u2200",
  part: "\u2202",
  exist: "\u2203",
  empty: "\u2205",
  nabla: "\u2207",
  isin: "\u2208",
  notin: "\u2209",
  ni: "\u220B",
  prod: "\u220F",
  sum: "\u2211",
  minus: "\u2212",
  lowast: "\u2217",
  radic: "\u221A",
  prop: "\u221D",
  infin: "\u221E",
  ang: "\u2220",
  and: "\u2227",
  or: "\u2228",
  cap: "\u2229",
  cup: "\u222A",
  int: "\u222B",
  there4: "\u2234",
  sim: "\u223C",
  cong: "\u2245",
  asymp: "\u2248",
  ne: "\u2260",
  equiv: "\u2261",
  le: "\u2264",
  ge: "\u2265",
  sub: "\u2282",
  sup: "\u2283",
  nsub: "\u2284",
  sube: "\u2286",
  supe: "\u2287",
  oplus: "\u2295",
  otimes: "\u2297",
  perp: "\u22A5",
  sdot: "\u22C5",
  lceil: "\u2308",
  rceil: "\u2309",
  lfloor: "\u230A",
  rfloor: "\u230B",
  lang: "\u2329",
  rang: "\u232A",
  loz: "\u25CA",
  spades: "\u2660",
  clubs: "\u2663",
  hearts: "\u2665",
  diams: "\u2666"
};
const JsxErrors = ParseErrorEnum`jsx`({
  AttributeIsEmpty: "JSX attributes must only be assigned a non-empty expression.",
  MissingClosingTagElement: ({
    openingTagName
  }) => `Expected corresponding JSX closing tag for <${openingTagName}>.`,
  MissingClosingTagFragment: "Expected corresponding JSX closing tag for <>.",
  UnexpectedSequenceExpression: "Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?",
  UnexpectedToken: ({
    unexpected,
    HTMLEntity
  }) => `Unexpected token \`${unexpected}\`. Did you mean \`${HTMLEntity}\` or \`{'${unexpected}'}\`?`,
  UnsupportedJsxValue: "JSX value should be either an expression or a quoted JSX text.",
  UnterminatedJsxContent: "Unterminated JSX contents.",
  UnwrappedAdjacentJSXElements: "Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?"
});
function isFragment(object) {
  return object ? object.type === "JSXOpeningFragment" || object.type === "JSXClosingFragment" : false;
}
function getQualifiedJSXName(object) {
  if (object.type === "JSXIdentifier") {
    return object.name;
  }
  if (object.type === "JSXNamespacedName") {
    return object.namespace.name + ":" + object.name.name;
  }
  if (object.type === "JSXMemberExpression") {
    return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
  }
  throw new Error("Node had unexpected type: " + object.type);
}
var jsx = superClass => class JSXParserMixin extends superClass {
  jsxReadToken() {
    let out = "";
    let chunkStart = this.state.pos;
    for (;;) {
      if (this.state.pos >= this.length) {
        throw this.raise(JsxErrors.UnterminatedJsxContent, {
          at: this.state.startLoc
        });
      }
      const ch = this.input.charCodeAt(this.state.pos);
      switch (ch) {
        case 60:
        case 123:
          if (this.state.pos === this.state.start) {
            if (ch === 60 && this.state.canStartJSXElement) {
              ++this.state.pos;
              this.finishToken(142);
            } else {
              super.getTokenFromCode(ch);
            }
            return;
          }
          out += this.input.slice(chunkStart, this.state.pos);
          this.finishToken(141, out);
          return;
        case 38:
          out += this.input.slice(chunkStart, this.state.pos);
          out += this.jsxReadEntity();
          chunkStart = this.state.pos;
          break;
        case 62:
        case 125:
        default:
          if (isNewLine(ch)) {
            out += this.input.slice(chunkStart, this.state.pos);
            out += this.jsxReadNewLine(true);
            chunkStart = this.state.pos;
          } else {
            ++this.state.pos;
          }
      }
    }
  }
  jsxReadNewLine(normalizeCRLF) {
    const ch = this.input.charCodeAt(this.state.pos);
    let out;
    ++this.state.pos;
    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {
      ++this.state.pos;
      out = normalizeCRLF ? "\n" : "\r\n";
    } else {
      out = String.fromCharCode(ch);
    }
    ++this.state.curLine;
    this.state.lineStart = this.state.pos;
    return out;
  }
  jsxReadString(quote) {
    let out = "";
    let chunkStart = ++this.state.pos;
    for (;;) {
      if (this.state.pos >= this.length) {
        throw this.raise(Errors.UnterminatedString, {
          at: this.state.startLoc
        });
      }
      const ch = this.input.charCodeAt(this.state.pos);
      if (ch === quote) break;
      if (ch === 38) {
        out += this.input.slice(chunkStart, this.state.pos);
        out += this.jsxReadEntity();
        chunkStart = this.state.pos;
      } else if (isNewLine(ch)) {
        out += this.input.slice(chunkStart, this.state.pos);
        out += this.jsxReadNewLine(false);
        chunkStart = this.state.pos;
      } else {
        ++this.state.pos;
      }
    }
    out += this.input.slice(chunkStart, this.state.pos++);
    this.finishToken(133, out);
  }
  jsxReadEntity() {
    const startPos = ++this.state.pos;
    if (this.codePointAtPos(this.state.pos) === 35) {
      ++this.state.pos;
      let radix = 10;
      if (this.codePointAtPos(this.state.pos) === 120) {
        radix = 16;
        ++this.state.pos;
      }
      const codePoint = this.readInt(radix, undefined, false, "bail");
      if (codePoint !== null && this.codePointAtPos(this.state.pos) === 59) {
        ++this.state.pos;
        return String.fromCodePoint(codePoint);
      }
    } else {
      let count = 0;
      let semi = false;
      while (count++ < 10 && this.state.pos < this.length && !(semi = this.codePointAtPos(this.state.pos) == 59)) {
        ++this.state.pos;
      }
      if (semi) {
        const desc = this.input.slice(startPos, this.state.pos);
        const entity = entities[desc];
        ++this.state.pos;
        if (entity) {
          return entity;
        }
      }
    }
    this.state.pos = startPos;
    return "&";
  }
  jsxReadWord() {
    let ch;
    const start = this.state.pos;
    do {
      ch = this.input.charCodeAt(++this.state.pos);
    } while (isIdentifierChar(ch) || ch === 45);
    this.finishToken(140, this.input.slice(start, this.state.pos));
  }
  jsxParseIdentifier() {
    const node = this.startNode();
    if (this.match(140)) {
      node.name = this.state.value;
    } else if (tokenIsKeyword(this.state.type)) {
      node.name = tokenLabelName(this.state.type);
    } else {
      this.unexpected();
    }
    this.next();
    return this.finishNode(node, "JSXIdentifier");
  }
  jsxParseNamespacedName() {
    const startLoc = this.state.startLoc;
    const name = this.jsxParseIdentifier();
    if (!this.eat(14)) return name;
    const node = this.startNodeAt(startLoc);
    node.namespace = name;
    node.name = this.jsxParseIdentifier();
    return this.finishNode(node, "JSXNamespacedName");
  }
  jsxParseElementName() {
    const startLoc = this.state.startLoc;
    let node = this.jsxParseNamespacedName();
    if (node.type === "JSXNamespacedName") {
      return node;
    }
    while (this.eat(16)) {
      const newNode = this.startNodeAt(startLoc);
      newNode.object = node;
      newNode.property = this.jsxParseIdentifier();
      node = this.finishNode(newNode, "JSXMemberExpression");
    }
    return node;
  }
  jsxParseAttributeValue() {
    let node;
    switch (this.state.type) {
      case 5:
        node = this.startNode();
        this.setContext(types.brace);
        this.next();
        node = this.jsxParseExpressionContainer(node, types.j_oTag);
        if (node.expression.type === "JSXEmptyExpression") {
          this.raise(JsxErrors.AttributeIsEmpty, {
            at: node
          });
        }
        return node;
      case 142:
      case 133:
        return this.parseExprAtom();
      default:
        throw this.raise(JsxErrors.UnsupportedJsxValue, {
          at: this.state.startLoc
        });
    }
  }
  jsxParseEmptyExpression() {
    const node = this.startNodeAt(this.state.lastTokEndLoc);
    return this.finishNodeAt(node, "JSXEmptyExpression", this.state.startLoc);
  }
  jsxParseSpreadChild(node) {
    this.next();
    node.expression = this.parseExpression();
    this.setContext(types.j_expr);
    this.state.canStartJSXElement = true;
    this.expect(8);
    return this.finishNode(node, "JSXSpreadChild");
  }
  jsxParseExpressionContainer(node, previousContext) {
    if (this.match(8)) {
      node.expression = this.jsxParseEmptyExpression();
    } else {
      const expression = this.parseExpression();
      node.expression = expression;
    }
    this.setContext(previousContext);
    this.state.canStartJSXElement = true;
    this.expect(8);
    return this.finishNode(node, "JSXExpressionContainer");
  }
  jsxParseAttribute() {
    const node = this.startNode();
    if (this.match(5)) {
      this.setContext(types.brace);
      this.next();
      this.expect(21);
      node.argument = this.parseMaybeAssignAllowIn();
      this.setContext(types.j_oTag);
      this.state.canStartJSXElement = true;
      this.expect(8);
      return this.finishNode(node, "JSXSpreadAttribute");
    }
    node.name = this.jsxParseNamespacedName();
    node.value = this.eat(29) ? this.jsxParseAttributeValue() : null;
    return this.finishNode(node, "JSXAttribute");
  }
  jsxParseOpeningElementAt(startLoc) {
    const node = this.startNodeAt(startLoc);
    if (this.eat(143)) {
      return this.finishNode(node, "JSXOpeningFragment");
    }
    node.name = this.jsxParseElementName();
    return this.jsxParseOpeningElementAfterName(node);
  }
  jsxParseOpeningElementAfterName(node) {
    const attributes = [];
    while (!this.match(56) && !this.match(143)) {
      attributes.push(this.jsxParseAttribute());
    }
    node.attributes = attributes;
    node.selfClosing = this.eat(56);
    this.expect(143);
    return this.finishNode(node, "JSXOpeningElement");
  }
  jsxParseClosingElementAt(startLoc) {
    const node = this.startNodeAt(startLoc);
    if (this.eat(143)) {
      return this.finishNode(node, "JSXClosingFragment");
    }
    node.name = this.jsxParseElementName();
    this.expect(143);
    return this.finishNode(node, "JSXClosingElement");
  }
  jsxParseElementAt(startLoc) {
    const node = this.startNodeAt(startLoc);
    const children = [];
    const openingElement = this.jsxParseOpeningElementAt(startLoc);
    let closingElement = null;
    if (!openingElement.selfClosing) {
      contents: for (;;) {
        switch (this.state.type) {
          case 142:
            startLoc = this.state.startLoc;
            this.next();
            if (this.eat(56)) {
              closingElement = this.jsxParseClosingElementAt(startLoc);
              break contents;
            }
            children.push(this.jsxParseElementAt(startLoc));
            break;
          case 141:
            children.push(this.parseExprAtom());
            break;
          case 5:
            {
              const node = this.startNode();
              this.setContext(types.brace);
              this.next();
              if (this.match(21)) {
                children.push(this.jsxParseSpreadChild(node));
              } else {
                children.push(this.jsxParseExpressionContainer(node, types.j_expr));
              }
              break;
            }
          default:
            this.unexpected();
        }
      }
      if (isFragment(openingElement) && !isFragment(closingElement) && closingElement !== null) {
        this.raise(JsxErrors.MissingClosingTagFragment, {
          at: closingElement
        });
      } else if (!isFragment(openingElement) && isFragment(closingElement)) {
        this.raise(JsxErrors.MissingClosingTagElement, {
          at: closingElement,
          openingTagName: getQualifiedJSXName(openingElement.name)
        });
      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {
        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
          this.raise(JsxErrors.MissingClosingTagElement, {
            at: closingElement,
            openingTagName: getQualifiedJSXName(openingElement.name)
          });
        }
      }
    }
    if (isFragment(openingElement)) {
      node.openingFragment = openingElement;
      node.closingFragment = closingElement;
    } else {
      node.openingElement = openingElement;
      node.closingElement = closingElement;
    }
    node.children = children;
    if (this.match(47)) {
      throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {
        at: this.state.startLoc
      });
    }
    return isFragment(openingElement) ? this.finishNode(node, "JSXFragment") : this.finishNode(node, "JSXElement");
  }
  jsxParseElement() {
    const startLoc = this.state.startLoc;
    this.next();
    return this.jsxParseElementAt(startLoc);
  }
  setContext(newContext) {
    const {
      context
    } = this.state;
    context[context.length - 1] = newContext;
  }
  parseExprAtom(refExpressionErrors) {
    if (this.match(141)) {
      return this.parseLiteral(this.state.value, "JSXText");
    } else if (this.match(142)) {
      return this.jsxParseElement();
    } else if (this.match(47) && this.input.charCodeAt(this.state.pos) !== 33) {
      this.replaceToken(142);
      return this.jsxParseElement();
    } else {
      return super.parseExprAtom(refExpressionErrors);
    }
  }
  skipSpace() {
    const curContext = this.curContext();
    if (!curContext.preserveSpace) super.skipSpace();
  }
  getTokenFromCode(code) {
    const context = this.curContext();
    if (context === types.j_expr) {
      this.jsxReadToken();
      return;
    }
    if (context === types.j_oTag || context === types.j_cTag) {
      if (isIdentifierStart(code)) {
        this.jsxReadWord();
        return;
      }
      if (code === 62) {
        ++this.state.pos;
        this.finishToken(143);
        return;
      }
      if ((code === 34 || code === 39) && context === types.j_oTag) {
        this.jsxReadString(code);
        return;
      }
    }
    if (code === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {
      ++this.state.pos;
      this.finishToken(142);
      return;
    }
    super.getTokenFromCode(code);
  }
  updateContext(prevType) {
    const {
      context,
      type
    } = this.state;
    if (type === 56 && prevType === 142) {
      context.splice(-2, 2, types.j_cTag);
      this.state.canStartJSXElement = false;
    } else if (type === 142) {
      context.push(types.j_oTag);
    } else if (type === 143) {
      const out = context[context.length - 1];
      if (out === types.j_oTag && prevType === 56 || out === types.j_cTag) {
        context.pop();
        this.state.canStartJSXElement = context[context.length - 1] === types.j_expr;
      } else {
        this.setContext(types.j_expr);
        this.state.canStartJSXElement = true;
      }
    } else {
      this.state.canStartJSXElement = tokenComesBeforeExpression(type);
    }
  }
};
class TypeScriptScope extends Scope {
  constructor(...args) {
    super(...args);
    this.types = new Set();
    this.enums = new Set();
    this.constEnums = new Set();
    this.classes = new Set();
    this.exportOnlyBindings = new Set();
  }
}
class TypeScriptScopeHandler extends ScopeHandler {
  constructor(...args) {
    super(...args);
    this.importsStack = [];
  }
  createScope(flags) {
    this.importsStack.push(new Set());
    return new TypeScriptScope(flags);
  }
  enter(flags) {
    if (flags == 256) {
      this.importsStack.push(new Set());
    }
    super.enter(flags);
  }
  exit() {
    const flags = super.exit();
    if (flags == 256) {
      this.importsStack.pop();
    }
    return flags;
  }
  hasImport(name, allowShadow) {
    const len = this.importsStack.length;
    if (this.importsStack[len - 1].has(name)) {
      return true;
    }
    if (!allowShadow && len > 1) {
      for (let i = 0; i < len - 1; i++) {
        if (this.importsStack[i].has(name)) return true;
      }
    }
    return false;
  }
  declareName(name, bindingType, loc) {
    if (bindingType & 4096) {
      if (this.hasImport(name, true)) {
        this.parser.raise(Errors.VarRedeclaration, {
          at: loc,
          identifierName: name
        });
      }
      this.importsStack[this.importsStack.length - 1].add(name);
      return;
    }
    const scope = this.currentScope();
    if (bindingType & 1024) {
      this.maybeExportDefined(scope, name);
      scope.exportOnlyBindings.add(name);
      return;
    }
    super.declareName(name, bindingType, loc);
    if (bindingType & 2) {
      if (!(bindingType & 1)) {
        this.checkRedeclarationInScope(scope, name, bindingType, loc);
        this.maybeExportDefined(scope, name);
      }
      scope.types.add(name);
    }
    if (bindingType & 256) scope.enums.add(name);
    if (bindingType & 512) {
      scope.constEnums.add(name);
    }
    if (bindingType & 128) scope.classes.add(name);
  }
  isRedeclaredInScope(scope, name, bindingType) {
    if (scope.enums.has(name)) {
      if (bindingType & 256) {
        const isConst = !!(bindingType & 512);
        const wasConst = scope.constEnums.has(name);
        return isConst !== wasConst;
      }
      return true;
    }
    if (bindingType & 128 && scope.classes.has(name)) {
      if (scope.lexical.has(name)) {
        return !!(bindingType & 1);
      } else {
        return false;
      }
    }
    if (bindingType & 2 && scope.types.has(name)) {
      return true;
    }
    return super.isRedeclaredInScope(scope, name, bindingType);
  }
  checkLocalExport(id) {
    const {
      name
    } = id;
    if (this.hasImport(name)) return;
    const len = this.scopeStack.length;
    for (let i = len - 1; i >= 0; i--) {
      const scope = this.scopeStack[i];
      if (scope.types.has(name) || scope.exportOnlyBindings.has(name)) return;
    }
    super.checkLocalExport(id);
  }
}
const getOwn$1 = (object, key) => Object.hasOwnProperty.call(object, key) && object[key];
const unwrapParenthesizedExpression = node => {
  return node.type === "ParenthesizedExpression" ? unwrapParenthesizedExpression(node.expression) : node;
};
class LValParser extends NodeUtils {
  toAssignable(node, isLHS = false) {
    var _node$extra, _node$extra3;
    let parenthesized = undefined;
    if (node.type === "ParenthesizedExpression" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {
      parenthesized = unwrapParenthesizedExpression(node);
      if (isLHS) {
        if (parenthesized.type === "Identifier") {
          this.expressionScope.recordArrowParameterBindingError(Errors.InvalidParenthesizedAssignment, {
            at: node
          });
        } else if (parenthesized.type !== "MemberExpression" && !this.isOptionalMemberExpression(parenthesized)) {
          this.raise(Errors.InvalidParenthesizedAssignment, {
            at: node
          });
        }
      } else {
        this.raise(Errors.InvalidParenthesizedAssignment, {
          at: node
        });
      }
    }
    switch (node.type) {
      case "Identifier":
      case "ObjectPattern":
      case "ArrayPattern":
      case "AssignmentPattern":
      case "RestElement":
        break;
      case "ObjectExpression":
        node.type = "ObjectPattern";
        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {
          var _node$extra2;
          const prop = node.properties[i];
          const isLast = i === last;
          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);
          if (isLast && prop.type === "RestElement" && (_node$extra2 = node.extra) != null && _node$extra2.trailingCommaLoc) {
            this.raise(Errors.RestTrailingComma, {
              at: node.extra.trailingCommaLoc
            });
          }
        }
        break;
      case "ObjectProperty":
        {
          const {
            key,
            value
          } = node;
          if (this.isPrivateName(key)) {
            this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);
          }
          this.toAssignable(value, isLHS);
          break;
        }
      case "SpreadElement":
        {
          throw new Error("Internal @babel/parser error (this is a bug, please report it)." + " SpreadElement should be converted by .toAssignable's caller.");
        }
      case "ArrayExpression":
        node.type = "ArrayPattern";
        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingCommaLoc, isLHS);
        break;
      case "AssignmentExpression":
        if (node.operator !== "=") {
          this.raise(Errors.MissingEqInAssignment, {
            at: node.left.loc.end
          });
        }
        node.type = "AssignmentPattern";
        delete node.operator;
        this.toAssignable(node.left, isLHS);
        break;
      case "ParenthesizedExpression":
        this.toAssignable(parenthesized, isLHS);
        break;
    }
  }
  toAssignableObjectExpressionProp(prop, isLast, isLHS) {
    if (prop.type === "ObjectMethod") {
      this.raise(prop.kind === "get" || prop.kind === "set" ? Errors.PatternHasAccessor : Errors.PatternHasMethod, {
        at: prop.key
      });
    } else if (prop.type === "SpreadElement") {
      prop.type = "RestElement";
      const arg = prop.argument;
      this.checkToRestConversion(arg, false);
      this.toAssignable(arg, isLHS);
      if (!isLast) {
        this.raise(Errors.RestTrailingComma, {
          at: prop
        });
      }
    } else {
      this.toAssignable(prop, isLHS);
    }
  }
  toAssignableList(exprList, trailingCommaLoc, isLHS) {
    const end = exprList.length - 1;
    for (let i = 0; i <= end; i++) {
      const elt = exprList[i];
      if (!elt) continue;
      if (elt.type === "SpreadElement") {
        elt.type = "RestElement";
        const arg = elt.argument;
        this.checkToRestConversion(arg, true);
        this.toAssignable(arg, isLHS);
      } else {
        this.toAssignable(elt, isLHS);
      }
      if (elt.type === "RestElement") {
        if (i < end) {
          this.raise(Errors.RestTrailingComma, {
            at: elt
          });
        } else if (trailingCommaLoc) {
          this.raise(Errors.RestTrailingComma, {
            at: trailingCommaLoc
          });
        }
      }
    }
  }
  isAssignable(node, isBinding) {
    switch (node.type) {
      case "Identifier":
      case "ObjectPattern":
      case "ArrayPattern":
      case "AssignmentPattern":
      case "RestElement":
        return true;
      case "ObjectExpression":
        {
          const last = node.properties.length - 1;
          return node.properties.every((prop, i) => {
            return prop.type !== "ObjectMethod" && (i === last || prop.type !== "SpreadElement") && this.isAssignable(prop);
          });
        }
      case "ObjectProperty":
        return this.isAssignable(node.value);
      case "SpreadElement":
        return this.isAssignable(node.argument);
      case "ArrayExpression":
        return node.elements.every(element => element === null || this.isAssignable(element));
      case "AssignmentExpression":
        return node.operator === "=";
      case "ParenthesizedExpression":
        return this.isAssignable(node.expression);
      case "MemberExpression":
      case "OptionalMemberExpression":
        return !isBinding;
      default:
        return false;
    }
  }
  toReferencedList(exprList, isParenthesizedExpr) {
    return exprList;
  }
  toReferencedListDeep(exprList, isParenthesizedExpr) {
    this.toReferencedList(exprList, isParenthesizedExpr);
    for (const expr of exprList) {
      if ((expr == null ? void 0 : expr.type) === "ArrayExpression") {
        this.toReferencedListDeep(expr.elements);
      }
    }
  }
  parseSpread(refExpressionErrors) {
    const node = this.startNode();
    this.next();
    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined);
    return this.finishNode(node, "SpreadElement");
  }
  parseRestBinding() {
    const node = this.startNode();
    this.next();
    node.argument = this.parseBindingAtom();
    return this.finishNode(node, "RestElement");
  }
  parseBindingAtom() {
    switch (this.state.type) {
      case 0:
        {
          const node = this.startNode();
          this.next();
          node.elements = this.parseBindingList(3, 93, 1);
          return this.finishNode(node, "ArrayPattern");
        }
      case 5:
        return this.parseObjectLike(8, true);
    }
    return this.parseIdentifier();
  }
  parseBindingList(close, closeCharCode, flags) {
    const allowEmpty = flags & 1;
    const elts = [];
    let first = true;
    while (!this.eat(close)) {
      if (first) {
        first = false;
      } else {
        this.expect(12);
      }
      if (allowEmpty && this.match(12)) {
        elts.push(null);
      } else if (this.eat(close)) {
        break;
      } else if (this.match(21)) {
        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding(), flags));
        if (!this.checkCommaAfterRest(closeCharCode)) {
          this.expect(close);
          break;
        }
      } else {
        const decorators = [];
        if (this.match(26) && this.hasPlugin("decorators")) {
          this.raise(Errors.UnsupportedParameterDecorator, {
            at: this.state.startLoc
          });
        }
        while (this.match(26)) {
          decorators.push(this.parseDecorator());
        }
        elts.push(this.parseAssignableListItem(flags, decorators));
      }
    }
    return elts;
  }
  parseBindingRestProperty(prop) {
    this.next();
    prop.argument = this.parseIdentifier();
    this.checkCommaAfterRest(125);
    return this.finishNode(prop, "RestElement");
  }
  parseBindingProperty() {
    const prop = this.startNode();
    const {
      type,
      startLoc
    } = this.state;
    if (type === 21) {
      return this.parseBindingRestProperty(prop);
    } else if (type === 138) {
      this.expectPlugin("destructuringPrivate", startLoc);
      this.classScope.usePrivateName(this.state.value, startLoc);
      prop.key = this.parsePrivateName();
    } else {
      this.parsePropertyName(prop);
    }
    prop.method = false;
    return this.parseObjPropValue(prop, startLoc, false, false, true, false);
  }
  parseAssignableListItem(flags, decorators) {
    const left = this.parseMaybeDefault();
    this.parseAssignableListItemTypes(left, flags);
    const elt = this.parseMaybeDefault(left.loc.start, left);
    if (decorators.length) {
      left.decorators = decorators;
    }
    return elt;
  }
  parseAssignableListItemTypes(param, flags) {
    return param;
  }
  parseMaybeDefault(startLoc, left) {
    var _startLoc, _left;
    (_startLoc = startLoc) != null ? _startLoc : startLoc = this.state.startLoc;
    left = (_left = left) != null ? _left : this.parseBindingAtom();
    if (!this.eat(29)) return left;
    const node = this.startNodeAt(startLoc);
    node.left = left;
    node.right = this.parseMaybeAssignAllowIn();
    return this.finishNode(node, "AssignmentPattern");
  }
  isValidLVal(type, isUnparenthesizedInAssign, binding) {
    return getOwn$1({
      AssignmentPattern: "left",
      RestElement: "argument",
      ObjectProperty: "value",
      ParenthesizedExpression: "expression",
      ArrayPattern: "elements",
      ObjectPattern: "properties"
    }, type);
  }
  isOptionalMemberExpression(expression) {
    return expression.type === "OptionalMemberExpression";
  }
  checkLVal(expression, {
    in: ancestor,
    binding = 64,
    checkClashes = false,
    strictModeChanged = false,
    hasParenthesizedAncestor = false
  }) {
    var _expression$extra;
    const type = expression.type;
    if (this.isObjectMethod(expression)) return;
    const isOptionalMemberExpression = this.isOptionalMemberExpression(expression);
    if (isOptionalMemberExpression || type === "MemberExpression") {
      if (isOptionalMemberExpression) {
        this.expectPlugin("optionalChainingAssign", expression.loc.start);
        if (ancestor.type !== "AssignmentExpression") {
          this.raise(Errors.InvalidLhsOptionalChaining, {
            at: expression,
            ancestor
          });
        }
      }
      if (binding !== 64) {
        this.raise(Errors.InvalidPropertyBindingPattern, {
          at: expression
        });
      }
      return;
    }
    if (type === "Identifier") {
      this.checkIdentifier(expression, binding, strictModeChanged);
      const {
        name
      } = expression;
      if (checkClashes) {
        if (checkClashes.has(name)) {
          this.raise(Errors.ParamDupe, {
            at: expression
          });
        } else {
          checkClashes.add(name);
        }
      }
      return;
    }
    const validity = this.isValidLVal(type, !(hasParenthesizedAncestor || (_expression$extra = expression.extra) != null && _expression$extra.parenthesized) && ancestor.type === "AssignmentExpression", binding);
    if (validity === true) return;
    if (validity === false) {
      const ParseErrorClass = binding === 64 ? Errors.InvalidLhs : Errors.InvalidLhsBinding;
      this.raise(ParseErrorClass, {
        at: expression,
        ancestor
      });
      return;
    }
    const [key, isParenthesizedExpression] = Array.isArray(validity) ? validity : [validity, type === "ParenthesizedExpression"];
    const nextAncestor = type === "ArrayPattern" || type === "ObjectPattern" ? {
      type
    } : ancestor;
    for (const child of [].concat(expression[key])) {
      if (child) {
        this.checkLVal(child, {
          in: nextAncestor,
          binding,
          checkClashes,
          strictModeChanged,
          hasParenthesizedAncestor: isParenthesizedExpression
        });
      }
    }
  }
  checkIdentifier(at, bindingType, strictModeChanged = false) {
    if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(at.name, this.inModule) : isStrictBindOnlyReservedWord(at.name))) {
      if (bindingType === 64) {
        this.raise(Errors.StrictEvalArguments, {
          at,
          referenceName: at.name
        });
      } else {
        this.raise(Errors.StrictEvalArgumentsBinding, {
          at,
          bindingName: at.name
        });
      }
    }
    if (bindingType & 8192 && at.name === "let") {
      this.raise(Errors.LetInLexicalBinding, {
        at
      });
    }
    if (!(bindingType & 64)) {
      this.declareNameFromIdentifier(at, bindingType);
    }
  }
  declareNameFromIdentifier(identifier, binding) {
    this.scope.declareName(identifier.name, binding, identifier.loc.start);
  }
  checkToRestConversion(node, allowPattern) {
    switch (node.type) {
      case "ParenthesizedExpression":
        this.checkToRestConversion(node.expression, allowPattern);
        break;
      case "Identifier":
      case "MemberExpression":
        break;
      case "ArrayExpression":
      case "ObjectExpression":
        if (allowPattern) break;
      default:
        this.raise(Errors.InvalidRestAssignmentPattern, {
          at: node
        });
    }
  }
  checkCommaAfterRest(close) {
    if (!this.match(12)) {
      return false;
    }
    this.raise(this.lookaheadCharCode() === close ? Errors.RestTrailingComma : Errors.ElementAfterRest, {
      at: this.state.startLoc
    });
    return true;
  }
}
const getOwn = (object, key) => Object.hasOwnProperty.call(object, key) && object[key];
function nonNull(x) {
  if (x == null) {
    throw new Error(`Unexpected ${x} value.`);
  }
  return x;
}
function assert(x) {
  if (!x) {
    throw new Error("Assert fail");
  }
}
const TSErrors = ParseErrorEnum`typescript`({
  AbstractMethodHasImplementation: ({
    methodName
  }) => `Method '${methodName}' cannot have an implementation because it is marked abstract.`,
  AbstractPropertyHasInitializer: ({
    propertyName
  }) => `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,
  AccesorCannotDeclareThisParameter: "'get' and 'set' accessors cannot declare 'this' parameters.",
  AccesorCannotHaveTypeParameters: "An accessor cannot have type parameters.",
  AccessorCannotBeOptional: "An 'accessor' property cannot be declared optional.",
  ClassMethodHasDeclare: "Class methods cannot have the 'declare' modifier.",
  ClassMethodHasReadonly: "Class methods cannot have the 'readonly' modifier.",
  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: "A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.",
  ConstructorHasTypeParameters: "Type parameters cannot appear on a constructor declaration.",
  DeclareAccessor: ({
    kind
  }) => `'declare' is not allowed in ${kind}ters.`,
  DeclareClassFieldHasInitializer: "Initializers are not allowed in ambient contexts.",
  DeclareFunctionHasImplementation: "An implementation cannot be declared in ambient contexts.",
  DuplicateAccessibilityModifier: ({
    modifier
  }) => `Accessibility modifier already seen.`,
  DuplicateModifier: ({
    modifier
  }) => `Duplicate modifier: '${modifier}'.`,
  EmptyHeritageClauseType: ({
    token
  }) => `'${token}' list cannot be empty.`,
  EmptyTypeArguments: "Type argument list cannot be empty.",
  EmptyTypeParameters: "Type parameter list cannot be empty.",
  ExpectedAmbientAfterExportDeclare: "'export declare' must be followed by an ambient declaration.",
  ImportAliasHasImportType: "An import alias can not use 'import type'.",
  ImportReflectionHasImportType: "An `import module` declaration can not use `type` modifier",
  IncompatibleModifiers: ({
    modifiers
  }) => `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,
  IndexSignatureHasAbstract: "Index signatures cannot have the 'abstract' modifier.",
  IndexSignatureHasAccessibility: ({
    modifier
  }) => `Index signatures cannot have an accessibility modifier ('${modifier}').`,
  IndexSignatureHasDeclare: "Index signatures cannot have the 'declare' modifier.",
  IndexSignatureHasOverride: "'override' modifier cannot appear on an index signature.",
  IndexSignatureHasStatic: "Index signatures cannot have the 'static' modifier.",
  InitializerNotAllowedInAmbientContext: "Initializers are not allowed in ambient contexts.",
  InvalidModifierOnTypeMember: ({
    modifier
  }) => `'${modifier}' modifier cannot appear on a type member.`,
  InvalidModifierOnTypeParameter: ({
    modifier
  }) => `'${modifier}' modifier cannot appear on a type parameter.`,
  InvalidModifierOnTypeParameterPositions: ({
    modifier
  }) => `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,
  InvalidModifiersOrder: ({
    orderedModifiers
  }) => `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,
  InvalidPropertyAccessAfterInstantiationExpression: "Invalid property access after an instantiation expression. " + "You can either wrap the instantiation expression in parentheses, or delete the type arguments.",
  InvalidTupleMemberLabel: "Tuple members must be labeled with a simple identifier.",
  MissingInterfaceName: "'interface' declarations must be followed by an identifier.",
  NonAbstractClassHasAbstractMethod: "Abstract methods can only appear within an abstract class.",
  NonClassMethodPropertyHasAbstractModifer: "'abstract' modifier can only appear on a class, method, or property declaration.",
  OptionalTypeBeforeRequired: "A required element cannot follow an optional element.",
  OverrideNotInSubClass: "This member cannot have an 'override' modifier because its containing class does not extend another class.",
  PatternIsOptional: "A binding pattern parameter cannot be optional in an implementation signature.",
  PrivateElementHasAbstract: "Private elements cannot have the 'abstract' modifier.",
  PrivateElementHasAccessibility: ({
    modifier
  }) => `Private elements cannot have an accessibility modifier ('${modifier}').`,
  ReadonlyForMethodSignature: "'readonly' modifier can only appear on a property declaration or index signature.",
  ReservedArrowTypeParam: "This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.",
  ReservedTypeAssertion: "This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.",
  SetAccesorCannotHaveOptionalParameter: "A 'set' accessor cannot have an optional parameter.",
  SetAccesorCannotHaveRestParameter: "A 'set' accessor cannot have rest parameter.",
  SetAccesorCannotHaveReturnType: "A 'set' accessor cannot have a return type annotation.",
  SingleTypeParameterWithoutTrailingComma: ({
    typeParameterName
  }) => `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,
  StaticBlockCannotHaveModifier: "Static class blocks cannot have any modifier.",
  TupleOptionalAfterType: "A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).",
  TypeAnnotationAfterAssign: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
  TypeImportCannotSpecifyDefaultAndNamed: "A type-only import can specify a default import or named bindings, but not both.",
  TypeModifierIsUsedInTypeExports: "The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.",
  TypeModifierIsUsedInTypeImports: "The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.",
  UnexpectedParameterModifier: "A parameter property is only allowed in a constructor implementation.",
  UnexpectedReadonly: "'readonly' type modifier is only permitted on array and tuple literal types.",
  UnexpectedTypeAnnotation: "Did not expect a type annotation here.",
  UnexpectedTypeCastInParameter: "Unexpected type cast in parameter position.",
  UnsupportedImportTypeArgument: "Argument in a type import must be a string literal.",
  UnsupportedParameterPropertyKind: "A parameter property may not be declared using a binding pattern.",
  UnsupportedSignatureParameterKind: ({
    type
  }) => `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`
});
function keywordTypeFromName(value) {
  switch (value) {
    case "any":
      return "TSAnyKeyword";
    case "boolean":
      return "TSBooleanKeyword";
    case "bigint":
      return "TSBigIntKeyword";
    case "never":
      return "TSNeverKeyword";
    case "number":
      return "TSNumberKeyword";
    case "object":
      return "TSObjectKeyword";
    case "string":
      return "TSStringKeyword";
    case "symbol":
      return "TSSymbolKeyword";
    case "undefined":
      return "TSUndefinedKeyword";
    case "unknown":
      return "TSUnknownKeyword";
    default:
      return undefined;
  }
}
function tsIsAccessModifier(modifier) {
  return modifier === "private" || modifier === "public" || modifier === "protected";
}
function tsIsVarianceAnnotations(modifier) {
  return modifier === "in" || modifier === "out";
}
var typescript = superClass => class TypeScriptParserMixin extends superClass {
  constructor(...args) {
    super(...args);
    this.tsParseInOutModifiers = this.tsParseModifiers.bind(this, {
      allowedModifiers: ["in", "out"],
      disallowedModifiers: ["const", "public", "private", "protected", "readonly", "declare", "abstract", "override"],
      errorTemplate: TSErrors.InvalidModifierOnTypeParameter
    });
    this.tsParseConstModifier = this.tsParseModifiers.bind(this, {
      allowedModifiers: ["const"],
      disallowedModifiers: ["in", "out"],
      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions
    });
    this.tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {
      allowedModifiers: ["in", "out", "const"],
      disallowedModifiers: ["public", "private", "protected", "readonly", "declare", "abstract", "override"],
      errorTemplate: TSErrors.InvalidModifierOnTypeParameter
    });
  }
  getScopeHandler() {
    return TypeScriptScopeHandler;
  }
  tsIsIdentifier() {
    return tokenIsIdentifier(this.state.type);
  }
  tsTokenCanFollowModifier() {
    return (this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(138) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();
  }
  tsNextTokenCanFollowModifier() {
    this.next();
    return this.tsTokenCanFollowModifier();
  }
  tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {
    if (!tokenIsIdentifier(this.state.type) && this.state.type !== 58 && this.state.type !== 75) {
      return undefined;
    }
    const modifier = this.state.value;
    if (allowedModifiers.indexOf(modifier) !== -1) {
      if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {
        return undefined;
      }
      if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {
        return modifier;
      }
    }
    return undefined;
  }
  tsParseModifiers({
    allowedModifiers,
    disallowedModifiers,
    stopOnStartOfClassStaticBlock,
    errorTemplate = TSErrors.InvalidModifierOnTypeMember
  }, modified) {
    const enforceOrder = (loc, modifier, before, after) => {
      if (modifier === before && modified[after]) {
        this.raise(TSErrors.InvalidModifiersOrder, {
          at: loc,
          orderedModifiers: [before, after]
        });
      }
    };
    const incompatible = (loc, modifier, mod1, mod2) => {
      if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {
        this.raise(TSErrors.IncompatibleModifiers, {
          at: loc,
          modifiers: [mod1, mod2]
        });
      }
    };
    for (;;) {
      const {
        startLoc
      } = this.state;
      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);
      if (!modifier) break;
      if (tsIsAccessModifier(modifier)) {
        if (modified.accessibility) {
          this.raise(TSErrors.DuplicateAccessibilityModifier, {
            at: startLoc,
            modifier
          });
        } else {
          enforceOrder(startLoc, modifier, modifier, "override");
          enforceOrder(startLoc, modifier, modifier, "static");
          enforceOrder(startLoc, modifier, modifier, "readonly");
          modified.accessibility = modifier;
        }
      } else if (tsIsVarianceAnnotations(modifier)) {
        if (modified[modifier]) {
          this.raise(TSErrors.DuplicateModifier, {
            at: startLoc,
            modifier
          });
        }
        modified[modifier] = true;
        enforceOrder(startLoc, modifier, "in", "out");
      } else {
        if (Object.hasOwnProperty.call(modified, modifier)) {
          this.raise(TSErrors.DuplicateModifier, {
            at: startLoc,
            modifier
          });
        } else {
          enforceOrder(startLoc, modifier, "static", "readonly");
          enforceOrder(startLoc, modifier, "static", "override");
          enforceOrder(startLoc, modifier, "override", "readonly");
          enforceOrder(startLoc, modifier, "abstract", "override");
          incompatible(startLoc, modifier, "declare", "override");
          incompatible(startLoc, modifier, "static", "abstract");
        }
        modified[modifier] = true;
      }
      if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {
        this.raise(errorTemplate, {
          at: startLoc,
          modifier
        });
      }
    }
  }
  tsIsListTerminator(kind) {
    switch (kind) {
      case "EnumMembers":
      case "TypeMembers":
        return this.match(8);
      case "HeritageClauseElement":
        return this.match(5);
      case "TupleElementTypes":
        return this.match(3);
      case "TypeParametersOrArguments":
        return this.match(48);
    }
  }
  tsParseList(kind, parseElement) {
    const result = [];
    while (!this.tsIsListTerminator(kind)) {
      result.push(parseElement());
    }
    return result;
  }
  tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {
    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));
  }
  tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {
    const result = [];
    let trailingCommaPos = -1;
    for (;;) {
      if (this.tsIsListTerminator(kind)) {
        break;
      }
      trailingCommaPos = -1;
      const element = parseElement();
      if (element == null) {
        return undefined;
      }
      result.push(element);
      if (this.eat(12)) {
        trailingCommaPos = this.state.lastTokStart;
        continue;
      }
      if (this.tsIsListTerminator(kind)) {
        break;
      }
      if (expectSuccess) {
        this.expect(12);
      }
      return undefined;
    }
    if (refTrailingCommaPos) {
      refTrailingCommaPos.value = trailingCommaPos;
    }
    return result;
  }
  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {
    if (!skipFirstToken) {
      if (bracket) {
        this.expect(0);
      } else {
        this.expect(47);
      }
    }
    const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);
    if (bracket) {
      this.expect(3);
    } else {
      this.expect(48);
    }
    return result;
  }
  tsParseImportType() {
    const node = this.startNode();
    this.expect(83);
    this.expect(10);
    if (!this.match(133)) {
      this.raise(TSErrors.UnsupportedImportTypeArgument, {
        at: this.state.startLoc
      });
    }
    node.argument = super.parseExprAtom();
    this.expect(11);
    if (this.eat(16)) {
      node.qualifier = this.tsParseEntityName();
    }
    if (this.match(47)) {
      node.typeParameters = this.tsParseTypeArguments();
    }
    return this.finishNode(node, "TSImportType");
  }
  tsParseEntityName(allowReservedWords = true) {
    let entity = this.parseIdentifier(allowReservedWords);
    while (this.eat(16)) {
      const node = this.startNodeAtNode(entity);
      node.left = entity;
      node.right = this.parseIdentifier(allowReservedWords);
      entity = this.finishNode(node, "TSQualifiedName");
    }
    return entity;
  }
  tsParseTypeReference() {
    const node = this.startNode();
    node.typeName = this.tsParseEntityName();
    if (!this.hasPrecedingLineBreak() && this.match(47)) {
      node.typeParameters = this.tsParseTypeArguments();
    }
    return this.finishNode(node, "TSTypeReference");
  }
  tsParseThisTypePredicate(lhs) {
    this.next();
    const node = this.startNodeAtNode(lhs);
    node.parameterName = lhs;
    node.typeAnnotation = this.tsParseTypeAnnotation(false);
    node.asserts = false;
    return this.finishNode(node, "TSTypePredicate");
  }
  tsParseThisTypeNode() {
    const node = this.startNode();
    this.next();
    return this.finishNode(node, "TSThisType");
  }
  tsParseTypeQuery() {
    const node = this.startNode();
    this.expect(87);
    if (this.match(83)) {
      node.exprName = this.tsParseImportType();
    } else {
      node.exprName = this.tsParseEntityName();
    }
    if (!this.hasPrecedingLineBreak() && this.match(47)) {
      node.typeParameters = this.tsParseTypeArguments();
    }
    return this.finishNode(node, "TSTypeQuery");
  }
  tsParseTypeParameter(parseModifiers) {
    const node = this.startNode();
    parseModifiers(node);
    node.name = this.tsParseTypeParameterName();
    node.constraint = this.tsEatThenParseType(81);
    node.default = this.tsEatThenParseType(29);
    return this.finishNode(node, "TSTypeParameter");
  }
  tsTryParseTypeParameters(parseModifiers) {
    if (this.match(47)) {
      return this.tsParseTypeParameters(parseModifiers);
    }
  }
  tsParseTypeParameters(parseModifiers) {
    const node = this.startNode();
    if (this.match(47) || this.match(142)) {
      this.next();
    } else {
      this.unexpected();
    }
    const refTrailingCommaPos = {
      value: -1
    };
    node.params = this.tsParseBracketedList("TypeParametersOrArguments", this.tsParseTypeParameter.bind(this, parseModifiers), false, true, refTrailingCommaPos);
    if (node.params.length === 0) {
      this.raise(TSErrors.EmptyTypeParameters, {
        at: node
      });
    }
    if (refTrailingCommaPos.value !== -1) {
      this.addExtra(node, "trailingComma", refTrailingCommaPos.value);
    }
    return this.finishNode(node, "TSTypeParameterDeclaration");
  }
  tsFillSignature(returnToken, signature) {
    const returnTokenRequired = returnToken === 19;
    const paramsKey = "parameters";
    const returnTypeKey = "typeAnnotation";
    signature.typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
    this.expect(10);
    signature[paramsKey] = this.tsParseBindingListForSignature();
    if (returnTokenRequired) {
      signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
    } else if (this.match(returnToken)) {
      signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
    }
  }
  tsParseBindingListForSignature() {
    const list = super.parseBindingList(11, 41, 2);
    for (const pattern of list) {
      const {
        type
      } = pattern;
      if (type === "AssignmentPattern" || type === "TSParameterProperty") {
        this.raise(TSErrors.UnsupportedSignatureParameterKind, {
          at: pattern,
          type
        });
      }
    }
    return list;
  }
  tsParseTypeMemberSemicolon() {
    if (!this.eat(12) && !this.isLineTerminator()) {
      this.expect(13);
    }
  }
  tsParseSignatureMember(kind, node) {
    this.tsFillSignature(14, node);
    this.tsParseTypeMemberSemicolon();
    return this.finishNode(node, kind);
  }
  tsIsUnambiguouslyIndexSignature() {
    this.next();
    if (tokenIsIdentifier(this.state.type)) {
      this.next();
      return this.match(14);
    }
    return false;
  }
  tsTryParseIndexSignature(node) {
    if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {
      return;
    }
    this.expect(0);
    const id = this.parseIdentifier();
    id.typeAnnotation = this.tsParseTypeAnnotation();
    this.resetEndLocation(id);
    this.expect(3);
    node.parameters = [id];
    const type = this.tsTryParseTypeAnnotation();
    if (type) node.typeAnnotation = type;
    this.tsParseTypeMemberSemicolon();
    return this.finishNode(node, "TSIndexSignature");
  }
  tsParsePropertyOrMethodSignature(node, readonly) {
    if (this.eat(17)) node.optional = true;
    const nodeAny = node;
    if (this.match(10) || this.match(47)) {
      if (readonly) {
        this.raise(TSErrors.ReadonlyForMethodSignature, {
          at: node
        });
      }
      const method = nodeAny;
      if (method.kind && this.match(47)) {
        this.raise(TSErrors.AccesorCannotHaveTypeParameters, {
          at: this.state.curPosition()
        });
      }
      this.tsFillSignature(14, method);
      this.tsParseTypeMemberSemicolon();
      const paramsKey = "parameters";
      const returnTypeKey = "typeAnnotation";
      if (method.kind === "get") {
        if (method[paramsKey].length > 0) {
          this.raise(Errors.BadGetterArity, {
            at: this.state.curPosition()
          });
          if (this.isThisParam(method[paramsKey][0])) {
            this.raise(TSErrors.AccesorCannotDeclareThisParameter, {
              at: this.state.curPosition()
            });
          }
        }
      } else if (method.kind === "set") {
        if (method[paramsKey].length !== 1) {
          this.raise(Errors.BadSetterArity, {
            at: this.state.curPosition()
          });
        } else {
          const firstParameter = method[paramsKey][0];
          if (this.isThisParam(firstParameter)) {
            this.raise(TSErrors.AccesorCannotDeclareThisParameter, {
              at: this.state.curPosition()
            });
          }
          if (firstParameter.type === "Identifier" && firstParameter.optional) {
            this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {
              at: this.state.curPosition()
            });
          }
          if (firstParameter.type === "RestElement") {
            this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {
              at: this.state.curPosition()
            });
          }
        }
        if (method[returnTypeKey]) {
          this.raise(TSErrors.SetAccesorCannotHaveReturnType, {
            at: method[returnTypeKey]
          });
        }
      } else {
        method.kind = "method";
      }
      return this.finishNode(method, "TSMethodSignature");
    } else {
      const property = nodeAny;
      if (readonly) property.readonly = true;
      const type = this.tsTryParseTypeAnnotation();
      if (type) property.typeAnnotation = type;
      this.tsParseTypeMemberSemicolon();
      return this.finishNode(property, "TSPropertySignature");
    }
  }
  tsParseTypeMember() {
    const node = this.startNode();
    if (this.match(10) || this.match(47)) {
      return this.tsParseSignatureMember("TSCallSignatureDeclaration", node);
    }
    if (this.match(77)) {
      const id = this.startNode();
      this.next();
      if (this.match(10) || this.match(47)) {
        return this.tsParseSignatureMember("TSConstructSignatureDeclaration", node);
      } else {
        node.key = this.createIdentifier(id, "new");
        return this.tsParsePropertyOrMethodSignature(node, false);
      }
    }
    this.tsParseModifiers({
      allowedModifiers: ["readonly"],
      disallowedModifiers: ["declare", "abstract", "private", "protected", "public", "static", "override"]
    }, node);
    const idx = this.tsTryParseIndexSignature(node);
    if (idx) {
      return idx;
    }
    super.parsePropertyName(node);
    if (!node.computed && node.key.type === "Identifier" && (node.key.name === "get" || node.key.name === "set") && this.tsTokenCanFollowModifier()) {
      node.kind = node.key.name;
      super.parsePropertyName(node);
    }
    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);
  }
  tsParseTypeLiteral() {
    const node = this.startNode();
    node.members = this.tsParseObjectTypeMembers();
    return this.finishNode(node, "TSTypeLiteral");
  }
  tsParseObjectTypeMembers() {
    this.expect(5);
    const members = this.tsParseList("TypeMembers", this.tsParseTypeMember.bind(this));
    this.expect(8);
    return members;
  }
  tsIsStartOfMappedType() {
    this.next();
    if (this.eat(53)) {
      return this.isContextual(122);
    }
    if (this.isContextual(122)) {
      this.next();
    }
    if (!this.match(0)) {
      return false;
    }
    this.next();
    if (!this.tsIsIdentifier()) {
      return false;
    }
    this.next();
    return this.match(58);
  }
  tsParseMappedTypeParameter() {
    const node = this.startNode();
    node.name = this.tsParseTypeParameterName();
    node.constraint = this.tsExpectThenParseType(58);
    return this.finishNode(node, "TSTypeParameter");
  }
  tsParseMappedType() {
    const node = this.startNode();
    this.expect(5);
    if (this.match(53)) {
      node.readonly = this.state.value;
      this.next();
      this.expectContextual(122);
    } else if (this.eatContextual(122)) {
      node.readonly = true;
    }
    this.expect(0);
    node.typeParameter = this.tsParseMappedTypeParameter();
    node.nameType = this.eatContextual(93) ? this.tsParseType() : null;
    this.expect(3);
    if (this.match(53)) {
      node.optional = this.state.value;
      this.next();
      this.expect(17);
    } else if (this.eat(17)) {
      node.optional = true;
    }
    node.typeAnnotation = this.tsTryParseType();
    this.semicolon();
    this.expect(8);
    return this.finishNode(node, "TSMappedType");
  }
  tsParseTupleType() {
    const node = this.startNode();
    node.elementTypes = this.tsParseBracketedList("TupleElementTypes", this.tsParseTupleElementType.bind(this), true, false);
    let seenOptionalElement = false;
    node.elementTypes.forEach(elementNode => {
      const {
        type
      } = elementNode;
      if (seenOptionalElement && type !== "TSRestType" && type !== "TSOptionalType" && !(type === "TSNamedTupleMember" && elementNode.optional)) {
        this.raise(TSErrors.OptionalTypeBeforeRequired, {
          at: elementNode
        });
      }
      seenOptionalElement || (seenOptionalElement = type === "TSNamedTupleMember" && elementNode.optional || type === "TSOptionalType");
    });
    return this.finishNode(node, "TSTupleType");
  }
  tsParseTupleElementType() {
    const {
      startLoc
    } = this.state;
    const rest = this.eat(21);
    let labeled;
    let label;
    let optional;
    let type;
    const isWord = tokenIsKeywordOrIdentifier(this.state.type);
    const chAfterWord = isWord ? this.lookaheadCharCode() : null;
    if (chAfterWord === 58) {
      labeled = true;
      optional = false;
      label = this.parseIdentifier(true);
      this.expect(14);
      type = this.tsParseType();
    } else if (chAfterWord === 63) {
      optional = true;
      const startLoc = this.state.startLoc;
      const wordName = this.state.value;
      const typeOrLabel = this.tsParseNonArrayType();
      if (this.lookaheadCharCode() === 58) {
        labeled = true;
        label = this.createIdentifier(this.startNodeAt(startLoc), wordName);
        this.expect(17);
        this.expect(14);
        type = this.tsParseType();
      } else {
        labeled = false;
        type = typeOrLabel;
        this.expect(17);
      }
    } else {
      type = this.tsParseType();
      optional = this.eat(17);
      labeled = this.eat(14);
    }
    if (labeled) {
      let labeledNode;
      if (label) {
        labeledNode = this.startNodeAtNode(label);
        labeledNode.optional = optional;
        labeledNode.label = label;
        labeledNode.elementType = type;
        if (this.eat(17)) {
          labeledNode.optional = true;
          this.raise(TSErrors.TupleOptionalAfterType, {
            at: this.state.lastTokStartLoc
          });
        }
      } else {
        labeledNode = this.startNodeAtNode(type);
        labeledNode.optional = optional;
        this.raise(TSErrors.InvalidTupleMemberLabel, {
          at: type
        });
        labeledNode.label = type;
        labeledNode.elementType = this.tsParseType();
      }
      type = this.finishNode(labeledNode, "TSNamedTupleMember");
    } else if (optional) {
      const optionalTypeNode = this.startNodeAtNode(type);
      optionalTypeNode.typeAnnotation = type;
      type = this.finishNode(optionalTypeNode, "TSOptionalType");
    }
    if (rest) {
      const restNode = this.startNodeAt(startLoc);
      restNode.typeAnnotation = type;
      type = this.finishNode(restNode, "TSRestType");
    }
    return type;
  }
  tsParseParenthesizedType() {
    const node = this.startNode();
    this.expect(10);
    node.typeAnnotation = this.tsParseType();
    this.expect(11);
    return this.finishNode(node, "TSParenthesizedType");
  }
  tsParseFunctionOrConstructorType(type, abstract) {
    const node = this.startNode();
    if (type === "TSConstructorType") {
      node.abstract = !!abstract;
      if (abstract) this.next();
      this.next();
    }
    this.tsInAllowConditionalTypesContext(() => this.tsFillSignature(19, node));
    return this.finishNode(node, type);
  }
  tsParseLiteralTypeNode() {
    const node = this.startNode();
    switch (this.state.type) {
      case 134:
      case 135:
      case 133:
      case 85:
      case 86:
        node.literal = super.parseExprAtom();
        break;
      default:
        this.unexpected();
    }
    return this.finishNode(node, "TSLiteralType");
  }
  tsParseTemplateLiteralType() {
    const node = this.startNode();
    node.literal = super.parseTemplate(false);
    return this.finishNode(node, "TSLiteralType");
  }
  parseTemplateSubstitution() {
    if (this.state.inType) return this.tsParseType();
    return super.parseTemplateSubstitution();
  }
  tsParseThisTypeOrThisTypePredicate() {
    const thisKeyword = this.tsParseThisTypeNode();
    if (this.isContextual(116) && !this.hasPrecedingLineBreak()) {
      return this.tsParseThisTypePredicate(thisKeyword);
    } else {
      return thisKeyword;
    }
  }
  tsParseNonArrayType() {
    switch (this.state.type) {
      case 133:
      case 134:
      case 135:
      case 85:
      case 86:
        return this.tsParseLiteralTypeNode();
      case 53:
        if (this.state.value === "-") {
          const node = this.startNode();
          const nextToken = this.lookahead();
          if (nextToken.type !== 134 && nextToken.type !== 135) {
            this.unexpected();
          }
          node.literal = this.parseMaybeUnary();
          return this.finishNode(node, "TSLiteralType");
        }
        break;
      case 78:
        return this.tsParseThisTypeOrThisTypePredicate();
      case 87:
        return this.tsParseTypeQuery();
      case 83:
        return this.tsParseImportType();
      case 5:
        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();
      case 0:
        return this.tsParseTupleType();
      case 10:
        return this.tsParseParenthesizedType();
      case 25:
      case 24:
        return this.tsParseTemplateLiteralType();
      default:
        {
          const {
            type
          } = this.state;
          if (tokenIsIdentifier(type) || type === 88 || type === 84) {
            const nodeType = type === 88 ? "TSVoidKeyword" : type === 84 ? "TSNullKeyword" : keywordTypeFromName(this.state.value);
            if (nodeType !== undefined && this.lookaheadCharCode() !== 46) {
              const node = this.startNode();
              this.next();
              return this.finishNode(node, nodeType);
            }
            return this.tsParseTypeReference();
          }
        }
    }
    this.unexpected();
  }
  tsParseArrayTypeOrHigher() {
    let type = this.tsParseNonArrayType();
    while (!this.hasPrecedingLineBreak() && this.eat(0)) {
      if (this.match(3)) {
        const node = this.startNodeAtNode(type);
        node.elementType = type;
        this.expect(3);
        type = this.finishNode(node, "TSArrayType");
      } else {
        const node = this.startNodeAtNode(type);
        node.objectType = type;
        node.indexType = this.tsParseType();
        this.expect(3);
        type = this.finishNode(node, "TSIndexedAccessType");
      }
    }
    return type;
  }
  tsParseTypeOperator() {
    const node = this.startNode();
    const operator = this.state.value;
    this.next();
    node.operator = operator;
    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();
    if (operator === "readonly") {
      this.tsCheckTypeAnnotationForReadOnly(node);
    }
    return this.finishNode(node, "TSTypeOperator");
  }
  tsCheckTypeAnnotationForReadOnly(node) {
    switch (node.typeAnnotation.type) {
      case "TSTupleType":
      case "TSArrayType":
        return;
      default:
        this.raise(TSErrors.UnexpectedReadonly, {
          at: node
        });
    }
  }
  tsParseInferType() {
    const node = this.startNode();
    this.expectContextual(115);
    const typeParameter = this.startNode();
    typeParameter.name = this.tsParseTypeParameterName();
    typeParameter.constraint = this.tsTryParse(() => this.tsParseConstraintForInferType());
    node.typeParameter = this.finishNode(typeParameter, "TSTypeParameter");
    return this.finishNode(node, "TSInferType");
  }
  tsParseConstraintForInferType() {
    if (this.eat(81)) {
      const constraint = this.tsInDisallowConditionalTypesContext(() => this.tsParseType());
      if (this.state.inDisallowConditionalTypesContext || !this.match(17)) {
        return constraint;
      }
    }
  }
  tsParseTypeOperatorOrHigher() {
    const isTypeOperator = tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;
    return isTypeOperator ? this.tsParseTypeOperator() : this.isContextual(115) ? this.tsParseInferType() : this.tsInAllowConditionalTypesContext(() => this.tsParseArrayTypeOrHigher());
  }
  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {
    const node = this.startNode();
    const hasLeadingOperator = this.eat(operator);
    const types = [];
    do {
      types.push(parseConstituentType());
    } while (this.eat(operator));
    if (types.length === 1 && !hasLeadingOperator) {
      return types[0];
    }
    node.types = types;
    return this.finishNode(node, kind);
  }
  tsParseIntersectionTypeOrHigher() {
    return this.tsParseUnionOrIntersectionType("TSIntersectionType", this.tsParseTypeOperatorOrHigher.bind(this), 45);
  }
  tsParseUnionTypeOrHigher() {
    return this.tsParseUnionOrIntersectionType("TSUnionType", this.tsParseIntersectionTypeOrHigher.bind(this), 43);
  }
  tsIsStartOfFunctionType() {
    if (this.match(47)) {
      return true;
    }
    return this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));
  }
  tsSkipParameterStart() {
    if (tokenIsIdentifier(this.state.type) || this.match(78)) {
      this.next();
      return true;
    }
    if (this.match(5)) {
      const {
        errors
      } = this.state;
      const previousErrorCount = errors.length;
      try {
        this.parseObjectLike(8, true);
        return errors.length === previousErrorCount;
      } catch (_unused) {
        return false;
      }
    }
    if (this.match(0)) {
      this.next();
      const {
        errors
      } = this.state;
      const previousErrorCount = errors.length;
      try {
        super.parseBindingList(3, 93, 1);
        return errors.length === previousErrorCount;
      } catch (_unused2) {
        return false;
      }
    }
    return false;
  }
  tsIsUnambiguouslyStartOfFunctionType() {
    this.next();
    if (this.match(11) || this.match(21)) {
      return true;
    }
    if (this.tsSkipParameterStart()) {
      if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) {
        return true;
      }
      if (this.match(11)) {
        this.next();
        if (this.match(19)) {
          return true;
        }
      }
    }
    return false;
  }
  tsParseTypeOrTypePredicateAnnotation(returnToken) {
    return this.tsInType(() => {
      const t = this.startNode();
      this.expect(returnToken);
      const node = this.startNode();
      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));
      if (asserts && this.match(78)) {
        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();
        if (thisTypePredicate.type === "TSThisType") {
          node.parameterName = thisTypePredicate;
          node.asserts = true;
          node.typeAnnotation = null;
          thisTypePredicate = this.finishNode(node, "TSTypePredicate");
        } else {
          this.resetStartLocationFromNode(thisTypePredicate, node);
          thisTypePredicate.asserts = true;
        }
        t.typeAnnotation = thisTypePredicate;
        return this.finishNode(t, "TSTypeAnnotation");
      }
      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));
      if (!typePredicateVariable) {
        if (!asserts) {
          return this.tsParseTypeAnnotation(false, t);
        }
        node.parameterName = this.parseIdentifier();
        node.asserts = asserts;
        node.typeAnnotation = null;
        t.typeAnnotation = this.finishNode(node, "TSTypePredicate");
        return this.finishNode(t, "TSTypeAnnotation");
      }
      const type = this.tsParseTypeAnnotation(false);
      node.parameterName = typePredicateVariable;
      node.typeAnnotation = type;
      node.asserts = asserts;
      t.typeAnnotation = this.finishNode(node, "TSTypePredicate");
      return this.finishNode(t, "TSTypeAnnotation");
    });
  }
  tsTryParseTypeOrTypePredicateAnnotation() {
    if (this.match(14)) {
      return this.tsParseTypeOrTypePredicateAnnotation(14);
    }
  }
  tsTryParseTypeAnnotation() {
    if (this.match(14)) {
      return this.tsParseTypeAnnotation();
    }
  }
  tsTryParseType() {
    return this.tsEatThenParseType(14);
  }
  tsParseTypePredicatePrefix() {
    const id = this.parseIdentifier();
    if (this.isContextual(116) && !this.hasPrecedingLineBreak()) {
      this.next();
      return id;
    }
  }
  tsParseTypePredicateAsserts() {
    if (this.state.type !== 109) {
      return false;
    }
    const containsEsc = this.state.containsEsc;
    this.next();
    if (!tokenIsIdentifier(this.state.type) && !this.match(78)) {
      return false;
    }
    if (containsEsc) {
      this.raise(Errors.InvalidEscapedReservedWord, {
        at: this.state.lastTokStartLoc,
        reservedWord: "asserts"
      });
    }
    return true;
  }
  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {
    this.tsInType(() => {
      if (eatColon) this.expect(14);
      t.typeAnnotation = this.tsParseType();
    });
    return this.finishNode(t, "TSTypeAnnotation");
  }
  tsParseType() {
    assert(this.state.inType);
    const type = this.tsParseNonConditionalType();
    if (this.state.inDisallowConditionalTypesContext || this.hasPrecedingLineBreak() || !this.eat(81)) {
      return type;
    }
    const node = this.startNodeAtNode(type);
    node.checkType = type;
    node.extendsType = this.tsInDisallowConditionalTypesContext(() => this.tsParseNonConditionalType());
    this.expect(17);
    node.trueType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());
    this.expect(14);
    node.falseType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());
    return this.finishNode(node, "TSConditionalType");
  }
  isAbstractConstructorSignature() {
    return this.isContextual(124) && this.lookahead().type === 77;
  }
  tsParseNonConditionalType() {
    if (this.tsIsStartOfFunctionType()) {
      return this.tsParseFunctionOrConstructorType("TSFunctionType");
    }
    if (this.match(77)) {
      return this.tsParseFunctionOrConstructorType("TSConstructorType");
    } else if (this.isAbstractConstructorSignature()) {
      return this.tsParseFunctionOrConstructorType("TSConstructorType", true);
    }
    return this.tsParseUnionTypeOrHigher();
  }
  tsParseTypeAssertion() {
    if (this.getPluginOption("typescript", "disallowAmbiguousJSXLike")) {
      this.raise(TSErrors.ReservedTypeAssertion, {
        at: this.state.startLoc
      });
    }
    const node = this.startNode();
    node.typeAnnotation = this.tsInType(() => {
      this.next();
      return this.match(75) ? this.tsParseTypeReference() : this.tsParseType();
    });
    this.expect(48);
    node.expression = this.parseMaybeUnary();
    return this.finishNode(node, "TSTypeAssertion");
  }
  tsParseHeritageClause(token) {
    const originalStartLoc = this.state.startLoc;
    const delimitedList = this.tsParseDelimitedList("HeritageClauseElement", () => {
      const node = this.startNode();
      node.expression = this.tsParseEntityName();
      if (this.match(47)) {
        node.typeParameters = this.tsParseTypeArguments();
      }
      return this.finishNode(node, "TSExpressionWithTypeArguments");
    });
    if (!delimitedList.length) {
      this.raise(TSErrors.EmptyHeritageClauseType, {
        at: originalStartLoc,
        token
      });
    }
    return delimitedList;
  }
  tsParseInterfaceDeclaration(node, properties = {}) {
    if (this.hasFollowingLineBreak()) return null;
    this.expectContextual(129);
    if (properties.declare) node.declare = true;
    if (tokenIsIdentifier(this.state.type)) {
      node.id = this.parseIdentifier();
      this.checkIdentifier(node.id, 130);
    } else {
      node.id = null;
      this.raise(TSErrors.MissingInterfaceName, {
        at: this.state.startLoc
      });
    }
    node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);
    if (this.eat(81)) {
      node.extends = this.tsParseHeritageClause("extends");
    }
    const body = this.startNode();
    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));
    node.body = this.finishNode(body, "TSInterfaceBody");
    return this.finishNode(node, "TSInterfaceDeclaration");
  }
  tsParseTypeAliasDeclaration(node) {
    node.id = this.parseIdentifier();
    this.checkIdentifier(node.id, 2);
    node.typeAnnotation = this.tsInType(() => {
      node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers);
      this.expect(29);
      if (this.isContextual(114) && this.lookahead().type !== 16) {
        const node = this.startNode();
        this.next();
        return this.finishNode(node, "TSIntrinsicKeyword");
      }
      return this.tsParseType();
    });
    this.semicolon();
    return this.finishNode(node, "TSTypeAliasDeclaration");
  }
  tsInNoContext(cb) {
    const oldContext = this.state.context;
    this.state.context = [oldContext[0]];
    try {
      return cb();
    } finally {
      this.state.context = oldContext;
    }
  }
  tsInType(cb) {
    const oldInType = this.state.inType;
    this.state.inType = true;
    try {
      return cb();
    } finally {
      this.state.inType = oldInType;
    }
  }
  tsInDisallowConditionalTypesContext(cb) {
    const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
    this.state.inDisallowConditionalTypesContext = true;
    try {
      return cb();
    } finally {
      this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
    }
  }
  tsInAllowConditionalTypesContext(cb) {
    const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
    this.state.inDisallowConditionalTypesContext = false;
    try {
      return cb();
    } finally {
      this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
    }
  }
  tsEatThenParseType(token) {
    if (this.match(token)) {
      return this.tsNextThenParseType();
    }
  }
  tsExpectThenParseType(token) {
    return this.tsInType(() => {
      this.expect(token);
      return this.tsParseType();
    });
  }
  tsNextThenParseType() {
    return this.tsInType(() => {
      this.next();
      return this.tsParseType();
    });
  }
  tsParseEnumMember() {
    const node = this.startNode();
    node.id = this.match(133) ? super.parseStringLiteral(this.state.value) : this.parseIdentifier(true);
    if (this.eat(29)) {
      node.initializer = super.parseMaybeAssignAllowIn();
    }
    return this.finishNode(node, "TSEnumMember");
  }
  tsParseEnumDeclaration(node, properties = {}) {
    if (properties.const) node.const = true;
    if (properties.declare) node.declare = true;
    this.expectContextual(126);
    node.id = this.parseIdentifier();
    this.checkIdentifier(node.id, node.const ? 8971 : 8459);
    this.expect(5);
    node.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this));
    this.expect(8);
    return this.finishNode(node, "TSEnumDeclaration");
  }
  tsParseModuleBlock() {
    const node = this.startNode();
    this.scope.enter(0);
    this.expect(5);
    super.parseBlockOrModuleBlockBody(node.body = [], undefined, true, 8);
    this.scope.exit();
    return this.finishNode(node, "TSModuleBlock");
  }
  tsParseModuleOrNamespaceDeclaration(node, nested = false) {
    node.id = this.parseIdentifier();
    if (!nested) {
      this.checkIdentifier(node.id, 1024);
    }
    if (this.eat(16)) {
      const inner = this.startNode();
      this.tsParseModuleOrNamespaceDeclaration(inner, true);
      node.body = inner;
    } else {
      this.scope.enter(256);
      this.prodParam.enter(0);
      node.body = this.tsParseModuleBlock();
      this.prodParam.exit();
      this.scope.exit();
    }
    return this.finishNode(node, "TSModuleDeclaration");
  }
  tsParseAmbientExternalModuleDeclaration(node) {
    if (this.isContextual(112)) {
      node.global = true;
      node.id = this.parseIdentifier();
    } else if (this.match(133)) {
      node.id = super.parseStringLiteral(this.state.value);
    } else {
      this.unexpected();
    }
    if (this.match(5)) {
      this.scope.enter(256);
      this.prodParam.enter(0);
      node.body = this.tsParseModuleBlock();
      this.prodParam.exit();
      this.scope.exit();
    } else {
      this.semicolon();
    }
    return this.finishNode(node, "TSModuleDeclaration");
  }
  tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier, isExport) {
    node.isExport = isExport || false;
    node.id = maybeDefaultIdentifier || this.parseIdentifier();
    this.checkIdentifier(node.id, 4096);
    this.expect(29);
    const moduleReference = this.tsParseModuleReference();
    if (node.importKind === "type" && moduleReference.type !== "TSExternalModuleReference") {
      this.raise(TSErrors.ImportAliasHasImportType, {
        at: moduleReference
      });
    }
    node.moduleReference = moduleReference;
    this.semicolon();
    return this.finishNode(node, "TSImportEqualsDeclaration");
  }
  tsIsExternalModuleReference() {
    return this.isContextual(119) && this.lookaheadCharCode() === 40;
  }
  tsParseModuleReference() {
    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);
  }
  tsParseExternalModuleReference() {
    const node = this.startNode();
    this.expectContextual(119);
    this.expect(10);
    if (!this.match(133)) {
      this.unexpected();
    }
    node.expression = super.parseExprAtom();
    this.expect(11);
    this.sawUnambiguousESM = true;
    return this.finishNode(node, "TSExternalModuleReference");
  }
  tsLookAhead(f) {
    const state = this.state.clone();
    const res = f();
    this.state = state;
    return res;
  }
  tsTryParseAndCatch(f) {
    const result = this.tryParse(abort => f() || abort());
    if (result.aborted || !result.node) return;
    if (result.error) this.state = result.failState;
    return result.node;
  }
  tsTryParse(f) {
    const state = this.state.clone();
    const result = f();
    if (result !== undefined && result !== false) {
      return result;
    }
    this.state = state;
  }
  tsTryParseDeclare(nany) {
    if (this.isLineTerminator()) {
      return;
    }
    let startType = this.state.type;
    let kind;
    if (this.isContextual(100)) {
      startType = 74;
      kind = "let";
    }
    return this.tsInAmbientContext(() => {
      switch (startType) {
        case 68:
          nany.declare = true;
          return super.parseFunctionStatement(nany, false, false);
        case 80:
          nany.declare = true;
          return this.parseClass(nany, true, false);
        case 126:
          return this.tsParseEnumDeclaration(nany, {
            declare: true
          });
        case 112:
          return this.tsParseAmbientExternalModuleDeclaration(nany);
        case 75:
        case 74:
          if (!this.match(75) || !this.isLookaheadContextual("enum")) {
            nany.declare = true;
            return this.parseVarStatement(nany, kind || this.state.value, true);
          }
          this.expect(75);
          return this.tsParseEnumDeclaration(nany, {
            const: true,
            declare: true
          });
        case 129:
          {
            const result = this.tsParseInterfaceDeclaration(nany, {
              declare: true
            });
            if (result) return result;
          }
        default:
          if (tokenIsIdentifier(startType)) {
            return this.tsParseDeclaration(nany, this.state.value, true, null);
          }
      }
    });
  }
  tsTryParseExportDeclaration() {
    return this.tsParseDeclaration(this.startNode(), this.state.value, true, null);
  }
  tsParseExpressionStatement(node, expr, decorators) {
    switch (expr.name) {
      case "declare":
        {
          const declaration = this.tsTryParseDeclare(node);
          if (declaration) {
            declaration.declare = true;
          }
          return declaration;
        }
      case "global":
        if (this.match(5)) {
          this.scope.enter(256);
          this.prodParam.enter(0);
          const mod = node;
          mod.global = true;
          mod.id = expr;
          mod.body = this.tsParseModuleBlock();
          this.scope.exit();
          this.prodParam.exit();
          return this.finishNode(mod, "TSModuleDeclaration");
        }
        break;
      default:
        return this.tsParseDeclaration(node, expr.name, false, decorators);
    }
  }
  tsParseDeclaration(node, value, next, decorators) {
    switch (value) {
      case "abstract":
        if (this.tsCheckLineTerminator(next) && (this.match(80) || tokenIsIdentifier(this.state.type))) {
          return this.tsParseAbstractDeclaration(node, decorators);
        }
        break;
      case "module":
        if (this.tsCheckLineTerminator(next)) {
          if (this.match(133)) {
            return this.tsParseAmbientExternalModuleDeclaration(node);
          } else if (tokenIsIdentifier(this.state.type)) {
            return this.tsParseModuleOrNamespaceDeclaration(node);
          }
        }
        break;
      case "namespace":
        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {
          return this.tsParseModuleOrNamespaceDeclaration(node);
        }
        break;
      case "type":
        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {
          return this.tsParseTypeAliasDeclaration(node);
        }
        break;
    }
  }
  tsCheckLineTerminator(next) {
    if (next) {
      if (this.hasFollowingLineBreak()) return false;
      this.next();
      return true;
    }
    return !this.isLineTerminator();
  }
  tsTryParseGenericAsyncArrowFunction(startLoc) {
    if (!this.match(47)) return;
    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
    this.state.maybeInArrowParameters = true;
    const res = this.tsTryParseAndCatch(() => {
      const node = this.startNodeAt(startLoc);
      node.typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);
      super.parseFunctionParams(node);
      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();
      this.expect(19);
      return node;
    });
    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
    if (!res) return;
    return super.parseArrowExpression(res, null, true);
  }
  tsParseTypeArgumentsInExpression() {
    if (this.reScan_lt() !== 47) return;
    return this.tsParseTypeArguments();
  }
  tsParseTypeArguments() {
    const node = this.startNode();
    node.params = this.tsInType(() => this.tsInNoContext(() => {
      this.expect(47);
      return this.tsParseDelimitedList("TypeParametersOrArguments", this.tsParseType.bind(this));
    }));
    if (node.params.length === 0) {
      this.raise(TSErrors.EmptyTypeArguments, {
        at: node
      });
    } else if (!this.state.inType && this.curContext() === types.brace) {
      this.reScan_lt_gt();
    }
    this.expect(48);
    return this.finishNode(node, "TSTypeParameterInstantiation");
  }
  tsIsDeclarationStart() {
    return tokenIsTSDeclarationStart(this.state.type);
  }
  isExportDefaultSpecifier() {
    if (this.tsIsDeclarationStart()) return false;
    return super.isExportDefaultSpecifier();
  }
  parseAssignableListItem(flags, decorators) {
    const startLoc = this.state.startLoc;
    const modified = {};
    this.tsParseModifiers({
      allowedModifiers: ["public", "private", "protected", "override", "readonly"]
    }, modified);
    const accessibility = modified.accessibility;
    const override = modified.override;
    const readonly = modified.readonly;
    if (!(flags & 4) && (accessibility || readonly || override)) {
      this.raise(TSErrors.UnexpectedParameterModifier, {
        at: startLoc
      });
    }
    const left = this.parseMaybeDefault();
    this.parseAssignableListItemTypes(left, flags);
    const elt = this.parseMaybeDefault(left.loc.start, left);
    if (accessibility || readonly || override) {
      const pp = this.startNodeAt(startLoc);
      if (decorators.length) {
        pp.decorators = decorators;
      }
      if (accessibility) pp.accessibility = accessibility;
      if (readonly) pp.readonly = readonly;
      if (override) pp.override = override;
      if (elt.type !== "Identifier" && elt.type !== "AssignmentPattern") {
        this.raise(TSErrors.UnsupportedParameterPropertyKind, {
          at: pp
        });
      }
      pp.parameter = elt;
      return this.finishNode(pp, "TSParameterProperty");
    }
    if (decorators.length) {
      left.decorators = decorators;
    }
    return elt;
  }
  isSimpleParameter(node) {
    return node.type === "TSParameterProperty" && super.isSimpleParameter(node.parameter) || super.isSimpleParameter(node);
  }
  tsDisallowOptionalPattern(node) {
    for (const param of node.params) {
      if (param.type !== "Identifier" && param.optional && !this.state.isAmbientContext) {
        this.raise(TSErrors.PatternIsOptional, {
          at: param
        });
      }
    }
  }
  setArrowFunctionParameters(node, params, trailingCommaLoc) {
    super.setArrowFunctionParameters(node, params, trailingCommaLoc);
    this.tsDisallowOptionalPattern(node);
  }
  parseFunctionBodyAndFinish(node, type, isMethod = false) {
    if (this.match(14)) {
      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
    }
    const bodilessType = type === "FunctionDeclaration" ? "TSDeclareFunction" : type === "ClassMethod" || type === "ClassPrivateMethod" ? "TSDeclareMethod" : undefined;
    if (bodilessType && !this.match(5) && this.isLineTerminator()) {
      return this.finishNode(node, bodilessType);
    }
    if (bodilessType === "TSDeclareFunction" && this.state.isAmbientContext) {
      this.raise(TSErrors.DeclareFunctionHasImplementation, {
        at: node
      });
      if (node.declare) {
        return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);
      }
    }
    this.tsDisallowOptionalPattern(node);
    return super.parseFunctionBodyAndFinish(node, type, isMethod);
  }
  registerFunctionStatementId(node) {
    if (!node.body && node.id) {
      this.checkIdentifier(node.id, 1024);
    } else {
      super.registerFunctionStatementId(node);
    }
  }
  tsCheckForInvalidTypeCasts(items) {
    items.forEach(node => {
      if ((node == null ? void 0 : node.type) === "TSTypeCastExpression") {
        this.raise(TSErrors.UnexpectedTypeAnnotation, {
          at: node.typeAnnotation
        });
      }
    });
  }
  toReferencedList(exprList, isInParens) {
    this.tsCheckForInvalidTypeCasts(exprList);
    return exprList;
  }
  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
    if (node.type === "ArrayExpression") {
      this.tsCheckForInvalidTypeCasts(node.elements);
    }
    return node;
  }
  parseSubscript(base, startLoc, noCalls, state) {
    if (!this.hasPrecedingLineBreak() && this.match(35)) {
      this.state.canStartJSXElement = false;
      this.next();
      const nonNullExpression = this.startNodeAt(startLoc);
      nonNullExpression.expression = base;
      return this.finishNode(nonNullExpression, "TSNonNullExpression");
    }
    let isOptionalCall = false;
    if (this.match(18) && this.lookaheadCharCode() === 60) {
      if (noCalls) {
        state.stop = true;
        return base;
      }
      state.optionalChainMember = isOptionalCall = true;
      this.next();
    }
    if (this.match(47) || this.match(51)) {
      let missingParenErrorLoc;
      const result = this.tsTryParseAndCatch(() => {
        if (!noCalls && this.atPossibleAsyncArrow(base)) {
          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startLoc);
          if (asyncArrowFn) {
            return asyncArrowFn;
          }
        }
        const typeArguments = this.tsParseTypeArgumentsInExpression();
        if (!typeArguments) return;
        if (isOptionalCall && !this.match(10)) {
          missingParenErrorLoc = this.state.curPosition();
          return;
        }
        if (tokenIsTemplate(this.state.type)) {
          const result = super.parseTaggedTemplateExpression(base, startLoc, state);
          result.typeParameters = typeArguments;
          return result;
        }
        if (!noCalls && this.eat(10)) {
          const node = this.startNodeAt(startLoc);
          node.callee = base;
          node.arguments = this.parseCallExpressionArguments(11, false);
          this.tsCheckForInvalidTypeCasts(node.arguments);
          node.typeParameters = typeArguments;
          if (state.optionalChainMember) {
            node.optional = isOptionalCall;
          }
          return this.finishCallExpression(node, state.optionalChainMember);
        }
        const tokenType = this.state.type;
        if (tokenType === 48 || tokenType === 52 || tokenType !== 10 && tokenCanStartExpression(tokenType) && !this.hasPrecedingLineBreak()) {
          return;
        }
        const node = this.startNodeAt(startLoc);
        node.expression = base;
        node.typeParameters = typeArguments;
        return this.finishNode(node, "TSInstantiationExpression");
      });
      if (missingParenErrorLoc) {
        this.unexpected(missingParenErrorLoc, 10);
      }
      if (result) {
        if (result.type === "TSInstantiationExpression" && (this.match(16) || this.match(18) && this.lookaheadCharCode() !== 40)) {
          this.raise(TSErrors.InvalidPropertyAccessAfterInstantiationExpression, {
            at: this.state.startLoc
          });
        }
        return result;
      }
    }
    return super.parseSubscript(base, startLoc, noCalls, state);
  }
  parseNewCallee(node) {
    var _callee$extra;
    super.parseNewCallee(node);
    const {
      callee
    } = node;
    if (callee.type === "TSInstantiationExpression" && !((_callee$extra = callee.extra) != null && _callee$extra.parenthesized)) {
      node.typeParameters = callee.typeParameters;
      node.callee = callee.expression;
    }
  }
  parseExprOp(left, leftStartLoc, minPrec) {
    let isSatisfies;
    if (tokenOperatorPrecedence(58) > minPrec && !this.hasPrecedingLineBreak() && (this.isContextual(93) || (isSatisfies = this.isContextual(120)))) {
      const node = this.startNodeAt(leftStartLoc);
      node.expression = left;
      node.typeAnnotation = this.tsInType(() => {
        this.next();
        if (this.match(75)) {
          if (isSatisfies) {
            this.raise(Errors.UnexpectedKeyword, {
              at: this.state.startLoc,
              keyword: "const"
            });
          }
          return this.tsParseTypeReference();
        }
        return this.tsParseType();
      });
      this.finishNode(node, isSatisfies ? "TSSatisfiesExpression" : "TSAsExpression");
      this.reScan_lt_gt();
      return this.parseExprOp(node, leftStartLoc, minPrec);
    }
    return super.parseExprOp(left, leftStartLoc, minPrec);
  }
  checkReservedWord(word, startLoc, checkKeywords, isBinding) {
    if (!this.state.isAmbientContext) {
      super.checkReservedWord(word, startLoc, checkKeywords, isBinding);
    }
  }
  checkImportReflection(node) {
    super.checkImportReflection(node);
    if (node.module && node.importKind !== "value") {
      this.raise(TSErrors.ImportReflectionHasImportType, {
        at: node.specifiers[0].loc.start
      });
    }
  }
  checkDuplicateExports() {}
  isPotentialImportPhase(isExport) {
    if (super.isPotentialImportPhase(isExport)) return true;
    if (this.isContextual(130)) {
      const ch = this.lookaheadCharCode();
      return isExport ? ch === 123 || ch === 42 : ch !== 61;
    }
    return !isExport && this.isContextual(87);
  }
  applyImportPhase(node, isExport, phase, loc) {
    super.applyImportPhase(node, isExport, phase, loc);
    if (isExport) {
      node.exportKind = phase === "type" ? "type" : "value";
    } else {
      node.importKind = phase === "type" || phase === "typeof" ? phase : "value";
    }
  }
  parseImport(node) {
    if (this.match(133)) {
      node.importKind = "value";
      return super.parseImport(node);
    }
    let importNode;
    if (tokenIsIdentifier(this.state.type) && this.lookaheadCharCode() === 61) {
      node.importKind = "value";
      return this.tsParseImportEqualsDeclaration(node);
    } else if (this.isContextual(130)) {
      const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, false);
      if (this.lookaheadCharCode() === 61) {
        return this.tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier);
      } else {
        importNode = super.parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier);
      }
    } else {
      importNode = super.parseImport(node);
    }
    if (importNode.importKind === "type" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === "ImportDefaultSpecifier") {
      this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {
        at: importNode
      });
    }
    return importNode;
  }
  parseExport(node, decorators) {
    if (this.match(83)) {
      this.next();
      let maybeDefaultIdentifier = null;
      if (this.isContextual(130) && this.isPotentialImportPhase(false)) {
        maybeDefaultIdentifier = this.parseMaybeImportPhase(node, false);
      } else {
        node.importKind = "value";
      }
      return this.tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier, true);
    } else if (this.eat(29)) {
      const assign = node;
      assign.expression = super.parseExpression();
      this.semicolon();
      this.sawUnambiguousESM = true;
      return this.finishNode(assign, "TSExportAssignment");
    } else if (this.eatContextual(93)) {
      const decl = node;
      this.expectContextual(128);
      decl.id = this.parseIdentifier();
      this.semicolon();
      return this.finishNode(decl, "TSNamespaceExportDeclaration");
    } else {
      return super.parseExport(node, decorators);
    }
  }
  isAbstractClass() {
    return this.isContextual(124) && this.lookahead().type === 80;
  }
  parseExportDefaultExpression() {
    if (this.isAbstractClass()) {
      const cls = this.startNode();
      this.next();
      cls.abstract = true;
      return this.parseClass(cls, true, true);
    }
    if (this.match(129)) {
      const result = this.tsParseInterfaceDeclaration(this.startNode());
      if (result) return result;
    }
    return super.parseExportDefaultExpression();
  }
  parseVarStatement(node, kind, allowMissingInitializer = false) {
    const {
      isAmbientContext
    } = this.state;
    const declaration = super.parseVarStatement(node, kind, allowMissingInitializer || isAmbientContext);
    if (!isAmbientContext) return declaration;
    for (const {
      id,
      init
    } of declaration.declarations) {
      if (!init) continue;
      if (kind !== "const" || !!id.typeAnnotation) {
        this.raise(TSErrors.InitializerNotAllowedInAmbientContext, {
          at: init
        });
      } else if (!isValidAmbientConstInitializer(init, this.hasPlugin("estree"))) {
        this.raise(TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference, {
          at: init
        });
      }
    }
    return declaration;
  }
  parseStatementContent(flags, decorators) {
    if (this.match(75) && this.isLookaheadContextual("enum")) {
      const node = this.startNode();
      this.expect(75);
      return this.tsParseEnumDeclaration(node, {
        const: true
      });
    }
    if (this.isContextual(126)) {
      return this.tsParseEnumDeclaration(this.startNode());
    }
    if (this.isContextual(129)) {
      const result = this.tsParseInterfaceDeclaration(this.startNode());
      if (result) return result;
    }
    return super.parseStatementContent(flags, decorators);
  }
  parseAccessModifier() {
    return this.tsParseModifier(["public", "protected", "private"]);
  }
  tsHasSomeModifiers(member, modifiers) {
    return modifiers.some(modifier => {
      if (tsIsAccessModifier(modifier)) {
        return member.accessibility === modifier;
      }
      return !!member[modifier];
    });
  }
  tsIsStartOfStaticBlocks() {
    return this.isContextual(106) && this.lookaheadCharCode() === 123;
  }
  parseClassMember(classBody, member, state) {
    const modifiers = ["declare", "private", "public", "protected", "override", "abstract", "readonly", "static"];
    this.tsParseModifiers({
      allowedModifiers: modifiers,
      disallowedModifiers: ["in", "out"],
      stopOnStartOfClassStaticBlock: true,
      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions
    }, member);
    const callParseClassMemberWithIsStatic = () => {
      if (this.tsIsStartOfStaticBlocks()) {
        this.next();
        this.next();
        if (this.tsHasSomeModifiers(member, modifiers)) {
          this.raise(TSErrors.StaticBlockCannotHaveModifier, {
            at: this.state.curPosition()
          });
        }
        super.parseClassStaticBlock(classBody, member);
      } else {
        this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);
      }
    };
    if (member.declare) {
      this.tsInAmbientContext(callParseClassMemberWithIsStatic);
    } else {
      callParseClassMemberWithIsStatic();
    }
  }
  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
    const idx = this.tsTryParseIndexSignature(member);
    if (idx) {
      classBody.body.push(idx);
      if (member.abstract) {
        this.raise(TSErrors.IndexSignatureHasAbstract, {
          at: member
        });
      }
      if (member.accessibility) {
        this.raise(TSErrors.IndexSignatureHasAccessibility, {
          at: member,
          modifier: member.accessibility
        });
      }
      if (member.declare) {
        this.raise(TSErrors.IndexSignatureHasDeclare, {
          at: member
        });
      }
      if (member.override) {
        this.raise(TSErrors.IndexSignatureHasOverride, {
          at: member
        });
      }
      return;
    }
    if (!this.state.inAbstractClass && member.abstract) {
      this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {
        at: member
      });
    }
    if (member.override) {
      if (!state.hadSuperClass) {
        this.raise(TSErrors.OverrideNotInSubClass, {
          at: member
        });
      }
    }
    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
  }
  parsePostMemberNameModifiers(methodOrProp) {
    const optional = this.eat(17);
    if (optional) methodOrProp.optional = true;
    if (methodOrProp.readonly && this.match(10)) {
      this.raise(TSErrors.ClassMethodHasReadonly, {
        at: methodOrProp
      });
    }
    if (methodOrProp.declare && this.match(10)) {
      this.raise(TSErrors.ClassMethodHasDeclare, {
        at: methodOrProp
      });
    }
  }
  parseExpressionStatement(node, expr, decorators) {
    const decl = expr.type === "Identifier" ? this.tsParseExpressionStatement(node, expr, decorators) : undefined;
    return decl || super.parseExpressionStatement(node, expr, decorators);
  }
  shouldParseExportDeclaration() {
    if (this.tsIsDeclarationStart()) return true;
    return super.shouldParseExportDeclaration();
  }
  parseConditional(expr, startLoc, refExpressionErrors) {
    if (!this.state.maybeInArrowParameters || !this.match(17)) {
      return super.parseConditional(expr, startLoc, refExpressionErrors);
    }
    const result = this.tryParse(() => super.parseConditional(expr, startLoc));
    if (!result.node) {
      if (result.error) {
        super.setOptionalParametersError(refExpressionErrors, result.error);
      }
      return expr;
    }
    if (result.error) this.state = result.failState;
    return result.node;
  }
  parseParenItem(node, startLoc) {
    node = super.parseParenItem(node, startLoc);
    if (this.eat(17)) {
      node.optional = true;
      this.resetEndLocation(node);
    }
    if (this.match(14)) {
      const typeCastNode = this.startNodeAt(startLoc);
      typeCastNode.expression = node;
      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();
      return this.finishNode(typeCastNode, "TSTypeCastExpression");
    }
    return node;
  }
  parseExportDeclaration(node) {
    if (!this.state.isAmbientContext && this.isContextual(125)) {
      return this.tsInAmbientContext(() => this.parseExportDeclaration(node));
    }
    const startLoc = this.state.startLoc;
    const isDeclare = this.eatContextual(125);
    if (isDeclare && (this.isContextual(125) || !this.shouldParseExportDeclaration())) {
      throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {
        at: this.state.startLoc
      });
    }
    const isIdentifier = tokenIsIdentifier(this.state.type);
    const declaration = isIdentifier && this.tsTryParseExportDeclaration() || super.parseExportDeclaration(node);
    if (!declaration) return null;
    if (declaration.type === "TSInterfaceDeclaration" || declaration.type === "TSTypeAliasDeclaration" || isDeclare) {
      node.exportKind = "type";
    }
    if (isDeclare) {
      this.resetStartLocation(declaration, startLoc);
      declaration.declare = true;
    }
    return declaration;
  }
  parseClassId(node, isStatement, optionalId, bindingType) {
    if ((!isStatement || optionalId) && this.isContextual(113)) {
      return;
    }
    super.parseClassId(node, isStatement, optionalId, node.declare ? 1024 : 8331);
    const typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);
    if (typeParameters) node.typeParameters = typeParameters;
  }
  parseClassPropertyAnnotation(node) {
    if (!node.optional) {
      if (this.eat(35)) {
        node.definite = true;
      } else if (this.eat(17)) {
        node.optional = true;
      }
    }
    const type = this.tsTryParseTypeAnnotation();
    if (type) node.typeAnnotation = type;
  }
  parseClassProperty(node) {
    this.parseClassPropertyAnnotation(node);
    if (this.state.isAmbientContext && !(node.readonly && !node.typeAnnotation) && this.match(29)) {
      this.raise(TSErrors.DeclareClassFieldHasInitializer, {
        at: this.state.startLoc
      });
    }
    if (node.abstract && this.match(29)) {
      const {
        key
      } = node;
      this.raise(TSErrors.AbstractPropertyHasInitializer, {
        at: this.state.startLoc,
        propertyName: key.type === "Identifier" && !node.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`
      });
    }
    return super.parseClassProperty(node);
  }
  parseClassPrivateProperty(node) {
    if (node.abstract) {
      this.raise(TSErrors.PrivateElementHasAbstract, {
        at: node
      });
    }
    if (node.accessibility) {
      this.raise(TSErrors.PrivateElementHasAccessibility, {
        at: node,
        modifier: node.accessibility
      });
    }
    this.parseClassPropertyAnnotation(node);
    return super.parseClassPrivateProperty(node);
  }
  parseClassAccessorProperty(node) {
    this.parseClassPropertyAnnotation(node);
    if (node.optional) {
      this.raise(TSErrors.AccessorCannotBeOptional, {
        at: node
      });
    }
    return super.parseClassAccessorProperty(node);
  }
  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
    const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
    if (typeParameters && isConstructor) {
      this.raise(TSErrors.ConstructorHasTypeParameters, {
        at: typeParameters
      });
    }
    const {
      declare = false,
      kind
    } = method;
    if (declare && (kind === "get" || kind === "set")) {
      this.raise(TSErrors.DeclareAccessor, {
        at: method,
        kind
      });
    }
    if (typeParameters) method.typeParameters = typeParameters;
    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
  }
  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
    const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
    if (typeParameters) method.typeParameters = typeParameters;
    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
  }
  declareClassPrivateMethodInScope(node, kind) {
    if (node.type === "TSDeclareMethod") return;
    if (node.type === "MethodDefinition" && !node.value.body) return;
    super.declareClassPrivateMethodInScope(node, kind);
  }
  parseClassSuper(node) {
    super.parseClassSuper(node);
    if (node.superClass && (this.match(47) || this.match(51))) {
      node.superTypeParameters = this.tsParseTypeArgumentsInExpression();
    }
    if (this.eatContextual(113)) {
      node.implements = this.tsParseHeritageClause("implements");
    }
  }
  parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
    const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
    if (typeParameters) prop.typeParameters = typeParameters;
    return super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
  }
  parseFunctionParams(node, isConstructor) {
    const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
    if (typeParameters) node.typeParameters = typeParameters;
    super.parseFunctionParams(node, isConstructor);
  }
  parseVarId(decl, kind) {
    super.parseVarId(decl, kind);
    if (decl.id.type === "Identifier" && !this.hasPrecedingLineBreak() && this.eat(35)) {
      decl.definite = true;
    }
    const type = this.tsTryParseTypeAnnotation();
    if (type) {
      decl.id.typeAnnotation = type;
      this.resetEndLocation(decl.id);
    }
  }
  parseAsyncArrowFromCallExpression(node, call) {
    if (this.match(14)) {
      node.returnType = this.tsParseTypeAnnotation();
    }
    return super.parseAsyncArrowFromCallExpression(node, call);
  }
  parseMaybeAssign(refExpressionErrors, afterLeftParse) {
    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2;
    let state;
    let jsx;
    let typeCast;
    if (this.hasPlugin("jsx") && (this.match(142) || this.match(47))) {
      state = this.state.clone();
      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);
      if (!jsx.error) return jsx.node;
      const {
        context
      } = this.state;
      const currentContext = context[context.length - 1];
      if (currentContext === types.j_oTag || currentContext === types.j_expr) {
        context.pop();
      }
    }
    if (!((_jsx = jsx) != null && _jsx.error) && !this.match(47)) {
      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
    }
    if (!state || state === this.state) state = this.state.clone();
    let typeParameters;
    const arrow = this.tryParse(abort => {
      var _expr$extra, _typeParameters;
      typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);
      const expr = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
      if (expr.type !== "ArrowFunctionExpression" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {
        abort();
      }
      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {
        this.resetStartLocationFromNode(expr, typeParameters);
      }
      expr.typeParameters = typeParameters;
      return expr;
    }, state);
    if (!arrow.error && !arrow.aborted) {
      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);
      return arrow.node;
    }
    if (!jsx) {
      assert(!this.hasPlugin("jsx"));
      typeCast = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);
      if (!typeCast.error) return typeCast.node;
    }
    if ((_jsx2 = jsx) != null && _jsx2.node) {
      this.state = jsx.failState;
      return jsx.node;
    }
    if (arrow.node) {
      this.state = arrow.failState;
      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);
      return arrow.node;
    }
    if ((_typeCast = typeCast) != null && _typeCast.node) {
      this.state = typeCast.failState;
      return typeCast.node;
    }
    throw ((_jsx3 = jsx) == null ? void 0 : _jsx3.error) || arrow.error || ((_typeCast2 = typeCast) == null ? void 0 : _typeCast2.error);
  }
  reportReservedArrowTypeParam(node) {
    var _node$extra;
    if (node.params.length === 1 && !node.params[0].constraint && !((_node$extra = node.extra) != null && _node$extra.trailingComma) && this.getPluginOption("typescript", "disallowAmbiguousJSXLike")) {
      this.raise(TSErrors.ReservedArrowTypeParam, {
        at: node
      });
    }
  }
  parseMaybeUnary(refExpressionErrors, sawUnary) {
    if (!this.hasPlugin("jsx") && this.match(47)) {
      return this.tsParseTypeAssertion();
    }
    return super.parseMaybeUnary(refExpressionErrors, sawUnary);
  }
  parseArrow(node) {
    if (this.match(14)) {
      const result = this.tryParse(abort => {
        const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
        if (this.canInsertSemicolon() || !this.match(19)) abort();
        return returnType;
      });
      if (result.aborted) return;
      if (!result.thrown) {
        if (result.error) this.state = result.failState;
        node.returnType = result.node;
      }
    }
    return super.parseArrow(node);
  }
  parseAssignableListItemTypes(param, flags) {
    if (!(flags & 2)) return param;
    if (this.eat(17)) {
      param.optional = true;
    }
    const type = this.tsTryParseTypeAnnotation();
    if (type) param.typeAnnotation = type;
    this.resetEndLocation(param);
    return param;
  }
  isAssignable(node, isBinding) {
    switch (node.type) {
      case "TSTypeCastExpression":
        return this.isAssignable(node.expression, isBinding);
      case "TSParameterProperty":
        return true;
      default:
        return super.isAssignable(node, isBinding);
    }
  }
  toAssignable(node, isLHS = false) {
    switch (node.type) {
      case "ParenthesizedExpression":
        this.toAssignableParenthesizedExpression(node, isLHS);
        break;
      case "TSAsExpression":
      case "TSSatisfiesExpression":
      case "TSNonNullExpression":
      case "TSTypeAssertion":
        if (isLHS) {
          this.expressionScope.recordArrowParameterBindingError(TSErrors.UnexpectedTypeCastInParameter, {
            at: node
          });
        } else {
          this.raise(TSErrors.UnexpectedTypeCastInParameter, {
            at: node
          });
        }
        this.toAssignable(node.expression, isLHS);
        break;
      case "AssignmentExpression":
        if (!isLHS && node.left.type === "TSTypeCastExpression") {
          node.left = this.typeCastToParameter(node.left);
        }
      default:
        super.toAssignable(node, isLHS);
    }
  }
  toAssignableParenthesizedExpression(node, isLHS) {
    switch (node.expression.type) {
      case "TSAsExpression":
      case "TSSatisfiesExpression":
      case "TSNonNullExpression":
      case "TSTypeAssertion":
      case "ParenthesizedExpression":
        this.toAssignable(node.expression, isLHS);
        break;
      default:
        super.toAssignable(node, isLHS);
    }
  }
  checkToRestConversion(node, allowPattern) {
    switch (node.type) {
      case "TSAsExpression":
      case "TSSatisfiesExpression":
      case "TSTypeAssertion":
      case "TSNonNullExpression":
        this.checkToRestConversion(node.expression, false);
        break;
      default:
        super.checkToRestConversion(node, allowPattern);
    }
  }
  isValidLVal(type, isUnparenthesizedInAssign, binding) {
    return getOwn({
      TSTypeCastExpression: true,
      TSParameterProperty: "parameter",
      TSNonNullExpression: "expression",
      TSAsExpression: (binding !== 64 || !isUnparenthesizedInAssign) && ["expression", true],
      TSSatisfiesExpression: (binding !== 64 || !isUnparenthesizedInAssign) && ["expression", true],
      TSTypeAssertion: (binding !== 64 || !isUnparenthesizedInAssign) && ["expression", true]
    }, type) || super.isValidLVal(type, isUnparenthesizedInAssign, binding);
  }
  parseBindingAtom() {
    if (this.state.type === 78) {
      return this.parseIdentifier(true);
    }
    return super.parseBindingAtom();
  }
  parseMaybeDecoratorArguments(expr) {
    if (this.match(47) || this.match(51)) {
      const typeArguments = this.tsParseTypeArgumentsInExpression();
      if (this.match(10)) {
        const call = super.parseMaybeDecoratorArguments(expr);
        call.typeParameters = typeArguments;
        return call;
      }
      this.unexpected(null, 10);
    }
    return super.parseMaybeDecoratorArguments(expr);
  }
  checkCommaAfterRest(close) {
    if (this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close) {
      this.next();
      return false;
    }
    return super.checkCommaAfterRest(close);
  }
  isClassMethod() {
    return this.match(47) || super.isClassMethod();
  }
  isClassProperty() {
    return this.match(35) || this.match(14) || super.isClassProperty();
  }
  parseMaybeDefault(startLoc, left) {
    const node = super.parseMaybeDefault(startLoc, left);
    if (node.type === "AssignmentPattern" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {
      this.raise(TSErrors.TypeAnnotationAfterAssign, {
        at: node.typeAnnotation
      });
    }
    return node;
  }
  getTokenFromCode(code) {
    if (this.state.inType) {
      if (code === 62) {
        this.finishOp(48, 1);
        return;
      }
      if (code === 60) {
        this.finishOp(47, 1);
        return;
      }
    }
    super.getTokenFromCode(code);
  }
  reScan_lt_gt() {
    const {
      type
    } = this.state;
    if (type === 47) {
      this.state.pos -= 1;
      this.readToken_lt();
    } else if (type === 48) {
      this.state.pos -= 1;
      this.readToken_gt();
    }
  }
  reScan_lt() {
    const {
      type
    } = this.state;
    if (type === 51) {
      this.state.pos -= 2;
      this.finishOp(47, 1);
      return 47;
    }
    return type;
  }
  toAssignableList(exprList, trailingCommaLoc, isLHS) {
    for (let i = 0; i < exprList.length; i++) {
      const expr = exprList[i];
      if ((expr == null ? void 0 : expr.type) === "TSTypeCastExpression") {
        exprList[i] = this.typeCastToParameter(expr);
      }
    }
    super.toAssignableList(exprList, trailingCommaLoc, isLHS);
  }
  typeCastToParameter(node) {
    node.expression.typeAnnotation = node.typeAnnotation;
    this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);
    return node.expression;
  }
  shouldParseArrow(params) {
    if (this.match(14)) {
      return params.every(expr => this.isAssignable(expr, true));
    }
    return super.shouldParseArrow(params);
  }
  shouldParseAsyncArrow() {
    return this.match(14) || super.shouldParseAsyncArrow();
  }
  canHaveLeadingDecorator() {
    return super.canHaveLeadingDecorator() || this.isAbstractClass();
  }
  jsxParseOpeningElementAfterName(node) {
    if (this.match(47) || this.match(51)) {
      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());
      if (typeArguments) node.typeParameters = typeArguments;
    }
    return super.jsxParseOpeningElementAfterName(node);
  }
  getGetterSetterExpectedParamCount(method) {
    const baseCount = super.getGetterSetterExpectedParamCount(method);
    const params = this.getObjectOrClassMethodParams(method);
    const firstParam = params[0];
    const hasContextParam = firstParam && this.isThisParam(firstParam);
    return hasContextParam ? baseCount + 1 : baseCount;
  }
  parseCatchClauseParam() {
    const param = super.parseCatchClauseParam();
    const type = this.tsTryParseTypeAnnotation();
    if (type) {
      param.typeAnnotation = type;
      this.resetEndLocation(param);
    }
    return param;
  }
  tsInAmbientContext(cb) {
    const oldIsAmbientContext = this.state.isAmbientContext;
    this.state.isAmbientContext = true;
    try {
      return cb();
    } finally {
      this.state.isAmbientContext = oldIsAmbientContext;
    }
  }
  parseClass(node, isStatement, optionalId) {
    const oldInAbstractClass = this.state.inAbstractClass;
    this.state.inAbstractClass = !!node.abstract;
    try {
      return super.parseClass(node, isStatement, optionalId);
    } finally {
      this.state.inAbstractClass = oldInAbstractClass;
    }
  }
  tsParseAbstractDeclaration(node, decorators) {
    if (this.match(80)) {
      node.abstract = true;
      return this.maybeTakeDecorators(decorators, this.parseClass(node, true, false));
    } else if (this.isContextual(129)) {
      if (!this.hasFollowingLineBreak()) {
        node.abstract = true;
        this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {
          at: node
        });
        return this.tsParseInterfaceDeclaration(node);
      }
    } else {
      this.unexpected(null, 80);
    }
  }
  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope) {
    const method = super.parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);
    if (method.abstract) {
      const hasBody = this.hasPlugin("estree") ? !!method.value.body : !!method.body;
      if (hasBody) {
        const {
          key
        } = method;
        this.raise(TSErrors.AbstractMethodHasImplementation, {
          at: method,
          methodName: key.type === "Identifier" && !method.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`
        });
      }
    }
    return method;
  }
  tsParseTypeParameterName() {
    const typeName = this.parseIdentifier();
    return typeName.name;
  }
  shouldParseAsAmbientContext() {
    return !!this.getPluginOption("typescript", "dts");
  }
  parse() {
    if (this.shouldParseAsAmbientContext()) {
      this.state.isAmbientContext = true;
    }
    return super.parse();
  }
  getExpression() {
    if (this.shouldParseAsAmbientContext()) {
      this.state.isAmbientContext = true;
    }
    return super.getExpression();
  }
  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {
    if (!isString && isMaybeTypeOnly) {
      this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport);
      return this.finishNode(node, "ExportSpecifier");
    }
    node.exportKind = "value";
    return super.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly);
  }
  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
    if (!importedIsString && isMaybeTypeOnly) {
      this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport);
      return this.finishNode(specifier, "ImportSpecifier");
    }
    specifier.importKind = "value";
    return super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, isInTypeOnlyImport ? 4098 : 4096);
  }
  parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {
    const leftOfAsKey = isImport ? "imported" : "local";
    const rightOfAsKey = isImport ? "local" : "exported";
    let leftOfAs = node[leftOfAsKey];
    let rightOfAs;
    let hasTypeSpecifier = false;
    let canParseAsKeyword = true;
    const loc = leftOfAs.loc.start;
    if (this.isContextual(93)) {
      const firstAs = this.parseIdentifier();
      if (this.isContextual(93)) {
        const secondAs = this.parseIdentifier();
        if (tokenIsKeywordOrIdentifier(this.state.type)) {
          hasTypeSpecifier = true;
          leftOfAs = firstAs;
          rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();
          canParseAsKeyword = false;
        } else {
          rightOfAs = secondAs;
          canParseAsKeyword = false;
        }
      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {
        canParseAsKeyword = false;
        rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();
      } else {
        hasTypeSpecifier = true;
        leftOfAs = firstAs;
      }
    } else if (tokenIsKeywordOrIdentifier(this.state.type)) {
      hasTypeSpecifier = true;
      if (isImport) {
        leftOfAs = this.parseIdentifier(true);
        if (!this.isContextual(93)) {
          this.checkReservedWord(leftOfAs.name, leftOfAs.loc.start, true, true);
        }
      } else {
        leftOfAs = this.parseModuleExportName();
      }
    }
    if (hasTypeSpecifier && isInTypeOnlyImportExport) {
      this.raise(isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports, {
        at: loc
      });
    }
    node[leftOfAsKey] = leftOfAs;
    node[rightOfAsKey] = rightOfAs;
    const kindKey = isImport ? "importKind" : "exportKind";
    node[kindKey] = hasTypeSpecifier ? "type" : "value";
    if (canParseAsKeyword && this.eatContextual(93)) {
      node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName();
    }
    if (!node[rightOfAsKey]) {
      node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);
    }
    if (isImport) {
      this.checkIdentifier(node[rightOfAsKey], hasTypeSpecifier ? 4098 : 4096);
    }
  }
};
function isPossiblyLiteralEnum(expression) {
  if (expression.type !== "MemberExpression") return false;
  const {
    computed,
    property
  } = expression;
  if (computed && property.type !== "StringLiteral" && (property.type !== "TemplateLiteral" || property.expressions.length > 0)) {
    return false;
  }
  return isUncomputedMemberExpressionChain(expression.object);
}
function isValidAmbientConstInitializer(expression, estree) {
  var _expression$extra;
  const {
    type
  } = expression;
  if ((_expression$extra = expression.extra) != null && _expression$extra.parenthesized) {
    return false;
  }
  if (estree) {
    if (type === "Literal") {
      const {
        value
      } = expression;
      if (typeof value === "string" || typeof value === "boolean") {
        return true;
      }
    }
  } else {
    if (type === "StringLiteral" || type === "BooleanLiteral") {
      return true;
    }
  }
  if (isNumber(expression, estree) || isNegativeNumber(expression, estree)) {
    return true;
  }
  if (type === "TemplateLiteral" && expression.expressions.length === 0) {
    return true;
  }
  if (isPossiblyLiteralEnum(expression)) {
    return true;
  }
  return false;
}
function isNumber(expression, estree) {
  if (estree) {
    return expression.type === "Literal" && (typeof expression.value === "number" || "bigint" in expression);
  }
  return expression.type === "NumericLiteral" || expression.type === "BigIntLiteral";
}
function isNegativeNumber(expression, estree) {
  if (expression.type === "UnaryExpression") {
    const {
      operator,
      argument
    } = expression;
    if (operator === "-" && isNumber(argument, estree)) {
      return true;
    }
  }
  return false;
}
function isUncomputedMemberExpressionChain(expression) {
  if (expression.type === "Identifier") return true;
  if (expression.type !== "MemberExpression" || expression.computed) {
    return false;
  }
  return isUncomputedMemberExpressionChain(expression.object);
}
const PlaceholderErrors = ParseErrorEnum`placeholders`({
  ClassNameIsRequired: "A class name is required.",
  UnexpectedSpace: "Unexpected space in placeholder."
});
var placeholders = superClass => class PlaceholdersParserMixin extends superClass {
  parsePlaceholder(expectedNode) {
    if (this.match(144)) {
      const node = this.startNode();
      this.next();
      this.assertNoSpace();
      node.name = super.parseIdentifier(true);
      this.assertNoSpace();
      this.expect(144);
      return this.finishPlaceholder(node, expectedNode);
    }
  }
  finishPlaceholder(node, expectedNode) {
    const isFinished = !!(node.expectedNode && node.type === "Placeholder");
    node.expectedNode = expectedNode;
    return isFinished ? node : this.finishNode(node, "Placeholder");
  }
  getTokenFromCode(code) {
    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {
      this.finishOp(144, 2);
    } else {
      super.getTokenFromCode(code);
    }
  }
  parseExprAtom(refExpressionErrors) {
    return this.parsePlaceholder("Expression") || super.parseExprAtom(refExpressionErrors);
  }
  parseIdentifier(liberal) {
    return this.parsePlaceholder("Identifier") || super.parseIdentifier(liberal);
  }
  checkReservedWord(word, startLoc, checkKeywords, isBinding) {
    if (word !== undefined) {
      super.checkReservedWord(word, startLoc, checkKeywords, isBinding);
    }
  }
  parseBindingAtom() {
    return this.parsePlaceholder("Pattern") || super.parseBindingAtom();
  }
  isValidLVal(type, isParenthesized, binding) {
    return type === "Placeholder" || super.isValidLVal(type, isParenthesized, binding);
  }
  toAssignable(node, isLHS) {
    if (node && node.type === "Placeholder" && node.expectedNode === "Expression") {
      node.expectedNode = "Pattern";
    } else {
      super.toAssignable(node, isLHS);
    }
  }
  chStartsBindingIdentifier(ch, pos) {
    if (super.chStartsBindingIdentifier(ch, pos)) {
      return true;
    }
    const nextToken = this.lookahead();
    if (nextToken.type === 144) {
      return true;
    }
    return false;
  }
  verifyBreakContinue(node, isBreak) {
    if (node.label && node.label.type === "Placeholder") return;
    super.verifyBreakContinue(node, isBreak);
  }
  parseExpressionStatement(node, expr) {
    var _expr$extra;
    if (expr.type !== "Placeholder" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {
      return super.parseExpressionStatement(node, expr);
    }
    if (this.match(14)) {
      const stmt = node;
      stmt.label = this.finishPlaceholder(expr, "Identifier");
      this.next();
      stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration();
      return this.finishNode(stmt, "LabeledStatement");
    }
    this.semicolon();
    node.name = expr.name;
    return this.finishPlaceholder(node, "Statement");
  }
  parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse) {
    return this.parsePlaceholder("BlockStatement") || super.parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse);
  }
  parseFunctionId(requireId) {
    return this.parsePlaceholder("Identifier") || super.parseFunctionId(requireId);
  }
  parseClass(node, isStatement, optionalId) {
    const type = isStatement ? "ClassDeclaration" : "ClassExpression";
    this.next();
    const oldStrict = this.state.strict;
    const placeholder = this.parsePlaceholder("Identifier");
    if (placeholder) {
      if (this.match(81) || this.match(144) || this.match(5)) {
        node.id = placeholder;
      } else if (optionalId || !isStatement) {
        node.id = null;
        node.body = this.finishPlaceholder(placeholder, "ClassBody");
        return this.finishNode(node, type);
      } else {
        throw this.raise(PlaceholderErrors.ClassNameIsRequired, {
          at: this.state.startLoc
        });
      }
    } else {
      this.parseClassId(node, isStatement, optionalId);
    }
    super.parseClassSuper(node);
    node.body = this.parsePlaceholder("ClassBody") || super.parseClassBody(!!node.superClass, oldStrict);
    return this.finishNode(node, type);
  }
  parseExport(node, decorators) {
    const placeholder = this.parsePlaceholder("Identifier");
    if (!placeholder) return super.parseExport(node, decorators);
    if (!this.isContextual(98) && !this.match(12)) {
      node.specifiers = [];
      node.source = null;
      node.declaration = this.finishPlaceholder(placeholder, "Declaration");
      return this.finishNode(node, "ExportNamedDeclaration");
    }
    this.expectPlugin("exportDefaultFrom");
    const specifier = this.startNode();
    specifier.exported = placeholder;
    node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
    return super.parseExport(node, decorators);
  }
  isExportDefaultSpecifier() {
    if (this.match(65)) {
      const next = this.nextTokenStart();
      if (this.isUnparsedContextual(next, "from")) {
        if (this.input.startsWith(tokenLabelName(144), this.nextTokenStartSince(next + 4))) {
          return true;
        }
      }
    }
    return super.isExportDefaultSpecifier();
  }
  maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {
    var _specifiers;
    if ((_specifiers = node.specifiers) != null && _specifiers.length) {
      return true;
    }
    return super.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier);
  }
  checkExport(node) {
    const {
      specifiers
    } = node;
    if (specifiers != null && specifiers.length) {
      node.specifiers = specifiers.filter(node => node.exported.type === "Placeholder");
    }
    super.checkExport(node);
    node.specifiers = specifiers;
  }
  parseImport(node) {
    const placeholder = this.parsePlaceholder("Identifier");
    if (!placeholder) return super.parseImport(node);
    node.specifiers = [];
    if (!this.isContextual(98) && !this.match(12)) {
      node.source = this.finishPlaceholder(placeholder, "StringLiteral");
      this.semicolon();
      return this.finishNode(node, "ImportDeclaration");
    }
    const specifier = this.startNodeAtNode(placeholder);
    specifier.local = placeholder;
    node.specifiers.push(this.finishNode(specifier, "ImportDefaultSpecifier"));
    if (this.eat(12)) {
      const hasStarImport = this.maybeParseStarImportSpecifier(node);
      if (!hasStarImport) this.parseNamedImportSpecifiers(node);
    }
    this.expectContextual(98);
    node.source = this.parseImportSource();
    this.semicolon();
    return this.finishNode(node, "ImportDeclaration");
  }
  parseImportSource() {
    return this.parsePlaceholder("StringLiteral") || super.parseImportSource();
  }
  assertNoSpace() {
    if (this.state.start > this.state.lastTokEndLoc.index) {
      this.raise(PlaceholderErrors.UnexpectedSpace, {
        at: this.state.lastTokEndLoc
      });
    }
  }
};
var v8intrinsic = superClass => class V8IntrinsicMixin extends superClass {
  parseV8Intrinsic() {
    if (this.match(54)) {
      const v8IntrinsicStartLoc = this.state.startLoc;
      const node = this.startNode();
      this.next();
      if (tokenIsIdentifier(this.state.type)) {
        const name = this.parseIdentifierName();
        const identifier = this.createIdentifier(node, name);
        identifier.type = "V8IntrinsicIdentifier";
        if (this.match(10)) {
          return identifier;
        }
      }
      this.unexpected(v8IntrinsicStartLoc);
    }
  }
  parseExprAtom(refExpressionErrors) {
    return this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors);
  }
};
function hasPlugin(plugins, expectedConfig) {
  const [expectedName, expectedOptions] = typeof expectedConfig === "string" ? [expectedConfig, {}] : expectedConfig;
  const expectedKeys = Object.keys(expectedOptions);
  const expectedOptionsIsEmpty = expectedKeys.length === 0;
  return plugins.some(p => {
    if (typeof p === "string") {
      return expectedOptionsIsEmpty && p === expectedName;
    } else {
      const [pluginName, pluginOptions] = p;
      if (pluginName !== expectedName) {
        return false;
      }
      for (const key of expectedKeys) {
        if (pluginOptions[key] !== expectedOptions[key]) {
          return false;
        }
      }
      return true;
    }
  });
}
function getPluginOption(plugins, name, option) {
  const plugin = plugins.find(plugin => {
    if (Array.isArray(plugin)) {
      return plugin[0] === name;
    } else {
      return plugin === name;
    }
  });
  if (plugin && Array.isArray(plugin) && plugin.length > 1) {
    return plugin[1][option];
  }
  return null;
}
const PIPELINE_PROPOSALS = ["minimal", "fsharp", "hack", "smart"];
const TOPIC_TOKENS = ["^^", "@@", "^", "%", "#"];
const RECORD_AND_TUPLE_SYNTAX_TYPES = ["hash", "bar"];
function validatePlugins(plugins) {
  if (hasPlugin(plugins, "decorators")) {
    if (hasPlugin(plugins, "decorators-legacy")) {
      throw new Error("Cannot use the decorators and decorators-legacy plugin together");
    }
    const decoratorsBeforeExport = getPluginOption(plugins, "decorators", "decoratorsBeforeExport");
    if (decoratorsBeforeExport != null && typeof decoratorsBeforeExport !== "boolean") {
      throw new Error("'decoratorsBeforeExport' must be a boolean, if specified.");
    }
    const allowCallParenthesized = getPluginOption(plugins, "decorators", "allowCallParenthesized");
    if (allowCallParenthesized != null && typeof allowCallParenthesized !== "boolean") {
      throw new Error("'allowCallParenthesized' must be a boolean.");
    }
  }
  if (hasPlugin(plugins, "flow") && hasPlugin(plugins, "typescript")) {
    throw new Error("Cannot combine flow and typescript plugins.");
  }
  if (hasPlugin(plugins, "placeholders") && hasPlugin(plugins, "v8intrinsic")) {
    throw new Error("Cannot combine placeholders and v8intrinsic plugins.");
  }
  if (hasPlugin(plugins, "pipelineOperator")) {
    const proposal = getPluginOption(plugins, "pipelineOperator", "proposal");
    if (!PIPELINE_PROPOSALS.includes(proposal)) {
      const proposalList = PIPELINE_PROPOSALS.map(p => `"${p}"`).join(", ");
      throw new Error(`"pipelineOperator" requires "proposal" option whose value must be one of: ${proposalList}.`);
    }
    const tupleSyntaxIsHash = hasPlugin(plugins, ["recordAndTuple", {
      syntaxType: "hash"
    }]);
    if (proposal === "hack") {
      if (hasPlugin(plugins, "placeholders")) {
        throw new Error("Cannot combine placeholders plugin and Hack-style pipes.");
      }
      if (hasPlugin(plugins, "v8intrinsic")) {
        throw new Error("Cannot combine v8intrinsic plugin and Hack-style pipes.");
      }
      const topicToken = getPluginOption(plugins, "pipelineOperator", "topicToken");
      if (!TOPIC_TOKENS.includes(topicToken)) {
        const tokenList = TOPIC_TOKENS.map(t => `"${t}"`).join(", ");
        throw new Error(`"pipelineOperator" in "proposal": "hack" mode also requires a "topicToken" option whose value must be one of: ${tokenList}.`);
      }
      if (topicToken === "#" && tupleSyntaxIsHash) {
        throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "hack", topicToken: "#" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
      }
    } else if (proposal === "smart" && tupleSyntaxIsHash) {
      throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "smart" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
    }
  }
  if (hasPlugin(plugins, "moduleAttributes")) {
    {
      if (hasPlugin(plugins, "importAssertions") || hasPlugin(plugins, "importAttributes")) {
        throw new Error("Cannot combine importAssertions, importAttributes and moduleAttributes plugins.");
      }
      const moduleAttributesVersionPluginOption = getPluginOption(plugins, "moduleAttributes", "version");
      if (moduleAttributesVersionPluginOption !== "may-2020") {
        throw new Error("The 'moduleAttributes' plugin requires a 'version' option," + " representing the last proposal update. Currently, the" + " only supported value is 'may-2020'.");
      }
    }
  }
  if (hasPlugin(plugins, "importAssertions") && hasPlugin(plugins, "importAttributes")) {
    throw new Error("Cannot combine importAssertions and importAttributes plugins.");
  }
  if (hasPlugin(plugins, "recordAndTuple") && getPluginOption(plugins, "recordAndTuple", "syntaxType") != null && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, "recordAndTuple", "syntaxType"))) {
    throw new Error("The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: " + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(", "));
  }
  if (hasPlugin(plugins, "asyncDoExpressions") && !hasPlugin(plugins, "doExpressions")) {
    const error = new Error("'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.");
    error.missingPlugins = "doExpressions";
    throw error;
  }
  if (hasPlugin(plugins, "optionalChainingAssign") && getPluginOption(plugins, "optionalChainingAssign", "version") !== "2023-07") {
    throw new Error("The 'optionalChainingAssign' plugin requires a 'version' option," + " representing the last proposal update. Currently, the" + " only supported value is '2023-07'.");
  }
}
const mixinPlugins = {
  estree,
  jsx,
  flow,
  typescript,
  v8intrinsic,
  placeholders
};
const mixinPluginNames = Object.keys(mixinPlugins);
const defaultOptions = {
  sourceType: "script",
  sourceFilename: undefined,
  startColumn: 0,
  startLine: 1,
  allowAwaitOutsideFunction: false,
  allowReturnOutsideFunction: false,
  allowNewTargetOutsideFunction: false,
  allowImportExportEverywhere: false,
  allowSuperOutsideMethod: false,
  allowUndeclaredExports: false,
  plugins: [],
  strictMode: null,
  ranges: false,
  tokens: false,
  createImportExpressions: false,
  createParenthesizedExpressions: false,
  errorRecovery: false,
  attachComment: true,
  annexB: true
};
function getOptions(opts) {
  if (opts == null) {
    return Object.assign({}, defaultOptions);
  }
  if (opts.annexB != null && opts.annexB !== false) {
    throw new Error("The `annexB` option can only be set to `false`.");
  }
  const options = {};
  for (const key of Object.keys(defaultOptions)) {
    var _opts$key;
    options[key] = (_opts$key = opts[key]) != null ? _opts$key : defaultOptions[key];
  }
  return options;
}
class ExpressionParser extends LValParser {
  checkProto(prop, isRecord, protoRef, refExpressionErrors) {
    if (prop.type === "SpreadElement" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {
      return;
    }
    const key = prop.key;
    const name = key.type === "Identifier" ? key.name : key.value;
    if (name === "__proto__") {
      if (isRecord) {
        this.raise(Errors.RecordNoProto, {
          at: key
        });
        return;
      }
      if (protoRef.used) {
        if (refExpressionErrors) {
          if (refExpressionErrors.doubleProtoLoc === null) {
            refExpressionErrors.doubleProtoLoc = key.loc.start;
          }
        } else {
          this.raise(Errors.DuplicateProto, {
            at: key
          });
        }
      }
      protoRef.used = true;
    }
  }
  shouldExitDescending(expr, potentialArrowAt) {
    return expr.type === "ArrowFunctionExpression" && expr.start === potentialArrowAt;
  }
  getExpression() {
    this.enterInitialScopes();
    this.nextToken();
    const expr = this.parseExpression();
    if (!this.match(139)) {
      this.unexpected();
    }
    this.finalizeRemainingComments();
    expr.comments = this.state.comments;
    expr.errors = this.state.errors;
    if (this.options.tokens) {
      expr.tokens = this.tokens;
    }
    return expr;
  }
  parseExpression(disallowIn, refExpressionErrors) {
    if (disallowIn) {
      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));
    }
    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));
  }
  parseExpressionBase(refExpressionErrors) {
    const startLoc = this.state.startLoc;
    const expr = this.parseMaybeAssign(refExpressionErrors);
    if (this.match(12)) {
      const node = this.startNodeAt(startLoc);
      node.expressions = [expr];
      while (this.eat(12)) {
        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));
      }
      this.toReferencedList(node.expressions);
      return this.finishNode(node, "SequenceExpression");
    }
    return expr;
  }
  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {
    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
  }
  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {
    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
  }
  setOptionalParametersError(refExpressionErrors, resultError) {
    var _resultError$loc;
    refExpressionErrors.optionalParametersLoc = (_resultError$loc = resultError == null ? void 0 : resultError.loc) != null ? _resultError$loc : this.state.startLoc;
  }
  parseMaybeAssign(refExpressionErrors, afterLeftParse) {
    const startLoc = this.state.startLoc;
    if (this.isContextual(108)) {
      if (this.prodParam.hasYield) {
        let left = this.parseYield();
        if (afterLeftParse) {
          left = afterLeftParse.call(this, left, startLoc);
        }
        return left;
      }
    }
    let ownExpressionErrors;
    if (refExpressionErrors) {
      ownExpressionErrors = false;
    } else {
      refExpressionErrors = new ExpressionErrors();
      ownExpressionErrors = true;
    }
    const {
      type
    } = this.state;
    if (type === 10 || tokenIsIdentifier(type)) {
      this.state.potentialArrowAt = this.state.start;
    }
    let left = this.parseMaybeConditional(refExpressionErrors);
    if (afterLeftParse) {
      left = afterLeftParse.call(this, left, startLoc);
    }
    if (tokenIsAssignment(this.state.type)) {
      const node = this.startNodeAt(startLoc);
      const operator = this.state.value;
      node.operator = operator;
      if (this.match(29)) {
        this.toAssignable(left, true);
        node.left = left;
        const startIndex = startLoc.index;
        if (refExpressionErrors.doubleProtoLoc != null && refExpressionErrors.doubleProtoLoc.index >= startIndex) {
          refExpressionErrors.doubleProtoLoc = null;
        }
        if (refExpressionErrors.shorthandAssignLoc != null && refExpressionErrors.shorthandAssignLoc.index >= startIndex) {
          refExpressionErrors.shorthandAssignLoc = null;
        }
        if (refExpressionErrors.privateKeyLoc != null && refExpressionErrors.privateKeyLoc.index >= startIndex) {
          this.checkDestructuringPrivate(refExpressionErrors);
          refExpressionErrors.privateKeyLoc = null;
        }
      } else {
        node.left = left;
      }
      this.next();
      node.right = this.parseMaybeAssign();
      this.checkLVal(left, {
        in: this.finishNode(node, "AssignmentExpression")
      });
      return node;
    } else if (ownExpressionErrors) {
      this.checkExpressionErrors(refExpressionErrors, true);
    }
    return left;
  }
  parseMaybeConditional(refExpressionErrors) {
    const startLoc = this.state.startLoc;
    const potentialArrowAt = this.state.potentialArrowAt;
    const expr = this.parseExprOps(refExpressionErrors);
    if (this.shouldExitDescending(expr, potentialArrowAt)) {
      return expr;
    }
    return this.parseConditional(expr, startLoc, refExpressionErrors);
  }
  parseConditional(expr, startLoc, refExpressionErrors) {
    if (this.eat(17)) {
      const node = this.startNodeAt(startLoc);
      node.test = expr;
      node.consequent = this.parseMaybeAssignAllowIn();
      this.expect(14);
      node.alternate = this.parseMaybeAssign();
      return this.finishNode(node, "ConditionalExpression");
    }
    return expr;
  }
  parseMaybeUnaryOrPrivate(refExpressionErrors) {
    return this.match(138) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);
  }
  parseExprOps(refExpressionErrors) {
    const startLoc = this.state.startLoc;
    const potentialArrowAt = this.state.potentialArrowAt;
    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);
    if (this.shouldExitDescending(expr, potentialArrowAt)) {
      return expr;
    }
    return this.parseExprOp(expr, startLoc, -1);
  }
  parseExprOp(left, leftStartLoc, minPrec) {
    if (this.isPrivateName(left)) {
      const value = this.getPrivateNameSV(left);
      if (minPrec >= tokenOperatorPrecedence(58) || !this.prodParam.hasIn || !this.match(58)) {
        this.raise(Errors.PrivateInExpectedIn, {
          at: left,
          identifierName: value
        });
      }
      this.classScope.usePrivateName(value, left.loc.start);
    }
    const op = this.state.type;
    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(58))) {
      let prec = tokenOperatorPrecedence(op);
      if (prec > minPrec) {
        if (op === 39) {
          this.expectPlugin("pipelineOperator");
          if (this.state.inFSharpPipelineDirectBody) {
            return left;
          }
          this.checkPipelineAtInfixOperator(left, leftStartLoc);
        }
        const node = this.startNodeAt(leftStartLoc);
        node.left = left;
        node.operator = this.state.value;
        const logical = op === 41 || op === 42;
        const coalesce = op === 40;
        if (coalesce) {
          prec = tokenOperatorPrecedence(42);
        }
        this.next();
        if (op === 39 && this.hasPlugin(["pipelineOperator", {
          proposal: "minimal"
        }])) {
          if (this.state.type === 96 && this.prodParam.hasAwait) {
            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {
              at: this.state.startLoc
            });
          }
        }
        node.right = this.parseExprOpRightExpr(op, prec);
        const finishedNode = this.finishNode(node, logical || coalesce ? "LogicalExpression" : "BinaryExpression");
        const nextOp = this.state.type;
        if (coalesce && (nextOp === 41 || nextOp === 42) || logical && nextOp === 40) {
          throw this.raise(Errors.MixingCoalesceWithLogical, {
            at: this.state.startLoc
          });
        }
        return this.parseExprOp(finishedNode, leftStartLoc, minPrec);
      }
    }
    return left;
  }
  parseExprOpRightExpr(op, prec) {
    const startLoc = this.state.startLoc;
    switch (op) {
      case 39:
        switch (this.getPluginOption("pipelineOperator", "proposal")) {
          case "hack":
            return this.withTopicBindingContext(() => {
              return this.parseHackPipeBody();
            });
          case "smart":
            return this.withTopicBindingContext(() => {
              if (this.prodParam.hasYield && this.isContextual(108)) {
                throw this.raise(Errors.PipeBodyIsTighter, {
                  at: this.state.startLoc
                });
              }
              return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startLoc);
            });
          case "fsharp":
            return this.withSoloAwaitPermittingContext(() => {
              return this.parseFSharpPipelineBody(prec);
            });
        }
      default:
        return this.parseExprOpBaseRightExpr(op, prec);
    }
  }
  parseExprOpBaseRightExpr(op, prec) {
    const startLoc = this.state.startLoc;
    return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);
  }
  parseHackPipeBody() {
    var _body$extra;
    const {
      startLoc
    } = this.state;
    const body = this.parseMaybeAssign();
    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(body.type);
    if (requiredParentheses && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {
      this.raise(Errors.PipeUnparenthesizedBody, {
        at: startLoc,
        type: body.type
      });
    }
    if (!this.topicReferenceWasUsedInCurrentContext()) {
      this.raise(Errors.PipeTopicUnused, {
        at: startLoc
      });
    }
    return body;
  }
  checkExponentialAfterUnary(node) {
    if (this.match(57)) {
      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {
        at: node.argument
      });
    }
  }
  parseMaybeUnary(refExpressionErrors, sawUnary) {
    const startLoc = this.state.startLoc;
    const isAwait = this.isContextual(96);
    if (isAwait && this.isAwaitAllowed()) {
      this.next();
      const expr = this.parseAwait(startLoc);
      if (!sawUnary) this.checkExponentialAfterUnary(expr);
      return expr;
    }
    const update = this.match(34);
    const node = this.startNode();
    if (tokenIsPrefix(this.state.type)) {
      node.operator = this.state.value;
      node.prefix = true;
      if (this.match(72)) {
        this.expectPlugin("throwExpressions");
      }
      const isDelete = this.match(89);
      this.next();
      node.argument = this.parseMaybeUnary(null, true);
      this.checkExpressionErrors(refExpressionErrors, true);
      if (this.state.strict && isDelete) {
        const arg = node.argument;
        if (arg.type === "Identifier") {
          this.raise(Errors.StrictDelete, {
            at: node
          });
        } else if (this.hasPropertyAsPrivateName(arg)) {
          this.raise(Errors.DeletePrivateField, {
            at: node
          });
        }
      }
      if (!update) {
        if (!sawUnary) {
          this.checkExponentialAfterUnary(node);
        }
        return this.finishNode(node, "UnaryExpression");
      }
    }
    const expr = this.parseUpdate(node, update, refExpressionErrors);
    if (isAwait) {
      const {
        type
      } = this.state;
      const startsExpr = this.hasPlugin("v8intrinsic") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(54);
      if (startsExpr && !this.isAmbiguousAwait()) {
        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, {
          at: startLoc
        });
        return this.parseAwait(startLoc);
      }
    }
    return expr;
  }
  parseUpdate(node, update, refExpressionErrors) {
    if (update) {
      const updateExpressionNode = node;
      this.checkLVal(updateExpressionNode.argument, {
        in: this.finishNode(updateExpressionNode, "UpdateExpression")
      });
      return node;
    }
    const startLoc = this.state.startLoc;
    let expr = this.parseExprSubscripts(refExpressionErrors);
    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;
    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {
      const node = this.startNodeAt(startLoc);
      node.operator = this.state.value;
      node.prefix = false;
      node.argument = expr;
      this.next();
      this.checkLVal(expr, {
        in: expr = this.finishNode(node, "UpdateExpression")
      });
    }
    return expr;
  }
  parseExprSubscripts(refExpressionErrors) {
    const startLoc = this.state.startLoc;
    const potentialArrowAt = this.state.potentialArrowAt;
    const expr = this.parseExprAtom(refExpressionErrors);
    if (this.shouldExitDescending(expr, potentialArrowAt)) {
      return expr;
    }
    return this.parseSubscripts(expr, startLoc);
  }
  parseSubscripts(base, startLoc, noCalls) {
    const state = {
      optionalChainMember: false,
      maybeAsyncArrow: this.atPossibleAsyncArrow(base),
      stop: false
    };
    do {
      base = this.parseSubscript(base, startLoc, noCalls, state);
      state.maybeAsyncArrow = false;
    } while (!state.stop);
    return base;
  }
  parseSubscript(base, startLoc, noCalls, state) {
    const {
      type
    } = this.state;
    if (!noCalls && type === 15) {
      return this.parseBind(base, startLoc, noCalls, state);
    } else if (tokenIsTemplate(type)) {
      return this.parseTaggedTemplateExpression(base, startLoc, state);
    }
    let optional = false;
    if (type === 18) {
      if (noCalls) {
        this.raise(Errors.OptionalChainingNoNew, {
          at: this.state.startLoc
        });
        if (this.lookaheadCharCode() === 40) {
          state.stop = true;
          return base;
        }
      }
      state.optionalChainMember = optional = true;
      this.next();
    }
    if (!noCalls && this.match(10)) {
      return this.parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional);
    } else {
      const computed = this.eat(0);
      if (computed || optional || this.eat(16)) {
        return this.parseMember(base, startLoc, state, computed, optional);
      } else {
        state.stop = true;
        return base;
      }
    }
  }
  parseMember(base, startLoc, state, computed, optional) {
    const node = this.startNodeAt(startLoc);
    node.object = base;
    node.computed = computed;
    if (computed) {
      node.property = this.parseExpression();
      this.expect(3);
    } else if (this.match(138)) {
      if (base.type === "Super") {
        this.raise(Errors.SuperPrivateField, {
          at: startLoc
        });
      }
      this.classScope.usePrivateName(this.state.value, this.state.startLoc);
      node.property = this.parsePrivateName();
    } else {
      node.property = this.parseIdentifier(true);
    }
    if (state.optionalChainMember) {
      node.optional = optional;
      return this.finishNode(node, "OptionalMemberExpression");
    } else {
      return this.finishNode(node, "MemberExpression");
    }
  }
  parseBind(base, startLoc, noCalls, state) {
    const node = this.startNodeAt(startLoc);
    node.object = base;
    this.next();
    node.callee = this.parseNoCallExpr();
    state.stop = true;
    return this.parseSubscripts(this.finishNode(node, "BindExpression"), startLoc, noCalls);
  }
  parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional) {
    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
    let refExpressionErrors = null;
    this.state.maybeInArrowParameters = true;
    this.next();
    const node = this.startNodeAt(startLoc);
    node.callee = base;
    const {
      maybeAsyncArrow,
      optionalChainMember
    } = state;
    if (maybeAsyncArrow) {
      this.expressionScope.enter(newAsyncArrowScope());
      refExpressionErrors = new ExpressionErrors();
    }
    if (optionalChainMember) {
      node.optional = optional;
    }
    if (optional) {
      node.arguments = this.parseCallExpressionArguments(11);
    } else {
      node.arguments = this.parseCallExpressionArguments(11, base.type === "Import", base.type !== "Super", node, refExpressionErrors);
    }
    let finishedNode = this.finishCallExpression(node, optionalChainMember);
    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {
      state.stop = true;
      this.checkDestructuringPrivate(refExpressionErrors);
      this.expressionScope.validateAsPattern();
      this.expressionScope.exit();
      finishedNode = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startLoc), finishedNode);
    } else {
      if (maybeAsyncArrow) {
        this.checkExpressionErrors(refExpressionErrors, true);
        this.expressionScope.exit();
      }
      this.toReferencedArguments(finishedNode);
    }
    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
    return finishedNode;
  }
  toReferencedArguments(node, isParenthesizedExpr) {
    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);
  }
  parseTaggedTemplateExpression(base, startLoc, state) {
    const node = this.startNodeAt(startLoc);
    node.tag = base;
    node.quasi = this.parseTemplate(true);
    if (state.optionalChainMember) {
      this.raise(Errors.OptionalChainingNoTemplate, {
        at: startLoc
      });
    }
    return this.finishNode(node, "TaggedTemplateExpression");
  }
  atPossibleAsyncArrow(base) {
    return base.type === "Identifier" && base.name === "async" && this.state.lastTokEndLoc.index === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;
  }
  expectImportAttributesPlugin() {
    if (!this.hasPlugin("importAssertions")) {
      this.expectPlugin("importAttributes");
    }
  }
  finishCallExpression(node, optional) {
    if (node.callee.type === "Import") {
      if (node.arguments.length === 2) {
        {
          if (!this.hasPlugin("moduleAttributes")) {
            this.expectImportAttributesPlugin();
          }
        }
      }
      if (node.arguments.length === 0 || node.arguments.length > 2) {
        this.raise(Errors.ImportCallArity, {
          at: node,
          maxArgumentCount: this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions") || this.hasPlugin("moduleAttributes") ? 2 : 1
        });
      } else {
        for (const arg of node.arguments) {
          if (arg.type === "SpreadElement") {
            this.raise(Errors.ImportCallSpreadArgument, {
              at: arg
            });
          }
        }
      }
    }
    return this.finishNode(node, optional ? "OptionalCallExpression" : "CallExpression");
  }
  parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {
    const elts = [];
    let first = true;
    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
    this.state.inFSharpPipelineDirectBody = false;
    while (!this.eat(close)) {
      if (first) {
        first = false;
      } else {
        this.expect(12);
        if (this.match(close)) {
          if (dynamicImport && !this.hasPlugin("importAttributes") && !this.hasPlugin("importAssertions") && !this.hasPlugin("moduleAttributes")) {
            this.raise(Errors.ImportCallArgumentTrailingComma, {
              at: this.state.lastTokStartLoc
            });
          }
          if (nodeForExtra) {
            this.addTrailingCommaExtraToNode(nodeForExtra);
          }
          this.next();
          break;
        }
      }
      elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));
    }
    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
    return elts;
  }
  shouldParseAsyncArrow() {
    return this.match(19) && !this.canInsertSemicolon();
  }
  parseAsyncArrowFromCallExpression(node, call) {
    var _call$extra;
    this.resetPreviousNodeTrailingComments(call);
    this.expect(19);
    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingCommaLoc);
    if (call.innerComments) {
      setInnerComments(node, call.innerComments);
    }
    if (call.callee.trailingComments) {
      setInnerComments(node, call.callee.trailingComments);
    }
    return node;
  }
  parseNoCallExpr() {
    const startLoc = this.state.startLoc;
    return this.parseSubscripts(this.parseExprAtom(), startLoc, true);
  }
  parseExprAtom(refExpressionErrors) {
    let node;
    let decorators = null;
    const {
      type
    } = this.state;
    switch (type) {
      case 79:
        return this.parseSuper();
      case 83:
        node = this.startNode();
        this.next();
        if (this.match(16)) {
          return this.parseImportMetaProperty(node);
        }
        if (this.match(10)) {
          if (this.options.createImportExpressions) {
            return this.parseImportCall(node);
          } else {
            return this.finishNode(node, "Import");
          }
        } else {
          this.raise(Errors.UnsupportedImport, {
            at: this.state.lastTokStartLoc
          });
          return this.finishNode(node, "Import");
        }
      case 78:
        node = this.startNode();
        this.next();
        return this.finishNode(node, "ThisExpression");
      case 90:
        {
          return this.parseDo(this.startNode(), false);
        }
      case 56:
      case 31:
        {
          this.readRegexp();
          return this.parseRegExpLiteral(this.state.value);
        }
      case 134:
        return this.parseNumericLiteral(this.state.value);
      case 135:
        return this.parseBigIntLiteral(this.state.value);
      case 136:
        return this.parseDecimalLiteral(this.state.value);
      case 133:
        return this.parseStringLiteral(this.state.value);
      case 84:
        return this.parseNullLiteral();
      case 85:
        return this.parseBooleanLiteral(true);
      case 86:
        return this.parseBooleanLiteral(false);
      case 10:
        {
          const canBeArrow = this.state.potentialArrowAt === this.state.start;
          return this.parseParenAndDistinguishExpression(canBeArrow);
        }
      case 2:
      case 1:
        {
          return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);
        }
      case 0:
        {
          return this.parseArrayLike(3, true, false, refExpressionErrors);
        }
      case 6:
      case 7:
        {
          return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);
        }
      case 5:
        {
          return this.parseObjectLike(8, false, false, refExpressionErrors);
        }
      case 68:
        return this.parseFunctionOrFunctionSent();
      case 26:
        decorators = this.parseDecorators();
      case 80:
        return this.parseClass(this.maybeTakeDecorators(decorators, this.startNode()), false);
      case 77:
        return this.parseNewOrNewTarget();
      case 25:
      case 24:
        return this.parseTemplate(false);
      case 15:
        {
          node = this.startNode();
          this.next();
          node.object = null;
          const callee = node.callee = this.parseNoCallExpr();
          if (callee.type === "MemberExpression") {
            return this.finishNode(node, "BindExpression");
          } else {
            throw this.raise(Errors.UnsupportedBind, {
              at: callee
            });
          }
        }
      case 138:
        {
          this.raise(Errors.PrivateInExpectedIn, {
            at: this.state.startLoc,
            identifierName: this.state.value
          });
          return this.parsePrivateName();
        }
      case 33:
        {
          return this.parseTopicReferenceThenEqualsSign(54, "%");
        }
      case 32:
        {
          return this.parseTopicReferenceThenEqualsSign(44, "^");
        }
      case 37:
      case 38:
        {
          return this.parseTopicReference("hack");
        }
      case 44:
      case 54:
      case 27:
        {
          const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
          if (pipeProposal) {
            return this.parseTopicReference(pipeProposal);
          }
          this.unexpected();
          break;
        }
      case 47:
        {
          const lookaheadCh = this.input.codePointAt(this.nextTokenStart());
          if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {
            this.expectOnePlugin(["jsx", "flow", "typescript"]);
          } else {
            this.unexpected();
          }
          break;
        }
      default:
        if (tokenIsIdentifier(type)) {
          if (this.isContextual(127) && this.lookaheadInLineCharCode() === 123) {
            return this.parseModuleExpression();
          }
          const canBeArrow = this.state.potentialArrowAt === this.state.start;
          const containsEsc = this.state.containsEsc;
          const id = this.parseIdentifier();
          if (!containsEsc && id.name === "async" && !this.canInsertSemicolon()) {
            const {
              type
            } = this.state;
            if (type === 68) {
              this.resetPreviousNodeTrailingComments(id);
              this.next();
              return this.parseAsyncFunctionExpression(this.startNodeAtNode(id));
            } else if (tokenIsIdentifier(type)) {
              if (this.lookaheadCharCode() === 61) {
                return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));
              } else {
                return id;
              }
            } else if (type === 90) {
              this.resetPreviousNodeTrailingComments(id);
              return this.parseDo(this.startNodeAtNode(id), true);
            }
          }
          if (canBeArrow && this.match(19) && !this.canInsertSemicolon()) {
            this.next();
            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);
          }
          return id;
        } else {
          this.unexpected();
        }
    }
  }
  parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {
    const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
    if (pipeProposal) {
      this.state.type = topicTokenType;
      this.state.value = topicTokenValue;
      this.state.pos--;
      this.state.end--;
      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);
      return this.parseTopicReference(pipeProposal);
    } else {
      this.unexpected();
    }
  }
  parseTopicReference(pipeProposal) {
    const node = this.startNode();
    const startLoc = this.state.startLoc;
    const tokenType = this.state.type;
    this.next();
    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);
  }
  finishTopicReference(node, startLoc, pipeProposal, tokenType) {
    if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) {
      const nodeType = pipeProposal === "smart" ? "PipelinePrimaryTopicReference" : "TopicReference";
      if (!this.topicReferenceIsAllowedInCurrentContext()) {
        this.raise(pipeProposal === "smart" ? Errors.PrimaryTopicNotAllowed : Errors.PipeTopicUnbound, {
          at: startLoc
        });
      }
      this.registerTopicReference();
      return this.finishNode(node, nodeType);
    } else {
      throw this.raise(Errors.PipeTopicUnconfiguredToken, {
        at: startLoc,
        token: tokenLabelName(tokenType)
      });
    }
  }
  testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {
    switch (pipeProposal) {
      case "hack":
        {
          return this.hasPlugin(["pipelineOperator", {
            topicToken: tokenLabelName(tokenType)
          }]);
        }
      case "smart":
        return tokenType === 27;
      default:
        throw this.raise(Errors.PipeTopicRequiresHackPipes, {
          at: startLoc
        });
    }
  }
  parseAsyncArrowUnaryFunction(node) {
    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));
    const params = [this.parseIdentifier()];
    this.prodParam.exit();
    if (this.hasPrecedingLineBreak()) {
      this.raise(Errors.LineTerminatorBeforeArrow, {
        at: this.state.curPosition()
      });
    }
    this.expect(19);
    return this.parseArrowExpression(node, params, true);
  }
  parseDo(node, isAsync) {
    this.expectPlugin("doExpressions");
    if (isAsync) {
      this.expectPlugin("asyncDoExpressions");
    }
    node.async = isAsync;
    this.next();
    const oldLabels = this.state.labels;
    this.state.labels = [];
    if (isAsync) {
      this.prodParam.enter(2);
      node.body = this.parseBlock();
      this.prodParam.exit();
    } else {
      node.body = this.parseBlock();
    }
    this.state.labels = oldLabels;
    return this.finishNode(node, "DoExpression");
  }
  parseSuper() {
    const node = this.startNode();
    this.next();
    if (this.match(10) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {
      this.raise(Errors.SuperNotAllowed, {
        at: node
      });
    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {
      this.raise(Errors.UnexpectedSuper, {
        at: node
      });
    }
    if (!this.match(10) && !this.match(0) && !this.match(16)) {
      this.raise(Errors.UnsupportedSuper, {
        at: node
      });
    }
    return this.finishNode(node, "Super");
  }
  parsePrivateName() {
    const node = this.startNode();
    const id = this.startNodeAt(createPositionWithColumnOffset(this.state.startLoc, 1));
    const name = this.state.value;
    this.next();
    node.id = this.createIdentifier(id, name);
    return this.finishNode(node, "PrivateName");
  }
  parseFunctionOrFunctionSent() {
    const node = this.startNode();
    this.next();
    if (this.prodParam.hasYield && this.match(16)) {
      const meta = this.createIdentifier(this.startNodeAtNode(node), "function");
      this.next();
      if (this.match(103)) {
        this.expectPlugin("functionSent");
      } else if (!this.hasPlugin("functionSent")) {
        this.unexpected();
      }
      return this.parseMetaProperty(node, meta, "sent");
    }
    return this.parseFunction(node);
  }
  parseMetaProperty(node, meta, propertyName) {
    node.meta = meta;
    const containsEsc = this.state.containsEsc;
    node.property = this.parseIdentifier(true);
    if (node.property.name !== propertyName || containsEsc) {
      this.raise(Errors.UnsupportedMetaProperty, {
        at: node.property,
        target: meta.name,
        onlyValidPropertyName: propertyName
      });
    }
    return this.finishNode(node, "MetaProperty");
  }
  parseImportMetaProperty(node) {
    const id = this.createIdentifier(this.startNodeAtNode(node), "import");
    this.next();
    if (this.isContextual(101)) {
      if (!this.inModule) {
        this.raise(Errors.ImportMetaOutsideModule, {
          at: id
        });
      }
      this.sawUnambiguousESM = true;
    } else if (this.isContextual(105) || this.isContextual(97)) {
      const isSource = this.isContextual(105);
      if (!isSource) this.unexpected();
      this.expectPlugin(isSource ? "sourcePhaseImports" : "deferredImportEvaluation");
      if (!this.options.createImportExpressions) {
        throw this.raise(Errors.DynamicImportPhaseRequiresImportExpressions, {
          at: this.state.startLoc,
          phase: this.state.value
        });
      }
      this.next();
      node.phase = isSource ? "source" : "defer";
      return this.parseImportCall(node);
    }
    return this.parseMetaProperty(node, id, "meta");
  }
  parseLiteralAtNode(value, type, node) {
    this.addExtra(node, "rawValue", value);
    this.addExtra(node, "raw", this.input.slice(node.start, this.state.end));
    node.value = value;
    this.next();
    return this.finishNode(node, type);
  }
  parseLiteral(value, type) {
    const node = this.startNode();
    return this.parseLiteralAtNode(value, type, node);
  }
  parseStringLiteral(value) {
    return this.parseLiteral(value, "StringLiteral");
  }
  parseNumericLiteral(value) {
    return this.parseLiteral(value, "NumericLiteral");
  }
  parseBigIntLiteral(value) {
    return this.parseLiteral(value, "BigIntLiteral");
  }
  parseDecimalLiteral(value) {
    return this.parseLiteral(value, "DecimalLiteral");
  }
  parseRegExpLiteral(value) {
    const node = this.parseLiteral(value.value, "RegExpLiteral");
    node.pattern = value.pattern;
    node.flags = value.flags;
    return node;
  }
  parseBooleanLiteral(value) {
    const node = this.startNode();
    node.value = value;
    this.next();
    return this.finishNode(node, "BooleanLiteral");
  }
  parseNullLiteral() {
    const node = this.startNode();
    this.next();
    return this.finishNode(node, "NullLiteral");
  }
  parseParenAndDistinguishExpression(canBeArrow) {
    const startLoc = this.state.startLoc;
    let val;
    this.next();
    this.expressionScope.enter(newArrowHeadScope());
    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
    this.state.maybeInArrowParameters = true;
    this.state.inFSharpPipelineDirectBody = false;
    const innerStartLoc = this.state.startLoc;
    const exprList = [];
    const refExpressionErrors = new ExpressionErrors();
    let first = true;
    let spreadStartLoc;
    let optionalCommaStartLoc;
    while (!this.match(11)) {
      if (first) {
        first = false;
      } else {
        this.expect(12, refExpressionErrors.optionalParametersLoc === null ? null : refExpressionErrors.optionalParametersLoc);
        if (this.match(11)) {
          optionalCommaStartLoc = this.state.startLoc;
          break;
        }
      }
      if (this.match(21)) {
        const spreadNodeStartLoc = this.state.startLoc;
        spreadStartLoc = this.state.startLoc;
        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc));
        if (!this.checkCommaAfterRest(41)) {
          break;
        }
      } else {
        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));
      }
    }
    const innerEndLoc = this.state.lastTokEndLoc;
    this.expect(11);
    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
    let arrowNode = this.startNodeAt(startLoc);
    if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {
      this.checkDestructuringPrivate(refExpressionErrors);
      this.expressionScope.validateAsPattern();
      this.expressionScope.exit();
      this.parseArrowExpression(arrowNode, exprList, false);
      return arrowNode;
    }
    this.expressionScope.exit();
    if (!exprList.length) {
      this.unexpected(this.state.lastTokStartLoc);
    }
    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);
    if (spreadStartLoc) this.unexpected(spreadStartLoc);
    this.checkExpressionErrors(refExpressionErrors, true);
    this.toReferencedListDeep(exprList, true);
    if (exprList.length > 1) {
      val = this.startNodeAt(innerStartLoc);
      val.expressions = exprList;
      this.finishNode(val, "SequenceExpression");
      this.resetEndLocation(val, innerEndLoc);
    } else {
      val = exprList[0];
    }
    return this.wrapParenthesis(startLoc, val);
  }
  wrapParenthesis(startLoc, expression) {
    if (!this.options.createParenthesizedExpressions) {
      this.addExtra(expression, "parenthesized", true);
      this.addExtra(expression, "parenStart", startLoc.index);
      this.takeSurroundingComments(expression, startLoc.index, this.state.lastTokEndLoc.index);
      return expression;
    }
    const parenExpression = this.startNodeAt(startLoc);
    parenExpression.expression = expression;
    return this.finishNode(parenExpression, "ParenthesizedExpression");
  }
  shouldParseArrow(params) {
    return !this.canInsertSemicolon();
  }
  parseArrow(node) {
    if (this.eat(19)) {
      return node;
    }
  }
  parseParenItem(node, startLoc) {
    return node;
  }
  parseNewOrNewTarget() {
    const node = this.startNode();
    this.next();
    if (this.match(16)) {
      const meta = this.createIdentifier(this.startNodeAtNode(node), "new");
      this.next();
      const metaProp = this.parseMetaProperty(node, meta, "target");
      if (!this.scope.inNonArrowFunction && !this.scope.inClass && !this.options.allowNewTargetOutsideFunction) {
        this.raise(Errors.UnexpectedNewTarget, {
          at: metaProp
        });
      }
      return metaProp;
    }
    return this.parseNew(node);
  }
  parseNew(node) {
    this.parseNewCallee(node);
    if (this.eat(10)) {
      const args = this.parseExprList(11);
      this.toReferencedList(args);
      node.arguments = args;
    } else {
      node.arguments = [];
    }
    return this.finishNode(node, "NewExpression");
  }
  parseNewCallee(node) {
    const isImport = this.match(83);
    const callee = this.parseNoCallExpr();
    node.callee = callee;
    if (isImport && (callee.type === "Import" || callee.type === "ImportExpression")) {
      this.raise(Errors.ImportCallNotNewExpression, {
        at: callee
      });
    }
  }
  parseTemplateElement(isTagged) {
    const {
      start,
      startLoc,
      end,
      value
    } = this.state;
    const elemStart = start + 1;
    const elem = this.startNodeAt(createPositionWithColumnOffset(startLoc, 1));
    if (value === null) {
      if (!isTagged) {
        this.raise(Errors.InvalidEscapeSequenceTemplate, {
          at: createPositionWithColumnOffset(this.state.firstInvalidTemplateEscapePos, 1)
        });
      }
    }
    const isTail = this.match(24);
    const endOffset = isTail ? -1 : -2;
    const elemEnd = end + endOffset;
    elem.value = {
      raw: this.input.slice(elemStart, elemEnd).replace(/\r\n?/g, "\n"),
      cooked: value === null ? null : value.slice(1, endOffset)
    };
    elem.tail = isTail;
    this.next();
    const finishedNode = this.finishNode(elem, "TemplateElement");
    this.resetEndLocation(finishedNode, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset));
    return finishedNode;
  }
  parseTemplate(isTagged) {
    const node = this.startNode();
    node.expressions = [];
    let curElt = this.parseTemplateElement(isTagged);
    node.quasis = [curElt];
    while (!curElt.tail) {
      node.expressions.push(this.parseTemplateSubstitution());
      this.readTemplateContinuation();
      node.quasis.push(curElt = this.parseTemplateElement(isTagged));
    }
    return this.finishNode(node, "TemplateLiteral");
  }
  parseTemplateSubstitution() {
    return this.parseExpression();
  }
  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {
    if (isRecord) {
      this.expectPlugin("recordAndTuple");
    }
    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
    this.state.inFSharpPipelineDirectBody = false;
    const propHash = Object.create(null);
    let first = true;
    const node = this.startNode();
    node.properties = [];
    this.next();
    while (!this.match(close)) {
      if (first) {
        first = false;
      } else {
        this.expect(12);
        if (this.match(close)) {
          this.addTrailingCommaExtraToNode(node);
          break;
        }
      }
      let prop;
      if (isPattern) {
        prop = this.parseBindingProperty();
      } else {
        prop = this.parsePropertyDefinition(refExpressionErrors);
        this.checkProto(prop, isRecord, propHash, refExpressionErrors);
      }
      if (isRecord && !this.isObjectProperty(prop) && prop.type !== "SpreadElement") {
        this.raise(Errors.InvalidRecordProperty, {
          at: prop
        });
      }
      if (prop.shorthand) {
        this.addExtra(prop, "shorthand", true);
      }
      node.properties.push(prop);
    }
    this.next();
    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
    let type = "ObjectExpression";
    if (isPattern) {
      type = "ObjectPattern";
    } else if (isRecord) {
      type = "RecordExpression";
    }
    return this.finishNode(node, type);
  }
  addTrailingCommaExtraToNode(node) {
    this.addExtra(node, "trailingComma", this.state.lastTokStart);
    this.addExtra(node, "trailingCommaLoc", this.state.lastTokStartLoc, false);
  }
  maybeAsyncOrAccessorProp(prop) {
    return !prop.computed && prop.key.type === "Identifier" && (this.isLiteralPropertyName() || this.match(0) || this.match(55));
  }
  parsePropertyDefinition(refExpressionErrors) {
    let decorators = [];
    if (this.match(26)) {
      if (this.hasPlugin("decorators")) {
        this.raise(Errors.UnsupportedPropertyDecorator, {
          at: this.state.startLoc
        });
      }
      while (this.match(26)) {
        decorators.push(this.parseDecorator());
      }
    }
    const prop = this.startNode();
    let isAsync = false;
    let isAccessor = false;
    let startLoc;
    if (this.match(21)) {
      if (decorators.length) this.unexpected();
      return this.parseSpread();
    }
    if (decorators.length) {
      prop.decorators = decorators;
      decorators = [];
    }
    prop.method = false;
    if (refExpressionErrors) {
      startLoc = this.state.startLoc;
    }
    let isGenerator = this.eat(55);
    this.parsePropertyNamePrefixOperator(prop);
    const containsEsc = this.state.containsEsc;
    const key = this.parsePropertyName(prop, refExpressionErrors);
    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {
      const keyName = key.name;
      if (keyName === "async" && !this.hasPrecedingLineBreak()) {
        isAsync = true;
        this.resetPreviousNodeTrailingComments(key);
        isGenerator = this.eat(55);
        this.parsePropertyName(prop);
      }
      if (keyName === "get" || keyName === "set") {
        isAccessor = true;
        this.resetPreviousNodeTrailingComments(key);
        prop.kind = keyName;
        if (this.match(55)) {
          isGenerator = true;
          this.raise(Errors.AccessorIsGenerator, {
            at: this.state.curPosition(),
            kind: keyName
          });
          this.next();
        }
        this.parsePropertyName(prop);
      }
    }
    return this.parseObjPropValue(prop, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);
  }
  getGetterSetterExpectedParamCount(method) {
    return method.kind === "get" ? 0 : 1;
  }
  getObjectOrClassMethodParams(method) {
    return method.params;
  }
  checkGetterSetterParams(method) {
    var _params;
    const paramCount = this.getGetterSetterExpectedParamCount(method);
    const params = this.getObjectOrClassMethodParams(method);
    if (params.length !== paramCount) {
      this.raise(method.kind === "get" ? Errors.BadGetterArity : Errors.BadSetterArity, {
        at: method
      });
    }
    if (method.kind === "set" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === "RestElement") {
      this.raise(Errors.BadSetterRestParameter, {
        at: method
      });
    }
  }
  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
    if (isAccessor) {
      const finishedProp = this.parseMethod(prop, isGenerator, false, false, false, "ObjectMethod");
      this.checkGetterSetterParams(finishedProp);
      return finishedProp;
    }
    if (isAsync || isGenerator || this.match(10)) {
      if (isPattern) this.unexpected();
      prop.kind = "method";
      prop.method = true;
      return this.parseMethod(prop, isGenerator, isAsync, false, false, "ObjectMethod");
    }
  }
  parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {
    prop.shorthand = false;
    if (this.eat(14)) {
      prop.value = isPattern ? this.parseMaybeDefault(this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);
      return this.finishNode(prop, "ObjectProperty");
    }
    if (!prop.computed && prop.key.type === "Identifier") {
      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);
      if (isPattern) {
        prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));
      } else if (this.match(29)) {
        const shorthandAssignLoc = this.state.startLoc;
        if (refExpressionErrors != null) {
          if (refExpressionErrors.shorthandAssignLoc === null) {
            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;
          }
        } else {
          this.raise(Errors.InvalidCoverInitializedName, {
            at: shorthandAssignLoc
          });
        }
        prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));
      } else {
        prop.value = cloneIdentifier(prop.key);
      }
      prop.shorthand = true;
      return this.finishNode(prop, "ObjectProperty");
    }
  }
  parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);
    if (!node) this.unexpected();
    return node;
  }
  parsePropertyName(prop, refExpressionErrors) {
    if (this.eat(0)) {
      prop.computed = true;
      prop.key = this.parseMaybeAssignAllowIn();
      this.expect(3);
    } else {
      const {
        type,
        value
      } = this.state;
      let key;
      if (tokenIsKeywordOrIdentifier(type)) {
        key = this.parseIdentifier(true);
      } else {
        switch (type) {
          case 134:
            key = this.parseNumericLiteral(value);
            break;
          case 133:
            key = this.parseStringLiteral(value);
            break;
          case 135:
            key = this.parseBigIntLiteral(value);
            break;
          case 136:
            key = this.parseDecimalLiteral(value);
            break;
          case 138:
            {
              const privateKeyLoc = this.state.startLoc;
              if (refExpressionErrors != null) {
                if (refExpressionErrors.privateKeyLoc === null) {
                  refExpressionErrors.privateKeyLoc = privateKeyLoc;
                }
              } else {
                this.raise(Errors.UnexpectedPrivateField, {
                  at: privateKeyLoc
                });
              }
              key = this.parsePrivateName();
              break;
            }
          default:
            this.unexpected();
        }
      }
      prop.key = key;
      if (type !== 138) {
        prop.computed = false;
      }
    }
    return prop.key;
  }
  initFunction(node, isAsync) {
    node.id = null;
    node.generator = false;
    node.async = isAsync;
  }
  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
    this.initFunction(node, isAsync);
    node.generator = isGenerator;
    this.scope.enter(2 | 16 | (inClassScope ? 64 : 0) | (allowDirectSuper ? 32 : 0));
    this.prodParam.enter(functionFlags(isAsync, node.generator));
    this.parseFunctionParams(node, isConstructor);
    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);
    this.prodParam.exit();
    this.scope.exit();
    return finishedNode;
  }
  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
    if (isTuple) {
      this.expectPlugin("recordAndTuple");
    }
    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
    this.state.inFSharpPipelineDirectBody = false;
    const node = this.startNode();
    this.next();
    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);
    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
    return this.finishNode(node, isTuple ? "TupleExpression" : "ArrayExpression");
  }
  parseArrowExpression(node, params, isAsync, trailingCommaLoc) {
    this.scope.enter(2 | 4);
    let flags = functionFlags(isAsync, false);
    if (!this.match(5) && this.prodParam.hasIn) {
      flags |= 8;
    }
    this.prodParam.enter(flags);
    this.initFunction(node, isAsync);
    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
    if (params) {
      this.state.maybeInArrowParameters = true;
      this.setArrowFunctionParameters(node, params, trailingCommaLoc);
    }
    this.state.maybeInArrowParameters = false;
    this.parseFunctionBody(node, true);
    this.prodParam.exit();
    this.scope.exit();
    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
    return this.finishNode(node, "ArrowFunctionExpression");
  }
  setArrowFunctionParameters(node, params, trailingCommaLoc) {
    this.toAssignableList(params, trailingCommaLoc, false);
    node.params = params;
  }
  parseFunctionBodyAndFinish(node, type, isMethod = false) {
    this.parseFunctionBody(node, false, isMethod);
    return this.finishNode(node, type);
  }
  parseFunctionBody(node, allowExpression, isMethod = false) {
    const isExpression = allowExpression && !this.match(5);
    this.expressionScope.enter(newExpressionScope());
    if (isExpression) {
      node.body = this.parseMaybeAssign();
      this.checkParams(node, false, allowExpression, false);
    } else {
      const oldStrict = this.state.strict;
      const oldLabels = this.state.labels;
      this.state.labels = [];
      this.prodParam.enter(this.prodParam.currentFlags() | 4);
      node.body = this.parseBlock(true, false, hasStrictModeDirective => {
        const nonSimple = !this.isSimpleParamList(node.params);
        if (hasStrictModeDirective && nonSimple) {
          this.raise(Errors.IllegalLanguageModeDirective, {
            at: (node.kind === "method" || node.kind === "constructor") && !!node.key ? node.key.loc.end : node
          });
        }
        const strictModeChanged = !oldStrict && this.state.strict;
        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);
        if (this.state.strict && node.id) {
          this.checkIdentifier(node.id, 65, strictModeChanged);
        }
      });
      this.prodParam.exit();
      this.state.labels = oldLabels;
    }
    this.expressionScope.exit();
  }
  isSimpleParameter(node) {
    return node.type === "Identifier";
  }
  isSimpleParamList(params) {
    for (let i = 0, len = params.length; i < len; i++) {
      if (!this.isSimpleParameter(params[i])) return false;
    }
    return true;
  }
  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
    const checkClashes = !allowDuplicates && new Set();
    const formalParameters = {
      type: "FormalParameters"
    };
    for (const param of node.params) {
      this.checkLVal(param, {
        in: formalParameters,
        binding: 5,
        checkClashes,
        strictModeChanged
      });
    }
  }
  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {
    const elts = [];
    let first = true;
    while (!this.eat(close)) {
      if (first) {
        first = false;
      } else {
        this.expect(12);
        if (this.match(close)) {
          if (nodeForExtra) {
            this.addTrailingCommaExtraToNode(nodeForExtra);
          }
          this.next();
          break;
        }
      }
      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));
    }
    return elts;
  }
  parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {
    let elt;
    if (this.match(12)) {
      if (!allowEmpty) {
        this.raise(Errors.UnexpectedToken, {
          at: this.state.curPosition(),
          unexpected: ","
        });
      }
      elt = null;
    } else if (this.match(21)) {
      const spreadNodeStartLoc = this.state.startLoc;
      elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartLoc);
    } else if (this.match(17)) {
      this.expectPlugin("partialApplication");
      if (!allowPlaceholder) {
        this.raise(Errors.UnexpectedArgumentPlaceholder, {
          at: this.state.startLoc
        });
      }
      const node = this.startNode();
      this.next();
      elt = this.finishNode(node, "ArgumentPlaceholder");
    } else {
      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);
    }
    return elt;
  }
  parseIdentifier(liberal) {
    const node = this.startNode();
    const name = this.parseIdentifierName(liberal);
    return this.createIdentifier(node, name);
  }
  createIdentifier(node, name) {
    node.name = name;
    node.loc.identifierName = name;
    return this.finishNode(node, "Identifier");
  }
  parseIdentifierName(liberal) {
    let name;
    const {
      startLoc,
      type
    } = this.state;
    if (tokenIsKeywordOrIdentifier(type)) {
      name = this.state.value;
    } else {
      this.unexpected();
    }
    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);
    if (liberal) {
      if (tokenIsKeyword) {
        this.replaceToken(132);
      }
    } else {
      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);
    }
    this.next();
    return name;
  }
  checkReservedWord(word, startLoc, checkKeywords, isBinding) {
    if (word.length > 10) {
      return;
    }
    if (!canBeReservedWord(word)) {
      return;
    }
    if (checkKeywords && isKeyword(word)) {
      this.raise(Errors.UnexpectedKeyword, {
        at: startLoc,
        keyword: word
      });
      return;
    }
    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;
    if (reservedTest(word, this.inModule)) {
      this.raise(Errors.UnexpectedReservedWord, {
        at: startLoc,
        reservedWord: word
      });
      return;
    } else if (word === "yield") {
      if (this.prodParam.hasYield) {
        this.raise(Errors.YieldBindingIdentifier, {
          at: startLoc
        });
        return;
      }
    } else if (word === "await") {
      if (this.prodParam.hasAwait) {
        this.raise(Errors.AwaitBindingIdentifier, {
          at: startLoc
        });
        return;
      }
      if (this.scope.inStaticBlock) {
        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {
          at: startLoc
        });
        return;
      }
      this.expressionScope.recordAsyncArrowParametersError({
        at: startLoc
      });
    } else if (word === "arguments") {
      if (this.scope.inClassAndNotInNonArrowFunction) {
        this.raise(Errors.ArgumentsInClass, {
          at: startLoc
        });
        return;
      }
    }
  }
  isAwaitAllowed() {
    if (this.prodParam.hasAwait) return true;
    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {
      return true;
    }
    return false;
  }
  parseAwait(startLoc) {
    const node = this.startNodeAt(startLoc);
    this.expressionScope.recordParameterInitializerError(Errors.AwaitExpressionFormalParameter, {
      at: node
    });
    if (this.eat(55)) {
      this.raise(Errors.ObsoleteAwaitStar, {
        at: node
      });
    }
    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {
      if (this.isAmbiguousAwait()) {
        this.ambiguousScriptDifferentAst = true;
      } else {
        this.sawUnambiguousESM = true;
      }
    }
    if (!this.state.soloAwait) {
      node.argument = this.parseMaybeUnary(null, true);
    }
    return this.finishNode(node, "AwaitExpression");
  }
  isAmbiguousAwait() {
    if (this.hasPrecedingLineBreak()) return true;
    const {
      type
    } = this.state;
    return type === 53 || type === 10 || type === 0 || tokenIsTemplate(type) || type === 102 && !this.state.containsEsc || type === 137 || type === 56 || this.hasPlugin("v8intrinsic") && type === 54;
  }
  parseYield() {
    const node = this.startNode();
    this.expressionScope.recordParameterInitializerError(Errors.YieldInParameter, {
      at: node
    });
    this.next();
    let delegating = false;
    let argument = null;
    if (!this.hasPrecedingLineBreak()) {
      delegating = this.eat(55);
      switch (this.state.type) {
        case 13:
        case 139:
        case 8:
        case 11:
        case 3:
        case 9:
        case 14:
        case 12:
          if (!delegating) break;
        default:
          argument = this.parseMaybeAssign();
      }
    }
    node.delegate = delegating;
    node.argument = argument;
    return this.finishNode(node, "YieldExpression");
  }
  parseImportCall(node) {
    this.next();
    node.source = this.parseMaybeAssignAllowIn();
    if (this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions")) {
      node.options = null;
    }
    if (this.eat(12)) {
      this.expectImportAttributesPlugin();
      if (!this.match(11)) {
        node.options = this.parseMaybeAssignAllowIn();
        this.eat(12);
      }
    }
    this.expect(11);
    return this.finishNode(node, "ImportExpression");
  }
  checkPipelineAtInfixOperator(left, leftStartLoc) {
    if (this.hasPlugin(["pipelineOperator", {
      proposal: "smart"
    }])) {
      if (left.type === "SequenceExpression") {
        this.raise(Errors.PipelineHeadSequenceExpression, {
          at: leftStartLoc
        });
      }
    }
  }
  parseSmartPipelineBodyInStyle(childExpr, startLoc) {
    if (this.isSimpleReference(childExpr)) {
      const bodyNode = this.startNodeAt(startLoc);
      bodyNode.callee = childExpr;
      return this.finishNode(bodyNode, "PipelineBareFunction");
    } else {
      const bodyNode = this.startNodeAt(startLoc);
      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);
      bodyNode.expression = childExpr;
      return this.finishNode(bodyNode, "PipelineTopicExpression");
    }
  }
  isSimpleReference(expression) {
    switch (expression.type) {
      case "MemberExpression":
        return !expression.computed && this.isSimpleReference(expression.object);
      case "Identifier":
        return true;
      default:
        return false;
    }
  }
  checkSmartPipeTopicBodyEarlyErrors(startLoc) {
    if (this.match(19)) {
      throw this.raise(Errors.PipelineBodyNoArrow, {
        at: this.state.startLoc
      });
    }
    if (!this.topicReferenceWasUsedInCurrentContext()) {
      this.raise(Errors.PipelineTopicUnused, {
        at: startLoc
      });
    }
  }
  withTopicBindingContext(callback) {
    const outerContextTopicState = this.state.topicContext;
    this.state.topicContext = {
      maxNumOfResolvableTopics: 1,
      maxTopicIndex: null
    };
    try {
      return callback();
    } finally {
      this.state.topicContext = outerContextTopicState;
    }
  }
  withSmartMixTopicForbiddingContext(callback) {
    if (this.hasPlugin(["pipelineOperator", {
      proposal: "smart"
    }])) {
      const outerContextTopicState = this.state.topicContext;
      this.state.topicContext = {
        maxNumOfResolvableTopics: 0,
        maxTopicIndex: null
      };
      try {
        return callback();
      } finally {
        this.state.topicContext = outerContextTopicState;
      }
    } else {
      return callback();
    }
  }
  withSoloAwaitPermittingContext(callback) {
    const outerContextSoloAwaitState = this.state.soloAwait;
    this.state.soloAwait = true;
    try {
      return callback();
    } finally {
      this.state.soloAwait = outerContextSoloAwaitState;
    }
  }
  allowInAnd(callback) {
    const flags = this.prodParam.currentFlags();
    const prodParamToSet = 8 & ~flags;
    if (prodParamToSet) {
      this.prodParam.enter(flags | 8);
      try {
        return callback();
      } finally {
        this.prodParam.exit();
      }
    }
    return callback();
  }
  disallowInAnd(callback) {
    const flags = this.prodParam.currentFlags();
    const prodParamToClear = 8 & flags;
    if (prodParamToClear) {
      this.prodParam.enter(flags & ~8);
      try {
        return callback();
      } finally {
        this.prodParam.exit();
      }
    }
    return callback();
  }
  registerTopicReference() {
    this.state.topicContext.maxTopicIndex = 0;
  }
  topicReferenceIsAllowedInCurrentContext() {
    return this.state.topicContext.maxNumOfResolvableTopics >= 1;
  }
  topicReferenceWasUsedInCurrentContext() {
    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;
  }
  parseFSharpPipelineBody(prec) {
    const startLoc = this.state.startLoc;
    this.state.potentialArrowAt = this.state.start;
    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
    this.state.inFSharpPipelineDirectBody = true;
    const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, prec);
    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
    return ret;
  }
  parseModuleExpression() {
    this.expectPlugin("moduleBlocks");
    const node = this.startNode();
    this.next();
    if (!this.match(5)) {
      this.unexpected(null, 5);
    }
    const program = this.startNodeAt(this.state.endLoc);
    this.next();
    const revertScopes = this.initializeScopes(true);
    this.enterInitialScopes();
    try {
      node.body = this.parseProgram(program, 8, "module");
    } finally {
      revertScopes();
    }
    return this.finishNode(node, "ModuleExpression");
  }
  parsePropertyNamePrefixOperator(prop) {}
}
const loopLabel = {
    kind: "loop"
  },
  switchLabel = {
    kind: "switch"
  };
const loneSurrogate = /[\uD800-\uDFFF]/u;
const keywordRelationalOperator = /in(?:stanceof)?/y;
function babel7CompatTokens(tokens, input) {
  for (let i = 0; i < tokens.length; i++) {
    const token = tokens[i];
    const {
      type
    } = token;
    if (typeof type === "number") {
      {
        if (type === 138) {
          const {
            loc,
            start,
            value,
            end
          } = token;
          const hashEndPos = start + 1;
          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);
          tokens.splice(i, 1, new Token({
            type: getExportedToken(27),
            value: "#",
            start: start,
            end: hashEndPos,
            startLoc: loc.start,
            endLoc: hashEndLoc
          }), new Token({
            type: getExportedToken(132),
            value: value,
            start: hashEndPos,
            end: end,
            startLoc: hashEndLoc,
            endLoc: loc.end
          }));
          i++;
          continue;
        }
        if (tokenIsTemplate(type)) {
          const {
            loc,
            start,
            value,
            end
          } = token;
          const backquoteEnd = start + 1;
          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);
          let startToken;
          if (input.charCodeAt(start) === 96) {
            startToken = new Token({
              type: getExportedToken(22),
              value: "`",
              start: start,
              end: backquoteEnd,
              startLoc: loc.start,
              endLoc: backquoteEndLoc
            });
          } else {
            startToken = new Token({
              type: getExportedToken(8),
              value: "}",
              start: start,
              end: backquoteEnd,
              startLoc: loc.start,
              endLoc: backquoteEndLoc
            });
          }
          let templateValue, templateElementEnd, templateElementEndLoc, endToken;
          if (type === 24) {
            templateElementEnd = end - 1;
            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);
            templateValue = value === null ? null : value.slice(1, -1);
            endToken = new Token({
              type: getExportedToken(22),
              value: "`",
              start: templateElementEnd,
              end: end,
              startLoc: templateElementEndLoc,
              endLoc: loc.end
            });
          } else {
            templateElementEnd = end - 2;
            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);
            templateValue = value === null ? null : value.slice(1, -2);
            endToken = new Token({
              type: getExportedToken(23),
              value: "${",
              start: templateElementEnd,
              end: end,
              startLoc: templateElementEndLoc,
              endLoc: loc.end
            });
          }
          tokens.splice(i, 1, startToken, new Token({
            type: getExportedToken(20),
            value: templateValue,
            start: backquoteEnd,
            end: templateElementEnd,
            startLoc: backquoteEndLoc,
            endLoc: templateElementEndLoc
          }), endToken);
          i += 2;
          continue;
        }
      }
      token.type = getExportedToken(type);
    }
  }
  return tokens;
}
class StatementParser extends ExpressionParser {
  parseTopLevel(file, program) {
    file.program = this.parseProgram(program);
    file.comments = this.state.comments;
    if (this.options.tokens) {
      file.tokens = babel7CompatTokens(this.tokens, this.input);
    }
    return this.finishNode(file, "File");
  }
  parseProgram(program, end = 139, sourceType = this.options.sourceType) {
    program.sourceType = sourceType;
    program.interpreter = this.parseInterpreterDirective();
    this.parseBlockBody(program, true, true, end);
    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {
      for (const [localName, at] of Array.from(this.scope.undefinedExports)) {
        this.raise(Errors.ModuleExportUndefined, {
          at,
          localName
        });
      }
    }
    let finishedProgram;
    if (end === 139) {
      finishedProgram = this.finishNode(program, "Program");
    } else {
      finishedProgram = this.finishNodeAt(program, "Program", createPositionWithColumnOffset(this.state.startLoc, -1));
    }
    return finishedProgram;
  }
  stmtToDirective(stmt) {
    const directive = stmt;
    directive.type = "Directive";
    directive.value = directive.expression;
    delete directive.expression;
    const directiveLiteral = directive.value;
    const expressionValue = directiveLiteral.value;
    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);
    const val = directiveLiteral.value = raw.slice(1, -1);
    this.addExtra(directiveLiteral, "raw", raw);
    this.addExtra(directiveLiteral, "rawValue", val);
    this.addExtra(directiveLiteral, "expressionValue", expressionValue);
    directiveLiteral.type = "DirectiveLiteral";
    return directive;
  }
  parseInterpreterDirective() {
    if (!this.match(28)) {
      return null;
    }
    const node = this.startNode();
    node.value = this.state.value;
    this.next();
    return this.finishNode(node, "InterpreterDirective");
  }
  isLet() {
    if (!this.isContextual(100)) {
      return false;
    }
    return this.hasFollowingBindingAtom();
  }
  chStartsBindingIdentifier(ch, pos) {
    if (isIdentifierStart(ch)) {
      keywordRelationalOperator.lastIndex = pos;
      if (keywordRelationalOperator.test(this.input)) {
        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);
        if (!isIdentifierChar(endCh) && endCh !== 92) {
          return false;
        }
      }
      return true;
    } else if (ch === 92) {
      return true;
    } else {
      return false;
    }
  }
  chStartsBindingPattern(ch) {
    return ch === 91 || ch === 123;
  }
  hasFollowingBindingAtom() {
    const next = this.nextTokenStart();
    const nextCh = this.codePointAtPos(next);
    return this.chStartsBindingPattern(nextCh) || this.chStartsBindingIdentifier(nextCh, next);
  }
  hasInLineFollowingBindingIdentifier() {
    const next = this.nextTokenInLineStart();
    const nextCh = this.codePointAtPos(next);
    return this.chStartsBindingIdentifier(nextCh, next);
  }
  startsUsingForOf() {
    const {
      type,
      containsEsc
    } = this.lookahead();
    if (type === 102 && !containsEsc) {
      return false;
    } else if (tokenIsIdentifier(type) && !this.hasFollowingLineBreak()) {
      this.expectPlugin("explicitResourceManagement");
      return true;
    }
  }
  startsAwaitUsing() {
    let next = this.nextTokenInLineStart();
    if (this.isUnparsedContextual(next, "using")) {
      next = this.nextTokenInLineStartSince(next + 5);
      const nextCh = this.codePointAtPos(next);
      if (this.chStartsBindingIdentifier(nextCh, next)) {
        this.expectPlugin("explicitResourceManagement");
        return true;
      }
    }
    return false;
  }
  parseModuleItem() {
    return this.parseStatementLike(1 | 2 | 4 | 8);
  }
  parseStatementListItem() {
    return this.parseStatementLike(2 | 4 | (!this.options.annexB || this.state.strict ? 0 : 8));
  }
  parseStatementOrSloppyAnnexBFunctionDeclaration(allowLabeledFunction = false) {
    let flags = 0;
    if (this.options.annexB && !this.state.strict) {
      flags |= 4;
      if (allowLabeledFunction) {
        flags |= 8;
      }
    }
    return this.parseStatementLike(flags);
  }
  parseStatement() {
    return this.parseStatementLike(0);
  }
  parseStatementLike(flags) {
    let decorators = null;
    if (this.match(26)) {
      decorators = this.parseDecorators(true);
    }
    return this.parseStatementContent(flags, decorators);
  }
  parseStatementContent(flags, decorators) {
    const starttype = this.state.type;
    const node = this.startNode();
    const allowDeclaration = !!(flags & 2);
    const allowFunctionDeclaration = !!(flags & 4);
    const topLevel = flags & 1;
    switch (starttype) {
      case 60:
        return this.parseBreakContinueStatement(node, true);
      case 63:
        return this.parseBreakContinueStatement(node, false);
      case 64:
        return this.parseDebuggerStatement(node);
      case 90:
        return this.parseDoWhileStatement(node);
      case 91:
        return this.parseForStatement(node);
      case 68:
        if (this.lookaheadCharCode() === 46) break;
        if (!allowFunctionDeclaration) {
          this.raise(this.state.strict ? Errors.StrictFunction : this.options.annexB ? Errors.SloppyFunctionAnnexB : Errors.SloppyFunction, {
            at: this.state.startLoc
          });
        }
        return this.parseFunctionStatement(node, false, !allowDeclaration && allowFunctionDeclaration);
      case 80:
        if (!allowDeclaration) this.unexpected();
        return this.parseClass(this.maybeTakeDecorators(decorators, node), true);
      case 69:
        return this.parseIfStatement(node);
      case 70:
        return this.parseReturnStatement(node);
      case 71:
        return this.parseSwitchStatement(node);
      case 72:
        return this.parseThrowStatement(node);
      case 73:
        return this.parseTryStatement(node);
      case 96:
        if (!this.state.containsEsc && this.startsAwaitUsing()) {
          if (!this.isAwaitAllowed()) {
            this.raise(Errors.AwaitUsingNotInAsyncContext, {
              at: node
            });
          } else if (!allowDeclaration) {
            this.raise(Errors.UnexpectedLexicalDeclaration, {
              at: node
            });
          }
          this.next();
          return this.parseVarStatement(node, "await using");
        }
        break;
      case 107:
        if (this.state.containsEsc || !this.hasInLineFollowingBindingIdentifier()) {
          break;
        }
        this.expectPlugin("explicitResourceManagement");
        if (!this.scope.inModule && this.scope.inTopLevel) {
          this.raise(Errors.UnexpectedUsingDeclaration, {
            at: this.state.startLoc
          });
        } else if (!allowDeclaration) {
          this.raise(Errors.UnexpectedLexicalDeclaration, {
            at: this.state.startLoc
          });
        }
        return this.parseVarStatement(node, "using");
      case 100:
        {
          if (this.state.containsEsc) {
            break;
          }
          const next = this.nextTokenStart();
          const nextCh = this.codePointAtPos(next);
          if (nextCh !== 91) {
            if (!allowDeclaration && this.hasFollowingLineBreak()) break;
            if (!this.chStartsBindingIdentifier(nextCh, next) && nextCh !== 123) {
              break;
            }
          }
        }
      case 75:
        {
          if (!allowDeclaration) {
            this.raise(Errors.UnexpectedLexicalDeclaration, {
              at: this.state.startLoc
            });
          }
        }
      case 74:
        {
          const kind = this.state.value;
          return this.parseVarStatement(node, kind);
        }
      case 92:
        return this.parseWhileStatement(node);
      case 76:
        return this.parseWithStatement(node);
      case 5:
        return this.parseBlock();
      case 13:
        return this.parseEmptyStatement(node);
      case 83:
        {
          const nextTokenCharCode = this.lookaheadCharCode();
          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {
            break;
          }
        }
      case 82:
        {
          if (!this.options.allowImportExportEverywhere && !topLevel) {
            this.raise(Errors.UnexpectedImportExport, {
              at: this.state.startLoc
            });
          }
          this.next();
          let result;
          if (starttype === 83) {
            result = this.parseImport(node);
            if (result.type === "ImportDeclaration" && (!result.importKind || result.importKind === "value")) {
              this.sawUnambiguousESM = true;
            }
          } else {
            result = this.parseExport(node, decorators);
            if (result.type === "ExportNamedDeclaration" && (!result.exportKind || result.exportKind === "value") || result.type === "ExportAllDeclaration" && (!result.exportKind || result.exportKind === "value") || result.type === "ExportDefaultDeclaration") {
              this.sawUnambiguousESM = true;
            }
          }
          this.assertModuleNodeAllowed(result);
          return result;
        }
      default:
        {
          if (this.isAsyncFunction()) {
            if (!allowDeclaration) {
              this.raise(Errors.AsyncFunctionInSingleStatementContext, {
                at: this.state.startLoc
              });
            }
            this.next();
            return this.parseFunctionStatement(node, true, !allowDeclaration && allowFunctionDeclaration);
          }
        }
    }
    const maybeName = this.state.value;
    const expr = this.parseExpression();
    if (tokenIsIdentifier(starttype) && expr.type === "Identifier" && this.eat(14)) {
      return this.parseLabeledStatement(node, maybeName, expr, flags);
    } else {
      return this.parseExpressionStatement(node, expr, decorators);
    }
  }
  assertModuleNodeAllowed(node) {
    if (!this.options.allowImportExportEverywhere && !this.inModule) {
      this.raise(Errors.ImportOutsideModule, {
        at: node
      });
    }
  }
  decoratorsEnabledBeforeExport() {
    if (this.hasPlugin("decorators-legacy")) return true;
    return this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport") !== false;
  }
  maybeTakeDecorators(maybeDecorators, classNode, exportNode) {
    if (maybeDecorators) {
      if (classNode.decorators && classNode.decorators.length > 0) {
        if (typeof this.getPluginOption("decorators", "decoratorsBeforeExport") !== "boolean") {
          this.raise(Errors.DecoratorsBeforeAfterExport, {
            at: classNode.decorators[0]
          });
        }
        classNode.decorators.unshift(...maybeDecorators);
      } else {
        classNode.decorators = maybeDecorators;
      }
      this.resetStartLocationFromNode(classNode, maybeDecorators[0]);
      if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);
    }
    return classNode;
  }
  canHaveLeadingDecorator() {
    return this.match(80);
  }
  parseDecorators(allowExport) {
    const decorators = [];
    do {
      decorators.push(this.parseDecorator());
    } while (this.match(26));
    if (this.match(82)) {
      if (!allowExport) {
        this.unexpected();
      }
      if (!this.decoratorsEnabledBeforeExport()) {
        this.raise(Errors.DecoratorExportClass, {
          at: this.state.startLoc
        });
      }
    } else if (!this.canHaveLeadingDecorator()) {
      throw this.raise(Errors.UnexpectedLeadingDecorator, {
        at: this.state.startLoc
      });
    }
    return decorators;
  }
  parseDecorator() {
    this.expectOnePlugin(["decorators", "decorators-legacy"]);
    const node = this.startNode();
    this.next();
    if (this.hasPlugin("decorators")) {
      const startLoc = this.state.startLoc;
      let expr;
      if (this.match(10)) {
        const startLoc = this.state.startLoc;
        this.next();
        expr = this.parseExpression();
        this.expect(11);
        expr = this.wrapParenthesis(startLoc, expr);
        const paramsStartLoc = this.state.startLoc;
        node.expression = this.parseMaybeDecoratorArguments(expr);
        if (this.getPluginOption("decorators", "allowCallParenthesized") === false && node.expression !== expr) {
          this.raise(Errors.DecoratorArgumentsOutsideParentheses, {
            at: paramsStartLoc
          });
        }
      } else {
        expr = this.parseIdentifier(false);
        while (this.eat(16)) {
          const node = this.startNodeAt(startLoc);
          node.object = expr;
          if (this.match(138)) {
            this.classScope.usePrivateName(this.state.value, this.state.startLoc);
            node.property = this.parsePrivateName();
          } else {
            node.property = this.parseIdentifier(true);
          }
          node.computed = false;
          expr = this.finishNode(node, "MemberExpression");
        }
        node.expression = this.parseMaybeDecoratorArguments(expr);
      }
    } else {
      node.expression = this.parseExprSubscripts();
    }
    return this.finishNode(node, "Decorator");
  }
  parseMaybeDecoratorArguments(expr) {
    if (this.eat(10)) {
      const node = this.startNodeAtNode(expr);
      node.callee = expr;
      node.arguments = this.parseCallExpressionArguments(11, false);
      this.toReferencedList(node.arguments);
      return this.finishNode(node, "CallExpression");
    }
    return expr;
  }
  parseBreakContinueStatement(node, isBreak) {
    this.next();
    if (this.isLineTerminator()) {
      node.label = null;
    } else {
      node.label = this.parseIdentifier();
      this.semicolon();
    }
    this.verifyBreakContinue(node, isBreak);
    return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
  }
  verifyBreakContinue(node, isBreak) {
    let i;
    for (i = 0; i < this.state.labels.length; ++i) {
      const lab = this.state.labels[i];
      if (node.label == null || lab.name === node.label.name) {
        if (lab.kind != null && (isBreak || lab.kind === "loop")) break;
        if (node.label && isBreak) break;
      }
    }
    if (i === this.state.labels.length) {
      const type = isBreak ? "BreakStatement" : "ContinueStatement";
      this.raise(Errors.IllegalBreakContinue, {
        at: node,
        type
      });
    }
  }
  parseDebuggerStatement(node) {
    this.next();
    this.semicolon();
    return this.finishNode(node, "DebuggerStatement");
  }
  parseHeaderExpression() {
    this.expect(10);
    const val = this.parseExpression();
    this.expect(11);
    return val;
  }
  parseDoWhileStatement(node) {
    this.next();
    this.state.labels.push(loopLabel);
    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
    this.state.labels.pop();
    this.expect(92);
    node.test = this.parseHeaderExpression();
    this.eat(13);
    return this.finishNode(node, "DoWhileStatement");
  }
  parseForStatement(node) {
    this.next();
    this.state.labels.push(loopLabel);
    let awaitAt = null;
    if (this.isAwaitAllowed() && this.eatContextual(96)) {
      awaitAt = this.state.lastTokStartLoc;
    }
    this.scope.enter(0);
    this.expect(10);
    if (this.match(13)) {
      if (awaitAt !== null) {
        this.unexpected(awaitAt);
      }
      return this.parseFor(node, null);
    }
    const startsWithLet = this.isContextual(100);
    {
      const startsWithAwaitUsing = this.isContextual(96) && this.startsAwaitUsing();
      const starsWithUsingDeclaration = startsWithAwaitUsing || this.isContextual(107) && this.startsUsingForOf();
      const isLetOrUsing = startsWithLet && this.hasFollowingBindingAtom() || starsWithUsingDeclaration;
      if (this.match(74) || this.match(75) || isLetOrUsing) {
        const initNode = this.startNode();
        let kind;
        if (startsWithAwaitUsing) {
          kind = "await using";
          if (!this.isAwaitAllowed()) {
            this.raise(Errors.AwaitUsingNotInAsyncContext, {
              at: this.state.startLoc
            });
          }
          this.next();
        } else {
          kind = this.state.value;
        }
        this.next();
        this.parseVar(initNode, true, kind);
        const init = this.finishNode(initNode, "VariableDeclaration");
        const isForIn = this.match(58);
        if (isForIn && starsWithUsingDeclaration) {
          this.raise(Errors.ForInUsing, {
            at: init
          });
        }
        if ((isForIn || this.isContextual(102)) && init.declarations.length === 1) {
          return this.parseForIn(node, init, awaitAt);
        }
        if (awaitAt !== null) {
          this.unexpected(awaitAt);
        }
        return this.parseFor(node, init);
      }
    }
    const startsWithAsync = this.isContextual(95);
    const refExpressionErrors = new ExpressionErrors();
    const init = this.parseExpression(true, refExpressionErrors);
    const isForOf = this.isContextual(102);
    if (isForOf) {
      if (startsWithLet) {
        this.raise(Errors.ForOfLet, {
          at: init
        });
      }
      if (awaitAt === null && startsWithAsync && init.type === "Identifier") {
        this.raise(Errors.ForOfAsync, {
          at: init
        });
      }
    }
    if (isForOf || this.match(58)) {
      this.checkDestructuringPrivate(refExpressionErrors);
      this.toAssignable(init, true);
      const type = isForOf ? "ForOfStatement" : "ForInStatement";
      this.checkLVal(init, {
        in: {
          type
        }
      });
      return this.parseForIn(node, init, awaitAt);
    } else {
      this.checkExpressionErrors(refExpressionErrors, true);
    }
    if (awaitAt !== null) {
      this.unexpected(awaitAt);
    }
    return this.parseFor(node, init);
  }
  parseFunctionStatement(node, isAsync, isHangingDeclaration) {
    this.next();
    return this.parseFunction(node, 1 | (isHangingDeclaration ? 2 : 0) | (isAsync ? 8 : 0));
  }
  parseIfStatement(node) {
    this.next();
    node.test = this.parseHeaderExpression();
    node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration();
    node.alternate = this.eat(66) ? this.parseStatementOrSloppyAnnexBFunctionDeclaration() : null;
    return this.finishNode(node, "IfStatement");
  }
  parseReturnStatement(node) {
    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {
      this.raise(Errors.IllegalReturn, {
        at: this.state.startLoc
      });
    }
    this.next();
    if (this.isLineTerminator()) {
      node.argument = null;
    } else {
      node.argument = this.parseExpression();
      this.semicolon();
    }
    return this.finishNode(node, "ReturnStatement");
  }
  parseSwitchStatement(node) {
    this.next();
    node.discriminant = this.parseHeaderExpression();
    const cases = node.cases = [];
    this.expect(5);
    this.state.labels.push(switchLabel);
    this.scope.enter(0);
    let cur;
    for (let sawDefault; !this.match(8);) {
      if (this.match(61) || this.match(65)) {
        const isCase = this.match(61);
        if (cur) this.finishNode(cur, "SwitchCase");
        cases.push(cur = this.startNode());
        cur.consequent = [];
        this.next();
        if (isCase) {
          cur.test = this.parseExpression();
        } else {
          if (sawDefault) {
            this.raise(Errors.MultipleDefaultsInSwitch, {
              at: this.state.lastTokStartLoc
            });
          }
          sawDefault = true;
          cur.test = null;
        }
        this.expect(14);
      } else {
        if (cur) {
          cur.consequent.push(this.parseStatementListItem());
        } else {
          this.unexpected();
        }
      }
    }
    this.scope.exit();
    if (cur) this.finishNode(cur, "SwitchCase");
    this.next();
    this.state.labels.pop();
    return this.finishNode(node, "SwitchStatement");
  }
  parseThrowStatement(node) {
    this.next();
    if (this.hasPrecedingLineBreak()) {
      this.raise(Errors.NewlineAfterThrow, {
        at: this.state.lastTokEndLoc
      });
    }
    node.argument = this.parseExpression();
    this.semicolon();
    return this.finishNode(node, "ThrowStatement");
  }
  parseCatchClauseParam() {
    const param = this.parseBindingAtom();
    this.scope.enter(this.options.annexB && param.type === "Identifier" ? 8 : 0);
    this.checkLVal(param, {
      in: {
        type: "CatchClause"
      },
      binding: 9
    });
    return param;
  }
  parseTryStatement(node) {
    this.next();
    node.block = this.parseBlock();
    node.handler = null;
    if (this.match(62)) {
      const clause = this.startNode();
      this.next();
      if (this.match(10)) {
        this.expect(10);
        clause.param = this.parseCatchClauseParam();
        this.expect(11);
      } else {
        clause.param = null;
        this.scope.enter(0);
      }
      clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));
      this.scope.exit();
      node.handler = this.finishNode(clause, "CatchClause");
    }
    node.finalizer = this.eat(67) ? this.parseBlock() : null;
    if (!node.handler && !node.finalizer) {
      this.raise(Errors.NoCatchOrFinally, {
        at: node
      });
    }
    return this.finishNode(node, "TryStatement");
  }
  parseVarStatement(node, kind, allowMissingInitializer = false) {
    this.next();
    this.parseVar(node, false, kind, allowMissingInitializer);
    this.semicolon();
    return this.finishNode(node, "VariableDeclaration");
  }
  parseWhileStatement(node) {
    this.next();
    node.test = this.parseHeaderExpression();
    this.state.labels.push(loopLabel);
    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
    this.state.labels.pop();
    return this.finishNode(node, "WhileStatement");
  }
  parseWithStatement(node) {
    if (this.state.strict) {
      this.raise(Errors.StrictWith, {
        at: this.state.startLoc
      });
    }
    this.next();
    node.object = this.parseHeaderExpression();
    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
    return this.finishNode(node, "WithStatement");
  }
  parseEmptyStatement(node) {
    this.next();
    return this.finishNode(node, "EmptyStatement");
  }
  parseLabeledStatement(node, maybeName, expr, flags) {
    for (const label of this.state.labels) {
      if (label.name === maybeName) {
        this.raise(Errors.LabelRedeclaration, {
          at: expr,
          labelName: maybeName
        });
      }
    }
    const kind = tokenIsLoop(this.state.type) ? "loop" : this.match(71) ? "switch" : null;
    for (let i = this.state.labels.length - 1; i >= 0; i--) {
      const label = this.state.labels[i];
      if (label.statementStart === node.start) {
        label.statementStart = this.state.start;
        label.kind = kind;
      } else {
        break;
      }
    }
    this.state.labels.push({
      name: maybeName,
      kind: kind,
      statementStart: this.state.start
    });
    node.body = flags & 8 ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true) : this.parseStatement();
    this.state.labels.pop();
    node.label = expr;
    return this.finishNode(node, "LabeledStatement");
  }
  parseExpressionStatement(node, expr, decorators) {
    node.expression = expr;
    this.semicolon();
    return this.finishNode(node, "ExpressionStatement");
  }
  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {
    const node = this.startNode();
    if (allowDirectives) {
      this.state.strictErrors.clear();
    }
    this.expect(5);
    if (createNewLexicalScope) {
      this.scope.enter(0);
    }
    this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse);
    if (createNewLexicalScope) {
      this.scope.exit();
    }
    return this.finishNode(node, "BlockStatement");
  }
  isValidDirective(stmt) {
    return stmt.type === "ExpressionStatement" && stmt.expression.type === "StringLiteral" && !stmt.expression.extra.parenthesized;
  }
  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
    const body = node.body = [];
    const directives = node.directives = [];
    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);
  }
  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {
    const oldStrict = this.state.strict;
    let hasStrictModeDirective = false;
    let parsedNonDirective = false;
    while (!this.match(end)) {
      const stmt = topLevel ? this.parseModuleItem() : this.parseStatementListItem();
      if (directives && !parsedNonDirective) {
        if (this.isValidDirective(stmt)) {
          const directive = this.stmtToDirective(stmt);
          directives.push(directive);
          if (!hasStrictModeDirective && directive.value.value === "use strict") {
            hasStrictModeDirective = true;
            this.setStrict(true);
          }
          continue;
        }
        parsedNonDirective = true;
        this.state.strictErrors.clear();
      }
      body.push(stmt);
    }
    afterBlockParse == null || afterBlockParse.call(this, hasStrictModeDirective);
    if (!oldStrict) {
      this.setStrict(false);
    }
    this.next();
  }
  parseFor(node, init) {
    node.init = init;
    this.semicolon(false);
    node.test = this.match(13) ? null : this.parseExpression();
    this.semicolon(false);
    node.update = this.match(11) ? null : this.parseExpression();
    this.expect(11);
    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
    this.scope.exit();
    this.state.labels.pop();
    return this.finishNode(node, "ForStatement");
  }
  parseForIn(node, init, awaitAt) {
    const isForIn = this.match(58);
    this.next();
    if (isForIn) {
      if (awaitAt !== null) this.unexpected(awaitAt);
    } else {
      node.await = awaitAt !== null;
    }
    if (init.type === "VariableDeclaration" && init.declarations[0].init != null && (!isForIn || !this.options.annexB || this.state.strict || init.kind !== "var" || init.declarations[0].id.type !== "Identifier")) {
      this.raise(Errors.ForInOfLoopInitializer, {
        at: init,
        type: isForIn ? "ForInStatement" : "ForOfStatement"
      });
    }
    if (init.type === "AssignmentPattern") {
      this.raise(Errors.InvalidLhs, {
        at: init,
        ancestor: {
          type: "ForStatement"
        }
      });
    }
    node.left = init;
    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();
    this.expect(11);
    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
    this.scope.exit();
    this.state.labels.pop();
    return this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
  }
  parseVar(node, isFor, kind, allowMissingInitializer = false) {
    const declarations = node.declarations = [];
    node.kind = kind;
    for (;;) {
      const decl = this.startNode();
      this.parseVarId(decl, kind);
      decl.init = !this.eat(29) ? null : isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();
      if (decl.init === null && !allowMissingInitializer) {
        if (decl.id.type !== "Identifier" && !(isFor && (this.match(58) || this.isContextual(102)))) {
          this.raise(Errors.DeclarationMissingInitializer, {
            at: this.state.lastTokEndLoc,
            kind: "destructuring"
          });
        } else if (kind === "const" && !(this.match(58) || this.isContextual(102))) {
          this.raise(Errors.DeclarationMissingInitializer, {
            at: this.state.lastTokEndLoc,
            kind: "const"
          });
        }
      }
      declarations.push(this.finishNode(decl, "VariableDeclarator"));
      if (!this.eat(12)) break;
    }
    return node;
  }
  parseVarId(decl, kind) {
    const id = this.parseBindingAtom();
    this.checkLVal(id, {
      in: {
        type: "VariableDeclarator"
      },
      binding: kind === "var" ? 5 : 8201
    });
    decl.id = id;
  }
  parseAsyncFunctionExpression(node) {
    return this.parseFunction(node, 8);
  }
  parseFunction(node, flags = 0) {
    const hangingDeclaration = flags & 2;
    const isDeclaration = !!(flags & 1);
    const requireId = isDeclaration && !(flags & 4);
    const isAsync = !!(flags & 8);
    this.initFunction(node, isAsync);
    if (this.match(55)) {
      if (hangingDeclaration) {
        this.raise(Errors.GeneratorInSingleStatementContext, {
          at: this.state.startLoc
        });
      }
      this.next();
      node.generator = true;
    }
    if (isDeclaration) {
      node.id = this.parseFunctionId(requireId);
    }
    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
    this.state.maybeInArrowParameters = false;
    this.scope.enter(2);
    this.prodParam.enter(functionFlags(isAsync, node.generator));
    if (!isDeclaration) {
      node.id = this.parseFunctionId();
    }
    this.parseFunctionParams(node, false);
    this.withSmartMixTopicForbiddingContext(() => {
      this.parseFunctionBodyAndFinish(node, isDeclaration ? "FunctionDeclaration" : "FunctionExpression");
    });
    this.prodParam.exit();
    this.scope.exit();
    if (isDeclaration && !hangingDeclaration) {
      this.registerFunctionStatementId(node);
    }
    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
    return node;
  }
  parseFunctionId(requireId) {
    return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;
  }
  parseFunctionParams(node, isConstructor) {
    this.expect(10);
    this.expressionScope.enter(newParameterDeclarationScope());
    node.params = this.parseBindingList(11, 41, 2 | (isConstructor ? 4 : 0));
    this.expressionScope.exit();
  }
  registerFunctionStatementId(node) {
    if (!node.id) return;
    this.scope.declareName(node.id.name, !this.options.annexB || this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? 5 : 8201 : 17, node.id.loc.start);
  }
  parseClass(node, isStatement, optionalId) {
    this.next();
    const oldStrict = this.state.strict;
    this.state.strict = true;
    this.parseClassId(node, isStatement, optionalId);
    this.parseClassSuper(node);
    node.body = this.parseClassBody(!!node.superClass, oldStrict);
    return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
  }
  isClassProperty() {
    return this.match(29) || this.match(13) || this.match(8);
  }
  isClassMethod() {
    return this.match(10);
  }
  isNonstaticConstructor(method) {
    return !method.computed && !method.static && (method.key.name === "constructor" || method.key.value === "constructor");
  }
  parseClassBody(hadSuperClass, oldStrict) {
    this.classScope.enter();
    const state = {
      hadConstructor: false,
      hadSuperClass
    };
    let decorators = [];
    const classBody = this.startNode();
    classBody.body = [];
    this.expect(5);
    this.withSmartMixTopicForbiddingContext(() => {
      while (!this.match(8)) {
        if (this.eat(13)) {
          if (decorators.length > 0) {
            throw this.raise(Errors.DecoratorSemicolon, {
              at: this.state.lastTokEndLoc
            });
          }
          continue;
        }
        if (this.match(26)) {
          decorators.push(this.parseDecorator());
          continue;
        }
        const member = this.startNode();
        if (decorators.length) {
          member.decorators = decorators;
          this.resetStartLocationFromNode(member, decorators[0]);
          decorators = [];
        }
        this.parseClassMember(classBody, member, state);
        if (member.kind === "constructor" && member.decorators && member.decorators.length > 0) {
          this.raise(Errors.DecoratorConstructor, {
            at: member
          });
        }
      }
    });
    this.state.strict = oldStrict;
    this.next();
    if (decorators.length) {
      throw this.raise(Errors.TrailingDecorator, {
        at: this.state.startLoc
      });
    }
    this.classScope.exit();
    return this.finishNode(classBody, "ClassBody");
  }
  parseClassMemberFromModifier(classBody, member) {
    const key = this.parseIdentifier(true);
    if (this.isClassMethod()) {
      const method = member;
      method.kind = "method";
      method.computed = false;
      method.key = key;
      method.static = false;
      this.pushClassMethod(classBody, method, false, false, false, false);
      return true;
    } else if (this.isClassProperty()) {
      const prop = member;
      prop.computed = false;
      prop.key = key;
      prop.static = false;
      classBody.body.push(this.parseClassProperty(prop));
      return true;
    }
    this.resetPreviousNodeTrailingComments(key);
    return false;
  }
  parseClassMember(classBody, member, state) {
    const isStatic = this.isContextual(106);
    if (isStatic) {
      if (this.parseClassMemberFromModifier(classBody, member)) {
        return;
      }
      if (this.eat(5)) {
        this.parseClassStaticBlock(classBody, member);
        return;
      }
    }
    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
  }
  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
    const publicMethod = member;
    const privateMethod = member;
    const publicProp = member;
    const privateProp = member;
    const accessorProp = member;
    const method = publicMethod;
    const publicMember = publicMethod;
    member.static = isStatic;
    this.parsePropertyNamePrefixOperator(member);
    if (this.eat(55)) {
      method.kind = "method";
      const isPrivateName = this.match(138);
      this.parseClassElementName(method);
      if (isPrivateName) {
        this.pushClassPrivateMethod(classBody, privateMethod, true, false);
        return;
      }
      if (this.isNonstaticConstructor(publicMethod)) {
        this.raise(Errors.ConstructorIsGenerator, {
          at: publicMethod.key
        });
      }
      this.pushClassMethod(classBody, publicMethod, true, false, false, false);
      return;
    }
    const isContextual = tokenIsIdentifier(this.state.type) && !this.state.containsEsc;
    const isPrivate = this.match(138);
    const key = this.parseClassElementName(member);
    const maybeQuestionTokenStartLoc = this.state.startLoc;
    this.parsePostMemberNameModifiers(publicMember);
    if (this.isClassMethod()) {
      method.kind = "method";
      if (isPrivate) {
        this.pushClassPrivateMethod(classBody, privateMethod, false, false);
        return;
      }
      const isConstructor = this.isNonstaticConstructor(publicMethod);
      let allowsDirectSuper = false;
      if (isConstructor) {
        publicMethod.kind = "constructor";
        if (state.hadConstructor && !this.hasPlugin("typescript")) {
          this.raise(Errors.DuplicateConstructor, {
            at: key
          });
        }
        if (isConstructor && this.hasPlugin("typescript") && member.override) {
          this.raise(Errors.OverrideOnConstructor, {
            at: key
          });
        }
        state.hadConstructor = true;
        allowsDirectSuper = state.hadSuperClass;
      }
      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);
    } else if (this.isClassProperty()) {
      if (isPrivate) {
        this.pushClassPrivateProperty(classBody, privateProp);
      } else {
        this.pushClassProperty(classBody, publicProp);
      }
    } else if (isContextual && key.name === "async" && !this.isLineTerminator()) {
      this.resetPreviousNodeTrailingComments(key);
      const isGenerator = this.eat(55);
      if (publicMember.optional) {
        this.unexpected(maybeQuestionTokenStartLoc);
      }
      method.kind = "method";
      const isPrivate = this.match(138);
      this.parseClassElementName(method);
      this.parsePostMemberNameModifiers(publicMember);
      if (isPrivate) {
        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);
      } else {
        if (this.isNonstaticConstructor(publicMethod)) {
          this.raise(Errors.ConstructorIsAsync, {
            at: publicMethod.key
          });
        }
        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);
      }
    } else if (isContextual && (key.name === "get" || key.name === "set") && !(this.match(55) && this.isLineTerminator())) {
      this.resetPreviousNodeTrailingComments(key);
      method.kind = key.name;
      const isPrivate = this.match(138);
      this.parseClassElementName(publicMethod);
      if (isPrivate) {
        this.pushClassPrivateMethod(classBody, privateMethod, false, false);
      } else {
        if (this.isNonstaticConstructor(publicMethod)) {
          this.raise(Errors.ConstructorIsAccessor, {
            at: publicMethod.key
          });
        }
        this.pushClassMethod(classBody, publicMethod, false, false, false, false);
      }
      this.checkGetterSetterParams(publicMethod);
    } else if (isContextual && key.name === "accessor" && !this.isLineTerminator()) {
      this.expectPlugin("decoratorAutoAccessors");
      this.resetPreviousNodeTrailingComments(key);
      const isPrivate = this.match(138);
      this.parseClassElementName(publicProp);
      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);
    } else if (this.isLineTerminator()) {
      if (isPrivate) {
        this.pushClassPrivateProperty(classBody, privateProp);
      } else {
        this.pushClassProperty(classBody, publicProp);
      }
    } else {
      this.unexpected();
    }
  }
  parseClassElementName(member) {
    const {
      type,
      value
    } = this.state;
    if ((type === 132 || type === 133) && member.static && value === "prototype") {
      this.raise(Errors.StaticPrototype, {
        at: this.state.startLoc
      });
    }
    if (type === 138) {
      if (value === "constructor") {
        this.raise(Errors.ConstructorClassPrivateField, {
          at: this.state.startLoc
        });
      }
      const key = this.parsePrivateName();
      member.key = key;
      return key;
    }
    return this.parsePropertyName(member);
  }
  parseClassStaticBlock(classBody, member) {
    var _member$decorators;
    this.scope.enter(64 | 128 | 16);
    const oldLabels = this.state.labels;
    this.state.labels = [];
    this.prodParam.enter(0);
    const body = member.body = [];
    this.parseBlockOrModuleBlockBody(body, undefined, false, 8);
    this.prodParam.exit();
    this.scope.exit();
    this.state.labels = oldLabels;
    classBody.body.push(this.finishNode(member, "StaticBlock"));
    if ((_member$decorators = member.decorators) != null && _member$decorators.length) {
      this.raise(Errors.DecoratorStaticBlock, {
        at: member
      });
    }
  }
  pushClassProperty(classBody, prop) {
    if (!prop.computed && (prop.key.name === "constructor" || prop.key.value === "constructor")) {
      this.raise(Errors.ConstructorClassField, {
        at: prop.key
      });
    }
    classBody.body.push(this.parseClassProperty(prop));
  }
  pushClassPrivateProperty(classBody, prop) {
    const node = this.parseClassPrivateProperty(prop);
    classBody.body.push(node);
    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);
  }
  pushClassAccessorProperty(classBody, prop, isPrivate) {
    if (!isPrivate && !prop.computed) {
      const key = prop.key;
      if (key.name === "constructor" || key.value === "constructor") {
        this.raise(Errors.ConstructorClassField, {
          at: key
        });
      }
    }
    const node = this.parseClassAccessorProperty(prop);
    classBody.body.push(node);
    if (isPrivate) {
      this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);
    }
  }
  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true));
  }
  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
    const node = this.parseMethod(method, isGenerator, isAsync, false, false, "ClassPrivateMethod", true);
    classBody.body.push(node);
    const kind = node.kind === "get" ? node.static ? 6 : 2 : node.kind === "set" ? node.static ? 5 : 1 : 0;
    this.declareClassPrivateMethodInScope(node, kind);
  }
  declareClassPrivateMethodInScope(node, kind) {
    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.loc.start);
  }
  parsePostMemberNameModifiers(methodOrProp) {}
  parseClassPrivateProperty(node) {
    this.parseInitializer(node);
    this.semicolon();
    return this.finishNode(node, "ClassPrivateProperty");
  }
  parseClassProperty(node) {
    this.parseInitializer(node);
    this.semicolon();
    return this.finishNode(node, "ClassProperty");
  }
  parseClassAccessorProperty(node) {
    this.parseInitializer(node);
    this.semicolon();
    return this.finishNode(node, "ClassAccessorProperty");
  }
  parseInitializer(node) {
    this.scope.enter(64 | 16);
    this.expressionScope.enter(newExpressionScope());
    this.prodParam.enter(0);
    node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null;
    this.expressionScope.exit();
    this.prodParam.exit();
    this.scope.exit();
  }
  parseClassId(node, isStatement, optionalId, bindingType = 8331) {
    if (tokenIsIdentifier(this.state.type)) {
      node.id = this.parseIdentifier();
      if (isStatement) {
        this.declareNameFromIdentifier(node.id, bindingType);
      }
    } else {
      if (optionalId || !isStatement) {
        node.id = null;
      } else {
        throw this.raise(Errors.MissingClassName, {
          at: this.state.startLoc
        });
      }
    }
  }
  parseClassSuper(node) {
    node.superClass = this.eat(81) ? this.parseExprSubscripts() : null;
  }
  parseExport(node, decorators) {
    const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, true);
    const hasDefault = this.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier);
    const parseAfterDefault = !hasDefault || this.eat(12);
    const hasStar = parseAfterDefault && this.eatExportStar(node);
    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);
    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12));
    const isFromRequired = hasDefault || hasStar;
    if (hasStar && !hasNamespace) {
      if (hasDefault) this.unexpected();
      if (decorators) {
        throw this.raise(Errors.UnsupportedDecoratorExport, {
          at: node
        });
      }
      this.parseExportFrom(node, true);
      return this.finishNode(node, "ExportAllDeclaration");
    }
    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);
    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) {
      this.unexpected(null, 5);
    }
    if (hasNamespace && parseAfterNamespace) {
      this.unexpected(null, 98);
    }
    let hasDeclaration;
    if (isFromRequired || hasSpecifiers) {
      hasDeclaration = false;
      if (decorators) {
        throw this.raise(Errors.UnsupportedDecoratorExport, {
          at: node
        });
      }
      this.parseExportFrom(node, isFromRequired);
    } else {
      hasDeclaration = this.maybeParseExportDeclaration(node);
    }
    if (isFromRequired || hasSpecifiers || hasDeclaration) {
      var _node2$declaration;
      const node2 = node;
      this.checkExport(node2, true, false, !!node2.source);
      if (((_node2$declaration = node2.declaration) == null ? void 0 : _node2$declaration.type) === "ClassDeclaration") {
        this.maybeTakeDecorators(decorators, node2.declaration, node2);
      } else if (decorators) {
        throw this.raise(Errors.UnsupportedDecoratorExport, {
          at: node
        });
      }
      return this.finishNode(node2, "ExportNamedDeclaration");
    }
    if (this.eat(65)) {
      const node2 = node;
      const decl = this.parseExportDefaultExpression();
      node2.declaration = decl;
      if (decl.type === "ClassDeclaration") {
        this.maybeTakeDecorators(decorators, decl, node2);
      } else if (decorators) {
        throw this.raise(Errors.UnsupportedDecoratorExport, {
          at: node
        });
      }
      this.checkExport(node2, true, true);
      return this.finishNode(node2, "ExportDefaultDeclaration");
    }
    this.unexpected(null, 5);
  }
  eatExportStar(node) {
    return this.eat(55);
  }
  maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {
    if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {
      this.expectPlugin("exportDefaultFrom", maybeDefaultIdentifier == null ? void 0 : maybeDefaultIdentifier.loc.start);
      const id = maybeDefaultIdentifier || this.parseIdentifier(true);
      const specifier = this.startNodeAtNode(id);
      specifier.exported = id;
      node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
      return true;
    }
    return false;
  }
  maybeParseExportNamespaceSpecifier(node) {
    if (this.isContextual(93)) {
      if (!node.specifiers) node.specifiers = [];
      const specifier = this.startNodeAt(this.state.lastTokStartLoc);
      this.next();
      specifier.exported = this.parseModuleExportName();
      node.specifiers.push(this.finishNode(specifier, "ExportNamespaceSpecifier"));
      return true;
    }
    return false;
  }
  maybeParseExportNamedSpecifiers(node) {
    if (this.match(5)) {
      if (!node.specifiers) node.specifiers = [];
      const isTypeExport = node.exportKind === "type";
      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));
      node.source = null;
      node.declaration = null;
      if (this.hasPlugin("importAssertions")) {
        node.assertions = [];
      }
      return true;
    }
    return false;
  }
  maybeParseExportDeclaration(node) {
    if (this.shouldParseExportDeclaration()) {
      node.specifiers = [];
      node.source = null;
      if (this.hasPlugin("importAssertions")) {
        node.assertions = [];
      }
      node.declaration = this.parseExportDeclaration(node);
      return true;
    }
    return false;
  }
  isAsyncFunction() {
    if (!this.isContextual(95)) return false;
    const next = this.nextTokenInLineStart();
    return this.isUnparsedContextual(next, "function");
  }
  parseExportDefaultExpression() {
    const expr = this.startNode();
    if (this.match(68)) {
      this.next();
      return this.parseFunction(expr, 1 | 4);
    } else if (this.isAsyncFunction()) {
      this.next();
      this.next();
      return this.parseFunction(expr, 1 | 4 | 8);
    }
    if (this.match(80)) {
      return this.parseClass(expr, true, true);
    }
    if (this.match(26)) {
      if (this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport") === true) {
        this.raise(Errors.DecoratorBeforeExport, {
          at: this.state.startLoc
        });
      }
      return this.parseClass(this.maybeTakeDecorators(this.parseDecorators(false), this.startNode()), true, true);
    }
    if (this.match(75) || this.match(74) || this.isLet()) {
      throw this.raise(Errors.UnsupportedDefaultExport, {
        at: this.state.startLoc
      });
    }
    const res = this.parseMaybeAssignAllowIn();
    this.semicolon();
    return res;
  }
  parseExportDeclaration(node) {
    if (this.match(80)) {
      const node = this.parseClass(this.startNode(), true, false);
      return node;
    }
    return this.parseStatementListItem();
  }
  isExportDefaultSpecifier() {
    const {
      type
    } = this.state;
    if (tokenIsIdentifier(type)) {
      if (type === 95 && !this.state.containsEsc || type === 100) {
        return false;
      }
      if ((type === 130 || type === 129) && !this.state.containsEsc) {
        const {
          type: nextType
        } = this.lookahead();
        if (tokenIsIdentifier(nextType) && nextType !== 98 || nextType === 5) {
          this.expectOnePlugin(["flow", "typescript"]);
          return false;
        }
      }
    } else if (!this.match(65)) {
      return false;
    }
    const next = this.nextTokenStart();
    const hasFrom = this.isUnparsedContextual(next, "from");
    if (this.input.charCodeAt(next) === 44 || tokenIsIdentifier(this.state.type) && hasFrom) {
      return true;
    }
    if (this.match(65) && hasFrom) {
      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));
      return nextAfterFrom === 34 || nextAfterFrom === 39;
    }
    return false;
  }
  parseExportFrom(node, expect) {
    if (this.eatContextual(98)) {
      node.source = this.parseImportSource();
      this.checkExport(node);
      this.maybeParseImportAttributes(node);
      this.checkJSONModuleImport(node);
    } else if (expect) {
      this.unexpected();
    }
    this.semicolon();
  }
  shouldParseExportDeclaration() {
    const {
      type
    } = this.state;
    if (type === 26) {
      this.expectOnePlugin(["decorators", "decorators-legacy"]);
      if (this.hasPlugin("decorators")) {
        if (this.getPluginOption("decorators", "decoratorsBeforeExport") === true) {
          this.raise(Errors.DecoratorBeforeExport, {
            at: this.state.startLoc
          });
        }
        return true;
      }
    }
    return type === 74 || type === 75 || type === 68 || type === 80 || this.isLet() || this.isAsyncFunction();
  }
  checkExport(node, checkNames, isDefault, isFrom) {
    if (checkNames) {
      var _node$specifiers;
      if (isDefault) {
        this.checkDuplicateExports(node, "default");
        if (this.hasPlugin("exportDefaultFrom")) {
          var _declaration$extra;
          const declaration = node.declaration;
          if (declaration.type === "Identifier" && declaration.name === "from" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {
            this.raise(Errors.ExportDefaultFromAsIdentifier, {
              at: declaration
            });
          }
        }
      } else if ((_node$specifiers = node.specifiers) != null && _node$specifiers.length) {
        for (const specifier of node.specifiers) {
          const {
            exported
          } = specifier;
          const exportName = exported.type === "Identifier" ? exported.name : exported.value;
          this.checkDuplicateExports(specifier, exportName);
          if (!isFrom && specifier.local) {
            const {
              local
            } = specifier;
            if (local.type !== "Identifier") {
              this.raise(Errors.ExportBindingIsString, {
                at: specifier,
                localName: local.value,
                exportName
              });
            } else {
              this.checkReservedWord(local.name, local.loc.start, true, false);
              this.scope.checkLocalExport(local);
            }
          }
        }
      } else if (node.declaration) {
        if (node.declaration.type === "FunctionDeclaration" || node.declaration.type === "ClassDeclaration") {
          const id = node.declaration.id;
          if (!id) throw new Error("Assertion failure");
          this.checkDuplicateExports(node, id.name);
        } else if (node.declaration.type === "VariableDeclaration") {
          for (const declaration of node.declaration.declarations) {
            this.checkDeclaration(declaration.id);
          }
        }
      }
    }
  }
  checkDeclaration(node) {
    if (node.type === "Identifier") {
      this.checkDuplicateExports(node, node.name);
    } else if (node.type === "ObjectPattern") {
      for (const prop of node.properties) {
        this.checkDeclaration(prop);
      }
    } else if (node.type === "ArrayPattern") {
      for (const elem of node.elements) {
        if (elem) {
          this.checkDeclaration(elem);
        }
      }
    } else if (node.type === "ObjectProperty") {
      this.checkDeclaration(node.value);
    } else if (node.type === "RestElement") {
      this.checkDeclaration(node.argument);
    } else if (node.type === "AssignmentPattern") {
      this.checkDeclaration(node.left);
    }
  }
  checkDuplicateExports(node, exportName) {
    if (this.exportedIdentifiers.has(exportName)) {
      if (exportName === "default") {
        this.raise(Errors.DuplicateDefaultExport, {
          at: node
        });
      } else {
        this.raise(Errors.DuplicateExport, {
          at: node,
          exportName
        });
      }
    }
    this.exportedIdentifiers.add(exportName);
  }
  parseExportSpecifiers(isInTypeExport) {
    const nodes = [];
    let first = true;
    this.expect(5);
    while (!this.eat(8)) {
      if (first) {
        first = false;
      } else {
        this.expect(12);
        if (this.eat(8)) break;
      }
      const isMaybeTypeOnly = this.isContextual(130);
      const isString = this.match(133);
      const node = this.startNode();
      node.local = this.parseModuleExportName();
      nodes.push(this.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));
    }
    return nodes;
  }
  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {
    if (this.eatContextual(93)) {
      node.exported = this.parseModuleExportName();
    } else if (isString) {
      node.exported = cloneStringLiteral(node.local);
    } else if (!node.exported) {
      node.exported = cloneIdentifier(node.local);
    }
    return this.finishNode(node, "ExportSpecifier");
  }
  parseModuleExportName() {
    if (this.match(133)) {
      const result = this.parseStringLiteral(this.state.value);
      const surrogate = result.value.match(loneSurrogate);
      if (surrogate) {
        this.raise(Errors.ModuleExportNameHasLoneSurrogate, {
          at: result,
          surrogateCharCode: surrogate[0].charCodeAt(0)
        });
      }
      return result;
    }
    return this.parseIdentifier(true);
  }
  isJSONModuleImport(node) {
    if (node.assertions != null) {
      return node.assertions.some(({
        key,
        value
      }) => {
        return value.value === "json" && (key.type === "Identifier" ? key.name === "type" : key.value === "type");
      });
    }
    return false;
  }
  checkImportReflection(node) {
    const {
      specifiers
    } = node;
    const singleBindingType = specifiers.length === 1 ? specifiers[0].type : null;
    if (node.phase === "source") {
      if (singleBindingType !== "ImportDefaultSpecifier") {
        this.raise(Errors.SourcePhaseImportRequiresDefault, {
          at: specifiers[0].loc.start
        });
      }
    } else if (node.phase === "defer") {
      if (singleBindingType !== "ImportNamespaceSpecifier") {
        this.raise(Errors.DeferImportRequiresNamespace, {
          at: specifiers[0].loc.start
        });
      }
    } else if (node.module) {
      var _node$assertions;
      if (singleBindingType !== "ImportDefaultSpecifier") {
        this.raise(Errors.ImportReflectionNotBinding, {
          at: specifiers[0].loc.start
        });
      }
      if (((_node$assertions = node.assertions) == null ? void 0 : _node$assertions.length) > 0) {
        this.raise(Errors.ImportReflectionHasAssertion, {
          at: node.specifiers[0].loc.start
        });
      }
    }
  }
  checkJSONModuleImport(node) {
    if (this.isJSONModuleImport(node) && node.type !== "ExportAllDeclaration") {
      const {
        specifiers
      } = node;
      if (specifiers != null) {
        const nonDefaultNamedSpecifier = specifiers.find(specifier => {
          let imported;
          if (specifier.type === "ExportSpecifier") {
            imported = specifier.local;
          } else if (specifier.type === "ImportSpecifier") {
            imported = specifier.imported;
          }
          if (imported !== undefined) {
            return imported.type === "Identifier" ? imported.name !== "default" : imported.value !== "default";
          }
        });
        if (nonDefaultNamedSpecifier !== undefined) {
          this.raise(Errors.ImportJSONBindingNotDefault, {
            at: nonDefaultNamedSpecifier.loc.start
          });
        }
      }
    }
  }
  isPotentialImportPhase(isExport) {
    if (isExport) return false;
    return this.isContextual(105) || this.isContextual(97) || this.isContextual(127);
  }
  applyImportPhase(node, isExport, phase, loc) {
    if (isExport) {
      return;
    }
    if (phase === "module") {
      this.expectPlugin("importReflection", loc);
      node.module = true;
    } else if (this.hasPlugin("importReflection")) {
      node.module = false;
    }
    if (phase === "source") {
      this.expectPlugin("sourcePhaseImports", loc);
      node.phase = "source";
    } else if (phase === "defer") {
      this.expectPlugin("deferredImportEvaluation", loc);
      node.phase = "defer";
    } else if (this.hasPlugin("sourcePhaseImports")) {
      node.phase = null;
    }
  }
  parseMaybeImportPhase(node, isExport) {
    if (!this.isPotentialImportPhase(isExport)) {
      this.applyImportPhase(node, isExport, null);
      return null;
    }
    const phaseIdentifier = this.parseIdentifier(true);
    const {
      type
    } = this.state;
    const isImportPhase = tokenIsKeywordOrIdentifier(type) ? type !== 98 || this.lookaheadCharCode() === 102 : type !== 12;
    if (isImportPhase) {
      this.resetPreviousIdentifierLeadingComments(phaseIdentifier);
      this.applyImportPhase(node, isExport, phaseIdentifier.name, phaseIdentifier.loc.start);
      return null;
    } else {
      this.applyImportPhase(node, isExport, null);
      return phaseIdentifier;
    }
  }
  isPrecedingIdImportPhase(phase) {
    const {
      type
    } = this.state;
    return tokenIsIdentifier(type) ? type !== 98 || this.lookaheadCharCode() === 102 : type !== 12;
  }
  parseImport(node) {
    if (this.match(133)) {
      return this.parseImportSourceAndAttributes(node);
    }
    return this.parseImportSpecifiersAndAfter(node, this.parseMaybeImportPhase(node, false));
  }
  parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier) {
    node.specifiers = [];
    const hasDefault = this.maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier);
    const parseNext = !hasDefault || this.eat(12);
    const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);
    if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);
    this.expectContextual(98);
    return this.parseImportSourceAndAttributes(node);
  }
  parseImportSourceAndAttributes(node) {
    var _node$specifiers2;
    (_node$specifiers2 = node.specifiers) != null ? _node$specifiers2 : node.specifiers = [];
    node.source = this.parseImportSource();
    this.maybeParseImportAttributes(node);
    this.checkImportReflection(node);
    this.checkJSONModuleImport(node);
    this.semicolon();
    return this.finishNode(node, "ImportDeclaration");
  }
  parseImportSource() {
    if (!this.match(133)) this.unexpected();
    return this.parseExprAtom();
  }
  parseImportSpecifierLocal(node, specifier, type) {
    specifier.local = this.parseIdentifier();
    node.specifiers.push(this.finishImportSpecifier(specifier, type));
  }
  finishImportSpecifier(specifier, type, bindingType = 8201) {
    this.checkLVal(specifier.local, {
      in: {
        type
      },
      binding: bindingType
    });
    return this.finishNode(specifier, type);
  }
  parseImportAttributes() {
    this.expect(5);
    const attrs = [];
    const attrNames = new Set();
    do {
      if (this.match(8)) {
        break;
      }
      const node = this.startNode();
      const keyName = this.state.value;
      if (attrNames.has(keyName)) {
        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {
          at: this.state.startLoc,
          key: keyName
        });
      }
      attrNames.add(keyName);
      if (this.match(133)) {
        node.key = this.parseStringLiteral(keyName);
      } else {
        node.key = this.parseIdentifier(true);
      }
      this.expect(14);
      if (!this.match(133)) {
        throw this.raise(Errors.ModuleAttributeInvalidValue, {
          at: this.state.startLoc
        });
      }
      node.value = this.parseStringLiteral(this.state.value);
      attrs.push(this.finishNode(node, "ImportAttribute"));
    } while (this.eat(12));
    this.expect(8);
    return attrs;
  }
  parseModuleAttributes() {
    const attrs = [];
    const attributes = new Set();
    do {
      const node = this.startNode();
      node.key = this.parseIdentifier(true);
      if (node.key.name !== "type") {
        this.raise(Errors.ModuleAttributeDifferentFromType, {
          at: node.key
        });
      }
      if (attributes.has(node.key.name)) {
        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {
          at: node.key,
          key: node.key.name
        });
      }
      attributes.add(node.key.name);
      this.expect(14);
      if (!this.match(133)) {
        throw this.raise(Errors.ModuleAttributeInvalidValue, {
          at: this.state.startLoc
        });
      }
      node.value = this.parseStringLiteral(this.state.value);
      attrs.push(this.finishNode(node, "ImportAttribute"));
    } while (this.eat(12));
    return attrs;
  }
  maybeParseImportAttributes(node) {
    let attributes;
    let useWith = false;
    if (this.match(76)) {
      if (this.hasPrecedingLineBreak() && this.lookaheadCharCode() === 40) {
        return;
      }
      this.next();
      {
        if (this.hasPlugin("moduleAttributes")) {
          attributes = this.parseModuleAttributes();
        } else {
          this.expectImportAttributesPlugin();
          attributes = this.parseImportAttributes();
        }
      }
      useWith = true;
    } else if (this.isContextual(94) && !this.hasPrecedingLineBreak()) {
      if (this.hasPlugin("importAttributes")) {
        if (this.getPluginOption("importAttributes", "deprecatedAssertSyntax") !== true) {
          this.raise(Errors.ImportAttributesUseAssert, {
            at: this.state.startLoc
          });
        }
        this.addExtra(node, "deprecatedAssertSyntax", true);
      } else {
        this.expectOnePlugin(["importAttributes", "importAssertions"]);
      }
      this.next();
      attributes = this.parseImportAttributes();
    } else if (this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions")) {
      attributes = [];
    } else {
      if (this.hasPlugin("moduleAttributes")) {
        attributes = [];
      } else return;
    }
    if (!useWith && this.hasPlugin("importAssertions")) {
      node.assertions = attributes;
    } else {
      node.attributes = attributes;
    }
  }
  maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier) {
    if (maybeDefaultIdentifier) {
      const specifier = this.startNodeAtNode(maybeDefaultIdentifier);
      specifier.local = maybeDefaultIdentifier;
      node.specifiers.push(this.finishImportSpecifier(specifier, "ImportDefaultSpecifier"));
      return true;
    } else if (tokenIsKeywordOrIdentifier(this.state.type)) {
      this.parseImportSpecifierLocal(node, this.startNode(), "ImportDefaultSpecifier");
      return true;
    }
    return false;
  }
  maybeParseStarImportSpecifier(node) {
    if (this.match(55)) {
      const specifier = this.startNode();
      this.next();
      this.expectContextual(93);
      this.parseImportSpecifierLocal(node, specifier, "ImportNamespaceSpecifier");
      return true;
    }
    return false;
  }
  parseNamedImportSpecifiers(node) {
    let first = true;
    this.expect(5);
    while (!this.eat(8)) {
      if (first) {
        first = false;
      } else {
        if (this.eat(14)) {
          throw this.raise(Errors.DestructureNamedImport, {
            at: this.state.startLoc
          });
        }
        this.expect(12);
        if (this.eat(8)) break;
      }
      const specifier = this.startNode();
      const importedIsString = this.match(133);
      const isMaybeTypeOnly = this.isContextual(130);
      specifier.imported = this.parseModuleExportName();
      const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, node.importKind === "type" || node.importKind === "typeof", isMaybeTypeOnly, undefined);
      node.specifiers.push(importSpecifier);
    }
  }
  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
    if (this.eatContextual(93)) {
      specifier.local = this.parseIdentifier();
    } else {
      const {
        imported
      } = specifier;
      if (importedIsString) {
        throw this.raise(Errors.ImportBindingIsString, {
          at: specifier,
          importName: imported.value
        });
      }
      this.checkReservedWord(imported.name, specifier.loc.start, true, true);
      if (!specifier.local) {
        specifier.local = cloneIdentifier(imported);
      }
    }
    return this.finishImportSpecifier(specifier, "ImportSpecifier", bindingType);
  }
  isThisParam(param) {
    return param.type === "Identifier" && param.name === "this";
  }
}
class Parser extends StatementParser {
  constructor(options, input) {
    options = getOptions(options);
    super(options, input);
    this.options = options;
    this.initializeScopes();
    this.plugins = pluginsMap(this.options.plugins);
    this.filename = options.sourceFilename;
  }
  getScopeHandler() {
    return ScopeHandler;
  }
  parse() {
    this.enterInitialScopes();
    const file = this.startNode();
    const program = this.startNode();
    this.nextToken();
    file.errors = null;
    this.parseTopLevel(file, program);
    file.errors = this.state.errors;
    return file;
  }
}
function pluginsMap(plugins) {
  const pluginMap = new Map();
  for (const plugin of plugins) {
    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];
    if (!pluginMap.has(name)) pluginMap.set(name, options || {});
  }
  return pluginMap;
}
function parse(input, options) {
  var _options;
  if (((_options = options) == null ? void 0 : _options.sourceType) === "unambiguous") {
    options = Object.assign({}, options);
    try {
      options.sourceType = "module";
      const parser = getParser(options, input);
      const ast = parser.parse();
      if (parser.sawUnambiguousESM) {
        return ast;
      }
      if (parser.ambiguousScriptDifferentAst) {
        try {
          options.sourceType = "script";
          return getParser(options, input).parse();
        } catch (_unused) {}
      } else {
        ast.program.sourceType = "script";
      }
      return ast;
    } catch (moduleError) {
      try {
        options.sourceType = "script";
        return getParser(options, input).parse();
      } catch (_unused2) {}
      throw moduleError;
    }
  } else {
    return getParser(options, input).parse();
  }
}
function parseExpression(input, options) {
  const parser = getParser(options, input);
  if (parser.options.strictMode) {
    parser.state.strict = true;
  }
  return parser.getExpression();
}
function generateExportedTokenTypes(internalTokenTypes) {
  const tokenTypes = {};
  for (const typeName of Object.keys(internalTokenTypes)) {
    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);
  }
  return tokenTypes;
}
const tokTypes = generateExportedTokenTypes(tt);
function getParser(options, input) {
  let cls = Parser;
  if (options != null && options.plugins) {
    validatePlugins(options.plugins);
    cls = getParserClass(options.plugins);
  }
  return new cls(options, input);
}
const parserClassCache = {};
function getParserClass(pluginsFromOptions) {
  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));
  const key = pluginList.join("/");
  let cls = parserClassCache[key];
  if (!cls) {
    cls = Parser;
    for (const plugin of pluginList) {
      cls = mixinPlugins[plugin](cls);
    }
    parserClassCache[key] = cls;
  }
  return cls;
}
exports.parse = parse;
exports.parseExpression = parseExpression;
exports.tokTypes = tokTypes;
//# sourceMappingURL=index.js.map


/***/ }),

/***/ 3993:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const addon = __nccwpck_require__(6459);
const readline = __nccwpck_require__(1747);

const PRIVATE = {};

function enforcePrivate(nonce, className) {
  if (nonce !== PRIVATE) {
    throw new Error(`${className} constructor is private`);
  }
}

class CargoArtifact {
  constructor(nonce, kernel) {
    enforcePrivate(nonce, 'CargoArtifact');
    this._kernel = kernel;
  }

  findFileByCrateType(crateType) {
    return addon.findFileByCrateType(this._kernel, crateType);
  }
}

class CargoMessages {
  constructor(options) {
    options = options || {};
    this._mount = options.mount || null;
    this._manifestPath = options.manifestPath || null;
    this._verbose = options.verbose || false;
    this._kernel = options.file
      ? addon.fromFile(options.file, this._mount, this._manifestPath, this._verbose)
      : (process.stdin.resume(), addon.fromStdin(this._mount, this._manifestPath, this._verbose));
  }

  findArtifact(crateName) {
    const found = addon.findArtifact(this._kernel, crateName);
    return found
      ? new CargoArtifact(PRIVATE, found)
      : null;
  }
}

class CargoReader {
  constructor(input, options) {
    options = options || {};
    this._mount = options.mount || null;
    this._manifestPath = options.manifestPath || null;
    this._verbose = options.verbose || false;
    this._input = input;
    this._kernel = addon.createReader(this._mount, this._manifestPath, this._verbose);
  }

  async *[Symbol.asyncIterator]() {
    const rl = readline.createInterface({
      input: this._input
    });

    for await (const line of rl) {
      const { kernel, kind } = addon.readline(this._kernel, line);
      switch (kind) {
        case 0:
          yield new CompilerArtifact(PRIVATE, kernel);
          break;

        case 1:
          yield new CompilerMessage(PRIVATE, kernel);
          break;

        case 2:
          yield new BuildScriptExecuted(PRIVATE, kernel);
          break;

        case 3:
          yield new BuildFinished(PRIVATE, kernel);
          break;

        case 4:
          yield new TextLine(PRIVATE, kernel);
          break;
      }
    }
  }
}

class CargoMessage {
  isCompilerArtifact() { return false; }
  isCompilerMessage() { return false; }
  isBuildScriptExecuted() { return false; }
  isBuildFinished() { return false; }
  isTextLine() { return false; }
}

class CompilerArtifact extends CargoMessage {
  constructor(nonce, kernel) {
    super();
    enforcePrivate(nonce, 'CompilerArtifact');
    this._kernel = kernel;
  }

  isCompilerArtifact() { return true; }

  crateName() {
    return addon.compilerArtifactCrateName(this._kernel);
  }

  findFileByCrateType(crateType) {
    return addon.compilerArtifactFindFileByCrateType(this._kernel, crateType);
  }
}

class CompilerMessage extends CargoMessage {
  constructor(nonce, kernel) {
    super();
    enforcePrivate(nonce, 'CompilerMessage');
    this._kernel = kernel;
  }

  isCompilerMessage() { return true; }
}

class BuildScriptExecuted extends CargoMessage {
  constructor(nonce, kernel) {
    super();
    enforcePrivate(nonce, 'BuildScriptExecuted');
    this._kernel = kernel;
  }

  isBuildScriptExecuted() { return true; }
}

class BuildFinished extends CargoMessage {
  constructor(nonce, kernel) {
    super();
    enforcePrivate(nonce, 'BuildFinished');
    this._kernel = kernel;
  }

  isBuildFinished() { return true; }
}

class TextLine extends CargoMessage {
  constructor(nonce, kernel) {
    super();
    enforcePrivate(nonce, 'TextLine');
    this._kernel = kernel;
  }

  isTextLine() { return true; }
}

module.exports = {
  CargoMessages,
  CargoReader
};


/***/ }),

/***/ 6459:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

module.exports = (__nccwpck_require__(8372)/* .proxy */ .sj)({
  'darwin-x64': () => __nccwpck_require__(2990),
  'win32-x64-msvc': () => __nccwpck_require__(1324),
  'win32-arm64-msvc': () => __nccwpck_require__(7894),
  'darwin-x64': () => __nccwpck_require__(2990),
  'darwin-arm64': () => __nccwpck_require__(4404),
  'linux-x64-gnu': () => __nccwpck_require__(1316),
  'linux-arm-gnueabihf': () => __nccwpck_require__(5379),
  'android-arm-eabi': () => __nccwpck_require__(1738),
  'linux-arm64-gnu': () => __nccwpck_require__(1713)
});


/***/ }),

/***/ 8893:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.copyArtifact = exports.isNewer = void 0;
const fs = __importStar(__nccwpck_require__(3977));
const path = __importStar(__nccwpck_require__(9411));
async function isNewer(filename, outputFile) {
    try {
        const prevStats = await fs.stat(outputFile);
        const nextStats = await fs.stat(filename);
        return nextStats.mtime > prevStats.mtime;
    }
    catch (_err) { }
    return true;
}
exports.isNewer = isNewer;
async function copyArtifact(src, dest) {
    if (!(await isNewer(src, dest))) {
        return;
    }
    const destDir = path.dirname(dest);
    await fs.mkdir(destDir, { recursive: true });
    // Apple Silicon (M1, etc.) requires shared libraries to be signed. However,
    // the macOS code signing cache isn't cleared when overwriting a file.
    // Deleting the file before copying works around the issue.
    //
    // Unfortunately, this workaround is incomplete because the file must be
    // deleted from the location it is loaded. If further steps in the user's
    // build process copy or move the file in place, the code signing cache
    // will not be cleared.
    //
    // https://github.com/neon-bindings/neon/issues/911
    if (path.extname(dest) === ".node") {
        try {
            await fs.unlink(dest);
        }
        catch (_e) {
            // Ignore errors; the file might not exist
        }
    }
    await fs.copyFile(src, dest);
}
exports.copyArtifact = copyArtifact;


/***/ }),

/***/ 9173:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.normalizeBinaryCfg = void 0;
const platform_cjs_1 = __nccwpck_require__(2147);
const util_cjs_1 = __nccwpck_require__(5304);
const neon_cjs_1 = __nccwpck_require__(4941);
function assertIsBinaryV1(json) {
    (0, util_cjs_1.assertHasProps)(['binary'], json, "neon");
    const binary = json.binary;
    if (!binary || typeof binary !== 'object') {
        throw new TypeError(`expected "neon.binary" to be an object, found ${binary}`);
    }
    (0, util_cjs_1.assertHasProps)(['rust', 'node', 'platform', 'arch', 'abi'], binary, "neon.binary");
    if (typeof binary.rust !== 'string' || !(0, platform_cjs_1.isRustTarget)(binary.rust)) {
        throw new TypeError(`expected "neon.binary.rust" to be a valid Rust target, found ${binary.rust}`);
    }
    if (!(0, platform_cjs_1.isNodePlatform)(binary.node)) {
        throw new TypeError(`expected "neon.binary.node" to be a valid Node platform, found ${binary.node}`);
    }
    if (typeof binary.platform !== 'string') {
        throw new TypeError(`expected "neon.binary.platform" to be a string, found ${binary.platform}`);
    }
    if (typeof binary.arch !== 'string') {
        throw new TypeError(`expected "neon.binary.arch" to be a string, found ${binary.arch}`);
    }
    if (binary.abi !== null && typeof binary.abi !== 'string') {
        throw new TypeError(`expected "neon.binary.abi" to be a string or null, found ${binary.abi}`);
    }
}
function assertIsBinaryV2(json) {
    if (!json || typeof json !== 'object') {
        throw new TypeError(`expected "neon" to be an object, found ${json}`);
    }
    (0, util_cjs_1.assertHasProps)(['rust', 'node', 'platform', 'arch', 'abi'], json, "neon");
    if (!(0, platform_cjs_1.isRustTarget)(json.rust)) {
        throw new TypeError(`expected "neon.rust" to be a valid Rust target, found ${json.rust}`);
    }
    if (!(0, platform_cjs_1.isNodePlatform)(json.node)) {
        throw new TypeError(`expected "neon.node" to be a valid Node platform, found ${json.node}`);
    }
    if (typeof json.platform !== 'string') {
        throw new TypeError(`expected "neon.platform" to be a string, found ${json.platform}`);
    }
    if (typeof json.arch !== 'string') {
        throw new TypeError(`expected "neon.arch" to be a string, found ${json.arch}`);
    }
    if (json.abi !== null && typeof json.abi !== 'string') {
        throw new TypeError(`expected "neon.abi" to be a string or null, found ${json.abi}`);
    }
}
function normalizeBinaryCfg(json) {
    (0, neon_cjs_1.assertHasNeonCfg)(json);
    // V3 format: {
    //   neon: {
    //     type: 'binary',
    //     rust: RustTarget,
    //     node: NodeTarget,
    //     os: string,
    //     arch: string,
    //     abi: string | null
    //   }
    // }
    if ('type' in json.neon && 'os' in json.neon) {
        return false;
    }
    // V2 format: {
    //   neon: {
    //     type: 'binary',
    //     rust: RustTarget,
    //     node: NodeTarget,
    //     platform: string,
    //     arch: string,
    //     abi: string | null
    //   }
    // }
    if ('type' in json.neon) {
        json.neon = upgradeBinaryV2(json.neon);
        return true;
    }
    // V1 format: {
    //   neon: {
    //     binary: {
    //       rust: RustTarget,
    //       node: NodeTarget,
    //       platform: string,
    //       arch: string,
    //       abi: string | null
    //     }
    //   }
    // }
    json.neon = upgradeBinaryV1(json.neon);
    return true;
}
exports.normalizeBinaryCfg = normalizeBinaryCfg;
function upgradeBinaryV1(json) {
    assertIsBinaryV1(json);
    return {
        type: 'binary',
        rust: json.binary.rust,
        node: json.binary.node,
        os: json.binary.platform,
        arch: json.binary.arch,
        abi: json.binary.abi
    };
}
function upgradeBinaryV2(json) {
    assertIsBinaryV2(json);
    return {
        type: 'binary',
        rust: json.rust,
        node: json.node,
        os: json.platform,
        arch: json.arch,
        abi: json.abi
    };
}


/***/ }),

/***/ 4980:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BinaryManifest = exports.SCHEMA_VERSION = void 0;
const platform_cjs_1 = __nccwpck_require__(2147);
const neon_cjs_1 = __nccwpck_require__(4941);
const util_cjs_1 = __nccwpck_require__(5304);
const legacy_cjs_1 = __nccwpck_require__(9173);
exports.SCHEMA_VERSION = 3;
function assertIsBinaryCfg(json) {
    (0, util_cjs_1.assertHasProps)(['type', 'rust', 'node', 'os', 'arch', 'abi'], json, "neon");
    if (json.type !== 'binary') {
        throw new TypeError(`expected "neon.type" property to be "binary", found ${json.type}`);
    }
    if (typeof json.rust !== 'string' || !(0, platform_cjs_1.isRustTarget)(json.rust)) {
        throw new TypeError(`expected "neon.rust" to be a valid Rust target, found ${json.rust}`);
    }
    if (typeof json.node !== 'string' || !(0, platform_cjs_1.isNodePlatform)(json.node)) {
        throw new TypeError(`expected "neon.node" to be a valid Node target, found ${json.node}`);
    }
    if (typeof json.os !== 'string') {
        throw new TypeError(`expected "neon.os" to be a string, found ${json.os}`);
    }
    if (typeof json.arch !== 'string') {
        throw new TypeError(`expected "neon.arch" to be a string, found ${json.arch}`);
    }
    if (json.abi !== null && typeof json.abi !== 'string') {
        throw new TypeError(`expected "neon.abi" to be a string or null, found ${json.abi}`);
    }
}
function assertHasBinaryCfg(json) {
    (0, neon_cjs_1.assertHasNeonCfg)(json);
    assertIsBinaryCfg(json.neon);
}
class BinaryManifest extends util_cjs_1.AbstractManifest {
    constructor(dir, json, isNew) {
        super(json);
        this.dir = dir;
        this._schemaUpgraded = (0, legacy_cjs_1.normalizeBinaryCfg)(this._json);
        this._targetChanged = false;
        assertHasBinaryCfg(this._json);
        this._binaryJSON = this._json;
        this._new = isNew;
    }
    get isNew() {
        return this._new;
    }
    get schemaUpgraded() {
        return this._schemaUpgraded;
    }
    get targetChanged() {
        return this._targetChanged;
    }
    cfg() {
        return this._binaryJSON.neon;
    }
    setTarget(target) {
        const targetInfo = (0, platform_cjs_1.describeTarget)(target);
        this._json.os = targetInfo.os;
        this._json.cpu = targetInfo.arch;
        this._binaryJSON.neon.rust = target;
        this._binaryJSON.neon.os = targetInfo.os;
        this._binaryJSON.neon.arch = targetInfo.arch;
        this._binaryJSON.neon.abi = targetInfo.abi;
        this._targetChanged = true;
    }
    hasUnsavedChanges() {
        return this._new || this._schemaUpgraded || this._targetChanged;
    }
    async save(log) {
        await super.save(log);
        this._new = false;
        this._schemaUpgraded = false;
        this._targetChanged = false;
    }
}
exports.BinaryManifest = BinaryManifest;


/***/ }),

/***/ 1796:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NPMCacheCfg = void 0;
const fs = __importStar(__nccwpck_require__(3977));
const path = __importStar(__nccwpck_require__(9411));
const jscodeshift_1 = __importDefault(__nccwpck_require__(7416));
const platform_cjs_1 = __nccwpck_require__(2147);
const package_cjs_1 = __nccwpck_require__(9531);
const PLATFORMS_DIR = 'platforms';
class NPMCacheCfg {
    constructor(manifest, outDir = PLATFORMS_DIR) {
        this.type = 'npm';
        this.manifest = manifest;
        this.dir = path.join(manifest.dir, outDir);
        const packages = Object.create(null);
        const platforms = manifest.allPlatforms();
        for (const key in platforms) {
            const node = key;
            const rust = platforms[node];
            packages[node] = package_cjs_1.BinaryPackage.defer(this, node, rust);
        }
        this._packages = packages;
    }
    getPlatformOutputPath(platform) {
        return this._packages[platform]
            ? path.join(this.dir, platform, 'index.node')
            : undefined;
    }
    async setPlatformTarget(platform, target) {
        const pkg = this._packages[platform];
        if (!pkg) {
            this._packages[platform] = package_cjs_1.BinaryPackage.create(this, platform, target);
        }
        else {
            await pkg.setTarget(target);
        }
    }
    hasUnsavedChanges() {
        for (const key in this._packages) {
            const pkg = this._packages[key];
            if (pkg.hasUnsavedChanges()) {
                return true;
            }
        }
        return false;
    }
    newPlatforms() {
        const result = [];
        for (const node in this._packages) {
            if (this._packages[node].isNew()) {
                result.push(node);
            }
        }
        return result;
    }
    async saveChanges(log) {
        const newPlatforms = this.newPlatforms();
        for (const node in this._packages) {
            const pkg = this._packages[node];
            if (pkg.hasUnsavedChanges()) {
                await pkg.saveChanges(log);
            }
        }
        if (newPlatforms.length > 0) {
            await this.updateLoader(newPlatforms);
        }
    }
    async updateLoader(platforms) {
        const cfg = this.manifest.cfg();
        if (!cfg.load) {
            return;
        }
        const loaderPath = path.join(this.manifest.dir, cfg.load);
        const loader = await fs.readFile(loaderPath, 'utf8');
        function isPlatformTable(p) {
            return p.value.properties.every(p => {
                return p.type === 'Property' &&
                    p.key.type === 'Literal' &&
                    (0, platform_cjs_1.isNodePlatform)(p.key.value);
            });
        }
        const result = (0, jscodeshift_1.default)(loader)
            .find(jscodeshift_1.default.ObjectExpression)
            .filter(isPlatformTable)
            .replaceWith((p) => {
            const newProps = platforms.map(platform => {
                return jscodeshift_1.default.property('init', jscodeshift_1.default.literal(platform), jscodeshift_1.default.arrowFunctionExpression([], jscodeshift_1.default.callExpression(jscodeshift_1.default.identifier('require'), [jscodeshift_1.default.literal(`${cfg.org}/${platform}`)])));
            });
            return jscodeshift_1.default.objectExpression([...p.value.properties, ...newProps]);
        })
            .toSource({ quote: 'single' });
        await fs.writeFile(loaderPath, result, 'utf8');
    }
    packageNames() {
        const cfg = this.manifest.cfg();
        return Object.keys(this.manifest.allPlatforms()).map(key => `${cfg.org}/${key}`);
    }
    updatePlatforms(lib) {
        let changed = false;
        const preamble = lib.preamble;
        if (!preamble.optionalDependencies) {
            preamble.optionalDependencies = {};
            changed = true;
        }
        const packages = this.packageNames();
        for (const pkg of packages) {
            if (preamble.optionalDependencies[pkg] !== lib.version) {
                preamble.optionalDependencies[pkg] = lib.version;
                changed = true;
            }
        }
        return changed;
    }
}
exports.NPMCacheCfg = NPMCacheCfg;


/***/ }),

/***/ 9531:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BinaryPackage = void 0;
const platform_cjs_1 = __nccwpck_require__(2147);
const manifest_cjs_1 = __nccwpck_require__(4980);
const util_cjs_1 = __nccwpck_require__(5304);
const path = __importStar(__nccwpck_require__(9411));
const fs = __importStar(__nccwpck_require__(3977));
async function loadManifest(cacheCfg, node, rust) {
    const dir = path.join(cacheCfg.dir, node);
    const json = await (0, util_cjs_1.readManifest)(dir);
    return new manifest_cjs_1.BinaryManifest(dir, json, false);
}
class BinaryPackage {
    constructor(cacheCfg, node, rust, manifest) {
        this._cacheCfg = cacheCfg;
        this._node = node;
        this._rust = rust;
        this._manifest = manifest;
    }
    async manifest() {
        if (!this._manifest) {
            this._manifest = await loadManifest(this._cacheCfg, this._node, this._rust);
        }
        return this._manifest;
    }
    isNew() {
        return !!(this._manifest && this._manifest.isNew);
    }
    schemaUpgraded() {
        return !!(this._manifest && this._manifest.schemaUpgraded);
    }
    targetChanged() {
        return !!(this._manifest && this._manifest.targetChanged);
    }
    hasUnsavedChanges() {
        return this.isNew() || this.schemaUpgraded() || this.targetChanged();
    }
    async saveChanges(log) {
        const manifest = await this.manifest();
        if (this.isNew()) {
            log(`prebuild manifest: ${manifest.stringify()}`);
            log(`creating ${manifest.dir}`);
            await fs.mkdir(manifest.dir, { recursive: true });
            log(`created ${manifest.dir}`);
            log(`creating ${manifest.dir}/README.md`);
            await fs.writeFile(path.join(manifest.dir, "README.md"), `# \`${manifest.name}\`\n\n${manifest.description}\n`);
            log(`creating ${manifest.dir}/package.json`);
            await manifest.save(log);
        }
        else if (manifest.hasUnsavedChanges()) {
            log(`saved changes to ${manifest.dir}/package.json`);
            await manifest.save(log);
        }
    }
    async setTarget(target) {
        (await this.manifest()).setTarget(target);
    }
    // Lazily load a package. The manifest will actually be read from
    // disk via this.manifest() the first time it's invoked.
    static defer(cacheCfg, node, rust) {
        return new BinaryPackage(cacheCfg, node, rust, null);
    }
    static create(cacheCfg, node, rust) {
        const targetInfo = (0, platform_cjs_1.describeTarget)(rust);
        const libraryManifest = cacheCfg.manifest;
        const org = libraryManifest.cfg().org;
        const name = `${org}/${node}`;
        const json = {
            name,
            description: `Prebuilt binary package for \`${libraryManifest.name}\` on \`${targetInfo.node}\`.`,
            version: libraryManifest.version,
            os: [targetInfo.os],
            cpu: [targetInfo.arch],
            main: "index.node",
            files: ["index.node"],
            neon: {
                type: "binary",
                rust: rust,
                node: targetInfo.node,
                os: targetInfo.os,
                arch: targetInfo.arch,
                abi: targetInfo.abi
            }
        };
        libraryManifest.copyOptionalKeys(json);
        const binaryManifest = new manifest_cjs_1.BinaryManifest(path.join(cacheCfg.dir, node), json, true);
        return new BinaryPackage(cacheCfg, node, rust, binaryManifest);
    }
}
exports.BinaryPackage = BinaryPackage;


/***/ }),

/***/ 4696:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

var __webpack_unused_export__;

__webpack_unused_export__ = ({ value: true });
exports.N = void 0;
var library_cjs_1 = __nccwpck_require__(9736);
Object.defineProperty(exports, "N", ({ enumerable: true, get: function () { return library_cjs_1.LibraryManifest; } }));


/***/ }),

/***/ 5333:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.normalizeLibraryCfg = void 0;
const platform_cjs_1 = __nccwpck_require__(2147);
const util_cjs_1 = __nccwpck_require__(5304);
const neon_cjs_1 = __nccwpck_require__(4941);
function assertIsLibraryV1(json) {
    (0, util_cjs_1.assertIsObject)(json, "neon");
    for (const key in json) {
        const value = json[key];
        if (!(0, platform_cjs_1.isRustTarget)(key)) {
            throw new TypeError(`target table key ${key} is not a valid Rust target`);
        }
        if (typeof value !== 'string') {
            throw new TypeError(`target table value ${value} is not a string`);
        }
    }
}
function normalizeLibraryCfg(json) {
    (0, neon_cjs_1.assertHasNeonCfg)(json);
    // V5 format: {
    //   type: 'library',
    //   org: string,
    //   platforms: PlatformFamily,
    //   load?: string | undefined
    // }
    if ('type' in json.neon && json.neon.type === 'library') {
        return false;
    }
    // V4 format: {
    //   neon: {
    //     type: 'source',
    //     org: string,
    //     platforms: PlatformFamily,
    //     load?: string | undefined
    //   }
    // }
    if ('type' in json.neon && 'platforms' in json.neon) {
        json.neon.type = 'library';
        return true;
    }
    // V3 format: {
    //   neon: {
    //     type: 'source',
    //     org: string,
    //     targets: PlatformFamily
    //   }
    // }
    if ('type' in json.neon) {
        const org = json.neon['org'];
        const targets = json.neon['targets'];
        (0, platform_cjs_1.assertIsPlatformFamily)(targets, "neon.targets");
        json.neon = {
            type: 'library',
            org,
            platforms: targets
        };
        return true;
    }
    // V2 format: {
    //   neon: {
    //     org: string,
    //     targets: { Node => Rust }
    //   }
    // }
    if ('org' in json.neon) {
        const platforms = json.neon['targets'];
        (0, platform_cjs_1.assertIsPlatformMap)(platforms, "neon.targets");
        json.neon = {
            type: 'library',
            org: json.neon.org,
            platforms
        };
        return true;
    }
    // V1 format: {
    //   neon: {
    //     targets: { Rust => fully-qualified package name }
    //   }
    // }
    const targets = json.neon['targets'];
    assertIsLibraryV1(targets);
    json.neon = upgradeLibraryV1(targets);
    return true;
}
exports.normalizeLibraryCfg = normalizeLibraryCfg;
function upgradeLibraryV1(object) {
    function splitSwap([key, value]) {
        if (!/^@.*\//.test(value)) {
            throw new TypeError(`expected namespaced npm package name, found ${value}`);
        }
        const pkg = value.split('/')[1];
        (0, platform_cjs_1.assertIsNodePlatform)(pkg);
        (0, platform_cjs_1.assertIsRustTarget)(key);
        return [pkg, key];
    }
    const entries = Object.entries(object).map(splitSwap);
    const orgs = new Set(Object.values(object).map(v => v.split('/')[0]));
    if (orgs.size === 0) {
        throw new Error("empty target table");
    }
    else if (orgs.size > 1) {
        throw new Error(`multiple npm orgs found: ${orgs}`);
    }
    return {
        type: 'library',
        org: [...orgs][0],
        platforms: Object.fromEntries(entries)
    };
}


/***/ }),

/***/ 9736:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LibraryManifest = exports.SCHEMA_VERSION = void 0;
const platform_cjs_1 = __nccwpck_require__(2147);
const neon_cjs_1 = __nccwpck_require__(4941);
const util_cjs_1 = __nccwpck_require__(5304);
const legacy_cjs_1 = __nccwpck_require__(5333);
const npm_cjs_1 = __nccwpck_require__(1796);
function assertIsLibraryCfg(json) {
    (0, util_cjs_1.assertHasProps)(['type', 'org', 'platforms'], json, "neon");
    if (json.type !== 'library') {
        throw new TypeError(`expected "neon.type" property to be "library", found ${json.type}`);
    }
    if (typeof json.org !== 'string') {
        throw new TypeError(`expected "neon.org" to be a string, found ${json.org}`);
    }
    (0, platform_cjs_1.assertIsPlatformFamily)(json.platforms, "neon.platforms");
    if ('load' in json) {
        if (typeof json.load !== 'string' && typeof json.load !== 'undefined') {
            throw new TypeError(`expected "neon.load" to be a string, found ${json.load}`);
        }
    }
}
function assertHasLibraryCfg(json) {
    (0, neon_cjs_1.assertHasNeonCfg)(json);
    assertIsLibraryCfg(json.neon);
}
exports.SCHEMA_VERSION = 5;
// The source manifest is the source of truth for all Neon
// project metadata. This means you never need to go searching
// for any other files to query the Neon project's metadata.
// (Some data is replicated in the binary manifests, however,
// since they are independently published in npm.)
class LibraryManifest extends util_cjs_1.AbstractManifest {
    constructor(dir, json) {
        super(json);
        this.dir = dir;
        this._normalized = (0, legacy_cjs_1.normalizeLibraryCfg)(this._json);
        this._updatedPlatforms = false;
        assertHasLibraryCfg(this._json);
        this._sourceJSON = this._json;
        this._expandedPlatforms = (0, platform_cjs_1.expandPlatformFamily)(this._sourceJSON.neon.platforms);
        this._cacheCfg = ('org' in this._sourceJSON.neon) ? new npm_cjs_1.NPMCacheCfg(this) : null;
    }
    hasUnsavedChanges() {
        return this._normalized ||
            this._updatedPlatforms ||
            !!(this._cacheCfg && this._cacheCfg.hasUnsavedChanges());
    }
    static async load(dir = process.cwd()) {
        return new LibraryManifest(dir, await (0, util_cjs_1.readManifest)(dir));
    }
    async saveChanges(log) {
        if (!this.hasUnsavedChanges()) {
            return;
        }
        await this.save(log);
        if (this._cacheCfg) {
            await this._cacheCfg.saveChanges(log);
        }
        this._normalized = false;
        this._updatedPlatforms = false;
    }
    get preamble() {
        return this._json;
    }
    cfg() {
        return this._sourceJSON.neon;
    }
    allPlatforms() {
        return this._expandedPlatforms;
    }
    async addTargetPair(pair) {
        const { node, rust } = pair;
        if (this._expandedPlatforms[node] === rust) {
            return;
        }
        this._expandedPlatforms[node] = rust;
        if (this._cacheCfg) {
            this._cacheCfg.setPlatformTarget(node, rust);
        }
    }
    async addNodePlatform(platform) {
        const targets = (0, platform_cjs_1.node2Rust)(platform);
        if (targets.length > 1) {
            throw new Error(`multiple Rust targets found for Node platform ${platform}; please specify one of ${targets.join(', ')}`);
        }
        await this.addTargetPair({ node: platform, rust: targets[0] });
    }
    async addRustTarget(target) {
        await this.addTargetPair({ node: (0, platform_cjs_1.rust2Node)(target), rust: target });
    }
    filterChanges(family) {
        let changes = Object.create(null);
        for (const [key, value] of Object.entries(family)) {
            const node = key;
            const rust = value;
            if (this._expandedPlatforms[node] === rust) {
                continue;
            }
            changes[node] = rust;
        }
        return changes;
    }
    async addPlatforms(map) {
        let changes = this.filterChanges(map);
        for (const [key, value] of Object.entries(changes)) {
            const node = key;
            const rust = value;
            if (this._cacheCfg) {
                await this._cacheCfg.setPlatformTarget(node, rust);
            }
            this._expandedPlatforms[node] = rust;
        }
        return changes;
    }
    async addPlatformPreset(preset) {
        const platformsSrc = this.cfg().platforms;
        if (typeof platformsSrc === 'string') {
            this.cfg().platforms = [platformsSrc, preset];
            await this.addPlatforms((0, platform_cjs_1.expandPlatformFamily)(preset));
        }
        else if (Array.isArray(platformsSrc)) {
            platformsSrc.push(preset);
            await this.addPlatforms((0, platform_cjs_1.expandPlatformFamily)(preset));
        }
        // Edge case: an empty object can be treated like an empty array
        else if (Object.keys(platformsSrc).length === 0) {
            this.cfg().platforms = [];
            await this.addPlatformPreset(preset);
        }
        else {
            const added = await this.addPlatforms((0, platform_cjs_1.expandPlatformFamily)(preset));
            Object.assign(platformsSrc, added);
        }
    }
    updatePlatforms() {
        if (this._cacheCfg && this._cacheCfg.updatePlatforms(this)) {
            this._updatedPlatforms = true;
        }
    }
    getPlatformOutputPath(platform) {
        return this._cacheCfg
            ? this._cacheCfg.getPlatformOutputPath(platform)
            : undefined;
    }
}
exports.LibraryManifest = LibraryManifest;


/***/ }),

/***/ 4941:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.assertHasNeonCfg = void 0;
const util_cjs_1 = __nccwpck_require__(5304);
function assertHasNeonCfg(json) {
    if (!('neon' in json)) {
        throw new TypeError('property "neon" not found');
    }
    (0, util_cjs_1.assertIsObject)(json.neon, "neon");
}
exports.assertHasNeonCfg = assertHasNeonCfg;


/***/ }),

/***/ 2147:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.rust2Node = exports.node2Rust = exports.describeTarget = exports.expandPlatformFamily = exports.expandPlatformPreset = exports.assertIsPlatformFamily = exports.assertIsPlatformMap = exports.assertIsPlatformPreset = exports.isPlatformPreset = exports.assertIsNodePlatform = exports.isNodePlatform = exports.assertIsRustTarget = exports.isRustTarget = void 0;
const rust_json_1 = __importDefault(__nccwpck_require__(6685));
const node_json_1 = __importDefault(__nccwpck_require__(2642));
const preset_json_1 = __importDefault(__nccwpck_require__(6757));
const util_cjs_1 = __nccwpck_require__(5304);
function isRustTarget(x) {
    return (typeof x === 'string') && (x in rust_json_1.default);
}
exports.isRustTarget = isRustTarget;
function assertIsRustTarget(x) {
    if (!isRustTarget(x)) {
        throw new RangeError(`invalid Rust target: ${x}`);
    }
}
exports.assertIsRustTarget = assertIsRustTarget;
function isNodePlatform(x) {
    return (typeof x === 'string') && (x in node_json_1.default);
}
exports.isNodePlatform = isNodePlatform;
function assertIsNodePlatform(x) {
    if (!isNodePlatform(x)) {
        throw new RangeError(`invalid platform: ${x}`);
    }
}
exports.assertIsNodePlatform = assertIsNodePlatform;
function isPlatformPreset(x) {
    return (typeof x === 'string') && (x in preset_json_1.default);
}
exports.isPlatformPreset = isPlatformPreset;
function assertIsPlatformPreset(x) {
    if (!isPlatformPreset(x)) {
        throw new RangeError(`invalid platform family preset: ${x}`);
    }
}
exports.assertIsPlatformPreset = assertIsPlatformPreset;
function assertIsPlatformMap(json, path) {
    (0, util_cjs_1.assertIsObject)(json, path);
    for (const key in json) {
        const value = json[key];
        if (!isNodePlatform(key)) {
            throw new TypeError(`platform table key ${key} is not a valid Node platform`);
        }
        if (typeof value !== 'string' || !isRustTarget(value)) {
            throw new TypeError(`platform table value ${value} is not a valid Rust target`);
        }
    }
}
exports.assertIsPlatformMap = assertIsPlatformMap;
function assertIsPlatformFamily(json, path) {
    if (typeof json === 'string') {
        assertIsPlatformPreset(json);
        return;
    }
    if (Array.isArray(json)) {
        for (const elt of json) {
            assertIsPlatformPreset(elt);
        }
        return;
    }
    assertIsPlatformMap(json, path);
}
exports.assertIsPlatformFamily = assertIsPlatformFamily;
function lookupPlatformPreset(key) {
    return preset_json_1.default[key];
}
function merge(maps) {
    const merged = Object.create(null);
    for (const map of maps) {
        Object.assign(merged, map);
    }
    return merged;
}
function expandPlatformPreset(preset) {
    return expandPlatformFamily(lookupPlatformPreset(preset));
}
exports.expandPlatformPreset = expandPlatformPreset;
function expandPlatformFamily(family) {
    return isPlatformPreset(family)
        ? expandPlatformPreset(family)
        : Array.isArray(family)
            ? merge(family.map(expandPlatformFamily))
            : family;
}
exports.expandPlatformFamily = expandPlatformFamily;
function describeTarget(target) {
    const node = rust_json_1.default[target];
    if (!isNodePlatform(node)) {
        throw new Error(`Rust target ${target} not supported`);
    }
    const nodeDescriptor = node_json_1.default[node];
    const badTarget = nodeDescriptor.llvm.find(t => !isRustTarget(t));
    if (badTarget) {
        throw new Error(`Rust target ${badTarget} not supported`);
    }
    return {
        node,
        os: nodeDescriptor.os,
        arch: nodeDescriptor.arch,
        abi: nodeDescriptor.abi,
        llvm: nodeDescriptor.llvm
    };
}
exports.describeTarget = describeTarget;
function node2Rust(target) {
    return node_json_1.default[target].llvm.map(rt => {
        assertIsRustTarget(rt);
        return rt;
    });
}
exports.node2Rust = node2Rust;
function rust2Node(target) {
    const nt = rust_json_1.default[target];
    assertIsNodePlatform(nt);
    return nt;
}
exports.rust2Node = rust2Node;


/***/ }),

/***/ 5304:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractManifest = exports.readManifest = exports.assertHasProps = exports.assertIsObject = void 0;
const fs = __importStar(__nccwpck_require__(3977));
const path = __importStar(__nccwpck_require__(9411));
function assertIsObject(json, path) {
    if (!json || typeof json !== 'object') {
        throw new TypeError(`expected "${path}" property to be an object, found ${json}`);
    }
}
exports.assertIsObject = assertIsObject;
// Idea thanks to https://www.lucaspaganini.com/academy/assertion-functions-typescript-narrowing-5
function assertHasProps(keys, json, path) {
    assertIsObject(json, path);
    for (const key of keys) {
        if (!(key in json)) {
            throw new TypeError(`property "${path}.${key}" not found`);
        }
    }
}
exports.assertHasProps = assertHasProps;
async function readManifest(dir) {
    dir = dir ?? process.cwd();
    const json = JSON.parse(await fs.readFile(path.join(dir, "package.json"), { encoding: 'utf8' }));
    assertIsPreamble(json);
    return json;
}
exports.readManifest = readManifest;
function assertIsPreamble(json) {
    if (!json || typeof json !== 'object' || Array.isArray(json)) {
        throw new TypeError(`expected Neon package manifest, found ${json}`);
    }
    if (!('version' in json) || typeof json.version !== 'string') {
        throw new TypeError('valid "version" string not found in Neon package manifest');
    }
    if (!('name' in json) || typeof json.name !== 'string') {
        throw new TypeError('valid "name" string not found in Neon package manifest');
    }
}
const OPTIONAL_KEYS = [
    'author', 'repository', 'keywords', 'bugs', 'homepage', 'license', 'engines'
];
class AbstractManifest {
    constructor(json) {
        this._json = json;
    }
    get name() { return this._json.name; }
    set name(value) { this._json.name = value; }
    get version() { return this._json.version; }
    set version(value) { this._json.version = value; }
    get description() { return this._json.description ?? ""; }
    async save(log) {
        await fs.writeFile(path.join(this.dir, "package.json"), JSON.stringify(this._json, null, 2), { encoding: 'utf8' });
    }
    stringify() {
        return JSON.stringify(this._json);
    }
    toJSON() {
        return JSON.parse(JSON.stringify(this._json));
    }
    copyOptionalKeys(target) {
        for (const key of OPTIONAL_KEYS) {
            if (key in this._json) {
                target[key] = this._json[key];
            }
        }
    }
}
exports.AbstractManifest = AbstractManifest;


/***/ }),

/***/ 347:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nccwpck_require__) => {

/* harmony export */ __nccwpck_require__.d(__webpack_exports__, {
/* harmony export */   "N": () => (/* reexport safe */ _index_cjs__WEBPACK_IMPORTED_MODULE_0__.N)
/* harmony export */ });
/* harmony import */ var _index_cjs__WEBPACK_IMPORTED_MODULE_0__ = __nccwpck_require__(4696);



/***/ }),

/***/ 8140:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nccwpck_require__) => {

/* harmony export */ __nccwpck_require__.d(__webpack_exports__, {
/* harmony export */   "EY": () => (/* reexport safe */ _platform_cjs__WEBPACK_IMPORTED_MODULE_0__.expandPlatformPreset),
/* harmony export */   "FZ": () => (/* reexport safe */ _platform_cjs__WEBPACK_IMPORTED_MODULE_0__.isRustTarget),
/* harmony export */   "Qm": () => (/* reexport safe */ _platform_cjs__WEBPACK_IMPORTED_MODULE_0__.isPlatformPreset),
/* harmony export */   "Zv": () => (/* reexport safe */ _platform_cjs__WEBPACK_IMPORTED_MODULE_0__.assertIsPlatformPreset),
/* harmony export */   "bC": () => (/* reexport safe */ _platform_cjs__WEBPACK_IMPORTED_MODULE_0__.isNodePlatform),
/* harmony export */   "or": () => (/* reexport safe */ _platform_cjs__WEBPACK_IMPORTED_MODULE_0__.assertIsNodePlatform),
/* harmony export */   "sD": () => (/* reexport safe */ _platform_cjs__WEBPACK_IMPORTED_MODULE_0__.assertIsRustTarget)
/* harmony export */ });
/* harmony import */ var _platform_cjs__WEBPACK_IMPORTED_MODULE_0__ = __nccwpck_require__(2147);



/***/ }),

/***/ 2642:
/***/ ((module) => {

module.exports = JSON.parse('{"darwin-arm64":{"os":"darwin","arch":"arm64","abi":null,"llvm":["aarch64-apple-darwin"]},"darwin-x64":{"os":"darwin","arch":"x64","abi":null,"llvm":["x86_64-apple-darwin"]},"ios-arm64":{"os":"ios","arch":"arm64","abi":null,"llvm":["aarch64-apple-ios"]},"ios-x64":{"os":"ios","arch":"x64","abi":null,"llvm":["x86_64-apple-ios"]},"android-arm64":{"os":"android","arch":"arm64","abi":null,"llvm":["aarch64-linux-android"]},"android-arm-eabi":{"os":"android","arch":"arm","abi":"eabi","llvm":["armv7-linux-androideabi"]},"android-ia32":{"os":"android","arch":"ia32","abi":null,"llvm":["i686-linux-android"]},"android-x64":{"os":"android","arch":"x64","abi":null,"llvm":["x86_64-linux-android"]},"win32-arm64-msvc":{"os":"win32","arch":"arm64","abi":"msvc","llvm":["aarch64-pc-windows-msvc"]},"win32-ia32-gnu":{"os":"win32","arch":"ia32","abi":"gnu","llvm":["i686-pc-windows-gnu"]},"win32-ia32-msvc":{"os":"win32","arch":"ia32","abi":"msvc","llvm":["i686-pc-windows-msvc"]},"win32-x64-gnu":{"os":"win32","arch":"x64","abi":"gnu","llvm":["x86_64-pc-windows-gnu"]},"win32-x64-msvc":{"os":"win32","arch":"x64","abi":"msvc","llvm":["x86_64-pc-windows-msvc"]},"linux-arm64-gnu":{"os":"linux","arch":"arm64","abi":"gnu","llvm":["aarch64-unknown-linux-gnu"]},"linux-arm64-musl":{"os":"linux","arch":"arm64","abi":"musl","llvm":["aarch64-unknown-linux-musl"]},"linux-arm-gnueabihf":{"os":"linux","arch":"arm","abi":"gnueabihf","llvm":["arm-unknown-linux-gnueabihf","armv7-unknown-linux-gnueabihf"]},"linux-arm-musleabihf":{"os":"linux","arch":"arm","abi":"musleabihf","llvm":["arm-unknown-linux-musleabihf","armv7-unknown-linux-musleabihf"]},"linux-ia32-gnu":{"os":"linux","arch":"ia32","abi":"gnu","llvm":["i686-unknown-linux-gnu"]},"linux-ia32-musl":{"os":"linux","arch":"ia32","abi":"musl","llvm":["i686-unknown-linux-musl"]},"linux-mips-gnu":{"os":"linux","arch":"mips","abi":"gnu","llvm":["mips-unknown-linux-gnu"]},"linux-mips-musl":{"os":"linux","arch":"mips","abi":"musl","llvm":["mips-unknown-linux-musl"]},"linux-mips64-gnuabi64":{"os":"linux","arch":"mips64","abi":"gnuabi64","llvm":["mips64-unknown-linux-gnuabi64"]},"linux-mips64-muslabi64":{"os":"linux","arch":"mips64","abi":"muslabi64","llvm":["mips64-unknown-linux-muslabi64"]},"linux-mips64el-gnuabi64":{"os":"linux","arch":"mips64el","abi":"gnuabi64","llvm":["mips64el-unknown-linux-gnuabi64"]},"linux-mips64el-muslabi64":{"os":"linux","arch":"mips64el","abi":"muslabi64","llvm":["mips64el-unknown-linux-muslabi64"]},"linux-mipsel-gnu":{"os":"linux","arch":"mipsel","abi":"gnu","llvm":["mipsel-unknown-linux-gnu"]},"linux-mipsel-musl":{"os":"linux","arch":"mipsel","abi":"musl","llvm":["mipsel-unknown-linux-musl"]},"linux-powerpc-gnu":{"os":"linux","arch":"powerpc","abi":"gnu","llvm":["powerpc-unknown-linux-gnu"]},"linux-powerpc64-gnu":{"os":"linux","arch":"powerpc64","abi":"gnu","llvm":["powerpc64-unknown-linux-gnu"]},"linux-powerpc64le-gnu":{"os":"linux","arch":"powerpc64le","abi":"gnu","llvm":["powerpc64le-unknown-linux-gnu"]},"linux-riscv64gc-gnu":{"os":"linux","arch":"riscv64gc","abi":"gnu","llvm":["riscv64gc-unknown-linux-gnu"]},"linux-s390x-gnu":{"os":"linux","arch":"s390x","abi":"gnu","llvm":["s390x-unknown-linux-gnu"]},"linux-sparc64-gnu":{"os":"linux","arch":"sparc64","abi":"gnu","llvm":["sparc64-unknown-linux-gnu"]},"linux-x64-gnu":{"os":"linux","arch":"x64","abi":"gnu","llvm":["x86_64-unknown-linux-gnu"]},"linux-x64-gnux32":{"os":"linux","arch":"x64","abi":"gnux32","llvm":["x86_64-unknown-linux-gnux32"]},"linux-x64-musl":{"os":"linux","arch":"x64","abi":"musl","llvm":["x86_64-unknown-linux-musl"]},"freebsd-ia32":{"os":"freebsd","arch":"ia32","abi":null,"llvm":["i686-unknown-freebsd"]},"freebsd-x64":{"os":"freebsd","arch":"x64","abi":null,"llvm":["x86_64-unknown-freebsd"]}}');

/***/ }),

/***/ 6757:
/***/ ((module) => {

module.exports = JSON.parse('{"windows":{"win32-x64-msvc":"x86_64-pc-windows-msvc"},"macos":{"darwin-x64":"x86_64-apple-darwin","darwin-arm64":"aarch64-apple-darwin"},"linux":{"linux-x64-gnu":"x86_64-unknown-linux-gnu","linux-arm-gnueabihf":"armv7-unknown-linux-gnueabihf"},"desktop":{"win32-x64-msvc":"x86_64-pc-windows-msvc","darwin-x64":"x86_64-apple-darwin","darwin-arm64":"aarch64-apple-darwin","linux-x64-gnu":"x86_64-unknown-linux-gnu"},"mobile":{"win32-arm64-msvc":"aarch64-pc-windows-msvc","linux-arm-gnueabihf":"armv7-unknown-linux-gnueabihf","android-arm-eabi":"armv7-linux-androideabi"},"common":["desktop"],"extended":["desktop","mobile"]}');

/***/ }),

/***/ 6685:
/***/ ((module) => {

module.exports = JSON.parse('{"aarch64-apple-darwin":"darwin-arm64","x86_64-apple-darwin":"darwin-x64","aarch64-apple-ios":"ios-arm64","x86_64-apple-ios":"ios-x64","aarch64-linux-android":"android-arm64","armv7-linux-androideabi":"android-arm-eabi","i686-linux-android":"android-ia32","x86_64-linux-android":"android-x64","aarch64-pc-windows-msvc":"win32-arm64-msvc","i686-pc-windows-gnu":"win32-ia32-gnu","i686-pc-windows-msvc":"win32-ia32-msvc","x86_64-pc-windows-gnu":"win32-x64-gnu","x86_64-pc-windows-msvc":"win32-x64-msvc","aarch64-unknown-linux-gnu":"linux-arm64-gnu","aarch64-unknown-linux-musl":"linux-arm64-musl","arm-unknown-linux-gnueabihf":"linux-arm-gnueabihf","arm-unknown-linux-musleabihf":"linux-arm-musleabihf","armv7-unknown-linux-gnueabihf":"linux-arm-gnueabihf","armv7-unknown-linux-musleabihf":"linux-arm-musleabihf","i686-unknown-linux-gnu":"linux-ia32-gnu","i686-unknown-linux-musl":"linux-ia32-musl","mips-unknown-linux-gnu":"linux-mips-gnu","mips-unknown-linux-musl":"linux-mips-musl","mips64-unknown-linux-gnuabi64":"linux-mips64-gnuabi64","mips64-unknown-linux-muslabi64":"linux-mips64-muslabi64","mips64el-unknown-linux-gnuabi64":"linux-mips64el-gnuabi64","mips64el-unknown-linux-muslabi64":"linux-mips64el-muslabi64","mipsel-unknown-linux-gnu":"linux-mipsel-gnu","mipsel-unknown-linux-musl":"linux-mipsel-musl","powerpc-unknown-linux-gnu":"linux-powerpc-gnu","powerpc64-unknown-linux-gnu":"linux-powerpc64-gnu","powerpc64le-unknown-linux-gnu":"linux-powerpc64le-gnu","riscv64gc-unknown-linux-gnu":"linux-riscv64gc-gnu","s390x-unknown-linux-gnu":"linux-s390x-gnu","sparc64-unknown-linux-gnu":"linux-sparc64-gnu","x86_64-unknown-linux-gnu":"linux-x64-gnu","x86_64-unknown-linux-gnux32":"linux-x64-gnux32","x86_64-unknown-linux-musl":"linux-x64-musl","i686-unknown-freebsd":"freebsd-ia32","x86_64-unknown-freebsd":"freebsd-x64"}');

/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __nccwpck_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		id: moduleId,
/******/ 		loaded: false,
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	var threw = true;
/******/ 	try {
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nccwpck_require__);
/******/ 		threw = false;
/******/ 	} finally {
/******/ 		if(threw) delete __webpack_module_cache__[moduleId];
/******/ 	}
/******/ 
/******/ 	// Flag the module as loaded
/******/ 	module.loaded = true;
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/async module */
/******/ (() => {
/******/ 	var webpackQueues = typeof Symbol === "function" ? Symbol("webpack queues") : "__webpack_queues__";
/******/ 	var webpackExports = typeof Symbol === "function" ? Symbol("webpack exports") : "__webpack_exports__";
/******/ 	var webpackError = typeof Symbol === "function" ? Symbol("webpack error") : "__webpack_error__";
/******/ 	var resolveQueue = (queue) => {
/******/ 		if(queue && !queue.d) {
/******/ 			queue.d = 1;
/******/ 			queue.forEach((fn) => (fn.r--));
/******/ 			queue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));
/******/ 		}
/******/ 	}
/******/ 	var wrapDeps = (deps) => (deps.map((dep) => {
/******/ 		if(dep !== null && typeof dep === "object") {
/******/ 			if(dep[webpackQueues]) return dep;
/******/ 			if(dep.then) {
/******/ 				var queue = [];
/******/ 				queue.d = 0;
/******/ 				dep.then((r) => {
/******/ 					obj[webpackExports] = r;
/******/ 					resolveQueue(queue);
/******/ 				}, (e) => {
/******/ 					obj[webpackError] = e;
/******/ 					resolveQueue(queue);
/******/ 				});
/******/ 				var obj = {};
/******/ 				obj[webpackQueues] = (fn) => (fn(queue));
/******/ 				return obj;
/******/ 			}
/******/ 		}
/******/ 		var ret = {};
/******/ 		ret[webpackQueues] = x => {};
/******/ 		ret[webpackExports] = dep;
/******/ 		return ret;
/******/ 	}));
/******/ 	__nccwpck_require__.a = (module, body, hasAwait) => {
/******/ 		var queue;
/******/ 		hasAwait && ((queue = []).d = 1);
/******/ 		var depQueues = new Set();
/******/ 		var exports = module.exports;
/******/ 		var currentDeps;
/******/ 		var outerResolve;
/******/ 		var reject;
/******/ 		var promise = new Promise((resolve, rej) => {
/******/ 			reject = rej;
/******/ 			outerResolve = resolve;
/******/ 		});
/******/ 		promise[webpackExports] = exports;
/******/ 		promise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise["catch"](x => {}));
/******/ 		module.exports = promise;
/******/ 		body((deps) => {
/******/ 			currentDeps = wrapDeps(deps);
/******/ 			var fn;
/******/ 			var getResult = () => (currentDeps.map((d) => {
/******/ 				if(d[webpackError]) throw d[webpackError];
/******/ 				return d[webpackExports];
/******/ 			}))
/******/ 			var promise = new Promise((resolve) => {
/******/ 				fn = () => (resolve(getResult));
/******/ 				fn.r = 0;
/******/ 				var fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));
/******/ 				currentDeps.map((dep) => (dep[webpackQueues](fnQueue)));
/******/ 			});
/******/ 			return fn.r ? promise : getResult();
/******/ 		}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));
/******/ 		queue && (queue.d = 0);
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/compat get default export */
/******/ (() => {
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__nccwpck_require__.n = (module) => {
/******/ 		var getter = module && module.__esModule ?
/******/ 			() => (module['default']) :
/******/ 			() => (module);
/******/ 		__nccwpck_require__.d(getter, { a: getter });
/******/ 		return getter;
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__nccwpck_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__nccwpck_require__.o(definition, key) && !__nccwpck_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__nccwpck_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/node module decorator */
/******/ (() => {
/******/ 	__nccwpck_require__.nmd = (module) => {
/******/ 		module.paths = [];
/******/ 		if (!module.children) module.children = [];
/******/ 		return module;
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/compat */
/******/ 
/******/ if (typeof __nccwpck_require__ !== 'undefined') __nccwpck_require__.ab = new URL('.', import.meta.url).pathname.slice(import.meta.url.match(/^file:\/\/\/\w:/) ? 1 : 0, -1) + "/";
/******/ 
/************************************************************************/
/******/ 
/******/ // startup
/******/ // Load entry module and return exports
/******/ // This entry module used 'module' so it can't be inlined
/******/ var __webpack_exports__ = __nccwpck_require__(8613);
/******/ __webpack_exports__ = await __webpack_exports__;
/******/ 
